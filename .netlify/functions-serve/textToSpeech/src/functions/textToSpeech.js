var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod2) => function __require() {
  return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
  mod2
));
var __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);

// node_modules/@google-cloud/text-to-speech/build/protos/protos.json
var require_protos = __commonJS({
  "node_modules/@google-cloud/text-to-speech/build/protos/protos.json"(exports2, module2) {
    module2.exports = {
      nested: {
        google: {
          nested: {
            cloud: {
              nested: {
                texttospeech: {
                  nested: {
                    v1: {
                      options: {
                        cc_enable_arenas: true,
                        csharp_namespace: "Google.Cloud.TextToSpeech.V1",
                        go_package: "cloud.google.com/go/texttospeech/apiv1/texttospeechpb;texttospeechpb",
                        java_multiple_files: true,
                        java_outer_classname: "TextToSpeechLongAudioSynthesisProto",
                        java_package: "com.google.cloud.texttospeech.v1",
                        php_namespace: "Google\\Cloud\\TextToSpeech\\V1",
                        ruby_package: "Google::Cloud::TextToSpeech::V1",
                        "(google.api.resource_definition).type": "automl.googleapis.com/Model",
                        "(google.api.resource_definition).pattern": "projects/{project}/locations/{location}/models/{model}"
                      },
                      nested: {
                        TextToSpeech: {
                          options: {
                            "(google.api.default_host)": "texttospeech.googleapis.com",
                            "(google.api.oauth_scopes)": "https://www.googleapis.com/auth/cloud-platform"
                          },
                          methods: {
                            ListVoices: {
                              requestType: "ListVoicesRequest",
                              responseType: "ListVoicesResponse",
                              options: {
                                "(google.api.http).get": "/v1/voices",
                                "(google.api.method_signature)": "language_code"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    get: "/v1/voices"
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "language_code"
                                }
                              ]
                            },
                            SynthesizeSpeech: {
                              requestType: "SynthesizeSpeechRequest",
                              responseType: "SynthesizeSpeechResponse",
                              options: {
                                "(google.api.http).post": "/v1/text:synthesize",
                                "(google.api.http).body": "*",
                                "(google.api.method_signature)": "input,voice,audio_config"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v1/text:synthesize",
                                    body: "*"
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "input,voice,audio_config"
                                }
                              ]
                            }
                          }
                        },
                        SsmlVoiceGender: {
                          values: {
                            SSML_VOICE_GENDER_UNSPECIFIED: 0,
                            MALE: 1,
                            FEMALE: 2,
                            NEUTRAL: 3
                          }
                        },
                        AudioEncoding: {
                          values: {
                            AUDIO_ENCODING_UNSPECIFIED: 0,
                            LINEAR16: 1,
                            MP3: 2,
                            OGG_OPUS: 3,
                            MULAW: 5,
                            ALAW: 6
                          }
                        },
                        ListVoicesRequest: {
                          fields: {
                            languageCode: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        ListVoicesResponse: {
                          fields: {
                            voices: {
                              rule: "repeated",
                              type: "Voice",
                              id: 1
                            }
                          }
                        },
                        Voice: {
                          fields: {
                            languageCodes: {
                              rule: "repeated",
                              type: "string",
                              id: 1
                            },
                            name: {
                              type: "string",
                              id: 2
                            },
                            ssmlGender: {
                              type: "SsmlVoiceGender",
                              id: 3
                            },
                            naturalSampleRateHertz: {
                              type: "int32",
                              id: 4
                            }
                          }
                        },
                        SynthesizeSpeechRequest: {
                          fields: {
                            input: {
                              type: "SynthesisInput",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            voice: {
                              type: "VoiceSelectionParams",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            audioConfig: {
                              type: "AudioConfig",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            }
                          }
                        },
                        SynthesisInput: {
                          oneofs: {
                            inputSource: {
                              oneof: [
                                "text",
                                "ssml"
                              ]
                            }
                          },
                          fields: {
                            text: {
                              type: "string",
                              id: 1
                            },
                            ssml: {
                              type: "string",
                              id: 2
                            }
                          }
                        },
                        VoiceSelectionParams: {
                          fields: {
                            languageCode: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            name: {
                              type: "string",
                              id: 2
                            },
                            ssmlGender: {
                              type: "SsmlVoiceGender",
                              id: 3
                            },
                            customVoice: {
                              type: "CustomVoiceParams",
                              id: 4
                            }
                          }
                        },
                        AudioConfig: {
                          fields: {
                            audioEncoding: {
                              type: "AudioEncoding",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            speakingRate: {
                              type: "double",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            pitch: {
                              type: "double",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            volumeGainDb: {
                              type: "double",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            sampleRateHertz: {
                              type: "int32",
                              id: 5,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            effectsProfileId: {
                              rule: "repeated",
                              type: "string",
                              id: 6,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        CustomVoiceParams: {
                          fields: {
                            model: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "automl.googleapis.com/Model"
                              }
                            },
                            reportedUsage: {
                              type: "ReportedUsage",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          },
                          nested: {
                            ReportedUsage: {
                              values: {
                                REPORTED_USAGE_UNSPECIFIED: 0,
                                REALTIME: 1,
                                OFFLINE: 2
                              }
                            }
                          }
                        },
                        SynthesizeSpeechResponse: {
                          fields: {
                            audioContent: {
                              type: "bytes",
                              id: 1
                            }
                          }
                        },
                        TextToSpeechLongAudioSynthesize: {
                          options: {
                            "(google.api.default_host)": "texttospeech.googleapis.com",
                            "(google.api.oauth_scopes)": "https://www.googleapis.com/auth/cloud-platform"
                          },
                          methods: {
                            SynthesizeLongAudio: {
                              requestType: "SynthesizeLongAudioRequest",
                              responseType: "google.longrunning.Operation",
                              options: {
                                "(google.api.http).post": "/v1/{parent=projects/*/locations/*/voices/*}:SynthesizeLongAudio",
                                "(google.api.http).body": "*",
                                "(google.longrunning.operation_info).response_type": "SynthesizeLongAudioResponse",
                                "(google.longrunning.operation_info).metadata_type": "SynthesizeLongAudioMetadata"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v1/{parent=projects/*/locations/*/voices/*}:SynthesizeLongAudio",
                                    body: "*"
                                  }
                                },
                                {
                                  "(google.longrunning.operation_info)": {
                                    response_type: "SynthesizeLongAudioResponse",
                                    metadata_type: "SynthesizeLongAudioMetadata"
                                  }
                                }
                              ]
                            }
                          }
                        },
                        SynthesizeLongAudioRequest: {
                          fields: {
                            parent: {
                              type: "string",
                              id: 1
                            },
                            input: {
                              type: "SynthesisInput",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            audioConfig: {
                              type: "AudioConfig",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            outputGcsUri: {
                              type: "string",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            voice: {
                              type: "VoiceSelectionParams",
                              id: 5,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            }
                          }
                        },
                        SynthesizeLongAudioResponse: {
                          fields: {}
                        },
                        SynthesizeLongAudioMetadata: {
                          fields: {
                            startTime: {
                              type: "google.protobuf.Timestamp",
                              id: 1
                            },
                            lastUpdateTime: {
                              type: "google.protobuf.Timestamp",
                              id: 2
                            },
                            progressPercentage: {
                              type: "double",
                              id: 3
                            }
                          }
                        }
                      }
                    },
                    v1beta1: {
                      options: {
                        cc_enable_arenas: true,
                        csharp_namespace: "Google.Cloud.TextToSpeech.V1Beta1",
                        go_package: "cloud.google.com/go/texttospeech/apiv1beta1/texttospeechpb;texttospeechpb",
                        java_multiple_files: true,
                        java_outer_classname: "TextToSpeechLongAudioSynthesisProto",
                        java_package: "com.google.cloud.texttospeech.v1beta1",
                        php_namespace: "Google\\Cloud\\TextToSpeech\\V1beta1",
                        ruby_package: "Google::Cloud::TextToSpeech::V1beta1",
                        "(google.api.resource_definition).type": "automl.googleapis.com/Model",
                        "(google.api.resource_definition).pattern": "projects/{project}/locations/{location}/models/{model}"
                      },
                      nested: {
                        TextToSpeech: {
                          options: {
                            "(google.api.default_host)": "texttospeech.googleapis.com",
                            "(google.api.oauth_scopes)": "https://www.googleapis.com/auth/cloud-platform"
                          },
                          methods: {
                            ListVoices: {
                              requestType: "ListVoicesRequest",
                              responseType: "ListVoicesResponse",
                              options: {
                                "(google.api.http).get": "/v1beta1/voices",
                                "(google.api.method_signature)": "language_code"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    get: "/v1beta1/voices"
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "language_code"
                                }
                              ]
                            },
                            SynthesizeSpeech: {
                              requestType: "SynthesizeSpeechRequest",
                              responseType: "SynthesizeSpeechResponse",
                              options: {
                                "(google.api.http).post": "/v1beta1/text:synthesize",
                                "(google.api.http).body": "*",
                                "(google.api.method_signature)": "input,voice,audio_config"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v1beta1/text:synthesize",
                                    body: "*"
                                  }
                                },
                                {
                                  "(google.api.method_signature)": "input,voice,audio_config"
                                }
                              ]
                            }
                          }
                        },
                        SsmlVoiceGender: {
                          values: {
                            SSML_VOICE_GENDER_UNSPECIFIED: 0,
                            MALE: 1,
                            FEMALE: 2,
                            NEUTRAL: 3
                          }
                        },
                        AudioEncoding: {
                          values: {
                            AUDIO_ENCODING_UNSPECIFIED: 0,
                            LINEAR16: 1,
                            MP3: 2,
                            MP3_64_KBPS: 4,
                            OGG_OPUS: 3,
                            MULAW: 5,
                            ALAW: 6
                          }
                        },
                        ListVoicesRequest: {
                          fields: {
                            languageCode: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        ListVoicesResponse: {
                          fields: {
                            voices: {
                              rule: "repeated",
                              type: "Voice",
                              id: 1
                            }
                          }
                        },
                        Voice: {
                          fields: {
                            languageCodes: {
                              rule: "repeated",
                              type: "string",
                              id: 1
                            },
                            name: {
                              type: "string",
                              id: 2
                            },
                            ssmlGender: {
                              type: "SsmlVoiceGender",
                              id: 3
                            },
                            naturalSampleRateHertz: {
                              type: "int32",
                              id: 4
                            }
                          }
                        },
                        SynthesizeSpeechRequest: {
                          fields: {
                            input: {
                              type: "SynthesisInput",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            voice: {
                              type: "VoiceSelectionParams",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            audioConfig: {
                              type: "AudioConfig",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            enableTimePointing: {
                              rule: "repeated",
                              type: "TimepointType",
                              id: 4
                            }
                          },
                          nested: {
                            TimepointType: {
                              values: {
                                TIMEPOINT_TYPE_UNSPECIFIED: 0,
                                SSML_MARK: 1
                              }
                            }
                          }
                        },
                        SynthesisInput: {
                          oneofs: {
                            inputSource: {
                              oneof: [
                                "text",
                                "ssml"
                              ]
                            }
                          },
                          fields: {
                            text: {
                              type: "string",
                              id: 1
                            },
                            ssml: {
                              type: "string",
                              id: 2
                            }
                          }
                        },
                        VoiceSelectionParams: {
                          fields: {
                            languageCode: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            name: {
                              type: "string",
                              id: 2
                            },
                            ssmlGender: {
                              type: "SsmlVoiceGender",
                              id: 3
                            },
                            customVoice: {
                              type: "CustomVoiceParams",
                              id: 4
                            }
                          }
                        },
                        AudioConfig: {
                          fields: {
                            audioEncoding: {
                              type: "AudioEncoding",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            speakingRate: {
                              type: "double",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            pitch: {
                              type: "double",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            volumeGainDb: {
                              type: "double",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            sampleRateHertz: {
                              type: "int32",
                              id: 5,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            },
                            effectsProfileId: {
                              rule: "repeated",
                              type: "string",
                              id: 6,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          }
                        },
                        CustomVoiceParams: {
                          fields: {
                            model: {
                              type: "string",
                              id: 1,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED",
                                "(google.api.resource_reference).type": "automl.googleapis.com/Model"
                              }
                            },
                            reportedUsage: {
                              type: "ReportedUsage",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "OPTIONAL"
                              }
                            }
                          },
                          nested: {
                            ReportedUsage: {
                              values: {
                                REPORTED_USAGE_UNSPECIFIED: 0,
                                REALTIME: 1,
                                OFFLINE: 2
                              }
                            }
                          }
                        },
                        SynthesizeSpeechResponse: {
                          fields: {
                            audioContent: {
                              type: "bytes",
                              id: 1
                            },
                            timepoints: {
                              rule: "repeated",
                              type: "Timepoint",
                              id: 2
                            },
                            audioConfig: {
                              type: "AudioConfig",
                              id: 4
                            }
                          }
                        },
                        Timepoint: {
                          fields: {
                            markName: {
                              type: "string",
                              id: 4
                            },
                            timeSeconds: {
                              type: "double",
                              id: 3
                            }
                          }
                        },
                        TextToSpeechLongAudioSynthesize: {
                          options: {
                            "(google.api.default_host)": "texttospeech.googleapis.com",
                            "(google.api.oauth_scopes)": "https://www.googleapis.com/auth/cloud-platform"
                          },
                          methods: {
                            SynthesizeLongAudio: {
                              requestType: "SynthesizeLongAudioRequest",
                              responseType: "google.longrunning.Operation",
                              options: {
                                "(google.api.http).post": "/v1beta1/{parent=projects/*/locations/*/voices/*}:SynthesizeLongAudio",
                                "(google.api.http).body": "*",
                                "(google.longrunning.operation_info).response_type": "SynthesizeLongAudioResponse",
                                "(google.longrunning.operation_info).metadata_type": "SynthesizeLongAudioMetadata"
                              },
                              parsedOptions: [
                                {
                                  "(google.api.http)": {
                                    post: "/v1beta1/{parent=projects/*/locations/*/voices/*}:SynthesizeLongAudio",
                                    body: "*"
                                  }
                                },
                                {
                                  "(google.longrunning.operation_info)": {
                                    response_type: "SynthesizeLongAudioResponse",
                                    metadata_type: "SynthesizeLongAudioMetadata"
                                  }
                                }
                              ]
                            }
                          }
                        },
                        SynthesizeLongAudioRequest: {
                          fields: {
                            parent: {
                              type: "string",
                              id: 1
                            },
                            input: {
                              type: "SynthesisInput",
                              id: 2,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            audioConfig: {
                              type: "AudioConfig",
                              id: 3,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            outputGcsUri: {
                              type: "string",
                              id: 4,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            },
                            voice: {
                              type: "VoiceSelectionParams",
                              id: 5,
                              options: {
                                "(google.api.field_behavior)": "REQUIRED"
                              }
                            }
                          }
                        },
                        SynthesizeLongAudioResponse: {
                          fields: {}
                        },
                        SynthesizeLongAudioMetadata: {
                          fields: {
                            startTime: {
                              type: "google.protobuf.Timestamp",
                              id: 1
                            },
                            lastUpdateTime: {
                              type: "google.protobuf.Timestamp",
                              id: 2
                            },
                            progressPercentage: {
                              type: "double",
                              id: 3
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            api: {
              options: {
                go_package: "google.golang.org/genproto/googleapis/api/annotations;annotations",
                java_multiple_files: true,
                java_outer_classname: "ResourceProto",
                java_package: "com.google.api",
                objc_class_prefix: "GAPI",
                cc_enable_arenas: true
              },
              nested: {
                http: {
                  type: "HttpRule",
                  id: 72295728,
                  extend: "google.protobuf.MethodOptions"
                },
                Http: {
                  fields: {
                    rules: {
                      rule: "repeated",
                      type: "HttpRule",
                      id: 1
                    },
                    fullyDecodeReservedExpansion: {
                      type: "bool",
                      id: 2
                    }
                  }
                },
                HttpRule: {
                  oneofs: {
                    pattern: {
                      oneof: [
                        "get",
                        "put",
                        "post",
                        "delete",
                        "patch",
                        "custom"
                      ]
                    }
                  },
                  fields: {
                    selector: {
                      type: "string",
                      id: 1
                    },
                    get: {
                      type: "string",
                      id: 2
                    },
                    put: {
                      type: "string",
                      id: 3
                    },
                    post: {
                      type: "string",
                      id: 4
                    },
                    delete: {
                      type: "string",
                      id: 5
                    },
                    patch: {
                      type: "string",
                      id: 6
                    },
                    custom: {
                      type: "CustomHttpPattern",
                      id: 8
                    },
                    body: {
                      type: "string",
                      id: 7
                    },
                    responseBody: {
                      type: "string",
                      id: 12
                    },
                    additionalBindings: {
                      rule: "repeated",
                      type: "HttpRule",
                      id: 11
                    }
                  }
                },
                CustomHttpPattern: {
                  fields: {
                    kind: {
                      type: "string",
                      id: 1
                    },
                    path: {
                      type: "string",
                      id: 2
                    }
                  }
                },
                methodSignature: {
                  rule: "repeated",
                  type: "string",
                  id: 1051,
                  extend: "google.protobuf.MethodOptions"
                },
                defaultHost: {
                  type: "string",
                  id: 1049,
                  extend: "google.protobuf.ServiceOptions"
                },
                oauthScopes: {
                  type: "string",
                  id: 1050,
                  extend: "google.protobuf.ServiceOptions"
                },
                CommonLanguageSettings: {
                  fields: {
                    referenceDocsUri: {
                      type: "string",
                      id: 1,
                      options: {
                        deprecated: true
                      }
                    },
                    destinations: {
                      rule: "repeated",
                      type: "ClientLibraryDestination",
                      id: 2
                    }
                  }
                },
                ClientLibrarySettings: {
                  fields: {
                    version: {
                      type: "string",
                      id: 1
                    },
                    launchStage: {
                      type: "LaunchStage",
                      id: 2
                    },
                    restNumericEnums: {
                      type: "bool",
                      id: 3
                    },
                    javaSettings: {
                      type: "JavaSettings",
                      id: 21
                    },
                    cppSettings: {
                      type: "CppSettings",
                      id: 22
                    },
                    phpSettings: {
                      type: "PhpSettings",
                      id: 23
                    },
                    pythonSettings: {
                      type: "PythonSettings",
                      id: 24
                    },
                    nodeSettings: {
                      type: "NodeSettings",
                      id: 25
                    },
                    dotnetSettings: {
                      type: "DotnetSettings",
                      id: 26
                    },
                    rubySettings: {
                      type: "RubySettings",
                      id: 27
                    },
                    goSettings: {
                      type: "GoSettings",
                      id: 28
                    }
                  }
                },
                Publishing: {
                  fields: {
                    methodSettings: {
                      rule: "repeated",
                      type: "MethodSettings",
                      id: 2
                    },
                    newIssueUri: {
                      type: "string",
                      id: 101
                    },
                    documentationUri: {
                      type: "string",
                      id: 102
                    },
                    apiShortName: {
                      type: "string",
                      id: 103
                    },
                    githubLabel: {
                      type: "string",
                      id: 104
                    },
                    codeownerGithubTeams: {
                      rule: "repeated",
                      type: "string",
                      id: 105
                    },
                    docTagPrefix: {
                      type: "string",
                      id: 106
                    },
                    organization: {
                      type: "ClientLibraryOrganization",
                      id: 107
                    },
                    librarySettings: {
                      rule: "repeated",
                      type: "ClientLibrarySettings",
                      id: 109
                    }
                  }
                },
                JavaSettings: {
                  fields: {
                    libraryPackage: {
                      type: "string",
                      id: 1
                    },
                    serviceClassNames: {
                      keyType: "string",
                      type: "string",
                      id: 2
                    },
                    common: {
                      type: "CommonLanguageSettings",
                      id: 3
                    }
                  }
                },
                CppSettings: {
                  fields: {
                    common: {
                      type: "CommonLanguageSettings",
                      id: 1
                    }
                  }
                },
                PhpSettings: {
                  fields: {
                    common: {
                      type: "CommonLanguageSettings",
                      id: 1
                    }
                  }
                },
                PythonSettings: {
                  fields: {
                    common: {
                      type: "CommonLanguageSettings",
                      id: 1
                    }
                  }
                },
                NodeSettings: {
                  fields: {
                    common: {
                      type: "CommonLanguageSettings",
                      id: 1
                    }
                  }
                },
                DotnetSettings: {
                  fields: {
                    common: {
                      type: "CommonLanguageSettings",
                      id: 1
                    }
                  }
                },
                RubySettings: {
                  fields: {
                    common: {
                      type: "CommonLanguageSettings",
                      id: 1
                    }
                  }
                },
                GoSettings: {
                  fields: {
                    common: {
                      type: "CommonLanguageSettings",
                      id: 1
                    }
                  }
                },
                MethodSettings: {
                  fields: {
                    selector: {
                      type: "string",
                      id: 1
                    },
                    longRunning: {
                      type: "LongRunning",
                      id: 2
                    }
                  },
                  nested: {
                    LongRunning: {
                      fields: {
                        initialPollDelay: {
                          type: "google.protobuf.Duration",
                          id: 1
                        },
                        pollDelayMultiplier: {
                          type: "float",
                          id: 2
                        },
                        maxPollDelay: {
                          type: "google.protobuf.Duration",
                          id: 3
                        },
                        totalPollTimeout: {
                          type: "google.protobuf.Duration",
                          id: 4
                        }
                      }
                    }
                  }
                },
                ClientLibraryOrganization: {
                  values: {
                    CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED: 0,
                    CLOUD: 1,
                    ADS: 2,
                    PHOTOS: 3,
                    STREET_VIEW: 4
                  }
                },
                ClientLibraryDestination: {
                  values: {
                    CLIENT_LIBRARY_DESTINATION_UNSPECIFIED: 0,
                    GITHUB: 10,
                    PACKAGE_MANAGER: 20
                  }
                },
                LaunchStage: {
                  values: {
                    LAUNCH_STAGE_UNSPECIFIED: 0,
                    UNIMPLEMENTED: 6,
                    PRELAUNCH: 7,
                    EARLY_ACCESS: 1,
                    ALPHA: 2,
                    BETA: 3,
                    GA: 4,
                    DEPRECATED: 5
                  }
                },
                fieldBehavior: {
                  rule: "repeated",
                  type: "google.api.FieldBehavior",
                  id: 1052,
                  extend: "google.protobuf.FieldOptions"
                },
                FieldBehavior: {
                  values: {
                    FIELD_BEHAVIOR_UNSPECIFIED: 0,
                    OPTIONAL: 1,
                    REQUIRED: 2,
                    OUTPUT_ONLY: 3,
                    INPUT_ONLY: 4,
                    IMMUTABLE: 5,
                    UNORDERED_LIST: 6,
                    NON_EMPTY_DEFAULT: 7
                  }
                },
                resourceReference: {
                  type: "google.api.ResourceReference",
                  id: 1055,
                  extend: "google.protobuf.FieldOptions"
                },
                resourceDefinition: {
                  rule: "repeated",
                  type: "google.api.ResourceDescriptor",
                  id: 1053,
                  extend: "google.protobuf.FileOptions"
                },
                resource: {
                  type: "google.api.ResourceDescriptor",
                  id: 1053,
                  extend: "google.protobuf.MessageOptions"
                },
                ResourceDescriptor: {
                  fields: {
                    type: {
                      type: "string",
                      id: 1
                    },
                    pattern: {
                      rule: "repeated",
                      type: "string",
                      id: 2
                    },
                    nameField: {
                      type: "string",
                      id: 3
                    },
                    history: {
                      type: "History",
                      id: 4
                    },
                    plural: {
                      type: "string",
                      id: 5
                    },
                    singular: {
                      type: "string",
                      id: 6
                    },
                    style: {
                      rule: "repeated",
                      type: "Style",
                      id: 10
                    }
                  },
                  nested: {
                    History: {
                      values: {
                        HISTORY_UNSPECIFIED: 0,
                        ORIGINALLY_SINGLE_PATTERN: 1,
                        FUTURE_MULTI_PATTERN: 2
                      }
                    },
                    Style: {
                      values: {
                        STYLE_UNSPECIFIED: 0,
                        DECLARATIVE_FRIENDLY: 1
                      }
                    }
                  }
                },
                ResourceReference: {
                  fields: {
                    type: {
                      type: "string",
                      id: 1
                    },
                    childType: {
                      type: "string",
                      id: 2
                    }
                  }
                }
              }
            },
            protobuf: {
              options: {
                go_package: "google.golang.org/protobuf/types/descriptorpb",
                java_package: "com.google.protobuf",
                java_outer_classname: "DescriptorProtos",
                csharp_namespace: "Google.Protobuf.Reflection",
                objc_class_prefix: "GPB",
                cc_enable_arenas: true,
                optimize_for: "SPEED"
              },
              nested: {
                FileDescriptorSet: {
                  fields: {
                    file: {
                      rule: "repeated",
                      type: "FileDescriptorProto",
                      id: 1
                    }
                  }
                },
                FileDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    package: {
                      type: "string",
                      id: 2
                    },
                    dependency: {
                      rule: "repeated",
                      type: "string",
                      id: 3
                    },
                    publicDependency: {
                      rule: "repeated",
                      type: "int32",
                      id: 10,
                      options: {
                        packed: false
                      }
                    },
                    weakDependency: {
                      rule: "repeated",
                      type: "int32",
                      id: 11,
                      options: {
                        packed: false
                      }
                    },
                    messageType: {
                      rule: "repeated",
                      type: "DescriptorProto",
                      id: 4
                    },
                    enumType: {
                      rule: "repeated",
                      type: "EnumDescriptorProto",
                      id: 5
                    },
                    service: {
                      rule: "repeated",
                      type: "ServiceDescriptorProto",
                      id: 6
                    },
                    extension: {
                      rule: "repeated",
                      type: "FieldDescriptorProto",
                      id: 7
                    },
                    options: {
                      type: "FileOptions",
                      id: 8
                    },
                    sourceCodeInfo: {
                      type: "SourceCodeInfo",
                      id: 9
                    },
                    syntax: {
                      type: "string",
                      id: 12
                    },
                    edition: {
                      type: "string",
                      id: 13
                    }
                  }
                },
                DescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    field: {
                      rule: "repeated",
                      type: "FieldDescriptorProto",
                      id: 2
                    },
                    extension: {
                      rule: "repeated",
                      type: "FieldDescriptorProto",
                      id: 6
                    },
                    nestedType: {
                      rule: "repeated",
                      type: "DescriptorProto",
                      id: 3
                    },
                    enumType: {
                      rule: "repeated",
                      type: "EnumDescriptorProto",
                      id: 4
                    },
                    extensionRange: {
                      rule: "repeated",
                      type: "ExtensionRange",
                      id: 5
                    },
                    oneofDecl: {
                      rule: "repeated",
                      type: "OneofDescriptorProto",
                      id: 8
                    },
                    options: {
                      type: "MessageOptions",
                      id: 7
                    },
                    reservedRange: {
                      rule: "repeated",
                      type: "ReservedRange",
                      id: 9
                    },
                    reservedName: {
                      rule: "repeated",
                      type: "string",
                      id: 10
                    }
                  },
                  nested: {
                    ExtensionRange: {
                      fields: {
                        start: {
                          type: "int32",
                          id: 1
                        },
                        end: {
                          type: "int32",
                          id: 2
                        },
                        options: {
                          type: "ExtensionRangeOptions",
                          id: 3
                        }
                      }
                    },
                    ReservedRange: {
                      fields: {
                        start: {
                          type: "int32",
                          id: 1
                        },
                        end: {
                          type: "int32",
                          id: 2
                        }
                      }
                    }
                  }
                },
                ExtensionRangeOptions: {
                  fields: {
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                FieldDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    number: {
                      type: "int32",
                      id: 3
                    },
                    label: {
                      type: "Label",
                      id: 4
                    },
                    type: {
                      type: "Type",
                      id: 5
                    },
                    typeName: {
                      type: "string",
                      id: 6
                    },
                    extendee: {
                      type: "string",
                      id: 2
                    },
                    defaultValue: {
                      type: "string",
                      id: 7
                    },
                    oneofIndex: {
                      type: "int32",
                      id: 9
                    },
                    jsonName: {
                      type: "string",
                      id: 10
                    },
                    options: {
                      type: "FieldOptions",
                      id: 8
                    },
                    proto3Optional: {
                      type: "bool",
                      id: 17
                    }
                  },
                  nested: {
                    Type: {
                      values: {
                        TYPE_DOUBLE: 1,
                        TYPE_FLOAT: 2,
                        TYPE_INT64: 3,
                        TYPE_UINT64: 4,
                        TYPE_INT32: 5,
                        TYPE_FIXED64: 6,
                        TYPE_FIXED32: 7,
                        TYPE_BOOL: 8,
                        TYPE_STRING: 9,
                        TYPE_GROUP: 10,
                        TYPE_MESSAGE: 11,
                        TYPE_BYTES: 12,
                        TYPE_UINT32: 13,
                        TYPE_ENUM: 14,
                        TYPE_SFIXED32: 15,
                        TYPE_SFIXED64: 16,
                        TYPE_SINT32: 17,
                        TYPE_SINT64: 18
                      }
                    },
                    Label: {
                      values: {
                        LABEL_OPTIONAL: 1,
                        LABEL_REQUIRED: 2,
                        LABEL_REPEATED: 3
                      }
                    }
                  }
                },
                OneofDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    options: {
                      type: "OneofOptions",
                      id: 2
                    }
                  }
                },
                EnumDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      rule: "repeated",
                      type: "EnumValueDescriptorProto",
                      id: 2
                    },
                    options: {
                      type: "EnumOptions",
                      id: 3
                    },
                    reservedRange: {
                      rule: "repeated",
                      type: "EnumReservedRange",
                      id: 4
                    },
                    reservedName: {
                      rule: "repeated",
                      type: "string",
                      id: 5
                    }
                  },
                  nested: {
                    EnumReservedRange: {
                      fields: {
                        start: {
                          type: "int32",
                          id: 1
                        },
                        end: {
                          type: "int32",
                          id: 2
                        }
                      }
                    }
                  }
                },
                EnumValueDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    number: {
                      type: "int32",
                      id: 2
                    },
                    options: {
                      type: "EnumValueOptions",
                      id: 3
                    }
                  }
                },
                ServiceDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    method: {
                      rule: "repeated",
                      type: "MethodDescriptorProto",
                      id: 2
                    },
                    options: {
                      type: "ServiceOptions",
                      id: 3
                    }
                  }
                },
                MethodDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    inputType: {
                      type: "string",
                      id: 2
                    },
                    outputType: {
                      type: "string",
                      id: 3
                    },
                    options: {
                      type: "MethodOptions",
                      id: 4
                    },
                    clientStreaming: {
                      type: "bool",
                      id: 5,
                      options: {
                        default: false
                      }
                    },
                    serverStreaming: {
                      type: "bool",
                      id: 6,
                      options: {
                        default: false
                      }
                    }
                  }
                },
                FileOptions: {
                  fields: {
                    javaPackage: {
                      type: "string",
                      id: 1
                    },
                    javaOuterClassname: {
                      type: "string",
                      id: 8
                    },
                    javaMultipleFiles: {
                      type: "bool",
                      id: 10,
                      options: {
                        default: false
                      }
                    },
                    javaGenerateEqualsAndHash: {
                      type: "bool",
                      id: 20,
                      options: {
                        deprecated: true
                      }
                    },
                    javaStringCheckUtf8: {
                      type: "bool",
                      id: 27,
                      options: {
                        default: false
                      }
                    },
                    optimizeFor: {
                      type: "OptimizeMode",
                      id: 9,
                      options: {
                        default: "SPEED"
                      }
                    },
                    goPackage: {
                      type: "string",
                      id: 11
                    },
                    ccGenericServices: {
                      type: "bool",
                      id: 16,
                      options: {
                        default: false
                      }
                    },
                    javaGenericServices: {
                      type: "bool",
                      id: 17,
                      options: {
                        default: false
                      }
                    },
                    pyGenericServices: {
                      type: "bool",
                      id: 18,
                      options: {
                        default: false
                      }
                    },
                    phpGenericServices: {
                      type: "bool",
                      id: 42,
                      options: {
                        default: false
                      }
                    },
                    deprecated: {
                      type: "bool",
                      id: 23,
                      options: {
                        default: false
                      }
                    },
                    ccEnableArenas: {
                      type: "bool",
                      id: 31,
                      options: {
                        default: true
                      }
                    },
                    objcClassPrefix: {
                      type: "string",
                      id: 36
                    },
                    csharpNamespace: {
                      type: "string",
                      id: 37
                    },
                    swiftPrefix: {
                      type: "string",
                      id: 39
                    },
                    phpClassPrefix: {
                      type: "string",
                      id: 40
                    },
                    phpNamespace: {
                      type: "string",
                      id: 41
                    },
                    phpMetadataNamespace: {
                      type: "string",
                      id: 44
                    },
                    rubyPackage: {
                      type: "string",
                      id: 45
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      38,
                      38
                    ]
                  ],
                  nested: {
                    OptimizeMode: {
                      values: {
                        SPEED: 1,
                        CODE_SIZE: 2,
                        LITE_RUNTIME: 3
                      }
                    }
                  }
                },
                MessageOptions: {
                  fields: {
                    messageSetWireFormat: {
                      type: "bool",
                      id: 1,
                      options: {
                        default: false
                      }
                    },
                    noStandardDescriptorAccessor: {
                      type: "bool",
                      id: 2,
                      options: {
                        default: false
                      }
                    },
                    deprecated: {
                      type: "bool",
                      id: 3,
                      options: {
                        default: false
                      }
                    },
                    mapEntry: {
                      type: "bool",
                      id: 7
                    },
                    deprecatedLegacyJsonFieldConflicts: {
                      type: "bool",
                      id: 11,
                      options: {
                        deprecated: true
                      }
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      4,
                      4
                    ],
                    [
                      5,
                      5
                    ],
                    [
                      6,
                      6
                    ],
                    [
                      8,
                      8
                    ],
                    [
                      9,
                      9
                    ]
                  ]
                },
                FieldOptions: {
                  fields: {
                    ctype: {
                      type: "CType",
                      id: 1,
                      options: {
                        default: "STRING"
                      }
                    },
                    packed: {
                      type: "bool",
                      id: 2
                    },
                    jstype: {
                      type: "JSType",
                      id: 6,
                      options: {
                        default: "JS_NORMAL"
                      }
                    },
                    lazy: {
                      type: "bool",
                      id: 5,
                      options: {
                        default: false
                      }
                    },
                    unverifiedLazy: {
                      type: "bool",
                      id: 15,
                      options: {
                        default: false
                      }
                    },
                    deprecated: {
                      type: "bool",
                      id: 3,
                      options: {
                        default: false
                      }
                    },
                    weak: {
                      type: "bool",
                      id: 10,
                      options: {
                        default: false
                      }
                    },
                    debugRedact: {
                      type: "bool",
                      id: 16,
                      options: {
                        default: false
                      }
                    },
                    retention: {
                      type: "OptionRetention",
                      id: 17
                    },
                    target: {
                      type: "OptionTargetType",
                      id: 18
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      4,
                      4
                    ]
                  ],
                  nested: {
                    CType: {
                      values: {
                        STRING: 0,
                        CORD: 1,
                        STRING_PIECE: 2
                      }
                    },
                    JSType: {
                      values: {
                        JS_NORMAL: 0,
                        JS_STRING: 1,
                        JS_NUMBER: 2
                      }
                    },
                    OptionRetention: {
                      values: {
                        RETENTION_UNKNOWN: 0,
                        RETENTION_RUNTIME: 1,
                        RETENTION_SOURCE: 2
                      }
                    },
                    OptionTargetType: {
                      values: {
                        TARGET_TYPE_UNKNOWN: 0,
                        TARGET_TYPE_FILE: 1,
                        TARGET_TYPE_EXTENSION_RANGE: 2,
                        TARGET_TYPE_MESSAGE: 3,
                        TARGET_TYPE_FIELD: 4,
                        TARGET_TYPE_ONEOF: 5,
                        TARGET_TYPE_ENUM: 6,
                        TARGET_TYPE_ENUM_ENTRY: 7,
                        TARGET_TYPE_SERVICE: 8,
                        TARGET_TYPE_METHOD: 9
                      }
                    }
                  }
                },
                OneofOptions: {
                  fields: {
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                EnumOptions: {
                  fields: {
                    allowAlias: {
                      type: "bool",
                      id: 2
                    },
                    deprecated: {
                      type: "bool",
                      id: 3,
                      options: {
                        default: false
                      }
                    },
                    deprecatedLegacyJsonFieldConflicts: {
                      type: "bool",
                      id: 6,
                      options: {
                        deprecated: true
                      }
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      5,
                      5
                    ]
                  ]
                },
                EnumValueOptions: {
                  fields: {
                    deprecated: {
                      type: "bool",
                      id: 1,
                      options: {
                        default: false
                      }
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                ServiceOptions: {
                  fields: {
                    deprecated: {
                      type: "bool",
                      id: 33,
                      options: {
                        default: false
                      }
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                MethodOptions: {
                  fields: {
                    deprecated: {
                      type: "bool",
                      id: 33,
                      options: {
                        default: false
                      }
                    },
                    idempotencyLevel: {
                      type: "IdempotencyLevel",
                      id: 34,
                      options: {
                        default: "IDEMPOTENCY_UNKNOWN"
                      }
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  nested: {
                    IdempotencyLevel: {
                      values: {
                        IDEMPOTENCY_UNKNOWN: 0,
                        NO_SIDE_EFFECTS: 1,
                        IDEMPOTENT: 2
                      }
                    }
                  }
                },
                UninterpretedOption: {
                  fields: {
                    name: {
                      rule: "repeated",
                      type: "NamePart",
                      id: 2
                    },
                    identifierValue: {
                      type: "string",
                      id: 3
                    },
                    positiveIntValue: {
                      type: "uint64",
                      id: 4
                    },
                    negativeIntValue: {
                      type: "int64",
                      id: 5
                    },
                    doubleValue: {
                      type: "double",
                      id: 6
                    },
                    stringValue: {
                      type: "bytes",
                      id: 7
                    },
                    aggregateValue: {
                      type: "string",
                      id: 8
                    }
                  },
                  nested: {
                    NamePart: {
                      fields: {
                        namePart: {
                          rule: "required",
                          type: "string",
                          id: 1
                        },
                        isExtension: {
                          rule: "required",
                          type: "bool",
                          id: 2
                        }
                      }
                    }
                  }
                },
                SourceCodeInfo: {
                  fields: {
                    location: {
                      rule: "repeated",
                      type: "Location",
                      id: 1
                    }
                  },
                  nested: {
                    Location: {
                      fields: {
                        path: {
                          rule: "repeated",
                          type: "int32",
                          id: 1
                        },
                        span: {
                          rule: "repeated",
                          type: "int32",
                          id: 2
                        },
                        leadingComments: {
                          type: "string",
                          id: 3
                        },
                        trailingComments: {
                          type: "string",
                          id: 4
                        },
                        leadingDetachedComments: {
                          rule: "repeated",
                          type: "string",
                          id: 6
                        }
                      }
                    }
                  }
                },
                GeneratedCodeInfo: {
                  fields: {
                    annotation: {
                      rule: "repeated",
                      type: "Annotation",
                      id: 1
                    }
                  },
                  nested: {
                    Annotation: {
                      fields: {
                        path: {
                          rule: "repeated",
                          type: "int32",
                          id: 1
                        },
                        sourceFile: {
                          type: "string",
                          id: 2
                        },
                        begin: {
                          type: "int32",
                          id: 3
                        },
                        end: {
                          type: "int32",
                          id: 4
                        },
                        semantic: {
                          type: "Semantic",
                          id: 5
                        }
                      },
                      nested: {
                        Semantic: {
                          values: {
                            NONE: 0,
                            SET: 1,
                            ALIAS: 2
                          }
                        }
                      }
                    }
                  }
                },
                Duration: {
                  fields: {
                    seconds: {
                      type: "int64",
                      id: 1
                    },
                    nanos: {
                      type: "int32",
                      id: 2
                    }
                  }
                },
                Any: {
                  fields: {
                    type_url: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      type: "bytes",
                      id: 2
                    }
                  }
                },
                Empty: {
                  fields: {}
                },
                Timestamp: {
                  fields: {
                    seconds: {
                      type: "int64",
                      id: 1
                    },
                    nanos: {
                      type: "int32",
                      id: 2
                    }
                  }
                }
              }
            },
            longrunning: {
              options: {
                cc_enable_arenas: true,
                csharp_namespace: "Google.LongRunning",
                go_package: "google.golang.org/genproto/googleapis/longrunning;longrunning",
                java_multiple_files: true,
                java_outer_classname: "OperationsProto",
                java_package: "com.google.longrunning",
                php_namespace: "Google\\LongRunning"
              },
              nested: {
                operationInfo: {
                  type: "google.longrunning.OperationInfo",
                  id: 1049,
                  extend: "google.protobuf.MethodOptions"
                },
                Operations: {
                  options: {
                    "(google.api.default_host)": "longrunning.googleapis.com"
                  },
                  methods: {
                    ListOperations: {
                      requestType: "ListOperationsRequest",
                      responseType: "ListOperationsResponse",
                      options: {
                        "(google.api.http).get": "/v1/{name=operations}",
                        "(google.api.method_signature)": "name,filter"
                      },
                      parsedOptions: [
                        {
                          "(google.api.http)": {
                            get: "/v1/{name=operations}"
                          }
                        },
                        {
                          "(google.api.method_signature)": "name,filter"
                        }
                      ]
                    },
                    GetOperation: {
                      requestType: "GetOperationRequest",
                      responseType: "Operation",
                      options: {
                        "(google.api.http).get": "/v1/{name=operations/**}",
                        "(google.api.method_signature)": "name"
                      },
                      parsedOptions: [
                        {
                          "(google.api.http)": {
                            get: "/v1/{name=operations/**}"
                          }
                        },
                        {
                          "(google.api.method_signature)": "name"
                        }
                      ]
                    },
                    DeleteOperation: {
                      requestType: "DeleteOperationRequest",
                      responseType: "google.protobuf.Empty",
                      options: {
                        "(google.api.http).delete": "/v1/{name=operations/**}",
                        "(google.api.method_signature)": "name"
                      },
                      parsedOptions: [
                        {
                          "(google.api.http)": {
                            delete: "/v1/{name=operations/**}"
                          }
                        },
                        {
                          "(google.api.method_signature)": "name"
                        }
                      ]
                    },
                    CancelOperation: {
                      requestType: "CancelOperationRequest",
                      responseType: "google.protobuf.Empty",
                      options: {
                        "(google.api.http).post": "/v1/{name=operations/**}:cancel",
                        "(google.api.http).body": "*",
                        "(google.api.method_signature)": "name"
                      },
                      parsedOptions: [
                        {
                          "(google.api.http)": {
                            post: "/v1/{name=operations/**}:cancel",
                            body: "*"
                          }
                        },
                        {
                          "(google.api.method_signature)": "name"
                        }
                      ]
                    },
                    WaitOperation: {
                      requestType: "WaitOperationRequest",
                      responseType: "Operation"
                    }
                  }
                },
                Operation: {
                  oneofs: {
                    result: {
                      oneof: [
                        "error",
                        "response"
                      ]
                    }
                  },
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    metadata: {
                      type: "google.protobuf.Any",
                      id: 2
                    },
                    done: {
                      type: "bool",
                      id: 3
                    },
                    error: {
                      type: "google.rpc.Status",
                      id: 4
                    },
                    response: {
                      type: "google.protobuf.Any",
                      id: 5
                    }
                  }
                },
                GetOperationRequest: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    }
                  }
                },
                ListOperationsRequest: {
                  fields: {
                    name: {
                      type: "string",
                      id: 4
                    },
                    filter: {
                      type: "string",
                      id: 1
                    },
                    pageSize: {
                      type: "int32",
                      id: 2
                    },
                    pageToken: {
                      type: "string",
                      id: 3
                    }
                  }
                },
                ListOperationsResponse: {
                  fields: {
                    operations: {
                      rule: "repeated",
                      type: "Operation",
                      id: 1
                    },
                    nextPageToken: {
                      type: "string",
                      id: 2
                    }
                  }
                },
                CancelOperationRequest: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    }
                  }
                },
                DeleteOperationRequest: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    }
                  }
                },
                WaitOperationRequest: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    timeout: {
                      type: "google.protobuf.Duration",
                      id: 2
                    }
                  }
                },
                OperationInfo: {
                  fields: {
                    responseType: {
                      type: "string",
                      id: 1
                    },
                    metadataType: {
                      type: "string",
                      id: 2
                    }
                  }
                }
              }
            },
            rpc: {
              options: {
                cc_enable_arenas: true,
                go_package: "google.golang.org/genproto/googleapis/rpc/status;status",
                java_multiple_files: true,
                java_outer_classname: "StatusProto",
                java_package: "com.google.rpc",
                objc_class_prefix: "RPC"
              },
              nested: {
                Status: {
                  fields: {
                    code: {
                      type: "int32",
                      id: 1
                    },
                    message: {
                      type: "string",
                      id: 2
                    },
                    details: {
                      rule: "repeated",
                      type: "google.protobuf.Any",
                      id: 3
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
  }
});

// node_modules/@google-cloud/text-to-speech/build/src/v1/text_to_speech_client_config.json
var require_text_to_speech_client_config = __commonJS({
  "node_modules/@google-cloud/text-to-speech/build/src/v1/text_to_speech_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.cloud.texttospeech.v1.TextToSpeech": {
          retry_codes: {
            non_idempotent: [],
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ]
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 6e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 6e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            ListVoices: {
              timeout_millis: 3e5,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            SynthesizeSpeech: {
              timeout_millis: 3e5,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/@google-cloud/text-to-speech/package.json
var require_package = __commonJS({
  "node_modules/@google-cloud/text-to-speech/package.json"(exports2, module2) {
    module2.exports = {
      name: "@google-cloud/text-to-speech",
      description: "Cloud Text-to-Speech API client for Node.js",
      version: "5.0.1",
      license: "Apache-2.0",
      author: "Google LLC",
      engines: {
        node: ">=14.0.0"
      },
      repository: {
        type: "git",
        directory: "packages/google-cloud-texttospeech",
        url: "https://github.com/googleapis/google-cloud-node.git"
      },
      main: "build/src/index.js",
      files: [
        "build/protos",
        "build/src",
        "!build/src/**/*.map"
      ],
      keywords: [
        "google apis client",
        "google api client",
        "google apis",
        "google api",
        "google",
        "google cloud platform",
        "google cloud",
        "cloud",
        "google texttospeech",
        "texttospeech",
        "Cloud Text-to-Speech API"
      ],
      scripts: {
        clean: "gts clean",
        compile: "tsc -p . && cp -r protos build/",
        "compile-protos": "compileProtos src",
        docs: "jsdoc -c .jsdoc.js",
        "predocs-test": "npm run docs",
        "docs-test": "linkinator docs",
        fix: "gts fix",
        lint: "gts check",
        prepare: "npm run compile-protos && npm run compile",
        prelint: "cd samples; npm link ../; npm i",
        postpack: "minifyProtoJson",
        "samples-test": "cd samples/ && npm link ../ && npm i && npm test",
        "system-test": "c8 mocha build/system-test",
        test: "c8 mocha build/test"
      },
      dependencies: {
        "google-gax": "^4.0.3"
      },
      devDependencies: {
        "@types/mocha": "^9.0.0",
        "@types/node": "^20.4.5",
        "@types/sinon": "^10.0.0",
        c8: "^8.0.1",
        codecov: "^3.0.0",
        "gapic-tools": "^0.1.8",
        gts: "^5.0.0",
        jsdoc: "^4.0.0",
        "jsdoc-fresh": "^3.0.0",
        "jsdoc-region-tag": "^3.0.0",
        linkinator: "4.1.2",
        long: "^5.2.3",
        mocha: "^9.2.2",
        "pack-n-play": "^1.0.0-2",
        sinon: "^15.0.0",
        typescript: "^5.1.6"
      },
      homepage: "https://github.com/googleapis/google-cloud-node/tree/main/packages/google-cloud-texttospeech"
    };
  }
});

// node_modules/@grpc/grpc-js/build/src/constants.js
var require_constants = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = exports2.DEFAULT_MAX_SEND_MESSAGE_LENGTH = exports2.Propagate = exports2.LogVerbosity = exports2.Status = void 0;
    var Status;
    (function(Status2) {
      Status2[Status2["OK"] = 0] = "OK";
      Status2[Status2["CANCELLED"] = 1] = "CANCELLED";
      Status2[Status2["UNKNOWN"] = 2] = "UNKNOWN";
      Status2[Status2["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
      Status2[Status2["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
      Status2[Status2["NOT_FOUND"] = 5] = "NOT_FOUND";
      Status2[Status2["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
      Status2[Status2["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
      Status2[Status2["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
      Status2[Status2["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
      Status2[Status2["ABORTED"] = 10] = "ABORTED";
      Status2[Status2["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
      Status2[Status2["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
      Status2[Status2["INTERNAL"] = 13] = "INTERNAL";
      Status2[Status2["UNAVAILABLE"] = 14] = "UNAVAILABLE";
      Status2[Status2["DATA_LOSS"] = 15] = "DATA_LOSS";
      Status2[Status2["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
    })(Status || (exports2.Status = Status = {}));
    var LogVerbosity;
    (function(LogVerbosity2) {
      LogVerbosity2[LogVerbosity2["DEBUG"] = 0] = "DEBUG";
      LogVerbosity2[LogVerbosity2["INFO"] = 1] = "INFO";
      LogVerbosity2[LogVerbosity2["ERROR"] = 2] = "ERROR";
      LogVerbosity2[LogVerbosity2["NONE"] = 3] = "NONE";
    })(LogVerbosity || (exports2.LogVerbosity = LogVerbosity = {}));
    var Propagate;
    (function(Propagate2) {
      Propagate2[Propagate2["DEADLINE"] = 1] = "DEADLINE";
      Propagate2[Propagate2["CENSUS_STATS_CONTEXT"] = 2] = "CENSUS_STATS_CONTEXT";
      Propagate2[Propagate2["CENSUS_TRACING_CONTEXT"] = 4] = "CENSUS_TRACING_CONTEXT";
      Propagate2[Propagate2["CANCELLATION"] = 8] = "CANCELLATION";
      Propagate2[Propagate2["DEFAULTS"] = 65535] = "DEFAULTS";
    })(Propagate || (exports2.Propagate = Propagate = {}));
    exports2.DEFAULT_MAX_SEND_MESSAGE_LENGTH = -1;
    exports2.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = 4 * 1024 * 1024;
  }
});

// node_modules/@grpc/grpc-js/build/src/logging.js
var require_logging = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/logging.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    var _d;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isTracerEnabled = exports2.trace = exports2.log = exports2.setLoggerVerbosity = exports2.setLogger = exports2.getLogger = void 0;
    var constants_1 = require_constants();
    var DEFAULT_LOGGER = {
      error: (message, ...optionalParams) => {
        console.error("E " + message, ...optionalParams);
      },
      info: (message, ...optionalParams) => {
        console.error("I " + message, ...optionalParams);
      },
      debug: (message, ...optionalParams) => {
        console.error("D " + message, ...optionalParams);
      }
    };
    var _logger = DEFAULT_LOGGER;
    var _logVerbosity = constants_1.LogVerbosity.ERROR;
    var verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : "";
    switch (verbosityString.toUpperCase()) {
      case "DEBUG":
        _logVerbosity = constants_1.LogVerbosity.DEBUG;
        break;
      case "INFO":
        _logVerbosity = constants_1.LogVerbosity.INFO;
        break;
      case "ERROR":
        _logVerbosity = constants_1.LogVerbosity.ERROR;
        break;
      case "NONE":
        _logVerbosity = constants_1.LogVerbosity.NONE;
        break;
      default:
    }
    var getLogger = () => {
      return _logger;
    };
    exports2.getLogger = getLogger;
    var setLogger = (logger) => {
      _logger = logger;
    };
    exports2.setLogger = setLogger;
    var setLoggerVerbosity = (verbosity) => {
      _logVerbosity = verbosity;
    };
    exports2.setLoggerVerbosity = setLoggerVerbosity;
    var log = (severity, ...args) => {
      let logFunction;
      if (severity >= _logVerbosity) {
        switch (severity) {
          case constants_1.LogVerbosity.DEBUG:
            logFunction = _logger.debug;
            break;
          case constants_1.LogVerbosity.INFO:
            logFunction = _logger.info;
            break;
          case constants_1.LogVerbosity.ERROR:
            logFunction = _logger.error;
            break;
        }
        if (!logFunction) {
          logFunction = _logger.error;
        }
        if (logFunction) {
          logFunction.bind(_logger)(...args);
        }
      }
    };
    exports2.log = log;
    var tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : "";
    var enabledTracers = /* @__PURE__ */ new Set();
    var disabledTracers = /* @__PURE__ */ new Set();
    for (const tracerName of tracersString.split(",")) {
      if (tracerName.startsWith("-")) {
        disabledTracers.add(tracerName.substring(1));
      } else {
        enabledTracers.add(tracerName);
      }
    }
    var allEnabled = enabledTracers.has("all");
    function trace(severity, tracer, text) {
      if (isTracerEnabled(tracer)) {
        (0, exports2.log)(severity, (/* @__PURE__ */ new Date()).toISOString() + " | " + tracer + " | " + text);
      }
    }
    exports2.trace = trace;
    function isTracerEnabled(tracer) {
      return !disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer));
    }
    exports2.isTracerEnabled = isTracerEnabled;
  }
});

// node_modules/@grpc/grpc-js/build/src/error.js
var require_error = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/error.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getErrorCode = exports2.getErrorMessage = void 0;
    function getErrorMessage(error) {
      if (error instanceof Error) {
        return error.message;
      } else {
        return String(error);
      }
    }
    exports2.getErrorMessage = getErrorMessage;
    function getErrorCode(error) {
      if (typeof error === "object" && error !== null && "code" in error && typeof error.code === "number") {
        return error.code;
      } else {
        return null;
      }
    }
    exports2.getErrorCode = getErrorCode;
  }
});

// node_modules/@grpc/grpc-js/build/src/metadata.js
var require_metadata = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/metadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Metadata = void 0;
    var logging_1 = require_logging();
    var constants_1 = require_constants();
    var error_1 = require_error();
    var LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;
    var LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;
    function isLegalKey(key) {
      return LEGAL_KEY_REGEX.test(key);
    }
    function isLegalNonBinaryValue(value) {
      return LEGAL_NON_BINARY_VALUE_REGEX.test(value);
    }
    function isBinaryKey(key) {
      return key.endsWith("-bin");
    }
    function isCustomMetadata(key) {
      return !key.startsWith("grpc-");
    }
    function normalizeKey(key) {
      return key.toLowerCase();
    }
    function validate(key, value) {
      if (!isLegalKey(key)) {
        throw new Error('Metadata key "' + key + '" contains illegal characters');
      }
      if (value !== null && value !== void 0) {
        if (isBinaryKey(key)) {
          if (!Buffer.isBuffer(value)) {
            throw new Error("keys that end with '-bin' must have Buffer values");
          }
        } else {
          if (Buffer.isBuffer(value)) {
            throw new Error("keys that don't end with '-bin' must have String values");
          }
          if (!isLegalNonBinaryValue(value)) {
            throw new Error('Metadata string value "' + value + '" contains illegal characters');
          }
        }
      }
    }
    var Metadata = class _Metadata {
      constructor(options = {}) {
        this.internalRepr = /* @__PURE__ */ new Map();
        this.options = options;
      }
      /**
       * Sets the given value for the given key by replacing any other values
       * associated with that key. Normalizes the key.
       * @param key The key to whose value should be set.
       * @param value The value to set. Must be a buffer if and only
       *   if the normalized key ends with '-bin'.
       */
      set(key, value) {
        key = normalizeKey(key);
        validate(key, value);
        this.internalRepr.set(key, [value]);
      }
      /**
       * Adds the given value for the given key by appending to a list of previous
       * values associated with that key. Normalizes the key.
       * @param key The key for which a new value should be appended.
       * @param value The value to add. Must be a buffer if and only
       *   if the normalized key ends with '-bin'.
       */
      add(key, value) {
        key = normalizeKey(key);
        validate(key, value);
        const existingValue = this.internalRepr.get(key);
        if (existingValue === void 0) {
          this.internalRepr.set(key, [value]);
        } else {
          existingValue.push(value);
        }
      }
      /**
       * Removes the given key and any associated values. Normalizes the key.
       * @param key The key whose values should be removed.
       */
      remove(key) {
        key = normalizeKey(key);
        this.internalRepr.delete(key);
      }
      /**
       * Gets a list of all values associated with the key. Normalizes the key.
       * @param key The key whose value should be retrieved.
       * @return A list of values associated with the given key.
       */
      get(key) {
        key = normalizeKey(key);
        return this.internalRepr.get(key) || [];
      }
      /**
       * Gets a plain object mapping each key to the first value associated with it.
       * This reflects the most common way that people will want to see metadata.
       * @return A key/value mapping of the metadata.
       */
      getMap() {
        const result = {};
        for (const [key, values] of this.internalRepr) {
          if (values.length > 0) {
            const v = values[0];
            result[key] = Buffer.isBuffer(v) ? Buffer.from(v) : v;
          }
        }
        return result;
      }
      /**
       * Clones the metadata object.
       * @return The newly cloned object.
       */
      clone() {
        const newMetadata = new _Metadata(this.options);
        const newInternalRepr = newMetadata.internalRepr;
        for (const [key, value] of this.internalRepr) {
          const clonedValue = value.map((v) => {
            if (Buffer.isBuffer(v)) {
              return Buffer.from(v);
            } else {
              return v;
            }
          });
          newInternalRepr.set(key, clonedValue);
        }
        return newMetadata;
      }
      /**
       * Merges all key-value pairs from a given Metadata object into this one.
       * If both this object and the given object have values in the same key,
       * values from the other Metadata object will be appended to this object's
       * values.
       * @param other A Metadata object.
       */
      merge(other) {
        for (const [key, values] of other.internalRepr) {
          const mergedValue = (this.internalRepr.get(key) || []).concat(values);
          this.internalRepr.set(key, mergedValue);
        }
      }
      setOptions(options) {
        this.options = options;
      }
      getOptions() {
        return this.options;
      }
      /**
       * Creates an OutgoingHttpHeaders object that can be used with the http2 API.
       */
      toHttp2Headers() {
        const result = {};
        for (const [key, values] of this.internalRepr) {
          result[key] = values.map(bufToString);
        }
        return result;
      }
      /**
       * This modifies the behavior of JSON.stringify to show an object
       * representation of the metadata map.
       */
      toJSON() {
        const result = {};
        for (const [key, values] of this.internalRepr) {
          result[key] = values;
        }
        return result;
      }
      /**
       * Returns a new Metadata object based fields in a given IncomingHttpHeaders
       * object.
       * @param headers An IncomingHttpHeaders object.
       */
      static fromHttp2Headers(headers) {
        const result = new _Metadata();
        for (const key of Object.keys(headers)) {
          if (key.charAt(0) === ":") {
            continue;
          }
          const values = headers[key];
          try {
            if (isBinaryKey(key)) {
              if (Array.isArray(values)) {
                values.forEach((value) => {
                  result.add(key, Buffer.from(value, "base64"));
                });
              } else if (values !== void 0) {
                if (isCustomMetadata(key)) {
                  values.split(",").forEach((v) => {
                    result.add(key, Buffer.from(v.trim(), "base64"));
                  });
                } else {
                  result.add(key, Buffer.from(values, "base64"));
                }
              }
            } else {
              if (Array.isArray(values)) {
                values.forEach((value) => {
                  result.add(key, value);
                });
              } else if (values !== void 0) {
                result.add(key, values);
              }
            }
          } catch (error) {
            const message = `Failed to add metadata entry ${key}: ${values}. ${(0, error_1.getErrorMessage)(error)}. For more information see https://github.com/grpc/grpc-node/issues/1173`;
            (0, logging_1.log)(constants_1.LogVerbosity.ERROR, message);
          }
        }
        return result;
      }
    };
    exports2.Metadata = Metadata;
    var bufToString = (val) => {
      return Buffer.isBuffer(val) ? val.toString("base64") : val;
    };
  }
});

// node_modules/@grpc/grpc-js/build/src/call-credentials.js
var require_call_credentials = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/call-credentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CallCredentials = void 0;
    var metadata_1 = require_metadata();
    function isCurrentOauth2Client(client2) {
      return "getRequestHeaders" in client2 && typeof client2.getRequestHeaders === "function";
    }
    var CallCredentials = class _CallCredentials {
      /**
       * Creates a new CallCredentials object from a given function that generates
       * Metadata objects.
       * @param metadataGenerator A function that accepts a set of options, and
       * generates a Metadata object based on these options, which is passed back
       * to the caller via a supplied (err, metadata) callback.
       */
      static createFromMetadataGenerator(metadataGenerator) {
        return new SingleCallCredentials(metadataGenerator);
      }
      /**
       * Create a gRPC credential from a Google credential object.
       * @param googleCredentials The authentication client to use.
       * @return The resulting CallCredentials object.
       */
      static createFromGoogleCredential(googleCredentials) {
        return _CallCredentials.createFromMetadataGenerator((options, callback) => {
          let getHeaders;
          if (isCurrentOauth2Client(googleCredentials)) {
            getHeaders = googleCredentials.getRequestHeaders(options.service_url);
          } else {
            getHeaders = new Promise((resolve, reject) => {
              googleCredentials.getRequestMetadata(options.service_url, (err, headers) => {
                if (err) {
                  reject(err);
                  return;
                }
                if (!headers) {
                  reject(new Error("Headers not set by metadata plugin"));
                  return;
                }
                resolve(headers);
              });
            });
          }
          getHeaders.then((headers) => {
            const metadata = new metadata_1.Metadata();
            for (const key of Object.keys(headers)) {
              metadata.add(key, headers[key]);
            }
            callback(null, metadata);
          }, (err) => {
            callback(err);
          });
        });
      }
      static createEmpty() {
        return new EmptyCallCredentials();
      }
    };
    exports2.CallCredentials = CallCredentials;
    var ComposedCallCredentials = class _ComposedCallCredentials extends CallCredentials {
      constructor(creds) {
        super();
        this.creds = creds;
      }
      async generateMetadata(options) {
        const base = new metadata_1.Metadata();
        const generated = await Promise.all(this.creds.map((cred) => cred.generateMetadata(options)));
        for (const gen of generated) {
          base.merge(gen);
        }
        return base;
      }
      compose(other) {
        return new _ComposedCallCredentials(this.creds.concat([other]));
      }
      _equals(other) {
        if (this === other) {
          return true;
        }
        if (other instanceof _ComposedCallCredentials) {
          return this.creds.every((value, index) => value._equals(other.creds[index]));
        } else {
          return false;
        }
      }
    };
    var SingleCallCredentials = class _SingleCallCredentials extends CallCredentials {
      constructor(metadataGenerator) {
        super();
        this.metadataGenerator = metadataGenerator;
      }
      generateMetadata(options) {
        return new Promise((resolve, reject) => {
          this.metadataGenerator(options, (err, metadata) => {
            if (metadata !== void 0) {
              resolve(metadata);
            } else {
              reject(err);
            }
          });
        });
      }
      compose(other) {
        return new ComposedCallCredentials([this, other]);
      }
      _equals(other) {
        if (this === other) {
          return true;
        }
        if (other instanceof _SingleCallCredentials) {
          return this.metadataGenerator === other.metadataGenerator;
        } else {
          return false;
        }
      }
    };
    var EmptyCallCredentials = class _EmptyCallCredentials extends CallCredentials {
      generateMetadata(options) {
        return Promise.resolve(new metadata_1.Metadata());
      }
      compose(other) {
        return other;
      }
      _equals(other) {
        return other instanceof _EmptyCallCredentials;
      }
    };
  }
});

// node_modules/@grpc/grpc-js/build/src/tls-helpers.js
var require_tls_helpers = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/tls-helpers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultRootsData = exports2.CIPHER_SUITES = void 0;
    var fs = require("fs");
    exports2.CIPHER_SUITES = process.env.GRPC_SSL_CIPHER_SUITES;
    var DEFAULT_ROOTS_FILE_PATH = process.env.GRPC_DEFAULT_SSL_ROOTS_FILE_PATH;
    var defaultRootsData = null;
    function getDefaultRootsData() {
      if (DEFAULT_ROOTS_FILE_PATH) {
        if (defaultRootsData === null) {
          defaultRootsData = fs.readFileSync(DEFAULT_ROOTS_FILE_PATH);
        }
        return defaultRootsData;
      }
      return null;
    }
    exports2.getDefaultRootsData = getDefaultRootsData;
  }
});

// node_modules/@grpc/grpc-js/build/src/channel-credentials.js
var require_channel_credentials = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/channel-credentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChannelCredentials = void 0;
    var tls_1 = require("tls");
    var call_credentials_1 = require_call_credentials();
    var tls_helpers_1 = require_tls_helpers();
    function verifyIsBufferOrNull(obj, friendlyName) {
      if (obj && !(obj instanceof Buffer)) {
        throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);
      }
    }
    var ChannelCredentials = class {
      constructor(callCredentials) {
        this.callCredentials = callCredentials || call_credentials_1.CallCredentials.createEmpty();
      }
      /**
       * Gets the set of per-call credentials associated with this instance.
       */
      _getCallCredentials() {
        return this.callCredentials;
      }
      /**
       * Return a new ChannelCredentials instance with a given set of credentials.
       * The resulting instance can be used to construct a Channel that communicates
       * over TLS.
       * @param rootCerts The root certificate data.
       * @param privateKey The client certificate private key, if available.
       * @param certChain The client certificate key chain, if available.
       * @param verifyOptions Additional options to modify certificate verification
       */
      static createSsl(rootCerts, privateKey, certChain, verifyOptions) {
        var _a;
        verifyIsBufferOrNull(rootCerts, "Root certificate");
        verifyIsBufferOrNull(privateKey, "Private key");
        verifyIsBufferOrNull(certChain, "Certificate chain");
        if (privateKey && !certChain) {
          throw new Error("Private key must be given with accompanying certificate chain");
        }
        if (!privateKey && certChain) {
          throw new Error("Certificate chain must be given with accompanying private key");
        }
        const secureContext = (0, tls_1.createSecureContext)({
          ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : (0, tls_helpers_1.getDefaultRootsData)()) !== null && _a !== void 0 ? _a : void 0,
          key: privateKey !== null && privateKey !== void 0 ? privateKey : void 0,
          cert: certChain !== null && certChain !== void 0 ? certChain : void 0,
          ciphers: tls_helpers_1.CIPHER_SUITES
        });
        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});
      }
      /**
       * Return a new ChannelCredentials instance with credentials created using
       * the provided secureContext. The resulting instances can be used to
       * construct a Channel that communicates over TLS. gRPC will not override
       * anything in the provided secureContext, so the environment variables
       * GRPC_SSL_CIPHER_SUITES and GRPC_DEFAULT_SSL_ROOTS_FILE_PATH will
       * not be applied.
       * @param secureContext The return value of tls.createSecureContext()
       * @param verifyOptions Additional options to modify certificate verification
       */
      static createFromSecureContext(secureContext, verifyOptions) {
        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});
      }
      /**
       * Return a new ChannelCredentials instance with no credentials.
       */
      static createInsecure() {
        return new InsecureChannelCredentialsImpl();
      }
    };
    exports2.ChannelCredentials = ChannelCredentials;
    var InsecureChannelCredentialsImpl = class _InsecureChannelCredentialsImpl extends ChannelCredentials {
      constructor(callCredentials) {
        super(callCredentials);
      }
      compose(callCredentials) {
        throw new Error("Cannot compose insecure credentials");
      }
      _getConnectionOptions() {
        return null;
      }
      _isSecure() {
        return false;
      }
      _equals(other) {
        return other instanceof _InsecureChannelCredentialsImpl;
      }
    };
    var SecureChannelCredentialsImpl = class _SecureChannelCredentialsImpl extends ChannelCredentials {
      constructor(secureContext, verifyOptions) {
        super();
        this.secureContext = secureContext;
        this.verifyOptions = verifyOptions;
        this.connectionOptions = {
          secureContext
        };
        if (verifyOptions === null || verifyOptions === void 0 ? void 0 : verifyOptions.checkServerIdentity) {
          this.connectionOptions.checkServerIdentity = verifyOptions.checkServerIdentity;
        }
      }
      compose(callCredentials) {
        const combinedCallCredentials = this.callCredentials.compose(callCredentials);
        return new ComposedChannelCredentialsImpl(this, combinedCallCredentials);
      }
      _getConnectionOptions() {
        return Object.assign({}, this.connectionOptions);
      }
      _isSecure() {
        return true;
      }
      _equals(other) {
        if (this === other) {
          return true;
        }
        if (other instanceof _SecureChannelCredentialsImpl) {
          return this.secureContext === other.secureContext && this.verifyOptions.checkServerIdentity === other.verifyOptions.checkServerIdentity;
        } else {
          return false;
        }
      }
    };
    var ComposedChannelCredentialsImpl = class _ComposedChannelCredentialsImpl extends ChannelCredentials {
      constructor(channelCredentials, callCreds) {
        super(callCreds);
        this.channelCredentials = channelCredentials;
      }
      compose(callCredentials) {
        const combinedCallCredentials = this.callCredentials.compose(callCredentials);
        return new _ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);
      }
      _getConnectionOptions() {
        return this.channelCredentials._getConnectionOptions();
      }
      _isSecure() {
        return true;
      }
      _equals(other) {
        if (this === other) {
          return true;
        }
        if (other instanceof _ComposedChannelCredentialsImpl) {
          return this.channelCredentials._equals(other.channelCredentials) && this.callCredentials._equals(other.callCredentials);
        } else {
          return false;
        }
      }
    };
  }
});

// node_modules/@grpc/grpc-js/build/src/load-balancer.js
var require_load_balancer = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/load-balancer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateLoadBalancingConfig = exports2.getFirstUsableConfig = exports2.isLoadBalancerNameRegistered = exports2.createLoadBalancer = exports2.registerDefaultLoadBalancerType = exports2.registerLoadBalancerType = exports2.createChildChannelControlHelper = void 0;
    function createChildChannelControlHelper(parent, overrides) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
      return {
        createSubchannel: (_b = (_a = overrides.createSubchannel) === null || _a === void 0 ? void 0 : _a.bind(overrides)) !== null && _b !== void 0 ? _b : parent.createSubchannel.bind(parent),
        updateState: (_d = (_c = overrides.updateState) === null || _c === void 0 ? void 0 : _c.bind(overrides)) !== null && _d !== void 0 ? _d : parent.updateState.bind(parent),
        requestReresolution: (_f = (_e = overrides.requestReresolution) === null || _e === void 0 ? void 0 : _e.bind(overrides)) !== null && _f !== void 0 ? _f : parent.requestReresolution.bind(parent),
        addChannelzChild: (_h = (_g = overrides.addChannelzChild) === null || _g === void 0 ? void 0 : _g.bind(overrides)) !== null && _h !== void 0 ? _h : parent.addChannelzChild.bind(parent),
        removeChannelzChild: (_k = (_j = overrides.removeChannelzChild) === null || _j === void 0 ? void 0 : _j.bind(overrides)) !== null && _k !== void 0 ? _k : parent.removeChannelzChild.bind(parent)
      };
    }
    exports2.createChildChannelControlHelper = createChildChannelControlHelper;
    var registeredLoadBalancerTypes = {};
    var defaultLoadBalancerType = null;
    function registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {
      registeredLoadBalancerTypes[typeName] = {
        LoadBalancer: loadBalancerType,
        LoadBalancingConfig: loadBalancingConfigType
      };
    }
    exports2.registerLoadBalancerType = registerLoadBalancerType;
    function registerDefaultLoadBalancerType(typeName) {
      defaultLoadBalancerType = typeName;
    }
    exports2.registerDefaultLoadBalancerType = registerDefaultLoadBalancerType;
    function createLoadBalancer(config, channelControlHelper) {
      const typeName = config.getLoadBalancerName();
      if (typeName in registeredLoadBalancerTypes) {
        return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);
      } else {
        return null;
      }
    }
    exports2.createLoadBalancer = createLoadBalancer;
    function isLoadBalancerNameRegistered(typeName) {
      return typeName in registeredLoadBalancerTypes;
    }
    exports2.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;
    function getFirstUsableConfig(configs, fallbackTodefault = false) {
      for (const config of configs) {
        if (config.getLoadBalancerName() in registeredLoadBalancerTypes) {
          return config;
        }
      }
      if (fallbackTodefault) {
        if (defaultLoadBalancerType) {
          return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();
        } else {
          return null;
        }
      } else {
        return null;
      }
    }
    exports2.getFirstUsableConfig = getFirstUsableConfig;
    function validateLoadBalancingConfig(obj) {
      if (!(obj !== null && typeof obj === "object")) {
        throw new Error("Load balancing config must be an object");
      }
      const keys = Object.keys(obj);
      if (keys.length !== 1) {
        throw new Error("Provided load balancing config has multiple conflicting entries");
      }
      const typeName = keys[0];
      if (typeName in registeredLoadBalancerTypes) {
        return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(obj[typeName]);
      } else {
        throw new Error(`Unrecognized load balancing config name ${typeName}`);
      }
    }
    exports2.validateLoadBalancingConfig = validateLoadBalancingConfig;
  }
});

// node_modules/@grpc/grpc-js/build/src/service-config.js
var require_service_config = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/service-config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extractAndSelectServiceConfig = exports2.validateServiceConfig = exports2.validateRetryThrottling = void 0;
    var os = require("os");
    var constants_1 = require_constants();
    var load_balancer_1 = require_load_balancer();
    var DURATION_REGEX = /^\d+(\.\d{1,9})?s$/;
    var CLIENT_LANGUAGE_STRING = "node";
    function validateName(obj) {
      if ("service" in obj && obj.service !== "") {
        if (typeof obj.service !== "string") {
          throw new Error(`Invalid method config name: invalid service: expected type string, got ${typeof obj.service}`);
        }
        if ("method" in obj && obj.method !== "") {
          if (typeof obj.method !== "string") {
            throw new Error(`Invalid method config name: invalid method: expected type string, got ${typeof obj.service}`);
          }
          return {
            service: obj.service,
            method: obj.method
          };
        } else {
          return {
            service: obj.service
          };
        }
      } else {
        if ("method" in obj && obj.method !== void 0) {
          throw new Error(`Invalid method config name: method set with empty or unset service`);
        }
        return {};
      }
    }
    function validateRetryPolicy(obj) {
      if (!("maxAttempts" in obj) || !Number.isInteger(obj.maxAttempts) || obj.maxAttempts < 2) {
        throw new Error("Invalid method config retry policy: maxAttempts must be an integer at least 2");
      }
      if (!("initialBackoff" in obj) || typeof obj.initialBackoff !== "string" || !DURATION_REGEX.test(obj.initialBackoff)) {
        throw new Error("Invalid method config retry policy: initialBackoff must be a string consisting of a positive integer followed by s");
      }
      if (!("maxBackoff" in obj) || typeof obj.maxBackoff !== "string" || !DURATION_REGEX.test(obj.maxBackoff)) {
        throw new Error("Invalid method config retry policy: maxBackoff must be a string consisting of a positive integer followed by s");
      }
      if (!("backoffMultiplier" in obj) || typeof obj.backoffMultiplier !== "number" || obj.backoffMultiplier <= 0) {
        throw new Error("Invalid method config retry policy: backoffMultiplier must be a number greater than 0");
      }
      if (!("retryableStatusCodes" in obj && Array.isArray(obj.retryableStatusCodes))) {
        throw new Error("Invalid method config retry policy: retryableStatusCodes is required");
      }
      if (obj.retryableStatusCodes.length === 0) {
        throw new Error("Invalid method config retry policy: retryableStatusCodes must be non-empty");
      }
      for (const value of obj.retryableStatusCodes) {
        if (typeof value === "number") {
          if (!Object.values(constants_1.Status).includes(value)) {
            throw new Error("Invalid method config retry policy: retryableStatusCodes value not in status code range");
          }
        } else if (typeof value === "string") {
          if (!Object.values(constants_1.Status).includes(value.toUpperCase())) {
            throw new Error("Invalid method config retry policy: retryableStatusCodes value not a status code name");
          }
        } else {
          throw new Error("Invalid method config retry policy: retryableStatusCodes value must be a string or number");
        }
      }
      return {
        maxAttempts: obj.maxAttempts,
        initialBackoff: obj.initialBackoff,
        maxBackoff: obj.maxBackoff,
        backoffMultiplier: obj.backoffMultiplier,
        retryableStatusCodes: obj.retryableStatusCodes
      };
    }
    function validateHedgingPolicy(obj) {
      if (!("maxAttempts" in obj) || !Number.isInteger(obj.maxAttempts) || obj.maxAttempts < 2) {
        throw new Error("Invalid method config hedging policy: maxAttempts must be an integer at least 2");
      }
      if ("hedgingDelay" in obj && (typeof obj.hedgingDelay !== "string" || !DURATION_REGEX.test(obj.hedgingDelay))) {
        throw new Error("Invalid method config hedging policy: hedgingDelay must be a string consisting of a positive integer followed by s");
      }
      if ("nonFatalStatusCodes" in obj && Array.isArray(obj.nonFatalStatusCodes)) {
        for (const value of obj.nonFatalStatusCodes) {
          if (typeof value === "number") {
            if (!Object.values(constants_1.Status).includes(value)) {
              throw new Error("Invlid method config hedging policy: nonFatalStatusCodes value not in status code range");
            }
          } else if (typeof value === "string") {
            if (!Object.values(constants_1.Status).includes(value.toUpperCase())) {
              throw new Error("Invlid method config hedging policy: nonFatalStatusCodes value not a status code name");
            }
          } else {
            throw new Error("Invlid method config hedging policy: nonFatalStatusCodes value must be a string or number");
          }
        }
      }
      const result = {
        maxAttempts: obj.maxAttempts
      };
      if (obj.hedgingDelay) {
        result.hedgingDelay = obj.hedgingDelay;
      }
      if (obj.nonFatalStatusCodes) {
        result.nonFatalStatusCodes = obj.nonFatalStatusCodes;
      }
      return result;
    }
    function validateMethodConfig(obj) {
      var _a;
      const result = {
        name: []
      };
      if (!("name" in obj) || !Array.isArray(obj.name)) {
        throw new Error("Invalid method config: invalid name array");
      }
      for (const name of obj.name) {
        result.name.push(validateName(name));
      }
      if ("waitForReady" in obj) {
        if (typeof obj.waitForReady !== "boolean") {
          throw new Error("Invalid method config: invalid waitForReady");
        }
        result.waitForReady = obj.waitForReady;
      }
      if ("timeout" in obj) {
        if (typeof obj.timeout === "object") {
          if (!("seconds" in obj.timeout) || !(typeof obj.timeout.seconds === "number")) {
            throw new Error("Invalid method config: invalid timeout.seconds");
          }
          if (!("nanos" in obj.timeout) || !(typeof obj.timeout.nanos === "number")) {
            throw new Error("Invalid method config: invalid timeout.nanos");
          }
          result.timeout = obj.timeout;
        } else if (typeof obj.timeout === "string" && DURATION_REGEX.test(obj.timeout)) {
          const timeoutParts = obj.timeout.substring(0, obj.timeout.length - 1).split(".");
          result.timeout = {
            seconds: timeoutParts[0] | 0,
            nanos: ((_a = timeoutParts[1]) !== null && _a !== void 0 ? _a : 0) | 0
          };
        } else {
          throw new Error("Invalid method config: invalid timeout");
        }
      }
      if ("maxRequestBytes" in obj) {
        if (typeof obj.maxRequestBytes !== "number") {
          throw new Error("Invalid method config: invalid maxRequestBytes");
        }
        result.maxRequestBytes = obj.maxRequestBytes;
      }
      if ("maxResponseBytes" in obj) {
        if (typeof obj.maxResponseBytes !== "number") {
          throw new Error("Invalid method config: invalid maxRequestBytes");
        }
        result.maxResponseBytes = obj.maxResponseBytes;
      }
      if ("retryPolicy" in obj) {
        if ("hedgingPolicy" in obj) {
          throw new Error("Invalid method config: retryPolicy and hedgingPolicy cannot both be specified");
        } else {
          result.retryPolicy = validateRetryPolicy(obj.retryPolicy);
        }
      } else if ("hedgingPolicy" in obj) {
        result.hedgingPolicy = validateHedgingPolicy(obj.hedgingPolicy);
      }
      return result;
    }
    function validateRetryThrottling(obj) {
      if (!("maxTokens" in obj) || typeof obj.maxTokens !== "number" || obj.maxTokens <= 0 || obj.maxTokens > 1e3) {
        throw new Error("Invalid retryThrottling: maxTokens must be a number in (0, 1000]");
      }
      if (!("tokenRatio" in obj) || typeof obj.tokenRatio !== "number" || obj.tokenRatio <= 0) {
        throw new Error("Invalid retryThrottling: tokenRatio must be a number greater than 0");
      }
      return {
        maxTokens: +obj.maxTokens.toFixed(3),
        tokenRatio: +obj.tokenRatio.toFixed(3)
      };
    }
    exports2.validateRetryThrottling = validateRetryThrottling;
    function validateServiceConfig(obj) {
      const result = {
        loadBalancingConfig: [],
        methodConfig: []
      };
      if ("loadBalancingPolicy" in obj) {
        if (typeof obj.loadBalancingPolicy === "string") {
          result.loadBalancingPolicy = obj.loadBalancingPolicy;
        } else {
          throw new Error("Invalid service config: invalid loadBalancingPolicy");
        }
      }
      if ("loadBalancingConfig" in obj) {
        if (Array.isArray(obj.loadBalancingConfig)) {
          for (const config of obj.loadBalancingConfig) {
            result.loadBalancingConfig.push((0, load_balancer_1.validateLoadBalancingConfig)(config));
          }
        } else {
          throw new Error("Invalid service config: invalid loadBalancingConfig");
        }
      }
      if ("methodConfig" in obj) {
        if (Array.isArray(obj.methodConfig)) {
          for (const methodConfig of obj.methodConfig) {
            result.methodConfig.push(validateMethodConfig(methodConfig));
          }
        }
      }
      if ("retryThrottling" in obj) {
        result.retryThrottling = validateRetryThrottling(obj.retryThrottling);
      }
      const seenMethodNames = [];
      for (const methodConfig of result.methodConfig) {
        for (const name of methodConfig.name) {
          for (const seenName of seenMethodNames) {
            if (name.service === seenName.service && name.method === seenName.method) {
              throw new Error(`Invalid service config: duplicate name ${name.service}/${name.method}`);
            }
          }
          seenMethodNames.push(name);
        }
      }
      return result;
    }
    exports2.validateServiceConfig = validateServiceConfig;
    function validateCanaryConfig(obj) {
      if (!("serviceConfig" in obj)) {
        throw new Error("Invalid service config choice: missing service config");
      }
      const result = {
        serviceConfig: validateServiceConfig(obj.serviceConfig)
      };
      if ("clientLanguage" in obj) {
        if (Array.isArray(obj.clientLanguage)) {
          result.clientLanguage = [];
          for (const lang of obj.clientLanguage) {
            if (typeof lang === "string") {
              result.clientLanguage.push(lang);
            } else {
              throw new Error("Invalid service config choice: invalid clientLanguage");
            }
          }
        } else {
          throw new Error("Invalid service config choice: invalid clientLanguage");
        }
      }
      if ("clientHostname" in obj) {
        if (Array.isArray(obj.clientHostname)) {
          result.clientHostname = [];
          for (const lang of obj.clientHostname) {
            if (typeof lang === "string") {
              result.clientHostname.push(lang);
            } else {
              throw new Error("Invalid service config choice: invalid clientHostname");
            }
          }
        } else {
          throw new Error("Invalid service config choice: invalid clientHostname");
        }
      }
      if ("percentage" in obj) {
        if (typeof obj.percentage === "number" && 0 <= obj.percentage && obj.percentage <= 100) {
          result.percentage = obj.percentage;
        } else {
          throw new Error("Invalid service config choice: invalid percentage");
        }
      }
      const allowedFields = [
        "clientLanguage",
        "percentage",
        "clientHostname",
        "serviceConfig"
      ];
      for (const field in obj) {
        if (!allowedFields.includes(field)) {
          throw new Error(`Invalid service config choice: unexpected field ${field}`);
        }
      }
      return result;
    }
    function validateAndSelectCanaryConfig(obj, percentage) {
      if (!Array.isArray(obj)) {
        throw new Error("Invalid service config list");
      }
      for (const config of obj) {
        const validatedConfig = validateCanaryConfig(config);
        if (typeof validatedConfig.percentage === "number" && percentage > validatedConfig.percentage) {
          continue;
        }
        if (Array.isArray(validatedConfig.clientHostname)) {
          let hostnameMatched = false;
          for (const hostname of validatedConfig.clientHostname) {
            if (hostname === os.hostname()) {
              hostnameMatched = true;
            }
          }
          if (!hostnameMatched) {
            continue;
          }
        }
        if (Array.isArray(validatedConfig.clientLanguage)) {
          let languageMatched = false;
          for (const language of validatedConfig.clientLanguage) {
            if (language === CLIENT_LANGUAGE_STRING) {
              languageMatched = true;
            }
          }
          if (!languageMatched) {
            continue;
          }
        }
        return validatedConfig.serviceConfig;
      }
      throw new Error("No matching service config found");
    }
    function extractAndSelectServiceConfig(txtRecord, percentage) {
      for (const record of txtRecord) {
        if (record.length > 0 && record[0].startsWith("grpc_config=")) {
          const recordString = record.join("").substring("grpc_config=".length);
          const recordJson = JSON.parse(recordString);
          return validateAndSelectCanaryConfig(recordJson, percentage);
        }
      }
      return null;
    }
    exports2.extractAndSelectServiceConfig = extractAndSelectServiceConfig;
  }
});

// node_modules/@grpc/grpc-js/build/src/connectivity-state.js
var require_connectivity_state = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/connectivity-state.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConnectivityState = void 0;
    var ConnectivityState;
    (function(ConnectivityState2) {
      ConnectivityState2[ConnectivityState2["IDLE"] = 0] = "IDLE";
      ConnectivityState2[ConnectivityState2["CONNECTING"] = 1] = "CONNECTING";
      ConnectivityState2[ConnectivityState2["READY"] = 2] = "READY";
      ConnectivityState2[ConnectivityState2["TRANSIENT_FAILURE"] = 3] = "TRANSIENT_FAILURE";
      ConnectivityState2[ConnectivityState2["SHUTDOWN"] = 4] = "SHUTDOWN";
    })(ConnectivityState || (exports2.ConnectivityState = ConnectivityState = {}));
  }
});

// node_modules/@grpc/grpc-js/build/src/uri-parser.js
var require_uri_parser = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/uri-parser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uriToString = exports2.splitHostPort = exports2.parseUri = void 0;
    var URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\/\/([^/]*)\/)?(.+)$/;
    function parseUri(uriString) {
      const parsedUri = URI_REGEX.exec(uriString);
      if (parsedUri === null) {
        return null;
      }
      return {
        scheme: parsedUri[1],
        authority: parsedUri[2],
        path: parsedUri[3]
      };
    }
    exports2.parseUri = parseUri;
    var NUMBER_REGEX = /^\d+$/;
    function splitHostPort(path) {
      if (path.startsWith("[")) {
        const hostEnd = path.indexOf("]");
        if (hostEnd === -1) {
          return null;
        }
        const host = path.substring(1, hostEnd);
        if (host.indexOf(":") === -1) {
          return null;
        }
        if (path.length > hostEnd + 1) {
          if (path[hostEnd + 1] === ":") {
            const portString = path.substring(hostEnd + 2);
            if (NUMBER_REGEX.test(portString)) {
              return {
                host,
                port: +portString
              };
            } else {
              return null;
            }
          } else {
            return null;
          }
        } else {
          return {
            host
          };
        }
      } else {
        const splitPath = path.split(":");
        if (splitPath.length === 2) {
          if (NUMBER_REGEX.test(splitPath[1])) {
            return {
              host: splitPath[0],
              port: +splitPath[1]
            };
          } else {
            return null;
          }
        } else {
          return {
            host: path
          };
        }
      }
    }
    exports2.splitHostPort = splitHostPort;
    function uriToString(uri) {
      let result = "";
      if (uri.scheme !== void 0) {
        result += uri.scheme + ":";
      }
      if (uri.authority !== void 0) {
        result += "//" + uri.authority + "/";
      }
      result += uri.path;
      return result;
    }
    exports2.uriToString = uriToString;
  }
});

// node_modules/@grpc/grpc-js/build/src/resolver.js
var require_resolver = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mapUriDefaultScheme = exports2.getDefaultAuthority = exports2.createResolver = exports2.registerDefaultScheme = exports2.registerResolver = void 0;
    var uri_parser_1 = require_uri_parser();
    var registeredResolvers = {};
    var defaultScheme = null;
    function registerResolver(scheme, resolverClass) {
      registeredResolvers[scheme] = resolverClass;
    }
    exports2.registerResolver = registerResolver;
    function registerDefaultScheme(scheme) {
      defaultScheme = scheme;
    }
    exports2.registerDefaultScheme = registerDefaultScheme;
    function createResolver(target, listener, options) {
      if (target.scheme !== void 0 && target.scheme in registeredResolvers) {
        return new registeredResolvers[target.scheme](target, listener, options);
      } else {
        throw new Error(`No resolver could be created for target ${(0, uri_parser_1.uriToString)(target)}`);
      }
    }
    exports2.createResolver = createResolver;
    function getDefaultAuthority(target) {
      if (target.scheme !== void 0 && target.scheme in registeredResolvers) {
        return registeredResolvers[target.scheme].getDefaultAuthority(target);
      } else {
        throw new Error(`Invalid target ${(0, uri_parser_1.uriToString)(target)}`);
      }
    }
    exports2.getDefaultAuthority = getDefaultAuthority;
    function mapUriDefaultScheme(target) {
      if (target.scheme === void 0 || !(target.scheme in registeredResolvers)) {
        if (defaultScheme !== null) {
          return {
            scheme: defaultScheme,
            authority: void 0,
            path: (0, uri_parser_1.uriToString)(target)
          };
        } else {
          return null;
        }
      }
      return target;
    }
    exports2.mapUriDefaultScheme = mapUriDefaultScheme;
  }
});

// node_modules/@grpc/grpc-js/build/src/picker.js
var require_picker = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/picker.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.QueuePicker = exports2.UnavailablePicker = exports2.PickResultType = void 0;
    var metadata_1 = require_metadata();
    var constants_1 = require_constants();
    var PickResultType;
    (function(PickResultType2) {
      PickResultType2[PickResultType2["COMPLETE"] = 0] = "COMPLETE";
      PickResultType2[PickResultType2["QUEUE"] = 1] = "QUEUE";
      PickResultType2[PickResultType2["TRANSIENT_FAILURE"] = 2] = "TRANSIENT_FAILURE";
      PickResultType2[PickResultType2["DROP"] = 3] = "DROP";
    })(PickResultType || (exports2.PickResultType = PickResultType = {}));
    var UnavailablePicker = class {
      constructor(status) {
        if (status !== void 0) {
          this.status = status;
        } else {
          this.status = {
            code: constants_1.Status.UNAVAILABLE,
            details: "No connection established",
            metadata: new metadata_1.Metadata()
          };
        }
      }
      pick(pickArgs) {
        return {
          pickResultType: PickResultType.TRANSIENT_FAILURE,
          subchannel: null,
          status: this.status,
          onCallStarted: null,
          onCallEnded: null
        };
      }
    };
    exports2.UnavailablePicker = UnavailablePicker;
    var QueuePicker = class {
      // Constructed with a load balancer. Calls exitIdle on it the first time pick is called
      constructor(loadBalancer) {
        this.loadBalancer = loadBalancer;
        this.calledExitIdle = false;
      }
      pick(pickArgs) {
        if (!this.calledExitIdle) {
          process.nextTick(() => {
            this.loadBalancer.exitIdle();
          });
          this.calledExitIdle = true;
        }
        return {
          pickResultType: PickResultType.QUEUE,
          subchannel: null,
          status: null,
          onCallStarted: null,
          onCallEnded: null
        };
      }
    };
    exports2.QueuePicker = QueuePicker;
  }
});

// node_modules/@grpc/grpc-js/build/src/backoff-timeout.js
var require_backoff_timeout = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/backoff-timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BackoffTimeout = void 0;
    var INITIAL_BACKOFF_MS = 1e3;
    var BACKOFF_MULTIPLIER = 1.6;
    var MAX_BACKOFF_MS = 12e4;
    var BACKOFF_JITTER = 0.2;
    function uniformRandom(min, max) {
      return Math.random() * (max - min) + min;
    }
    var BackoffTimeout = class {
      constructor(callback, options) {
        this.callback = callback;
        this.initialDelay = INITIAL_BACKOFF_MS;
        this.multiplier = BACKOFF_MULTIPLIER;
        this.maxDelay = MAX_BACKOFF_MS;
        this.jitter = BACKOFF_JITTER;
        this.running = false;
        this.hasRef = true;
        this.startTime = /* @__PURE__ */ new Date();
        this.endTime = /* @__PURE__ */ new Date();
        if (options) {
          if (options.initialDelay) {
            this.initialDelay = options.initialDelay;
          }
          if (options.multiplier) {
            this.multiplier = options.multiplier;
          }
          if (options.jitter) {
            this.jitter = options.jitter;
          }
          if (options.maxDelay) {
            this.maxDelay = options.maxDelay;
          }
        }
        this.nextDelay = this.initialDelay;
        this.timerId = setTimeout(() => {
        }, 0);
        clearTimeout(this.timerId);
      }
      runTimer(delay) {
        var _a, _b;
        this.endTime = this.startTime;
        this.endTime.setMilliseconds(this.endTime.getMilliseconds() + this.nextDelay);
        clearTimeout(this.timerId);
        this.timerId = setTimeout(() => {
          this.callback();
          this.running = false;
        }, delay);
        if (!this.hasRef) {
          (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
      }
      /**
       * Call the callback after the current amount of delay time
       */
      runOnce() {
        this.running = true;
        this.startTime = /* @__PURE__ */ new Date();
        this.runTimer(this.nextDelay);
        const nextBackoff = Math.min(this.nextDelay * this.multiplier, this.maxDelay);
        const jitterMagnitude = nextBackoff * this.jitter;
        this.nextDelay = nextBackoff + uniformRandom(-jitterMagnitude, jitterMagnitude);
      }
      /**
       * Stop the timer. The callback will not be called until `runOnce` is called
       * again.
       */
      stop() {
        clearTimeout(this.timerId);
        this.running = false;
      }
      /**
       * Reset the delay time to its initial value. If the timer is still running,
       * retroactively apply that reset to the current timer.
       */
      reset() {
        this.nextDelay = this.initialDelay;
        if (this.running) {
          const now = /* @__PURE__ */ new Date();
          const newEndTime = this.startTime;
          newEndTime.setMilliseconds(newEndTime.getMilliseconds() + this.nextDelay);
          clearTimeout(this.timerId);
          if (now < newEndTime) {
            this.runTimer(newEndTime.getTime() - now.getTime());
          } else {
            this.running = false;
          }
        }
      }
      /**
       * Check whether the timer is currently running.
       */
      isRunning() {
        return this.running;
      }
      /**
       * Set that while the timer is running, it should keep the Node process
       * running.
       */
      ref() {
        var _a, _b;
        this.hasRef = true;
        (_b = (_a = this.timerId).ref) === null || _b === void 0 ? void 0 : _b.call(_a);
      }
      /**
       * Set that while the timer is running, it should not keep the Node process
       * running.
       */
      unref() {
        var _a, _b;
        this.hasRef = false;
        (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
      }
      /**
       * Get the approximate timestamp of when the timer will fire. Only valid if
       * this.isRunning() is true.
       */
      getEndTime() {
        return this.endTime;
      }
    };
    exports2.BackoffTimeout = BackoffTimeout;
  }
});

// node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js
var require_load_balancer_child_handler = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChildLoadBalancerHandler = void 0;
    var load_balancer_1 = require_load_balancer();
    var connectivity_state_1 = require_connectivity_state();
    var TYPE_NAME = "child_load_balancer_helper";
    var ChildLoadBalancerHandler = class {
      constructor(channelControlHelper) {
        this.channelControlHelper = channelControlHelper;
        this.currentChild = null;
        this.pendingChild = null;
        this.latestConfig = null;
        this.ChildPolicyHelper = class {
          constructor(parent) {
            this.parent = parent;
            this.child = null;
          }
          createSubchannel(subchannelAddress, subchannelArgs) {
            return this.parent.channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);
          }
          updateState(connectivityState, picker) {
            var _a;
            if (this.calledByPendingChild()) {
              if (connectivityState === connectivity_state_1.ConnectivityState.CONNECTING) {
                return;
              }
              (_a = this.parent.currentChild) === null || _a === void 0 ? void 0 : _a.destroy();
              this.parent.currentChild = this.parent.pendingChild;
              this.parent.pendingChild = null;
            } else if (!this.calledByCurrentChild()) {
              return;
            }
            this.parent.channelControlHelper.updateState(connectivityState, picker);
          }
          requestReresolution() {
            var _a;
            const latestChild = (_a = this.parent.pendingChild) !== null && _a !== void 0 ? _a : this.parent.currentChild;
            if (this.child === latestChild) {
              this.parent.channelControlHelper.requestReresolution();
            }
          }
          setChild(newChild) {
            this.child = newChild;
          }
          addChannelzChild(child) {
            this.parent.channelControlHelper.addChannelzChild(child);
          }
          removeChannelzChild(child) {
            this.parent.channelControlHelper.removeChannelzChild(child);
          }
          calledByPendingChild() {
            return this.child === this.parent.pendingChild;
          }
          calledByCurrentChild() {
            return this.child === this.parent.currentChild;
          }
        };
      }
      configUpdateRequiresNewPolicyInstance(oldConfig, newConfig) {
        return oldConfig.getLoadBalancerName() !== newConfig.getLoadBalancerName();
      }
      /**
       * Prerequisites: lbConfig !== null and lbConfig.name is registered
       * @param addressList
       * @param lbConfig
       * @param attributes
       */
      updateAddressList(addressList, lbConfig, attributes) {
        let childToUpdate;
        if (this.currentChild === null || this.latestConfig === null || this.configUpdateRequiresNewPolicyInstance(this.latestConfig, lbConfig)) {
          const newHelper = new this.ChildPolicyHelper(this);
          const newChild = (0, load_balancer_1.createLoadBalancer)(lbConfig, newHelper);
          newHelper.setChild(newChild);
          if (this.currentChild === null) {
            this.currentChild = newChild;
            childToUpdate = this.currentChild;
          } else {
            if (this.pendingChild) {
              this.pendingChild.destroy();
            }
            this.pendingChild = newChild;
            childToUpdate = this.pendingChild;
          }
        } else {
          if (this.pendingChild === null) {
            childToUpdate = this.currentChild;
          } else {
            childToUpdate = this.pendingChild;
          }
        }
        this.latestConfig = lbConfig;
        childToUpdate.updateAddressList(addressList, lbConfig, attributes);
      }
      exitIdle() {
        if (this.currentChild) {
          this.currentChild.exitIdle();
          if (this.pendingChild) {
            this.pendingChild.exitIdle();
          }
        }
      }
      resetBackoff() {
        if (this.currentChild) {
          this.currentChild.resetBackoff();
          if (this.pendingChild) {
            this.pendingChild.resetBackoff();
          }
        }
      }
      destroy() {
        if (this.currentChild) {
          this.currentChild.destroy();
          this.currentChild = null;
        }
        if (this.pendingChild) {
          this.pendingChild.destroy();
          this.pendingChild = null;
        }
      }
      getTypeName() {
        return TYPE_NAME;
      }
    };
    exports2.ChildLoadBalancerHandler = ChildLoadBalancerHandler;
  }
});

// node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js
var require_resolving_load_balancer = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ResolvingLoadBalancer = void 0;
    var load_balancer_1 = require_load_balancer();
    var service_config_1 = require_service_config();
    var connectivity_state_1 = require_connectivity_state();
    var resolver_1 = require_resolver();
    var picker_1 = require_picker();
    var backoff_timeout_1 = require_backoff_timeout();
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var logging = require_logging();
    var constants_2 = require_constants();
    var uri_parser_1 = require_uri_parser();
    var load_balancer_child_handler_1 = require_load_balancer_child_handler();
    var TRACER_NAME = "resolving_load_balancer";
    function trace(text) {
      logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var NAME_MATCH_LEVEL_ORDER = [
      "SERVICE_AND_METHOD",
      "SERVICE",
      "EMPTY"
    ];
    function hasMatchingName(service, method, methodConfig, matchLevel) {
      for (const name of methodConfig.name) {
        switch (matchLevel) {
          case "EMPTY":
            if (!name.service && !name.method) {
              return true;
            }
            break;
          case "SERVICE":
            if (name.service === service && !name.method) {
              return true;
            }
            break;
          case "SERVICE_AND_METHOD":
            if (name.service === service && name.method === method) {
              return true;
            }
        }
      }
      return false;
    }
    function findMatchingConfig(service, method, methodConfigs, matchLevel) {
      for (const config of methodConfigs) {
        if (hasMatchingName(service, method, config, matchLevel)) {
          return config;
        }
      }
      return null;
    }
    function getDefaultConfigSelector(serviceConfig) {
      return function defaultConfigSelector(methodName, metadata) {
        var _a, _b;
        const splitName = methodName.split("/").filter((x) => x.length > 0);
        const service = (_a = splitName[0]) !== null && _a !== void 0 ? _a : "";
        const method = (_b = splitName[1]) !== null && _b !== void 0 ? _b : "";
        if (serviceConfig && serviceConfig.methodConfig) {
          for (const matchLevel of NAME_MATCH_LEVEL_ORDER) {
            const matchingConfig = findMatchingConfig(service, method, serviceConfig.methodConfig, matchLevel);
            if (matchingConfig) {
              return {
                methodConfig: matchingConfig,
                pickInformation: {},
                status: constants_1.Status.OK,
                dynamicFilterFactories: []
              };
            }
          }
        }
        return {
          methodConfig: { name: [] },
          pickInformation: {},
          status: constants_1.Status.OK,
          dynamicFilterFactories: []
        };
      };
    }
    var ResolvingLoadBalancer = class {
      /**
       * Wrapper class that behaves like a `LoadBalancer` and also handles name
       * resolution internally.
       * @param target The address of the backend to connect to.
       * @param channelControlHelper `ChannelControlHelper` instance provided by
       *     this load balancer's owner.
       * @param defaultServiceConfig The default service configuration to be used
       *     if none is provided by the name resolver. A `null` value indicates
       *     that the default behavior should be the default unconfigured behavior.
       *     In practice, that means using the "pick first" load balancer
       *     implmentation
       */
      constructor(target, channelControlHelper, channelOptions, onSuccessfulResolution, onFailedResolution) {
        this.target = target;
        this.channelControlHelper = channelControlHelper;
        this.onSuccessfulResolution = onSuccessfulResolution;
        this.onFailedResolution = onFailedResolution;
        this.latestChildState = connectivity_state_1.ConnectivityState.IDLE;
        this.latestChildPicker = new picker_1.QueuePicker(this);
        this.currentState = connectivity_state_1.ConnectivityState.IDLE;
        this.previousServiceConfig = null;
        this.continueResolving = false;
        if (channelOptions["grpc.service_config"]) {
          this.defaultServiceConfig = (0, service_config_1.validateServiceConfig)(JSON.parse(channelOptions["grpc.service_config"]));
        } else {
          this.defaultServiceConfig = {
            loadBalancingConfig: [],
            methodConfig: []
          };
        }
        this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));
        this.childLoadBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler({
          createSubchannel: channelControlHelper.createSubchannel.bind(channelControlHelper),
          requestReresolution: () => {
            if (this.backoffTimeout.isRunning()) {
              trace("requestReresolution delayed by backoff timer until " + this.backoffTimeout.getEndTime().toISOString());
              this.continueResolving = true;
            } else {
              this.updateResolution();
            }
          },
          updateState: (newState, picker) => {
            this.latestChildState = newState;
            this.latestChildPicker = picker;
            this.updateState(newState, picker);
          },
          addChannelzChild: channelControlHelper.addChannelzChild.bind(channelControlHelper),
          removeChannelzChild: channelControlHelper.removeChannelzChild.bind(channelControlHelper)
        });
        this.innerResolver = (0, resolver_1.createResolver)(target, {
          onSuccessfulResolution: (addressList, serviceConfig, serviceConfigError, configSelector, attributes) => {
            var _a;
            this.backoffTimeout.stop();
            this.backoffTimeout.reset();
            let workingServiceConfig = null;
            if (serviceConfig === null) {
              if (serviceConfigError === null) {
                this.previousServiceConfig = null;
                workingServiceConfig = this.defaultServiceConfig;
              } else {
                if (this.previousServiceConfig === null) {
                  this.handleResolutionFailure(serviceConfigError);
                } else {
                  workingServiceConfig = this.previousServiceConfig;
                }
              }
            } else {
              workingServiceConfig = serviceConfig;
              this.previousServiceConfig = serviceConfig;
            }
            const workingConfigList = (_a = workingServiceConfig === null || workingServiceConfig === void 0 ? void 0 : workingServiceConfig.loadBalancingConfig) !== null && _a !== void 0 ? _a : [];
            const loadBalancingConfig = (0, load_balancer_1.getFirstUsableConfig)(workingConfigList, true);
            if (loadBalancingConfig === null) {
              this.handleResolutionFailure({
                code: constants_1.Status.UNAVAILABLE,
                details: "All load balancer options in service config are not compatible",
                metadata: new metadata_1.Metadata()
              });
              return;
            }
            this.childLoadBalancer.updateAddressList(addressList, loadBalancingConfig, attributes);
            const finalServiceConfig = workingServiceConfig !== null && workingServiceConfig !== void 0 ? workingServiceConfig : this.defaultServiceConfig;
            this.onSuccessfulResolution(finalServiceConfig, configSelector !== null && configSelector !== void 0 ? configSelector : getDefaultConfigSelector(finalServiceConfig));
          },
          onError: (error) => {
            this.handleResolutionFailure(error);
          }
        }, channelOptions);
        const backoffOptions = {
          initialDelay: channelOptions["grpc.initial_reconnect_backoff_ms"],
          maxDelay: channelOptions["grpc.max_reconnect_backoff_ms"]
        };
        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {
          if (this.continueResolving) {
            this.updateResolution();
            this.continueResolving = false;
          } else {
            this.updateState(this.latestChildState, this.latestChildPicker);
          }
        }, backoffOptions);
        this.backoffTimeout.unref();
      }
      updateResolution() {
        this.innerResolver.updateResolution();
        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE) {
          this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
        }
        this.backoffTimeout.runOnce();
      }
      updateState(connectivityState, picker) {
        trace((0, uri_parser_1.uriToString)(this.target) + " " + connectivity_state_1.ConnectivityState[this.currentState] + " -> " + connectivity_state_1.ConnectivityState[connectivityState]);
        if (connectivityState === connectivity_state_1.ConnectivityState.IDLE) {
          picker = new picker_1.QueuePicker(this);
        }
        this.currentState = connectivityState;
        this.channelControlHelper.updateState(connectivityState, picker);
      }
      handleResolutionFailure(error) {
        if (this.latestChildState === connectivity_state_1.ConnectivityState.IDLE) {
          this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker(error));
          this.onFailedResolution(error);
        }
      }
      exitIdle() {
        if (this.currentState === connectivity_state_1.ConnectivityState.IDLE || this.currentState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {
          if (this.backoffTimeout.isRunning()) {
            this.continueResolving = true;
          } else {
            this.updateResolution();
          }
        }
        this.childLoadBalancer.exitIdle();
      }
      updateAddressList(addressList, lbConfig) {
        throw new Error("updateAddressList not supported on ResolvingLoadBalancer");
      }
      resetBackoff() {
        this.backoffTimeout.reset();
        this.childLoadBalancer.resetBackoff();
      }
      destroy() {
        this.childLoadBalancer.destroy();
        this.innerResolver.destroy();
        this.backoffTimeout.reset();
        this.backoffTimeout.stop();
        this.latestChildState = connectivity_state_1.ConnectivityState.IDLE;
        this.latestChildPicker = new picker_1.QueuePicker(this);
        this.currentState = connectivity_state_1.ConnectivityState.IDLE;
        this.previousServiceConfig = null;
        this.continueResolving = false;
      }
      getTypeName() {
        return "resolving_load_balancer";
      }
    };
    exports2.ResolvingLoadBalancer = ResolvingLoadBalancer;
  }
});

// node_modules/@grpc/grpc-js/build/src/channel-options.js
var require_channel_options = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/channel-options.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.channelOptionsEqual = exports2.recognizedOptions = void 0;
    exports2.recognizedOptions = {
      "grpc.ssl_target_name_override": true,
      "grpc.primary_user_agent": true,
      "grpc.secondary_user_agent": true,
      "grpc.default_authority": true,
      "grpc.keepalive_time_ms": true,
      "grpc.keepalive_timeout_ms": true,
      "grpc.keepalive_permit_without_calls": true,
      "grpc.service_config": true,
      "grpc.max_concurrent_streams": true,
      "grpc.initial_reconnect_backoff_ms": true,
      "grpc.max_reconnect_backoff_ms": true,
      "grpc.use_local_subchannel_pool": true,
      "grpc.max_send_message_length": true,
      "grpc.max_receive_message_length": true,
      "grpc.enable_http_proxy": true,
      "grpc.enable_channelz": true,
      "grpc.dns_min_time_between_resolutions_ms": true,
      "grpc.enable_retries": true,
      "grpc.per_rpc_retry_buffer_size": true,
      "grpc.retry_buffer_size": true,
      "grpc.max_connection_age_ms": true,
      "grpc.max_connection_age_grace_ms": true,
      "grpc-node.max_session_memory": true,
      "grpc.service_config_disable_resolution": true,
      "grpc.client_idle_timeout_ms": true,
      "grpc-node.tls_enable_trace": true
    };
    function channelOptionsEqual(options1, options2) {
      const keys1 = Object.keys(options1).sort();
      const keys2 = Object.keys(options2).sort();
      if (keys1.length !== keys2.length) {
        return false;
      }
      for (let i = 0; i < keys1.length; i += 1) {
        if (keys1[i] !== keys2[i]) {
          return false;
        }
        if (options1[keys1[i]] !== options2[keys2[i]]) {
          return false;
        }
      }
      return true;
    }
    exports2.channelOptionsEqual = channelOptionsEqual;
  }
});

// node_modules/@grpc/grpc-js/build/src/subchannel-address.js
var require_subchannel_address = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/subchannel-address.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringToSubchannelAddress = exports2.subchannelAddressToString = exports2.subchannelAddressEqual = exports2.isTcpSubchannelAddress = void 0;
    var net_1 = require("net");
    function isTcpSubchannelAddress(address) {
      return "port" in address;
    }
    exports2.isTcpSubchannelAddress = isTcpSubchannelAddress;
    function subchannelAddressEqual(address1, address2) {
      if (!address1 && !address2) {
        return true;
      }
      if (!address1 || !address2) {
        return false;
      }
      if (isTcpSubchannelAddress(address1)) {
        return isTcpSubchannelAddress(address2) && address1.host === address2.host && address1.port === address2.port;
      } else {
        return !isTcpSubchannelAddress(address2) && address1.path === address2.path;
      }
    }
    exports2.subchannelAddressEqual = subchannelAddressEqual;
    function subchannelAddressToString(address) {
      if (isTcpSubchannelAddress(address)) {
        return address.host + ":" + address.port;
      } else {
        return address.path;
      }
    }
    exports2.subchannelAddressToString = subchannelAddressToString;
    var DEFAULT_PORT = 443;
    function stringToSubchannelAddress(addressString, port) {
      if ((0, net_1.isIP)(addressString)) {
        return {
          host: addressString,
          port: port !== null && port !== void 0 ? port : DEFAULT_PORT
        };
      } else {
        return {
          path: addressString
        };
      }
    }
    exports2.stringToSubchannelAddress = stringToSubchannelAddress;
  }
});

// node_modules/@grpc/grpc-js/build/src/admin.js
var require_admin = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/admin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.addAdminServicesToServer = exports2.registerAdminService = void 0;
    var registeredAdminServices = [];
    function registerAdminService(getServiceDefinition, getHandlers) {
      registeredAdminServices.push({ getServiceDefinition, getHandlers });
    }
    exports2.registerAdminService = registerAdminService;
    function addAdminServicesToServer(server) {
      for (const { getServiceDefinition, getHandlers } of registeredAdminServices) {
        server.addService(getServiceDefinition(), getHandlers());
      }
    }
    exports2.addAdminServicesToServer = addAdminServicesToServer;
  }
});

// node_modules/@grpc/grpc-js/build/src/call.js
var require_call = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/call.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ClientDuplexStreamImpl = exports2.ClientWritableStreamImpl = exports2.ClientReadableStreamImpl = exports2.ClientUnaryCallImpl = exports2.callErrorFromStatus = void 0;
    var events_1 = require("events");
    var stream_1 = require("stream");
    var constants_1 = require_constants();
    function callErrorFromStatus(status, callerStack) {
      const message = `${status.code} ${constants_1.Status[status.code]}: ${status.details}`;
      const error = new Error(message);
      const stack = `${error.stack}
for call at
${callerStack}`;
      return Object.assign(new Error(message), status, { stack });
    }
    exports2.callErrorFromStatus = callErrorFromStatus;
    var ClientUnaryCallImpl = class extends events_1.EventEmitter {
      constructor() {
        super();
      }
      cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, "Cancelled on client");
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
      }
    };
    exports2.ClientUnaryCallImpl = ClientUnaryCallImpl;
    var ClientReadableStreamImpl = class extends stream_1.Readable {
      constructor(deserialize) {
        super({ objectMode: true });
        this.deserialize = deserialize;
      }
      cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, "Cancelled on client");
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
      }
      _read(_size) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();
      }
    };
    exports2.ClientReadableStreamImpl = ClientReadableStreamImpl;
    var ClientWritableStreamImpl = class extends stream_1.Writable {
      constructor(serialize) {
        super({ objectMode: true });
        this.serialize = serialize;
      }
      cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, "Cancelled on client");
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
      }
      _write(chunk, encoding, cb) {
        var _a;
        const context = {
          callback: cb
        };
        const flags = Number(encoding);
        if (!Number.isNaN(flags)) {
          context.flags = flags;
        }
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);
      }
      _final(cb) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();
        cb();
      }
    };
    exports2.ClientWritableStreamImpl = ClientWritableStreamImpl;
    var ClientDuplexStreamImpl = class extends stream_1.Duplex {
      constructor(serialize, deserialize) {
        super({ objectMode: true });
        this.serialize = serialize;
        this.deserialize = deserialize;
      }
      cancel() {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, "Cancelled on client");
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
      }
      _read(_size) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();
      }
      _write(chunk, encoding, cb) {
        var _a;
        const context = {
          callback: cb
        };
        const flags = Number(encoding);
        if (!Number.isNaN(flags)) {
          context.flags = flags;
        }
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);
      }
      _final(cb) {
        var _a;
        (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();
        cb();
      }
    };
    exports2.ClientDuplexStreamImpl = ClientDuplexStreamImpl;
  }
});

// node_modules/@grpc/grpc-js/build/src/call-interface.js
var require_call_interface = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/call-interface.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InterceptingListenerImpl = exports2.isInterceptingListener = void 0;
    function isInterceptingListener(listener) {
      return listener.onReceiveMetadata !== void 0 && listener.onReceiveMetadata.length === 1;
    }
    exports2.isInterceptingListener = isInterceptingListener;
    var InterceptingListenerImpl = class {
      constructor(listener, nextListener) {
        this.listener = listener;
        this.nextListener = nextListener;
        this.processingMetadata = false;
        this.hasPendingMessage = false;
        this.processingMessage = false;
        this.pendingStatus = null;
      }
      processPendingMessage() {
        if (this.hasPendingMessage) {
          this.nextListener.onReceiveMessage(this.pendingMessage);
          this.pendingMessage = null;
          this.hasPendingMessage = false;
        }
      }
      processPendingStatus() {
        if (this.pendingStatus) {
          this.nextListener.onReceiveStatus(this.pendingStatus);
        }
      }
      onReceiveMetadata(metadata) {
        this.processingMetadata = true;
        this.listener.onReceiveMetadata(metadata, (metadata2) => {
          this.processingMetadata = false;
          this.nextListener.onReceiveMetadata(metadata2);
          this.processPendingMessage();
          this.processPendingStatus();
        });
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      onReceiveMessage(message) {
        this.processingMessage = true;
        this.listener.onReceiveMessage(message, (msg) => {
          this.processingMessage = false;
          if (this.processingMetadata) {
            this.pendingMessage = msg;
            this.hasPendingMessage = true;
          } else {
            this.nextListener.onReceiveMessage(msg);
            this.processPendingStatus();
          }
        });
      }
      onReceiveStatus(status) {
        this.listener.onReceiveStatus(status, (processedStatus) => {
          if (this.processingMetadata || this.processingMessage) {
            this.pendingStatus = processedStatus;
          } else {
            this.nextListener.onReceiveStatus(processedStatus);
          }
        });
      }
    };
    exports2.InterceptingListenerImpl = InterceptingListenerImpl;
  }
});

// node_modules/@grpc/grpc-js/build/src/client-interceptors.js
var require_client_interceptors = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/client-interceptors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getInterceptingCall = exports2.InterceptingCall = exports2.RequesterBuilder = exports2.ListenerBuilder = exports2.InterceptorConfigurationError = void 0;
    var metadata_1 = require_metadata();
    var call_interface_1 = require_call_interface();
    var constants_1 = require_constants();
    var error_1 = require_error();
    var InterceptorConfigurationError = class _InterceptorConfigurationError extends Error {
      constructor(message) {
        super(message);
        this.name = "InterceptorConfigurationError";
        Error.captureStackTrace(this, _InterceptorConfigurationError);
      }
    };
    exports2.InterceptorConfigurationError = InterceptorConfigurationError;
    var ListenerBuilder = class {
      constructor() {
        this.metadata = void 0;
        this.message = void 0;
        this.status = void 0;
      }
      withOnReceiveMetadata(onReceiveMetadata) {
        this.metadata = onReceiveMetadata;
        return this;
      }
      withOnReceiveMessage(onReceiveMessage) {
        this.message = onReceiveMessage;
        return this;
      }
      withOnReceiveStatus(onReceiveStatus) {
        this.status = onReceiveStatus;
        return this;
      }
      build() {
        return {
          onReceiveMetadata: this.metadata,
          onReceiveMessage: this.message,
          onReceiveStatus: this.status
        };
      }
    };
    exports2.ListenerBuilder = ListenerBuilder;
    var RequesterBuilder = class {
      constructor() {
        this.start = void 0;
        this.message = void 0;
        this.halfClose = void 0;
        this.cancel = void 0;
      }
      withStart(start) {
        this.start = start;
        return this;
      }
      withSendMessage(sendMessage) {
        this.message = sendMessage;
        return this;
      }
      withHalfClose(halfClose) {
        this.halfClose = halfClose;
        return this;
      }
      withCancel(cancel) {
        this.cancel = cancel;
        return this;
      }
      build() {
        return {
          start: this.start,
          sendMessage: this.message,
          halfClose: this.halfClose,
          cancel: this.cancel
        };
      }
    };
    exports2.RequesterBuilder = RequesterBuilder;
    var defaultListener = {
      onReceiveMetadata: (metadata, next) => {
        next(metadata);
      },
      onReceiveMessage: (message, next) => {
        next(message);
      },
      onReceiveStatus: (status, next) => {
        next(status);
      }
    };
    var defaultRequester = {
      start: (metadata, listener, next) => {
        next(metadata, listener);
      },
      sendMessage: (message, next) => {
        next(message);
      },
      halfClose: (next) => {
        next();
      },
      cancel: (next) => {
        next();
      }
    };
    var InterceptingCall = class {
      constructor(nextCall, requester) {
        var _a, _b, _c, _d;
        this.nextCall = nextCall;
        this.processingMetadata = false;
        this.pendingMessageContext = null;
        this.processingMessage = false;
        this.pendingHalfClose = false;
        if (requester) {
          this.requester = {
            start: (_a = requester.start) !== null && _a !== void 0 ? _a : defaultRequester.start,
            sendMessage: (_b = requester.sendMessage) !== null && _b !== void 0 ? _b : defaultRequester.sendMessage,
            halfClose: (_c = requester.halfClose) !== null && _c !== void 0 ? _c : defaultRequester.halfClose,
            cancel: (_d = requester.cancel) !== null && _d !== void 0 ? _d : defaultRequester.cancel
          };
        } else {
          this.requester = defaultRequester;
        }
      }
      cancelWithStatus(status, details) {
        this.requester.cancel(() => {
          this.nextCall.cancelWithStatus(status, details);
        });
      }
      getPeer() {
        return this.nextCall.getPeer();
      }
      processPendingMessage() {
        if (this.pendingMessageContext) {
          this.nextCall.sendMessageWithContext(this.pendingMessageContext, this.pendingMessage);
          this.pendingMessageContext = null;
          this.pendingMessage = null;
        }
      }
      processPendingHalfClose() {
        if (this.pendingHalfClose) {
          this.nextCall.halfClose();
        }
      }
      start(metadata, interceptingListener) {
        var _a, _b, _c, _d, _e, _f;
        const fullInterceptingListener = {
          onReceiveMetadata: (_b = (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(interceptingListener)) !== null && _b !== void 0 ? _b : (metadata2) => {
          },
          onReceiveMessage: (_d = (_c = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _c === void 0 ? void 0 : _c.bind(interceptingListener)) !== null && _d !== void 0 ? _d : (message) => {
          },
          onReceiveStatus: (_f = (_e = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _e === void 0 ? void 0 : _e.bind(interceptingListener)) !== null && _f !== void 0 ? _f : (status) => {
          }
        };
        this.processingMetadata = true;
        this.requester.start(metadata, fullInterceptingListener, (md, listener) => {
          var _a2, _b2, _c2;
          this.processingMetadata = false;
          let finalInterceptingListener;
          if ((0, call_interface_1.isInterceptingListener)(listener)) {
            finalInterceptingListener = listener;
          } else {
            const fullListener = {
              onReceiveMetadata: (_a2 = listener.onReceiveMetadata) !== null && _a2 !== void 0 ? _a2 : defaultListener.onReceiveMetadata,
              onReceiveMessage: (_b2 = listener.onReceiveMessage) !== null && _b2 !== void 0 ? _b2 : defaultListener.onReceiveMessage,
              onReceiveStatus: (_c2 = listener.onReceiveStatus) !== null && _c2 !== void 0 ? _c2 : defaultListener.onReceiveStatus
            };
            finalInterceptingListener = new call_interface_1.InterceptingListenerImpl(fullListener, fullInterceptingListener);
          }
          this.nextCall.start(md, finalInterceptingListener);
          this.processPendingMessage();
          this.processPendingHalfClose();
        });
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      sendMessageWithContext(context, message) {
        this.processingMessage = true;
        this.requester.sendMessage(message, (finalMessage) => {
          this.processingMessage = false;
          if (this.processingMetadata) {
            this.pendingMessageContext = context;
            this.pendingMessage = message;
          } else {
            this.nextCall.sendMessageWithContext(context, finalMessage);
            this.processPendingHalfClose();
          }
        });
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      sendMessage(message) {
        this.sendMessageWithContext({}, message);
      }
      startRead() {
        this.nextCall.startRead();
      }
      halfClose() {
        this.requester.halfClose(() => {
          if (this.processingMetadata || this.processingMessage) {
            this.pendingHalfClose = true;
          } else {
            this.nextCall.halfClose();
          }
        });
      }
    };
    exports2.InterceptingCall = InterceptingCall;
    function getCall(channel, path, options) {
      var _a, _b;
      const deadline = (_a = options.deadline) !== null && _a !== void 0 ? _a : Infinity;
      const host = options.host;
      const parent = (_b = options.parent) !== null && _b !== void 0 ? _b : null;
      const propagateFlags = options.propagate_flags;
      const credentials = options.credentials;
      const call = channel.createCall(path, deadline, host, parent, propagateFlags);
      if (credentials) {
        call.setCredentials(credentials);
      }
      return call;
    }
    var BaseInterceptingCall = class {
      constructor(call, methodDefinition) {
        this.call = call;
        this.methodDefinition = methodDefinition;
      }
      cancelWithStatus(status, details) {
        this.call.cancelWithStatus(status, details);
      }
      getPeer() {
        return this.call.getPeer();
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      sendMessageWithContext(context, message) {
        let serialized;
        try {
          serialized = this.methodDefinition.requestSerialize(message);
        } catch (e) {
          this.call.cancelWithStatus(constants_1.Status.INTERNAL, `Request message serialization failure: ${(0, error_1.getErrorMessage)(e)}`);
          return;
        }
        this.call.sendMessageWithContext(context, serialized);
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      sendMessage(message) {
        this.sendMessageWithContext({}, message);
      }
      start(metadata, interceptingListener) {
        let readError = null;
        this.call.start(metadata, {
          onReceiveMetadata: (metadata2) => {
            var _a;
            (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, metadata2);
          },
          onReceiveMessage: (message) => {
            var _a;
            let deserialized;
            try {
              deserialized = this.methodDefinition.responseDeserialize(message);
            } catch (e) {
              readError = {
                code: constants_1.Status.INTERNAL,
                details: `Response message parsing error: ${(0, error_1.getErrorMessage)(e)}`,
                metadata: new metadata_1.Metadata()
              };
              this.call.cancelWithStatus(readError.code, readError.details);
              return;
            }
            (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, deserialized);
          },
          onReceiveStatus: (status) => {
            var _a, _b;
            if (readError) {
              (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, readError);
            } else {
              (_b = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(interceptingListener, status);
            }
          }
        });
      }
      startRead() {
        this.call.startRead();
      }
      halfClose() {
        this.call.halfClose();
      }
    };
    var BaseUnaryInterceptingCall = class extends BaseInterceptingCall {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      constructor(call, methodDefinition) {
        super(call, methodDefinition);
      }
      start(metadata, listener) {
        var _a, _b;
        let receivedMessage = false;
        const wrapperListener = {
          onReceiveMetadata: (_b = (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(listener)) !== null && _b !== void 0 ? _b : (metadata2) => {
          },
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          onReceiveMessage: (message) => {
            var _a2;
            receivedMessage = true;
            (_a2 = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a2 === void 0 ? void 0 : _a2.call(listener, message);
          },
          onReceiveStatus: (status) => {
            var _a2, _b2;
            if (!receivedMessage) {
              (_a2 = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a2 === void 0 ? void 0 : _a2.call(listener, null);
            }
            (_b2 = listener === null || listener === void 0 ? void 0 : listener.onReceiveStatus) === null || _b2 === void 0 ? void 0 : _b2.call(listener, status);
          }
        };
        super.start(metadata, wrapperListener);
        this.call.startRead();
      }
    };
    var BaseStreamingInterceptingCall = class extends BaseInterceptingCall {
    };
    function getBottomInterceptingCall(channel, options, methodDefinition) {
      const call = getCall(channel, methodDefinition.path, options);
      if (methodDefinition.responseStream) {
        return new BaseStreamingInterceptingCall(call, methodDefinition);
      } else {
        return new BaseUnaryInterceptingCall(call, methodDefinition);
      }
    }
    function getInterceptingCall(interceptorArgs, methodDefinition, options, channel) {
      if (interceptorArgs.clientInterceptors.length > 0 && interceptorArgs.clientInterceptorProviders.length > 0) {
        throw new InterceptorConfigurationError("Both interceptors and interceptor_providers were passed as options to the client constructor. Only one of these is allowed.");
      }
      if (interceptorArgs.callInterceptors.length > 0 && interceptorArgs.callInterceptorProviders.length > 0) {
        throw new InterceptorConfigurationError("Both interceptors and interceptor_providers were passed as call options. Only one of these is allowed.");
      }
      let interceptors = [];
      if (interceptorArgs.callInterceptors.length > 0 || interceptorArgs.callInterceptorProviders.length > 0) {
        interceptors = [].concat(interceptorArgs.callInterceptors, interceptorArgs.callInterceptorProviders.map((provider) => provider(methodDefinition))).filter((interceptor) => interceptor);
      } else {
        interceptors = [].concat(interceptorArgs.clientInterceptors, interceptorArgs.clientInterceptorProviders.map((provider) => provider(methodDefinition))).filter((interceptor) => interceptor);
      }
      const interceptorOptions = Object.assign({}, options, {
        method_definition: methodDefinition
      });
      const getCall2 = interceptors.reduceRight((nextCall, nextInterceptor) => {
        return (currentOptions) => nextInterceptor(currentOptions, nextCall);
      }, (finalOptions) => getBottomInterceptingCall(channel, finalOptions, methodDefinition));
      return getCall2(interceptorOptions);
    }
    exports2.getInterceptingCall = getInterceptingCall;
  }
});

// node_modules/@grpc/grpc-js/build/src/client.js
var require_client = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Client = void 0;
    var call_1 = require_call();
    var channel_1 = require_channel();
    var connectivity_state_1 = require_connectivity_state();
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var client_interceptors_1 = require_client_interceptors();
    var CHANNEL_SYMBOL = Symbol();
    var INTERCEPTOR_SYMBOL = Symbol();
    var INTERCEPTOR_PROVIDER_SYMBOL = Symbol();
    var CALL_INVOCATION_TRANSFORMER_SYMBOL = Symbol();
    function isFunction(arg) {
      return typeof arg === "function";
    }
    function getErrorStackString(error) {
      return error.stack.split("\n").slice(1).join("\n");
    }
    var Client = class {
      constructor(address, credentials, options = {}) {
        var _a, _b;
        options = Object.assign({}, options);
        this[INTERCEPTOR_SYMBOL] = (_a = options.interceptors) !== null && _a !== void 0 ? _a : [];
        delete options.interceptors;
        this[INTERCEPTOR_PROVIDER_SYMBOL] = (_b = options.interceptor_providers) !== null && _b !== void 0 ? _b : [];
        delete options.interceptor_providers;
        if (this[INTERCEPTOR_SYMBOL].length > 0 && this[INTERCEPTOR_PROVIDER_SYMBOL].length > 0) {
          throw new Error("Both interceptors and interceptor_providers were passed as options to the client constructor. Only one of these is allowed.");
        }
        this[CALL_INVOCATION_TRANSFORMER_SYMBOL] = options.callInvocationTransformer;
        delete options.callInvocationTransformer;
        if (options.channelOverride) {
          this[CHANNEL_SYMBOL] = options.channelOverride;
        } else if (options.channelFactoryOverride) {
          const channelFactoryOverride = options.channelFactoryOverride;
          delete options.channelFactoryOverride;
          this[CHANNEL_SYMBOL] = channelFactoryOverride(address, credentials, options);
        } else {
          this[CHANNEL_SYMBOL] = new channel_1.ChannelImplementation(address, credentials, options);
        }
      }
      close() {
        this[CHANNEL_SYMBOL].close();
      }
      getChannel() {
        return this[CHANNEL_SYMBOL];
      }
      waitForReady(deadline, callback) {
        const checkState = (err) => {
          if (err) {
            callback(new Error("Failed to connect before the deadline"));
            return;
          }
          let newState;
          try {
            newState = this[CHANNEL_SYMBOL].getConnectivityState(true);
          } catch (e) {
            callback(new Error("The channel has been closed"));
            return;
          }
          if (newState === connectivity_state_1.ConnectivityState.READY) {
            callback();
          } else {
            try {
              this[CHANNEL_SYMBOL].watchConnectivityState(newState, deadline, checkState);
            } catch (e) {
              callback(new Error("The channel has been closed"));
            }
          }
        };
        setImmediate(checkState);
      }
      checkOptionalUnaryResponseArguments(arg1, arg2, arg3) {
        if (isFunction(arg1)) {
          return { metadata: new metadata_1.Metadata(), options: {}, callback: arg1 };
        } else if (isFunction(arg2)) {
          if (arg1 instanceof metadata_1.Metadata) {
            return { metadata: arg1, options: {}, callback: arg2 };
          } else {
            return { metadata: new metadata_1.Metadata(), options: arg1, callback: arg2 };
          }
        } else {
          if (!(arg1 instanceof metadata_1.Metadata && arg2 instanceof Object && isFunction(arg3))) {
            throw new Error("Incorrect arguments passed");
          }
          return { metadata: arg1, options: arg2, callback: arg3 };
        }
      }
      makeUnaryRequest(method, serialize, deserialize, argument, metadata, options, callback) {
        var _a, _b;
        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);
        const methodDefinition = {
          path: method,
          requestStream: false,
          responseStream: false,
          requestSerialize: serialize,
          responseDeserialize: deserialize
        };
        let callProperties = {
          argument,
          metadata: checkedArguments.metadata,
          call: new call_1.ClientUnaryCallImpl(),
          channel: this[CHANNEL_SYMBOL],
          methodDefinition,
          callOptions: checkedArguments.options,
          callback: checkedArguments.callback
        };
        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
          callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
        }
        const emitter = callProperties.call;
        const interceptorArgs = {
          clientInterceptors: this[INTERCEPTOR_SYMBOL],
          clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
          callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
          callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
        };
        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
        emitter.call = call;
        let responseMessage = null;
        let receivedStatus = false;
        let callerStackError = new Error();
        call.start(callProperties.metadata, {
          onReceiveMetadata: (metadata2) => {
            emitter.emit("metadata", metadata2);
          },
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          onReceiveMessage(message) {
            if (responseMessage !== null) {
              call.cancelWithStatus(constants_1.Status.INTERNAL, "Too many responses received");
            }
            responseMessage = message;
          },
          onReceiveStatus(status) {
            if (receivedStatus) {
              return;
            }
            receivedStatus = true;
            if (status.code === constants_1.Status.OK) {
              if (responseMessage === null) {
                const callerStack = getErrorStackString(callerStackError);
                callProperties.callback((0, call_1.callErrorFromStatus)({
                  code: constants_1.Status.INTERNAL,
                  details: "No message received",
                  metadata: status.metadata
                }, callerStack));
              } else {
                callProperties.callback(null, responseMessage);
              }
            } else {
              const callerStack = getErrorStackString(callerStackError);
              callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));
            }
            callerStackError = null;
            emitter.emit("status", status);
          }
        });
        call.sendMessage(argument);
        call.halfClose();
        return emitter;
      }
      makeClientStreamRequest(method, serialize, deserialize, metadata, options, callback) {
        var _a, _b;
        const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);
        const methodDefinition = {
          path: method,
          requestStream: true,
          responseStream: false,
          requestSerialize: serialize,
          responseDeserialize: deserialize
        };
        let callProperties = {
          metadata: checkedArguments.metadata,
          call: new call_1.ClientWritableStreamImpl(serialize),
          channel: this[CHANNEL_SYMBOL],
          methodDefinition,
          callOptions: checkedArguments.options,
          callback: checkedArguments.callback
        };
        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
          callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
        }
        const emitter = callProperties.call;
        const interceptorArgs = {
          clientInterceptors: this[INTERCEPTOR_SYMBOL],
          clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
          callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
          callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
        };
        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
        emitter.call = call;
        let responseMessage = null;
        let receivedStatus = false;
        let callerStackError = new Error();
        call.start(callProperties.metadata, {
          onReceiveMetadata: (metadata2) => {
            emitter.emit("metadata", metadata2);
          },
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          onReceiveMessage(message) {
            if (responseMessage !== null) {
              call.cancelWithStatus(constants_1.Status.INTERNAL, "Too many responses received");
            }
            responseMessage = message;
          },
          onReceiveStatus(status) {
            if (receivedStatus) {
              return;
            }
            receivedStatus = true;
            if (status.code === constants_1.Status.OK) {
              if (responseMessage === null) {
                const callerStack = getErrorStackString(callerStackError);
                callProperties.callback((0, call_1.callErrorFromStatus)({
                  code: constants_1.Status.INTERNAL,
                  details: "No message received",
                  metadata: status.metadata
                }, callerStack));
              } else {
                callProperties.callback(null, responseMessage);
              }
            } else {
              const callerStack = getErrorStackString(callerStackError);
              callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));
            }
            callerStackError = null;
            emitter.emit("status", status);
          }
        });
        return emitter;
      }
      checkMetadataAndOptions(arg1, arg2) {
        let metadata;
        let options;
        if (arg1 instanceof metadata_1.Metadata) {
          metadata = arg1;
          if (arg2) {
            options = arg2;
          } else {
            options = {};
          }
        } else {
          if (arg1) {
            options = arg1;
          } else {
            options = {};
          }
          metadata = new metadata_1.Metadata();
        }
        return { metadata, options };
      }
      makeServerStreamRequest(method, serialize, deserialize, argument, metadata, options) {
        var _a, _b;
        const checkedArguments = this.checkMetadataAndOptions(metadata, options);
        const methodDefinition = {
          path: method,
          requestStream: false,
          responseStream: true,
          requestSerialize: serialize,
          responseDeserialize: deserialize
        };
        let callProperties = {
          argument,
          metadata: checkedArguments.metadata,
          call: new call_1.ClientReadableStreamImpl(deserialize),
          channel: this[CHANNEL_SYMBOL],
          methodDefinition,
          callOptions: checkedArguments.options
        };
        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
          callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
        }
        const stream = callProperties.call;
        const interceptorArgs = {
          clientInterceptors: this[INTERCEPTOR_SYMBOL],
          clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
          callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
          callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
        };
        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
        stream.call = call;
        let receivedStatus = false;
        let callerStackError = new Error();
        call.start(callProperties.metadata, {
          onReceiveMetadata(metadata2) {
            stream.emit("metadata", metadata2);
          },
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          onReceiveMessage(message) {
            stream.push(message);
          },
          onReceiveStatus(status) {
            if (receivedStatus) {
              return;
            }
            receivedStatus = true;
            stream.push(null);
            if (status.code !== constants_1.Status.OK) {
              const callerStack = getErrorStackString(callerStackError);
              stream.emit("error", (0, call_1.callErrorFromStatus)(status, callerStack));
            }
            callerStackError = null;
            stream.emit("status", status);
          }
        });
        call.sendMessage(argument);
        call.halfClose();
        return stream;
      }
      makeBidiStreamRequest(method, serialize, deserialize, metadata, options) {
        var _a, _b;
        const checkedArguments = this.checkMetadataAndOptions(metadata, options);
        const methodDefinition = {
          path: method,
          requestStream: true,
          responseStream: true,
          requestSerialize: serialize,
          responseDeserialize: deserialize
        };
        let callProperties = {
          metadata: checkedArguments.metadata,
          call: new call_1.ClientDuplexStreamImpl(serialize, deserialize),
          channel: this[CHANNEL_SYMBOL],
          methodDefinition,
          callOptions: checkedArguments.options
        };
        if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
          callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
        }
        const stream = callProperties.call;
        const interceptorArgs = {
          clientInterceptors: this[INTERCEPTOR_SYMBOL],
          clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
          callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
          callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
        };
        const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
        stream.call = call;
        let receivedStatus = false;
        let callerStackError = new Error();
        call.start(callProperties.metadata, {
          onReceiveMetadata(metadata2) {
            stream.emit("metadata", metadata2);
          },
          onReceiveMessage(message) {
            stream.push(message);
          },
          onReceiveStatus(status) {
            if (receivedStatus) {
              return;
            }
            receivedStatus = true;
            stream.push(null);
            if (status.code !== constants_1.Status.OK) {
              const callerStack = getErrorStackString(callerStackError);
              stream.emit("error", (0, call_1.callErrorFromStatus)(status, callerStack));
            }
            callerStackError = null;
            stream.emit("status", status);
          }
        });
        return stream;
      }
    };
    exports2.Client = Client;
  }
});

// node_modules/@grpc/grpc-js/build/src/make-client.js
var require_make_client = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/make-client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadPackageDefinition = exports2.makeClientConstructor = void 0;
    var client_1 = require_client();
    var requesterFuncs = {
      unary: client_1.Client.prototype.makeUnaryRequest,
      server_stream: client_1.Client.prototype.makeServerStreamRequest,
      client_stream: client_1.Client.prototype.makeClientStreamRequest,
      bidi: client_1.Client.prototype.makeBidiStreamRequest
    };
    function isPrototypePolluted(key) {
      return ["__proto__", "prototype", "constructor"].includes(key);
    }
    function makeClientConstructor(methods, serviceName, classOptions) {
      if (!classOptions) {
        classOptions = {};
      }
      class ServiceClientImpl extends client_1.Client {
      }
      Object.keys(methods).forEach((name) => {
        if (isPrototypePolluted(name)) {
          return;
        }
        const attrs = methods[name];
        let methodType;
        if (typeof name === "string" && name.charAt(0) === "$") {
          throw new Error("Method names cannot start with $");
        }
        if (attrs.requestStream) {
          if (attrs.responseStream) {
            methodType = "bidi";
          } else {
            methodType = "client_stream";
          }
        } else {
          if (attrs.responseStream) {
            methodType = "server_stream";
          } else {
            methodType = "unary";
          }
        }
        const serialize = attrs.requestSerialize;
        const deserialize = attrs.responseDeserialize;
        const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);
        ServiceClientImpl.prototype[name] = methodFunc;
        Object.assign(ServiceClientImpl.prototype[name], attrs);
        if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {
          ServiceClientImpl.prototype[attrs.originalName] = ServiceClientImpl.prototype[name];
        }
      });
      ServiceClientImpl.service = methods;
      ServiceClientImpl.serviceName = serviceName;
      return ServiceClientImpl;
    }
    exports2.makeClientConstructor = makeClientConstructor;
    function partial(fn, path, serialize, deserialize) {
      return function(...args) {
        return fn.call(this, path, serialize, deserialize, ...args);
      };
    }
    function isProtobufTypeDefinition(obj) {
      return "format" in obj;
    }
    function loadPackageDefinition(packageDef) {
      const result = {};
      for (const serviceFqn in packageDef) {
        if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {
          const service = packageDef[serviceFqn];
          const nameComponents = serviceFqn.split(".");
          if (nameComponents.some((comp) => isPrototypePolluted(comp))) {
            continue;
          }
          const serviceName = nameComponents[nameComponents.length - 1];
          let current = result;
          for (const packageName of nameComponents.slice(0, -1)) {
            if (!current[packageName]) {
              current[packageName] = {};
            }
            current = current[packageName];
          }
          if (isProtobufTypeDefinition(service)) {
            current[serviceName] = service;
          } else {
            current[serviceName] = makeClientConstructor(service, serviceName, {});
          }
        }
      }
      return result;
    }
    exports2.loadPackageDefinition = loadPackageDefinition;
  }
});

// node_modules/lodash.camelcase/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.camelcase/index.js"(exports2, module2) {
    var INFINITY = 1 / 0;
    var symbolTag = "[object Symbol]";
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23";
    var rsComboSymbolsRange = "\\u20d0-\\u20f0";
    var rsDingbatRange = "\\u2700-\\u27bf";
    var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
    var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
    var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
    var rsPunctuationRange = "\\u2000-\\u206f";
    var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]";
    var rsAstral = "[" + rsAstralRange + "]";
    var rsBreak = "[" + rsBreakRange + "]";
    var rsCombo = "[" + rsComboMarksRange + rsComboSymbolsRange + "]";
    var rsDigits = "\\d+";
    var rsDingbat = "[" + rsDingbatRange + "]";
    var rsLower = "[" + rsLowerRange + "]";
    var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsUpper = "[" + rsUpperRange + "]";
    var rsZWJ = "\\u200d";
    var rsLowerMisc = "(?:" + rsLower + "|" + rsMisc + ")";
    var rsUpperMisc = "(?:" + rsUpper + "|" + rsMisc + ")";
    var rsOptLowerContr = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
    var rsOptUpperContr = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
    var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reApos = RegExp(rsApos, "g");
    var reComboMark = RegExp(rsCombo, "g");
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptLowerContr + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsUpperMisc + "+" + rsOptUpperContr + "(?=" + [rsBreak, rsUpper + rsLowerMisc, "$"].join("|") + ")",
      rsUpper + "?" + rsLowerMisc + "+" + rsOptLowerContr,
      rsUpper + "+" + rsOptUpperContr,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + "]");
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var deburredLetters = {
      // Latin-1 Supplement block.
      "\xC0": "A",
      "\xC1": "A",
      "\xC2": "A",
      "\xC3": "A",
      "\xC4": "A",
      "\xC5": "A",
      "\xE0": "a",
      "\xE1": "a",
      "\xE2": "a",
      "\xE3": "a",
      "\xE4": "a",
      "\xE5": "a",
      "\xC7": "C",
      "\xE7": "c",
      "\xD0": "D",
      "\xF0": "d",
      "\xC8": "E",
      "\xC9": "E",
      "\xCA": "E",
      "\xCB": "E",
      "\xE8": "e",
      "\xE9": "e",
      "\xEA": "e",
      "\xEB": "e",
      "\xCC": "I",
      "\xCD": "I",
      "\xCE": "I",
      "\xCF": "I",
      "\xEC": "i",
      "\xED": "i",
      "\xEE": "i",
      "\xEF": "i",
      "\xD1": "N",
      "\xF1": "n",
      "\xD2": "O",
      "\xD3": "O",
      "\xD4": "O",
      "\xD5": "O",
      "\xD6": "O",
      "\xD8": "O",
      "\xF2": "o",
      "\xF3": "o",
      "\xF4": "o",
      "\xF5": "o",
      "\xF6": "o",
      "\xF8": "o",
      "\xD9": "U",
      "\xDA": "U",
      "\xDB": "U",
      "\xDC": "U",
      "\xF9": "u",
      "\xFA": "u",
      "\xFB": "u",
      "\xFC": "u",
      "\xDD": "Y",
      "\xFD": "y",
      "\xFF": "y",
      "\xC6": "Ae",
      "\xE6": "ae",
      "\xDE": "Th",
      "\xFE": "th",
      "\xDF": "ss",
      // Latin Extended-A block.
      "\u0100": "A",
      "\u0102": "A",
      "\u0104": "A",
      "\u0101": "a",
      "\u0103": "a",
      "\u0105": "a",
      "\u0106": "C",
      "\u0108": "C",
      "\u010A": "C",
      "\u010C": "C",
      "\u0107": "c",
      "\u0109": "c",
      "\u010B": "c",
      "\u010D": "c",
      "\u010E": "D",
      "\u0110": "D",
      "\u010F": "d",
      "\u0111": "d",
      "\u0112": "E",
      "\u0114": "E",
      "\u0116": "E",
      "\u0118": "E",
      "\u011A": "E",
      "\u0113": "e",
      "\u0115": "e",
      "\u0117": "e",
      "\u0119": "e",
      "\u011B": "e",
      "\u011C": "G",
      "\u011E": "G",
      "\u0120": "G",
      "\u0122": "G",
      "\u011D": "g",
      "\u011F": "g",
      "\u0121": "g",
      "\u0123": "g",
      "\u0124": "H",
      "\u0126": "H",
      "\u0125": "h",
      "\u0127": "h",
      "\u0128": "I",
      "\u012A": "I",
      "\u012C": "I",
      "\u012E": "I",
      "\u0130": "I",
      "\u0129": "i",
      "\u012B": "i",
      "\u012D": "i",
      "\u012F": "i",
      "\u0131": "i",
      "\u0134": "J",
      "\u0135": "j",
      "\u0136": "K",
      "\u0137": "k",
      "\u0138": "k",
      "\u0139": "L",
      "\u013B": "L",
      "\u013D": "L",
      "\u013F": "L",
      "\u0141": "L",
      "\u013A": "l",
      "\u013C": "l",
      "\u013E": "l",
      "\u0140": "l",
      "\u0142": "l",
      "\u0143": "N",
      "\u0145": "N",
      "\u0147": "N",
      "\u014A": "N",
      "\u0144": "n",
      "\u0146": "n",
      "\u0148": "n",
      "\u014B": "n",
      "\u014C": "O",
      "\u014E": "O",
      "\u0150": "O",
      "\u014D": "o",
      "\u014F": "o",
      "\u0151": "o",
      "\u0154": "R",
      "\u0156": "R",
      "\u0158": "R",
      "\u0155": "r",
      "\u0157": "r",
      "\u0159": "r",
      "\u015A": "S",
      "\u015C": "S",
      "\u015E": "S",
      "\u0160": "S",
      "\u015B": "s",
      "\u015D": "s",
      "\u015F": "s",
      "\u0161": "s",
      "\u0162": "T",
      "\u0164": "T",
      "\u0166": "T",
      "\u0163": "t",
      "\u0165": "t",
      "\u0167": "t",
      "\u0168": "U",
      "\u016A": "U",
      "\u016C": "U",
      "\u016E": "U",
      "\u0170": "U",
      "\u0172": "U",
      "\u0169": "u",
      "\u016B": "u",
      "\u016D": "u",
      "\u016F": "u",
      "\u0171": "u",
      "\u0173": "u",
      "\u0174": "W",
      "\u0175": "w",
      "\u0176": "Y",
      "\u0177": "y",
      "\u0178": "Y",
      "\u0179": "Z",
      "\u017B": "Z",
      "\u017D": "Z",
      "\u017A": "z",
      "\u017C": "z",
      "\u017E": "z",
      "\u0132": "IJ",
      "\u0133": "ij",
      "\u0152": "Oe",
      "\u0153": "oe",
      "\u0149": "'n",
      "\u017F": "ss"
    };
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1, length = array ? array.length : 0;
      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }
    function asciiToArray(string) {
      return string.split("");
    }
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? void 0 : object[key];
      };
    }
    var deburrLetter = basePropertyOf(deburredLetters);
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }
    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var Symbol2 = root.Symbol;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseSlice(array, start, end) {
      var index = -1, length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === void 0 ? length : end;
      return !start && end >= length ? array : baseSlice(array, start, end);
    }
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);
        var strSymbols = hasUnicode(string) ? stringToArray(string) : void 0;
        var chr = strSymbols ? strSymbols[0] : string.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
        return chr[methodName]() + trailing;
      };
    }
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
      };
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
    }
    var upperFirst = createCaseFirst("toUpperCase");
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? void 0 : pattern;
      if (pattern === void 0) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }
    module2.exports = camelCase;
  }
});

// node_modules/@protobufjs/aspromise/index.js
var require_aspromise = __commonJS({
  "node_modules/@protobufjs/aspromise/index.js"(exports2, module2) {
    "use strict";
    module2.exports = asPromise;
    function asPromise(fn, ctx) {
      var params = new Array(arguments.length - 1), offset = 0, index = 2, pending = true;
      while (index < arguments.length)
        params[offset++] = arguments[index++];
      return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err) {
          if (pending) {
            pending = false;
            if (err)
              reject(err);
            else {
              var params2 = new Array(arguments.length - 1), offset2 = 0;
              while (offset2 < params2.length)
                params2[offset2++] = arguments[offset2];
              resolve.apply(null, params2);
            }
          }
        };
        try {
          fn.apply(ctx || null, params);
        } catch (err) {
          if (pending) {
            pending = false;
            reject(err);
          }
        }
      });
    }
  }
});

// node_modules/@protobufjs/base64/index.js
var require_base64 = __commonJS({
  "node_modules/@protobufjs/base64/index.js"(exports2) {
    "use strict";
    var base64 = exports2;
    base64.length = function length(string) {
      var p = string.length;
      if (!p)
        return 0;
      var n = 0;
      while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
      return Math.ceil(string.length * 3) / 4 - n;
    };
    var b64 = new Array(64);
    var s64 = new Array(123);
    for (i = 0; i < 64; )
      s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
    var i;
    base64.encode = function encode(buffer, start, end) {
      var parts = null, chunk = [];
      var i2 = 0, j = 0, t;
      while (start < end) {
        var b = buffer[start++];
        switch (j) {
          case 0:
            chunk[i2++] = b64[b >> 2];
            t = (b & 3) << 4;
            j = 1;
            break;
          case 1:
            chunk[i2++] = b64[t | b >> 4];
            t = (b & 15) << 2;
            j = 2;
            break;
          case 2:
            chunk[i2++] = b64[t | b >> 6];
            chunk[i2++] = b64[b & 63];
            j = 0;
            break;
        }
        if (i2 > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i2 = 0;
        }
      }
      if (j) {
        chunk[i2++] = b64[t];
        chunk[i2++] = 61;
        if (j === 1)
          chunk[i2++] = 61;
      }
      if (parts) {
        if (i2)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i2)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i2));
    };
    var invalidEncoding = "invalid encoding";
    base64.decode = function decode(string, buffer, offset) {
      var start = offset;
      var j = 0, t;
      for (var i2 = 0; i2 < string.length; ) {
        var c = string.charCodeAt(i2++);
        if (c === 61 && j > 1)
          break;
        if ((c = s64[c]) === void 0)
          throw Error(invalidEncoding);
        switch (j) {
          case 0:
            t = c;
            j = 1;
            break;
          case 1:
            buffer[offset++] = t << 2 | (c & 48) >> 4;
            t = c;
            j = 2;
            break;
          case 2:
            buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
            t = c;
            j = 3;
            break;
          case 3:
            buffer[offset++] = (t & 3) << 6 | c;
            j = 0;
            break;
        }
      }
      if (j === 1)
        throw Error(invalidEncoding);
      return offset - start;
    };
    base64.test = function test(string) {
      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
    };
  }
});

// node_modules/@protobufjs/eventemitter/index.js
var require_eventemitter = __commonJS({
  "node_modules/@protobufjs/eventemitter/index.js"(exports2, module2) {
    "use strict";
    module2.exports = EventEmitter;
    function EventEmitter() {
      this._listeners = {};
    }
    EventEmitter.prototype.on = function on(evt, fn, ctx) {
      (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn,
        ctx: ctx || this
      });
      return this;
    };
    EventEmitter.prototype.off = function off(evt, fn) {
      if (evt === void 0)
        this._listeners = {};
      else {
        if (fn === void 0)
          this._listeners[evt] = [];
        else {
          var listeners = this._listeners[evt];
          for (var i = 0; i < listeners.length; )
            if (listeners[i].fn === fn)
              listeners.splice(i, 1);
            else
              ++i;
        }
      }
      return this;
    };
    EventEmitter.prototype.emit = function emit(evt) {
      var listeners = this._listeners[evt];
      if (listeners) {
        var args = [], i = 1;
        for (; i < arguments.length; )
          args.push(arguments[i++]);
        for (i = 0; i < listeners.length; )
          listeners[i].fn.apply(listeners[i++].ctx, args);
      }
      return this;
    };
  }
});

// node_modules/@protobufjs/float/index.js
var require_float = __commonJS({
  "node_modules/@protobufjs/float/index.js"(exports2, module2) {
    "use strict";
    module2.exports = factory(factory);
    function factory(exports3) {
      if (typeof Float32Array !== "undefined")
        (function() {
          var f32 = new Float32Array([-0]), f8b = new Uint8Array(f32.buffer), le = f8b[3] === 128;
          function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
          }
          function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
          }
          exports3.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
          exports3.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
          function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
          }
          function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
          }
          exports3.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
          exports3.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
        })();
      else
        (function() {
          function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0)
              writeUint(1 / val > 0 ? (
                /* positive */
                0
              ) : (
                /* negative 0 */
                2147483648
              ), buf, pos);
            else if (isNaN(val))
              writeUint(2143289344, buf, pos);
            else if (val > 34028234663852886e22)
              writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 11754943508222875e-54)
              writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf, pos);
            else {
              var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
              writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
          }
          exports3.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
          exports3.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
          function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
            return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 1401298464324817e-60 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
          }
          exports3.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
          exports3.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
        })();
      if (typeof Float64Array !== "undefined")
        (function() {
          var f64 = new Float64Array([-0]), f8b = new Uint8Array(f64.buffer), le = f8b[7] === 128;
          function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
          }
          function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
          }
          exports3.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
          exports3.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
          function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
          }
          function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
          }
          exports3.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
          exports3.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
        })();
      else
        (function() {
          function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
              val = -val;
            if (val === 0) {
              writeUint(0, buf, pos + off0);
              writeUint(1 / val > 0 ? (
                /* positive */
                0
              ) : (
                /* negative 0 */
                2147483648
              ), buf, pos + off1);
            } else if (isNaN(val)) {
              writeUint(0, buf, pos + off0);
              writeUint(2146959360, buf, pos + off1);
            } else if (val > 17976931348623157e292) {
              writeUint(0, buf, pos + off0);
              writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
              var mantissa;
              if (val < 22250738585072014e-324) {
                mantissa = val / 5e-324;
                writeUint(mantissa >>> 0, buf, pos + off0);
                writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
              } else {
                var exponent = Math.floor(Math.log(val) / Math.LN2);
                if (exponent === 1024)
                  exponent = 1023;
                mantissa = val * Math.pow(2, -exponent);
                writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
              }
            }
          }
          exports3.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
          exports3.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
          function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
          }
          exports3.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
          exports3.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
        })();
      return exports3;
    }
    function writeUintLE(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    function writeUintBE(val, buf, pos) {
      buf[pos] = val >>> 24;
      buf[pos + 1] = val >>> 16 & 255;
      buf[pos + 2] = val >>> 8 & 255;
      buf[pos + 3] = val & 255;
    }
    function readUintLE(buf, pos) {
      return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
    }
    function readUintBE(buf, pos) {
      return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
    }
  }
});

// node_modules/@protobufjs/inquire/index.js
var require_inquire = __commonJS({
  "node_modules/@protobufjs/inquire/index.js"(exports, module) {
    "use strict";
    module.exports = inquire;
    function inquire(moduleName) {
      try {
        var mod = eval("quire".replace(/^/, "re"))(moduleName);
        if (mod && (mod.length || Object.keys(mod).length))
          return mod;
      } catch (e) {
      }
      return null;
    }
  }
});

// node_modules/@protobufjs/utf8/index.js
var require_utf8 = __commonJS({
  "node_modules/@protobufjs/utf8/index.js"(exports2) {
    "use strict";
    var utf8 = exports2;
    utf8.length = function utf8_length(string) {
      var len = 0, c = 0;
      for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
          len += 1;
        else if (c < 2048)
          len += 2;
        else if ((c & 64512) === 55296 && (string.charCodeAt(i + 1) & 64512) === 56320) {
          ++i;
          len += 4;
        } else
          len += 3;
      }
      return len;
    };
    utf8.read = function utf8_read(buffer, start, end) {
      var len = end - start;
      if (len < 1)
        return "";
      var parts = null, chunk = [], i = 0, t;
      while (start < end) {
        t = buffer[start++];
        if (t < 128)
          chunk[i++] = t;
        else if (t > 191 && t < 224)
          chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
          t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 65536;
          chunk[i++] = 55296 + (t >> 10);
          chunk[i++] = 56320 + (t & 1023);
        } else
          chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
          i = 0;
        }
      }
      if (parts) {
        if (i)
          parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
      }
      return String.fromCharCode.apply(String, chunk.slice(0, i));
    };
    utf8.write = function utf8_write(string, buffer, offset) {
      var start = offset, c1, c2;
      for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
          buffer[offset++] = c1;
        } else if (c1 < 2048) {
          buffer[offset++] = c1 >> 6 | 192;
          buffer[offset++] = c1 & 63 | 128;
        } else if ((c1 & 64512) === 55296 && ((c2 = string.charCodeAt(i + 1)) & 64512) === 56320) {
          c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
          ++i;
          buffer[offset++] = c1 >> 18 | 240;
          buffer[offset++] = c1 >> 12 & 63 | 128;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        } else {
          buffer[offset++] = c1 >> 12 | 224;
          buffer[offset++] = c1 >> 6 & 63 | 128;
          buffer[offset++] = c1 & 63 | 128;
        }
      }
      return offset - start;
    };
  }
});

// node_modules/@protobufjs/pool/index.js
var require_pool = __commonJS({
  "node_modules/@protobufjs/pool/index.js"(exports2, module2) {
    "use strict";
    module2.exports = pool;
    function pool(alloc, slice, size) {
      var SIZE = size || 8192;
      var MAX = SIZE >>> 1;
      var slab = null;
      var offset = SIZE;
      return function pool_alloc(size2) {
        if (size2 < 1 || size2 > MAX)
          return alloc(size2);
        if (offset + size2 > SIZE) {
          slab = alloc(SIZE);
          offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size2);
        if (offset & 7)
          offset = (offset | 7) + 1;
        return buf;
      };
    }
  }
});

// node_modules/protobufjs/src/util/longbits.js
var require_longbits = __commonJS({
  "node_modules/protobufjs/src/util/longbits.js"(exports2, module2) {
    "use strict";
    module2.exports = LongBits;
    var util = require_minimal();
    function LongBits(lo, hi) {
      this.lo = lo >>> 0;
      this.hi = hi >>> 0;
    }
    var zero = LongBits.zero = new LongBits(0, 0);
    zero.toNumber = function() {
      return 0;
    };
    zero.zzEncode = zero.zzDecode = function() {
      return this;
    };
    zero.length = function() {
      return 1;
    };
    var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
    LongBits.fromNumber = function fromNumber(value) {
      if (value === 0)
        return zero;
      var sign = value < 0;
      if (sign)
        value = -value;
      var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
      if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
          lo = 0;
          if (++hi > 4294967295)
            hi = 0;
        }
      }
      return new LongBits(lo, hi);
    };
    LongBits.from = function from(value) {
      if (typeof value === "number")
        return LongBits.fromNumber(value);
      if (util.isString(value)) {
        if (util.Long)
          value = util.Long.fromString(value);
        else
          return LongBits.fromNumber(parseInt(value, 10));
      }
      return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
    };
    LongBits.prototype.toNumber = function toNumber(unsigned) {
      if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
        if (!lo)
          hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
      }
      return this.lo + this.hi * 4294967296;
    };
    LongBits.prototype.toLong = function toLong(unsigned) {
      return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
    };
    var charCodeAt = String.prototype.charCodeAt;
    LongBits.fromHash = function fromHash(hash) {
      if (hash === zeroHash)
        return zero;
      return new LongBits(
        (charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0,
        (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0
      );
    };
    LongBits.prototype.toHash = function toHash() {
      return String.fromCharCode(
        this.lo & 255,
        this.lo >>> 8 & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24,
        this.hi & 255,
        this.hi >>> 8 & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
      );
    };
    LongBits.prototype.zzEncode = function zzEncode() {
      var mask = this.hi >> 31;
      this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
      this.lo = (this.lo << 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.zzDecode = function zzDecode() {
      var mask = -(this.lo & 1);
      this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
      this.hi = (this.hi >>> 1 ^ mask) >>> 0;
      return this;
    };
    LongBits.prototype.length = function length() {
      var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
      return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
    };
  }
});

// node_modules/protobufjs/src/util/minimal.js
var require_minimal = __commonJS({
  "node_modules/protobufjs/src/util/minimal.js"(exports2) {
    "use strict";
    var util = exports2;
    util.asPromise = require_aspromise();
    util.base64 = require_base64();
    util.EventEmitter = require_eventemitter();
    util.float = require_float();
    util.inquire = require_inquire();
    util.utf8 = require_utf8();
    util.pool = require_pool();
    util.LongBits = require_longbits();
    util.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
    util.global = util.isNode && global || typeof window !== "undefined" && window || typeof self !== "undefined" && self || exports2;
    util.emptyArray = Object.freeze ? Object.freeze([]) : (
      /* istanbul ignore next */
      []
    );
    util.emptyObject = Object.freeze ? Object.freeze({}) : (
      /* istanbul ignore next */
      {}
    );
    util.isInteger = Number.isInteger || /* istanbul ignore next */
    function isInteger(value) {
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
    };
    util.isString = function isString(value) {
      return typeof value === "string" || value instanceof String;
    };
    util.isObject = function isObject(value) {
      return value && typeof value === "object";
    };
    util.isset = /**
     * Checks if a property on a message is considered to be present.
     * @param {Object} obj Plain object or message instance
     * @param {string} prop Property name
     * @returns {boolean} `true` if considered to be present, otherwise `false`
     */
    util.isSet = function isSet(obj, prop) {
      var value = obj[prop];
      if (value != null && obj.hasOwnProperty(prop))
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
      return false;
    };
    util.Buffer = function() {
      try {
        var Buffer2 = util.inquire("buffer").Buffer;
        return Buffer2.prototype.utf8Write ? Buffer2 : (
          /* istanbul ignore next */
          null
        );
      } catch (e) {
        return null;
      }
    }();
    util._Buffer_from = null;
    util._Buffer_allocUnsafe = null;
    util.newBuffer = function newBuffer(sizeOrArray) {
      return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
    };
    util.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    util.Long = /* istanbul ignore next */
    util.global.dcodeIO && /* istanbul ignore next */
    util.global.dcodeIO.Long || /* istanbul ignore next */
    util.global.Long || util.inquire("long");
    util.key2Re = /^true|false|0|1$/;
    util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
    util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
    util.longToHash = function longToHash(value) {
      return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
    };
    util.longFromHash = function longFromHash(hash, unsigned) {
      var bits = util.LongBits.fromHash(hash);
      if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
      return bits.toNumber(Boolean(unsigned));
    };
    function merge(dst, src, ifNotSet) {
      for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === void 0 || !ifNotSet)
          dst[keys[i]] = src[keys[i]];
      return dst;
    }
    util.merge = merge;
    util.lcFirst = function lcFirst(str) {
      return str.charAt(0).toLowerCase() + str.substring(1);
    };
    function newError(name) {
      function CustomError(message, properties) {
        if (!(this instanceof CustomError))
          return new CustomError(message, properties);
        Object.defineProperty(this, "message", { get: function() {
          return message;
        } });
        if (Error.captureStackTrace)
          Error.captureStackTrace(this, CustomError);
        else
          Object.defineProperty(this, "stack", { value: new Error().stack || "" });
        if (properties)
          merge(this, properties);
      }
      CustomError.prototype = Object.create(Error.prototype, {
        constructor: {
          value: CustomError,
          writable: true,
          enumerable: false,
          configurable: true
        },
        name: {
          get: function get() {
            return name;
          },
          set: void 0,
          enumerable: false,
          // configurable: false would accurately preserve the behavior of
          // the original, but I'm guessing that was not intentional.
          // For an actual error subclass, this property would
          // be configurable.
          configurable: true
        },
        toString: {
          value: function value() {
            return this.name + ": " + this.message;
          },
          writable: true,
          enumerable: false,
          configurable: true
        }
      });
      return CustomError;
    }
    util.newError = newError;
    util.ProtocolError = newError("ProtocolError");
    util.oneOfGetter = function getOneOf(fieldNames) {
      var fieldMap = {};
      for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;
      return function() {
        for (var keys = Object.keys(this), i2 = keys.length - 1; i2 > -1; --i2)
          if (fieldMap[keys[i2]] === 1 && this[keys[i2]] !== void 0 && this[keys[i2]] !== null)
            return keys[i2];
      };
    };
    util.oneOfSetter = function setOneOf(fieldNames) {
      return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
          if (fieldNames[i] !== name)
            delete this[fieldNames[i]];
      };
    };
    util.toJSONOptions = {
      longs: String,
      enums: String,
      bytes: String,
      json: true
    };
    util._configure = function() {
      var Buffer2 = util.Buffer;
      if (!Buffer2) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
      }
      util._Buffer_from = Buffer2.from !== Uint8Array.from && Buffer2.from || /* istanbul ignore next */
      function Buffer_from(value, encoding) {
        return new Buffer2(value, encoding);
      };
      util._Buffer_allocUnsafe = Buffer2.allocUnsafe || /* istanbul ignore next */
      function Buffer_allocUnsafe(size) {
        return new Buffer2(size);
      };
    };
  }
});

// node_modules/protobufjs/src/writer.js
var require_writer = __commonJS({
  "node_modules/protobufjs/src/writer.js"(exports2, module2) {
    "use strict";
    module2.exports = Writer;
    var util = require_minimal();
    var BufferWriter;
    var LongBits = util.LongBits;
    var base64 = util.base64;
    var utf8 = util.utf8;
    function Op(fn, len, val) {
      this.fn = fn;
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    function noop() {
    }
    function State(writer) {
      this.head = writer.head;
      this.tail = writer.tail;
      this.len = writer.len;
      this.next = writer.states;
    }
    function Writer() {
      this.len = 0;
      this.head = new Op(noop, 0, 0);
      this.tail = this.head;
      this.states = null;
    }
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
          return new BufferWriter();
        })();
      } : function create_array() {
        return new Writer();
      };
    };
    Writer.create = create();
    Writer.alloc = function alloc(size) {
      return new util.Array(size);
    };
    if (util.Array !== Array)
      Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
    Writer.prototype._push = function push(fn, len, val) {
      this.tail = this.tail.next = new Op(fn, len, val);
      this.len += len;
      return this;
    };
    function writeByte(val, buf, pos) {
      buf[pos] = val & 255;
    }
    function writeVarint32(val, buf, pos) {
      while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
      }
      buf[pos] = val;
    }
    function VarintOp(len, val) {
      this.len = len;
      this.next = void 0;
      this.val = val;
    }
    VarintOp.prototype = Object.create(Op.prototype);
    VarintOp.prototype.fn = writeVarint32;
    Writer.prototype.uint32 = function write_uint32(value) {
      this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5,
        value
      )).len;
      return this;
    };
    Writer.prototype.int32 = function write_int32(value) {
      return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
    };
    Writer.prototype.sint32 = function write_sint32(value) {
      return this.uint32((value << 1 ^ value >> 31) >>> 0);
    };
    function writeVarint64(val, buf, pos) {
      while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
      }
      while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
      }
      buf[pos++] = val.lo;
    }
    Writer.prototype.uint64 = function write_uint64(value) {
      var bits = LongBits.from(value);
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.int64 = Writer.prototype.uint64;
    Writer.prototype.sint64 = function write_sint64(value) {
      var bits = LongBits.from(value).zzEncode();
      return this._push(writeVarint64, bits.length(), bits);
    };
    Writer.prototype.bool = function write_bool(value) {
      return this._push(writeByte, 1, value ? 1 : 0);
    };
    function writeFixed32(val, buf, pos) {
      buf[pos] = val & 255;
      buf[pos + 1] = val >>> 8 & 255;
      buf[pos + 2] = val >>> 16 & 255;
      buf[pos + 3] = val >>> 24;
    }
    Writer.prototype.fixed32 = function write_fixed32(value) {
      return this._push(writeFixed32, 4, value >>> 0);
    };
    Writer.prototype.sfixed32 = Writer.prototype.fixed32;
    Writer.prototype.fixed64 = function write_fixed64(value) {
      var bits = LongBits.from(value);
      return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
    };
    Writer.prototype.sfixed64 = Writer.prototype.fixed64;
    Writer.prototype.float = function write_float(value) {
      return this._push(util.float.writeFloatLE, 4, value);
    };
    Writer.prototype.double = function write_double(value) {
      return this._push(util.float.writeDoubleLE, 8, value);
    };
    var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
      buf.set(val, pos);
    } : function writeBytes_for(val, buf, pos) {
      for (var i = 0; i < val.length; ++i)
        buf[pos + i] = val[i];
    };
    Writer.prototype.bytes = function write_bytes(value) {
      var len = value.length >>> 0;
      if (!len)
        return this._push(writeByte, 1, 0);
      if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
      }
      return this.uint32(len)._push(writeBytes, len, value);
    };
    Writer.prototype.string = function write_string(value) {
      var len = utf8.length(value);
      return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
    };
    Writer.prototype.fork = function fork() {
      this.states = new State(this);
      this.head = this.tail = new Op(noop, 0, 0);
      this.len = 0;
      return this;
    };
    Writer.prototype.reset = function reset() {
      if (this.states) {
        this.head = this.states.head;
        this.tail = this.states.tail;
        this.len = this.states.len;
        this.states = this.states.next;
      } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
      }
      return this;
    };
    Writer.prototype.ldelim = function ldelim() {
      var head = this.head, tail = this.tail, len = this.len;
      this.reset().uint32(len);
      if (len) {
        this.tail.next = head.next;
        this.tail = tail;
        this.len += len;
      }
      return this;
    };
    Writer.prototype.finish = function finish() {
      var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
      while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
      }
      return buf;
    };
    Writer._configure = function(BufferWriter_) {
      BufferWriter = BufferWriter_;
      Writer.create = create();
      BufferWriter._configure();
    };
  }
});

// node_modules/protobufjs/src/writer_buffer.js
var require_writer_buffer = __commonJS({
  "node_modules/protobufjs/src/writer_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferWriter;
    var Writer = require_writer();
    (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
    var util = require_minimal();
    function BufferWriter() {
      Writer.call(this);
    }
    BufferWriter._configure = function() {
      BufferWriter.alloc = util._Buffer_allocUnsafe;
      BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos);
      } : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy)
          val.copy(buf, pos, 0, val.length);
        else
          for (var i = 0; i < val.length; )
            buf[pos++] = val[i++];
      };
    };
    BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
      if (util.isString(value))
        value = util._Buffer_from(value, "base64");
      var len = value.length >>> 0;
      this.uint32(len);
      if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
      return this;
    };
    function writeStringBuffer(val, buf, pos) {
      if (val.length < 40)
        util.utf8.write(val, buf, pos);
      else if (buf.utf8Write)
        buf.utf8Write(val, pos);
      else
        buf.write(val, pos);
    }
    BufferWriter.prototype.string = function write_string_buffer(value) {
      var len = util.Buffer.byteLength(value);
      this.uint32(len);
      if (len)
        this._push(writeStringBuffer, len, value);
      return this;
    };
    BufferWriter._configure();
  }
});

// node_modules/protobufjs/src/reader.js
var require_reader = __commonJS({
  "node_modules/protobufjs/src/reader.js"(exports2, module2) {
    "use strict";
    module2.exports = Reader;
    var util = require_minimal();
    var BufferReader;
    var LongBits = util.LongBits;
    var utf8 = util.utf8;
    function indexOutOfRange(reader, writeLength) {
      return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
    }
    function Reader(buffer) {
      this.buf = buffer;
      this.pos = 0;
      this.len = buffer.length;
    }
    var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
      if (buffer instanceof Uint8Array || Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    } : function create_array2(buffer) {
      if (Array.isArray(buffer))
        return new Reader(buffer);
      throw Error("illegal buffer");
    };
    var create = function create2() {
      return util.Buffer ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer2) {
          return util.Buffer.isBuffer(buffer2) ? new BufferReader(buffer2) : create_array(buffer2);
        })(buffer);
      } : create_array;
    };
    Reader.create = create();
    Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */
    util.Array.prototype.slice;
    Reader.prototype.uint32 = function read_uint32_setup() {
      var value = 4294967295;
      return function read_uint32() {
        value = (this.buf[this.pos] & 127) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
        if (this.buf[this.pos++] < 128)
          return value;
        if ((this.pos += 5) > this.len) {
          this.pos = this.len;
          throw indexOutOfRange(this, 10);
        }
        return value;
      };
    }();
    Reader.prototype.int32 = function read_int32() {
      return this.uint32() | 0;
    };
    Reader.prototype.sint32 = function read_sint32() {
      var value = this.uint32();
      return value >>> 1 ^ -(value & 1) | 0;
    };
    function readLongVarint() {
      var bits = new LongBits(0, 0);
      var i = 0;
      if (this.len - this.pos > 4) {
        for (; i < 4; ++i) {
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
        if (this.buf[this.pos++] < 128)
          return bits;
        i = 0;
      } else {
        for (; i < 3; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
      }
      if (this.len - this.pos > 4) {
        for (; i < 5; ++i) {
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      } else {
        for (; i < 5; ++i) {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
        }
      }
      throw Error("invalid varint encoding");
    }
    Reader.prototype.bool = function read_bool() {
      return this.uint32() !== 0;
    };
    function readFixed32_end(buf, end) {
      return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
    }
    Reader.prototype.fixed32 = function read_fixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4);
    };
    Reader.prototype.sfixed32 = function read_sfixed32() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      return readFixed32_end(this.buf, this.pos += 4) | 0;
    };
    function readFixed64() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);
      return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
    }
    Reader.prototype.float = function read_float() {
      if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readFloatLE(this.buf, this.pos);
      this.pos += 4;
      return value;
    };
    Reader.prototype.double = function read_double() {
      if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);
      var value = util.float.readDoubleLE(this.buf, this.pos);
      this.pos += 8;
      return value;
    };
    Reader.prototype.bytes = function read_bytes() {
      var length = this.uint32(), start = this.pos, end = this.pos + length;
      if (end > this.len)
        throw indexOutOfRange(this, length);
      this.pos += length;
      if (Array.isArray(this.buf))
        return this.buf.slice(start, end);
      if (start === end) {
        var nativeBuffer = util.Buffer;
        return nativeBuffer ? nativeBuffer.alloc(0) : new this.buf.constructor(0);
      }
      return this._slice.call(this.buf, start, end);
    };
    Reader.prototype.string = function read_string() {
      var bytes = this.bytes();
      return utf8.read(bytes, 0, bytes.length);
    };
    Reader.prototype.skip = function skip(length) {
      if (typeof length === "number") {
        if (this.pos + length > this.len)
          throw indexOutOfRange(this, length);
        this.pos += length;
      } else {
        do {
          if (this.pos >= this.len)
            throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
      }
      return this;
    };
    Reader.prototype.skipType = function(wireType) {
      switch (wireType) {
        case 0:
          this.skip();
          break;
        case 1:
          this.skip(8);
          break;
        case 2:
          this.skip(this.uint32());
          break;
        case 3:
          while ((wireType = this.uint32() & 7) !== 4) {
            this.skipType(wireType);
          }
          break;
        case 5:
          this.skip(4);
          break;
        default:
          throw Error("invalid wire type " + wireType + " at offset " + this.pos);
      }
      return this;
    };
    Reader._configure = function(BufferReader_) {
      BufferReader = BufferReader_;
      Reader.create = create();
      BufferReader._configure();
      var fn = util.Long ? "toLong" : (
        /* istanbul ignore next */
        "toNumber"
      );
      util.merge(Reader.prototype, {
        int64: function read_int64() {
          return readLongVarint.call(this)[fn](false);
        },
        uint64: function read_uint64() {
          return readLongVarint.call(this)[fn](true);
        },
        sint64: function read_sint64() {
          return readLongVarint.call(this).zzDecode()[fn](false);
        },
        fixed64: function read_fixed64() {
          return readFixed64.call(this)[fn](true);
        },
        sfixed64: function read_sfixed64() {
          return readFixed64.call(this)[fn](false);
        }
      });
    };
  }
});

// node_modules/protobufjs/src/reader_buffer.js
var require_reader_buffer = __commonJS({
  "node_modules/protobufjs/src/reader_buffer.js"(exports2, module2) {
    "use strict";
    module2.exports = BufferReader;
    var Reader = require_reader();
    (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
    var util = require_minimal();
    function BufferReader(buffer) {
      Reader.call(this, buffer);
    }
    BufferReader._configure = function() {
      if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
    };
    BufferReader.prototype.string = function read_string_buffer() {
      var len = this.uint32();
      return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
    };
    BufferReader._configure();
  }
});

// node_modules/protobufjs/src/rpc/service.js
var require_service = __commonJS({
  "node_modules/protobufjs/src/rpc/service.js"(exports2, module2) {
    "use strict";
    module2.exports = Service;
    var util = require_minimal();
    (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
    function Service(rpcImpl, requestDelimited, responseDelimited) {
      if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");
      util.EventEmitter.call(this);
      this.rpcImpl = rpcImpl;
      this.requestDelimited = Boolean(requestDelimited);
      this.responseDelimited = Boolean(responseDelimited);
    }
    Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
      if (!request)
        throw TypeError("request must be specified");
      var self2 = this;
      if (!callback)
        return util.asPromise(rpcCall, self2, method, requestCtor, responseCtor, request);
      if (!self2.rpcImpl) {
        setTimeout(function() {
          callback(Error("already ended"));
        }, 0);
        return void 0;
      }
      try {
        return self2.rpcImpl(
          method,
          requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
          function rpcCallback(err, response) {
            if (err) {
              self2.emit("error", err, method);
              return callback(err);
            }
            if (response === null) {
              self2.end(
                /* endedByRPC */
                true
              );
              return void 0;
            }
            if (!(response instanceof responseCtor)) {
              try {
                response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
              } catch (err2) {
                self2.emit("error", err2, method);
                return callback(err2);
              }
            }
            self2.emit("data", response, method);
            return callback(null, response);
          }
        );
      } catch (err) {
        self2.emit("error", err, method);
        setTimeout(function() {
          callback(err);
        }, 0);
        return void 0;
      }
    };
    Service.prototype.end = function end(endedByRPC) {
      if (this.rpcImpl) {
        if (!endedByRPC)
          this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
      }
      return this;
    };
  }
});

// node_modules/protobufjs/src/rpc.js
var require_rpc = __commonJS({
  "node_modules/protobufjs/src/rpc.js"(exports2) {
    "use strict";
    var rpc = exports2;
    rpc.Service = require_service();
  }
});

// node_modules/protobufjs/src/roots.js
var require_roots = __commonJS({
  "node_modules/protobufjs/src/roots.js"(exports2, module2) {
    "use strict";
    module2.exports = {};
  }
});

// node_modules/protobufjs/src/index-minimal.js
var require_index_minimal = __commonJS({
  "node_modules/protobufjs/src/index-minimal.js"(exports2) {
    "use strict";
    var protobuf = exports2;
    protobuf.build = "minimal";
    protobuf.Writer = require_writer();
    protobuf.BufferWriter = require_writer_buffer();
    protobuf.Reader = require_reader();
    protobuf.BufferReader = require_reader_buffer();
    protobuf.util = require_minimal();
    protobuf.rpc = require_rpc();
    protobuf.roots = require_roots();
    protobuf.configure = configure;
    function configure() {
      protobuf.util._configure();
      protobuf.Writer._configure(protobuf.BufferWriter);
      protobuf.Reader._configure(protobuf.BufferReader);
    }
    configure();
  }
});

// node_modules/@protobufjs/codegen/index.js
var require_codegen = __commonJS({
  "node_modules/@protobufjs/codegen/index.js"(exports2, module2) {
    "use strict";
    module2.exports = codegen;
    function codegen(functionParams, functionName) {
      if (typeof functionParams === "string") {
        functionName = functionParams;
        functionParams = void 0;
      }
      var body = [];
      function Codegen(formatStringOrScope) {
        if (typeof formatStringOrScope !== "string") {
          var source = toString();
          if (codegen.verbose)
            console.log("codegen: " + source);
          source = "return " + source;
          if (formatStringOrScope) {
            var scopeKeys = Object.keys(formatStringOrScope), scopeParams = new Array(scopeKeys.length + 1), scopeValues = new Array(scopeKeys.length), scopeOffset = 0;
            while (scopeOffset < scopeKeys.length) {
              scopeParams[scopeOffset] = scopeKeys[scopeOffset];
              scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
            }
            scopeParams[scopeOffset] = source;
            return Function.apply(null, scopeParams).apply(null, scopeValues);
          }
          return Function(source)();
        }
        var formatParams = new Array(arguments.length - 1), formatOffset = 0;
        while (formatOffset < formatParams.length)
          formatParams[formatOffset] = arguments[++formatOffset];
        formatOffset = 0;
        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
          var value = formatParams[formatOffset++];
          switch ($1) {
            case "d":
            case "f":
              return String(Number(value));
            case "i":
              return String(Math.floor(value));
            case "j":
              return JSON.stringify(value);
            case "s":
              return String(value);
          }
          return "%";
        });
        if (formatOffset !== formatParams.length)
          throw Error("parameter count mismatch");
        body.push(formatStringOrScope);
        return Codegen;
      }
      function toString(functionNameOverride) {
        return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
      }
      Codegen.toString = toString;
      return Codegen;
    }
    codegen.verbose = false;
  }
});

// node_modules/@protobufjs/fetch/index.js
var require_fetch = __commonJS({
  "node_modules/@protobufjs/fetch/index.js"(exports2, module2) {
    "use strict";
    module2.exports = fetch;
    var asPromise = require_aspromise();
    var inquire2 = require_inquire();
    var fs = inquire2("fs");
    function fetch(filename, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = {};
      } else if (!options)
        options = {};
      if (!callback)
        return asPromise(fetch, this, filename, options);
      if (!options.xhr && fs && fs.readFile)
        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
          return err && typeof XMLHttpRequest !== "undefined" ? fetch.xhr(filename, options, callback) : err ? callback(err) : callback(null, options.binary ? contents : contents.toString("utf8"));
        });
      return fetch.xhr(filename, options, callback);
    }
    fetch.xhr = function fetch_xhr(filename, options, callback) {
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function fetchOnReadyStateChange() {
        if (xhr.readyState !== 4)
          return void 0;
        if (xhr.status !== 0 && xhr.status !== 200)
          return callback(Error("status " + xhr.status));
        if (options.binary) {
          var buffer = xhr.response;
          if (!buffer) {
            buffer = [];
            for (var i = 0; i < xhr.responseText.length; ++i)
              buffer.push(xhr.responseText.charCodeAt(i) & 255);
          }
          return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
        }
        return callback(null, xhr.responseText);
      };
      if (options.binary) {
        if ("overrideMimeType" in xhr)
          xhr.overrideMimeType("text/plain; charset=x-user-defined");
        xhr.responseType = "arraybuffer";
      }
      xhr.open("GET", filename);
      xhr.send();
    };
  }
});

// node_modules/@protobufjs/path/index.js
var require_path = __commonJS({
  "node_modules/@protobufjs/path/index.js"(exports2) {
    "use strict";
    var path = exports2;
    var isAbsolute = (
      /**
       * Tests if the specified path is absolute.
       * @param {string} path Path to test
       * @returns {boolean} `true` if path is absolute
       */
      path.isAbsolute = function isAbsolute2(path2) {
        return /^(?:\/|\w+:)/.test(path2);
      }
    );
    var normalize = (
      /**
       * Normalizes the specified path.
       * @param {string} path Path to normalize
       * @returns {string} Normalized path
       */
      path.normalize = function normalize2(path2) {
        path2 = path2.replace(/\\/g, "/").replace(/\/{2,}/g, "/");
        var parts = path2.split("/"), absolute = isAbsolute(path2), prefix = "";
        if (absolute)
          prefix = parts.shift() + "/";
        for (var i = 0; i < parts.length; ) {
          if (parts[i] === "..") {
            if (i > 0 && parts[i - 1] !== "..")
              parts.splice(--i, 2);
            else if (absolute)
              parts.splice(i, 1);
            else
              ++i;
          } else if (parts[i] === ".")
            parts.splice(i, 1);
          else
            ++i;
        }
        return prefix + parts.join("/");
      }
    );
    path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
      if (!alreadyNormalized)
        includePath = normalize(includePath);
      if (isAbsolute(includePath))
        return includePath;
      if (!alreadyNormalized)
        originPath = normalize(originPath);
      return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
    };
  }
});

// node_modules/protobufjs/src/types.js
var require_types = __commonJS({
  "node_modules/protobufjs/src/types.js"(exports2) {
    "use strict";
    var types = exports2;
    var util = require_util();
    var s = [
      "double",
      // 0
      "float",
      // 1
      "int32",
      // 2
      "uint32",
      // 3
      "sint32",
      // 4
      "fixed32",
      // 5
      "sfixed32",
      // 6
      "int64",
      // 7
      "uint64",
      // 8
      "sint64",
      // 9
      "fixed64",
      // 10
      "sfixed64",
      // 11
      "bool",
      // 12
      "string",
      // 13
      "bytes"
      // 14
    ];
    function bake(values, offset) {
      var i = 0, o = {};
      offset |= 0;
      while (i < values.length)
        o[s[i + offset]] = values[i++];
      return o;
    }
    types.basic = bake([
      /* double   */
      1,
      /* float    */
      5,
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      5,
      /* sfixed32 */
      5,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1,
      /* bool     */
      0,
      /* string   */
      2,
      /* bytes    */
      2
    ]);
    types.defaults = bake([
      /* double   */
      0,
      /* float    */
      0,
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      0,
      /* sfixed32 */
      0,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      0,
      /* sfixed64 */
      0,
      /* bool     */
      false,
      /* string   */
      "",
      /* bytes    */
      util.emptyArray,
      /* message  */
      null
    ]);
    types.long = bake([
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1
    ], 7);
    types.mapKey = bake([
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      5,
      /* sfixed32 */
      5,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1,
      /* bool     */
      0,
      /* string   */
      2
    ], 2);
    types.packed = bake([
      /* double   */
      1,
      /* float    */
      5,
      /* int32    */
      0,
      /* uint32   */
      0,
      /* sint32   */
      0,
      /* fixed32  */
      5,
      /* sfixed32 */
      5,
      /* int64    */
      0,
      /* uint64   */
      0,
      /* sint64   */
      0,
      /* fixed64  */
      1,
      /* sfixed64 */
      1,
      /* bool     */
      0
    ]);
  }
});

// node_modules/protobufjs/src/field.js
var require_field = __commonJS({
  "node_modules/protobufjs/src/field.js"(exports2, module2) {
    "use strict";
    module2.exports = Field;
    var ReflectionObject = require_object();
    ((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";
    var Enum = require_enum();
    var types = require_types();
    var util = require_util();
    var Type;
    var ruleRe = /^required|optional|repeated$/;
    Field.fromJSON = function fromJSON(name, json) {
      return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
    };
    function Field(name, id, type, rule, extend, options, comment) {
      if (util.isObject(rule)) {
        comment = extend;
        options = rule;
        rule = extend = void 0;
      } else if (util.isObject(extend)) {
        comment = options;
        options = extend;
        extend = void 0;
      }
      ReflectionObject.call(this, name, options);
      if (!util.isInteger(id) || id < 0)
        throw TypeError("id must be a non-negative integer");
      if (!util.isString(type))
        throw TypeError("type must be a string");
      if (rule !== void 0 && !ruleRe.test(rule = rule.toString().toLowerCase()))
        throw TypeError("rule must be a string rule");
      if (extend !== void 0 && !util.isString(extend))
        throw TypeError("extend must be a string");
      if (rule === "proto3_optional") {
        rule = "optional";
      }
      this.rule = rule && rule !== "optional" ? rule : void 0;
      this.type = type;
      this.id = id;
      this.extend = extend || void 0;
      this.required = rule === "required";
      this.optional = !this.required;
      this.repeated = rule === "repeated";
      this.map = false;
      this.message = null;
      this.partOf = null;
      this.typeDefault = null;
      this.defaultValue = null;
      this.long = util.Long ? types.long[type] !== void 0 : (
        /* istanbul ignore next */
        false
      );
      this.bytes = type === "bytes";
      this.resolvedType = null;
      this.extensionField = null;
      this.declaringField = null;
      this._packed = null;
      this.comment = comment;
    }
    Object.defineProperty(Field.prototype, "packed", {
      get: function() {
        if (this._packed === null)
          this._packed = this.getOption("packed") !== false;
        return this._packed;
      }
    });
    Field.prototype.setOption = function setOption(name, value, ifNotSet) {
      if (name === "packed")
        this._packed = null;
      return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
    };
    Field.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "rule",
        this.rule !== "optional" && this.rule || void 0,
        "type",
        this.type,
        "id",
        this.id,
        "extend",
        this.extend,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Field.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      if ((this.typeDefault = types.defaults[this.type]) === void 0) {
        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
        if (this.resolvedType instanceof Type)
          this.typeDefault = null;
        else
          this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]];
      } else if (this.options && this.options.proto3_optional) {
        this.typeDefault = null;
      }
      if (this.options && this.options["default"] != null) {
        this.typeDefault = this.options["default"];
        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string")
          this.typeDefault = this.resolvedType.values[this.typeDefault];
      }
      if (this.options) {
        if (this.options.packed === true || this.options.packed !== void 0 && this.resolvedType && !(this.resolvedType instanceof Enum))
          delete this.options.packed;
        if (!Object.keys(this.options).length)
          this.options = void 0;
      }
      if (this.long) {
        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");
        if (Object.freeze)
          Object.freeze(this.typeDefault);
      } else if (this.bytes && typeof this.typeDefault === "string") {
        var buf;
        if (util.base64.test(this.typeDefault))
          util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
        else
          util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
        this.typeDefault = buf;
      }
      if (this.map)
        this.defaultValue = util.emptyObject;
      else if (this.repeated)
        this.defaultValue = util.emptyArray;
      else
        this.defaultValue = this.typeDefault;
      if (this.parent instanceof Type)
        this.parent.ctor.prototype[this.name] = this.defaultValue;
      return ReflectionObject.prototype.resolve.call(this);
    };
    Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {
      if (typeof fieldType === "function")
        fieldType = util.decorateType(fieldType).name;
      else if (fieldType && typeof fieldType === "object")
        fieldType = util.decorateEnum(fieldType).name;
      return function fieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, { "default": defaultValue }));
      };
    };
    Field._configure = function configure(Type_) {
      Type = Type_;
    };
  }
});

// node_modules/protobufjs/src/oneof.js
var require_oneof = __commonJS({
  "node_modules/protobufjs/src/oneof.js"(exports2, module2) {
    "use strict";
    module2.exports = OneOf;
    var ReflectionObject = require_object();
    ((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";
    var Field = require_field();
    var util = require_util();
    function OneOf(name, fieldNames, options, comment) {
      if (!Array.isArray(fieldNames)) {
        options = fieldNames;
        fieldNames = void 0;
      }
      ReflectionObject.call(this, name, options);
      if (!(fieldNames === void 0 || Array.isArray(fieldNames)))
        throw TypeError("fieldNames must be an Array");
      this.oneof = fieldNames || [];
      this.fieldsArray = [];
      this.comment = comment;
    }
    OneOf.fromJSON = function fromJSON(name, json) {
      return new OneOf(name, json.oneof, json.options, json.comment);
    };
    OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        this.options,
        "oneof",
        this.oneof,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    function addFieldsToParent(oneof) {
      if (oneof.parent) {
        for (var i = 0; i < oneof.fieldsArray.length; ++i)
          if (!oneof.fieldsArray[i].parent)
            oneof.parent.add(oneof.fieldsArray[i]);
      }
    }
    OneOf.prototype.add = function add(field) {
      if (!(field instanceof Field))
        throw TypeError("field must be a Field");
      if (field.parent && field.parent !== this.parent)
        field.parent.remove(field);
      this.oneof.push(field.name);
      this.fieldsArray.push(field);
      field.partOf = this;
      addFieldsToParent(this);
      return this;
    };
    OneOf.prototype.remove = function remove(field) {
      if (!(field instanceof Field))
        throw TypeError("field must be a Field");
      var index = this.fieldsArray.indexOf(field);
      if (index < 0)
        throw Error(field + " is not a member of " + this);
      this.fieldsArray.splice(index, 1);
      index = this.oneof.indexOf(field.name);
      if (index > -1)
        this.oneof.splice(index, 1);
      field.partOf = null;
      return this;
    };
    OneOf.prototype.onAdd = function onAdd(parent) {
      ReflectionObject.prototype.onAdd.call(this, parent);
      var self2 = this;
      for (var i = 0; i < this.oneof.length; ++i) {
        var field = parent.get(this.oneof[i]);
        if (field && !field.partOf) {
          field.partOf = self2;
          self2.fieldsArray.push(field);
        }
      }
      addFieldsToParent(this);
    };
    OneOf.prototype.onRemove = function onRemove(parent) {
      for (var i = 0, field; i < this.fieldsArray.length; ++i)
        if ((field = this.fieldsArray[i]).parent)
          field.parent.remove(field);
      ReflectionObject.prototype.onRemove.call(this, parent);
    };
    OneOf.d = function decorateOneOf() {
      var fieldNames = new Array(arguments.length), index = 0;
      while (index < arguments.length)
        fieldNames[index] = arguments[index++];
      return function oneOfDecorator(prototype, oneofName) {
        util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));
        Object.defineProperty(prototype, oneofName, {
          get: util.oneOfGetter(fieldNames),
          set: util.oneOfSetter(fieldNames)
        });
      };
    };
  }
});

// node_modules/protobufjs/src/namespace.js
var require_namespace = __commonJS({
  "node_modules/protobufjs/src/namespace.js"(exports2, module2) {
    "use strict";
    module2.exports = Namespace;
    var ReflectionObject = require_object();
    ((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";
    var Field = require_field();
    var util = require_util();
    var OneOf = require_oneof();
    var Type;
    var Service;
    var Enum;
    Namespace.fromJSON = function fromJSON(name, json) {
      return new Namespace(name, json.options).addJSON(json.nested);
    };
    function arrayToJSON(array, toJSONOptions) {
      if (!(array && array.length))
        return void 0;
      var obj = {};
      for (var i = 0; i < array.length; ++i)
        obj[array[i].name] = array[i].toJSON(toJSONOptions);
      return obj;
    }
    Namespace.arrayToJSON = arrayToJSON;
    Namespace.isReservedId = function isReservedId(reserved, id) {
      if (reserved) {
        for (var i = 0; i < reserved.length; ++i)
          if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] > id)
            return true;
      }
      return false;
    };
    Namespace.isReservedName = function isReservedName(reserved, name) {
      if (reserved) {
        for (var i = 0; i < reserved.length; ++i)
          if (reserved[i] === name)
            return true;
      }
      return false;
    };
    function Namespace(name, options) {
      ReflectionObject.call(this, name, options);
      this.nested = void 0;
      this._nestedArray = null;
    }
    function clearCache(namespace) {
      namespace._nestedArray = null;
      return namespace;
    }
    Object.defineProperty(Namespace.prototype, "nestedArray", {
      get: function() {
        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
      }
    });
    Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
      return util.toObject([
        "options",
        this.options,
        "nested",
        arrayToJSON(this.nestedArray, toJSONOptions)
      ]);
    };
    Namespace.prototype.addJSON = function addJSON(nestedJson) {
      var ns = this;
      if (nestedJson) {
        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
          nested = nestedJson[names[i]];
          ns.add(
            // most to least likely
            (nested.fields !== void 0 ? Type.fromJSON : nested.values !== void 0 ? Enum.fromJSON : nested.methods !== void 0 ? Service.fromJSON : nested.id !== void 0 ? Field.fromJSON : Namespace.fromJSON)(names[i], nested)
          );
        }
      }
      return this;
    };
    Namespace.prototype.get = function get(name) {
      return this.nested && this.nested[name] || null;
    };
    Namespace.prototype.getEnum = function getEnum(name) {
      if (this.nested && this.nested[name] instanceof Enum)
        return this.nested[name].values;
      throw Error("no such enum: " + name);
    };
    Namespace.prototype.add = function add(object) {
      if (!(object instanceof Field && object.extend !== void 0 || object instanceof Type || object instanceof OneOf || object instanceof Enum || object instanceof Service || object instanceof Namespace))
        throw TypeError("object must be a valid nested object");
      if (!this.nested)
        this.nested = {};
      else {
        var prev = this.get(object.name);
        if (prev) {
          if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
            var nested = prev.nestedArray;
            for (var i = 0; i < nested.length; ++i)
              object.add(nested[i]);
            this.remove(prev);
            if (!this.nested)
              this.nested = {};
            object.setOptions(prev.options, true);
          } else
            throw Error("duplicate name '" + object.name + "' in " + this);
        }
      }
      this.nested[object.name] = object;
      object.onAdd(this);
      return clearCache(this);
    };
    Namespace.prototype.remove = function remove(object) {
      if (!(object instanceof ReflectionObject))
        throw TypeError("object must be a ReflectionObject");
      if (object.parent !== this)
        throw Error(object + " is not a member of " + this);
      delete this.nested[object.name];
      if (!Object.keys(this.nested).length)
        this.nested = void 0;
      object.onRemove(this);
      return clearCache(this);
    };
    Namespace.prototype.define = function define2(path, json) {
      if (util.isString(path))
        path = path.split(".");
      else if (!Array.isArray(path))
        throw TypeError("illegal path");
      if (path && path.length && path[0] === "")
        throw Error("path must be relative");
      var ptr = this;
      while (path.length > 0) {
        var part = path.shift();
        if (ptr.nested && ptr.nested[part]) {
          ptr = ptr.nested[part];
          if (!(ptr instanceof Namespace))
            throw Error("path conflicts with non-namespace objects");
        } else
          ptr.add(ptr = new Namespace(part));
      }
      if (json)
        ptr.addJSON(json);
      return ptr;
    };
    Namespace.prototype.resolveAll = function resolveAll() {
      var nested = this.nestedArray, i = 0;
      while (i < nested.length)
        if (nested[i] instanceof Namespace)
          nested[i++].resolveAll();
        else
          nested[i++].resolve();
      return this.resolve();
    };
    Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {
      if (typeof filterTypes === "boolean") {
        parentAlreadyChecked = filterTypes;
        filterTypes = void 0;
      } else if (filterTypes && !Array.isArray(filterTypes))
        filterTypes = [filterTypes];
      if (util.isString(path) && path.length) {
        if (path === ".")
          return this.root;
        path = path.split(".");
      } else if (!path.length)
        return this;
      if (path[0] === "")
        return this.root.lookup(path.slice(1), filterTypes);
      var found = this.get(path[0]);
      if (found) {
        if (path.length === 1) {
          if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)
            return found;
        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))
          return found;
      } else
        for (var i = 0; i < this.nestedArray.length; ++i)
          if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))
            return found;
      if (this.parent === null || parentAlreadyChecked)
        return null;
      return this.parent.lookup(path, filterTypes);
    };
    Namespace.prototype.lookupType = function lookupType(path) {
      var found = this.lookup(path, [Type]);
      if (!found)
        throw Error("no such type: " + path);
      return found;
    };
    Namespace.prototype.lookupEnum = function lookupEnum(path) {
      var found = this.lookup(path, [Enum]);
      if (!found)
        throw Error("no such Enum '" + path + "' in " + this);
      return found;
    };
    Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
      var found = this.lookup(path, [Type, Enum]);
      if (!found)
        throw Error("no such Type or Enum '" + path + "' in " + this);
      return found;
    };
    Namespace.prototype.lookupService = function lookupService(path) {
      var found = this.lookup(path, [Service]);
      if (!found)
        throw Error("no such Service '" + path + "' in " + this);
      return found;
    };
    Namespace._configure = function(Type_, Service_, Enum_) {
      Type = Type_;
      Service = Service_;
      Enum = Enum_;
    };
  }
});

// node_modules/protobufjs/src/mapfield.js
var require_mapfield = __commonJS({
  "node_modules/protobufjs/src/mapfield.js"(exports2, module2) {
    "use strict";
    module2.exports = MapField;
    var Field = require_field();
    ((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";
    var types = require_types();
    var util = require_util();
    function MapField(name, id, keyType, type, options, comment) {
      Field.call(this, name, id, type, void 0, void 0, options, comment);
      if (!util.isString(keyType))
        throw TypeError("keyType must be a string");
      this.keyType = keyType;
      this.resolvedKeyType = null;
      this.map = true;
    }
    MapField.fromJSON = function fromJSON(name, json) {
      return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
    };
    MapField.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "keyType",
        this.keyType,
        "type",
        this.type,
        "id",
        this.id,
        "extend",
        this.extend,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    MapField.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      if (types.mapKey[this.keyType] === void 0)
        throw Error("invalid key type: " + this.keyType);
      return Field.prototype.resolve.call(this);
    };
    MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {
      if (typeof fieldValueType === "function")
        fieldValueType = util.decorateType(fieldValueType).name;
      else if (fieldValueType && typeof fieldValueType === "object")
        fieldValueType = util.decorateEnum(fieldValueType).name;
      return function mapFieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
      };
    };
  }
});

// node_modules/protobufjs/src/method.js
var require_method = __commonJS({
  "node_modules/protobufjs/src/method.js"(exports2, module2) {
    "use strict";
    module2.exports = Method;
    var ReflectionObject = require_object();
    ((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";
    var util = require_util();
    function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {
      if (util.isObject(requestStream)) {
        options = requestStream;
        requestStream = responseStream = void 0;
      } else if (util.isObject(responseStream)) {
        options = responseStream;
        responseStream = void 0;
      }
      if (!(type === void 0 || util.isString(type)))
        throw TypeError("type must be a string");
      if (!util.isString(requestType))
        throw TypeError("requestType must be a string");
      if (!util.isString(responseType))
        throw TypeError("responseType must be a string");
      ReflectionObject.call(this, name, options);
      this.type = type || "rpc";
      this.requestType = requestType;
      this.requestStream = requestStream ? true : void 0;
      this.responseType = responseType;
      this.responseStream = responseStream ? true : void 0;
      this.resolvedRequestType = null;
      this.resolvedResponseType = null;
      this.comment = comment;
      this.parsedOptions = parsedOptions;
    }
    Method.fromJSON = function fromJSON(name, json) {
      return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);
    };
    Method.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "type",
        this.type !== "rpc" && /* istanbul ignore next */
        this.type || void 0,
        "requestType",
        this.requestType,
        "requestStream",
        this.requestStream,
        "responseType",
        this.responseType,
        "responseStream",
        this.responseStream,
        "options",
        this.options,
        "comment",
        keepComments ? this.comment : void 0,
        "parsedOptions",
        this.parsedOptions
      ]);
    };
    Method.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      this.resolvedRequestType = this.parent.lookupType(this.requestType);
      this.resolvedResponseType = this.parent.lookupType(this.responseType);
      return ReflectionObject.prototype.resolve.call(this);
    };
  }
});

// node_modules/protobufjs/src/service.js
var require_service2 = __commonJS({
  "node_modules/protobufjs/src/service.js"(exports2, module2) {
    "use strict";
    module2.exports = Service;
    var Namespace = require_namespace();
    ((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";
    var Method = require_method();
    var util = require_util();
    var rpc = require_rpc();
    function Service(name, options) {
      Namespace.call(this, name, options);
      this.methods = {};
      this._methodsArray = null;
    }
    Service.fromJSON = function fromJSON(name, json) {
      var service = new Service(name, json.options);
      if (json.methods)
        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)
          service.add(Method.fromJSON(names[i], json.methods[names[i]]));
      if (json.nested)
        service.addJSON(json.nested);
      service.comment = json.comment;
      return service;
    };
    Service.prototype.toJSON = function toJSON(toJSONOptions) {
      var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        inherited && inherited.options || void 0,
        "methods",
        Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */
        {},
        "nested",
        inherited && inherited.nested || void 0,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Object.defineProperty(Service.prototype, "methodsArray", {
      get: function() {
        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
      }
    });
    function clearCache(service) {
      service._methodsArray = null;
      return service;
    }
    Service.prototype.get = function get(name) {
      return this.methods[name] || Namespace.prototype.get.call(this, name);
    };
    Service.prototype.resolveAll = function resolveAll() {
      var methods = this.methodsArray;
      for (var i = 0; i < methods.length; ++i)
        methods[i].resolve();
      return Namespace.prototype.resolve.call(this);
    };
    Service.prototype.add = function add(object) {
      if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);
      if (object instanceof Method) {
        this.methods[object.name] = object;
        object.parent = this;
        return clearCache(this);
      }
      return Namespace.prototype.add.call(this, object);
    };
    Service.prototype.remove = function remove(object) {
      if (object instanceof Method) {
        if (this.methods[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.methods[object.name];
        object.parent = null;
        return clearCache(this);
      }
      return Namespace.prototype.remove.call(this, object);
    };
    Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
      var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
      for (var i = 0, method; i < /* initializes */
      this.methodsArray.length; ++i) {
        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
        rpcService[methodName] = util.codegen(["r", "c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
          m: method,
          q: method.resolvedRequestType.ctor,
          s: method.resolvedResponseType.ctor
        });
      }
      return rpcService;
    };
  }
});

// node_modules/protobufjs/src/message.js
var require_message = __commonJS({
  "node_modules/protobufjs/src/message.js"(exports2, module2) {
    "use strict";
    module2.exports = Message;
    var util = require_minimal();
    function Message(properties) {
      if (properties)
        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
          this[keys[i]] = properties[keys[i]];
    }
    Message.create = function create(properties) {
      return this.$type.create(properties);
    };
    Message.encode = function encode(message, writer) {
      return this.$type.encode(message, writer);
    };
    Message.encodeDelimited = function encodeDelimited(message, writer) {
      return this.$type.encodeDelimited(message, writer);
    };
    Message.decode = function decode(reader) {
      return this.$type.decode(reader);
    };
    Message.decodeDelimited = function decodeDelimited(reader) {
      return this.$type.decodeDelimited(reader);
    };
    Message.verify = function verify(message) {
      return this.$type.verify(message);
    };
    Message.fromObject = function fromObject(object) {
      return this.$type.fromObject(object);
    };
    Message.toObject = function toObject(message, options) {
      return this.$type.toObject(message, options);
    };
    Message.prototype.toJSON = function toJSON() {
      return this.$type.toObject(this, util.toJSONOptions);
    };
  }
});

// node_modules/protobufjs/src/decoder.js
var require_decoder = __commonJS({
  "node_modules/protobufjs/src/decoder.js"(exports2, module2) {
    "use strict";
    module2.exports = decoder;
    var Enum = require_enum();
    var types = require_types();
    var util = require_util();
    function missing(field) {
      return "missing required '" + field.name + "'";
    }
    function decoder(mtype) {
      var gen = util.codegen(["r", "l"], mtype.name + "$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field2) {
        return field2.map;
      }).length ? ",k,value" : ""))("while(r.pos<c){")("var t=r.uint32()");
      if (mtype.group)
        gen("if((t&7)===4)")("break");
      gen("switch(t>>>3){");
      var i = 0;
      for (; i < /* initializes */
      mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(), type = field.resolvedType instanceof Enum ? "int32" : field.type, ref = "m" + util.safeProp(field.name);
        gen("case %i: {", field.id);
        if (field.map) {
          gen("if(%s===util.emptyObject)", ref)("%s={}", ref)("var c2 = r.uint32()+r.pos");
          if (types.defaults[field.keyType] !== void 0)
            gen("k=%j", types.defaults[field.keyType]);
          else
            gen("k=null");
          if (types.defaults[type] !== void 0)
            gen("value=%j", types.defaults[type]);
          else
            gen("value=null");
          gen("while(r.pos<c2){")("var tag2=r.uint32()")("switch(tag2>>>3){")("case 1: k=r.%s(); break", field.keyType)("case 2:");
          if (types.basic[type] === void 0)
            gen("value=types[%i].decode(r,r.uint32())", i);
          else
            gen("value=r.%s()", type);
          gen("break")("default:")("r.skipType(tag2&7)")("break")("}")("}");
          if (types.long[field.keyType] !== void 0)
            gen('%s[typeof k==="object"?util.longToHash(k):k]=value', ref);
          else
            gen("%s[k]=value", ref);
        } else if (field.repeated) {
          gen("if(!(%s&&%s.length))", ref, ref)("%s=[]", ref);
          if (types.packed[type] !== void 0)
            gen("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())", ref, type)("}else");
          if (types.basic[type] === void 0)
            gen(field.resolvedType.group ? "%s.push(types[%i].decode(r))" : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
          else
            gen("%s.push(r.%s())", ref, type);
        } else if (types.basic[type] === void 0)
          gen(field.resolvedType.group ? "%s=types[%i].decode(r)" : "%s=types[%i].decode(r,r.uint32())", ref, i);
        else
          gen("%s=r.%s()", ref, type);
        gen("break")("}");
      }
      gen("default:")("r.skipType(t&7)")("break")("}")("}");
      for (i = 0; i < mtype._fieldsArray.length; ++i) {
        var rfield = mtype._fieldsArray[i];
        if (rfield.required)
          gen("if(!m.hasOwnProperty(%j))", rfield.name)("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
      }
      return gen("return m");
    }
  }
});

// node_modules/protobufjs/src/verifier.js
var require_verifier = __commonJS({
  "node_modules/protobufjs/src/verifier.js"(exports2, module2) {
    "use strict";
    module2.exports = verifier;
    var Enum = require_enum();
    var util = require_util();
    function invalid(field, expected) {
      return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:" + field.keyType + "}" : "") + " expected";
    }
    function genVerifyValue(gen, field, fieldIndex, ref) {
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
          gen("switch(%s){", ref)("default:")("return%j", invalid(field, "enum value"));
          for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j)
            gen("case %i:", field.resolvedType.values[keys[j]]);
          gen("break")("}");
        } else {
          gen("{")("var e=types[%i].verify(%s);", fieldIndex, ref)("if(e)")("return%j+e", field.name + ".")("}");
        }
      } else {
        switch (field.type) {
          case "int32":
          case "uint32":
          case "sint32":
          case "fixed32":
          case "sfixed32":
            gen("if(!util.isInteger(%s))", ref)("return%j", invalid(field, "integer"));
            break;
          case "int64":
          case "uint64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)("return%j", invalid(field, "integer|Long"));
            break;
          case "float":
          case "double":
            gen('if(typeof %s!=="number")', ref)("return%j", invalid(field, "number"));
            break;
          case "bool":
            gen('if(typeof %s!=="boolean")', ref)("return%j", invalid(field, "boolean"));
            break;
          case "string":
            gen("if(!util.isString(%s))", ref)("return%j", invalid(field, "string"));
            break;
          case "bytes":
            gen('if(!(%s&&typeof %s.length==="number"||util.isString(%s)))', ref, ref, ref)("return%j", invalid(field, "buffer"));
            break;
        }
      }
      return gen;
    }
    function genVerifyKey(gen, field, ref) {
      switch (field.keyType) {
        case "int32":
        case "uint32":
        case "sint32":
        case "fixed32":
        case "sfixed32":
          gen("if(!util.key32Re.test(%s))", ref)("return%j", invalid(field, "integer key"));
          break;
        case "int64":
        case "uint64":
        case "sint64":
        case "fixed64":
        case "sfixed64":
          gen("if(!util.key64Re.test(%s))", ref)("return%j", invalid(field, "integer|Long key"));
          break;
        case "bool":
          gen("if(!util.key2Re.test(%s))", ref)("return%j", invalid(field, "boolean key"));
          break;
      }
      return gen;
    }
    function verifier(mtype) {
      var gen = util.codegen(["m"], mtype.name + "$verify")('if(typeof m!=="object"||m===null)')("return%j", "object expected");
      var oneofs = mtype.oneofsArray, seenFirstField = {};
      if (oneofs.length)
        gen("var p={}");
      for (var i = 0; i < /* initializes */
      mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(), ref = "m" + util.safeProp(field.name);
        if (field.optional)
          gen("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name);
        if (field.map) {
          gen("if(!util.isObject(%s))", ref)("return%j", invalid(field, "object"))("var k=Object.keys(%s)", ref)("for(var i=0;i<k.length;++i){");
          genVerifyKey(gen, field, "k[i]");
          genVerifyValue(gen, field, i, ref + "[k[i]]")("}");
        } else if (field.repeated) {
          gen("if(!Array.isArray(%s))", ref)("return%j", invalid(field, "array"))("for(var i=0;i<%s.length;++i){", ref);
          genVerifyValue(gen, field, i, ref + "[i]")("}");
        } else {
          if (field.partOf) {
            var oneofProp = util.safeProp(field.partOf.name);
            if (seenFirstField[field.partOf.name] === 1)
              gen("if(p%s===1)", oneofProp)("return%j", field.partOf.name + ": multiple values");
            seenFirstField[field.partOf.name] = 1;
            gen("p%s=1", oneofProp);
          }
          genVerifyValue(gen, field, i, ref);
        }
        if (field.optional)
          gen("}");
      }
      return gen("return null");
    }
  }
});

// node_modules/protobufjs/src/converter.js
var require_converter = __commonJS({
  "node_modules/protobufjs/src/converter.js"(exports2) {
    "use strict";
    var converter = exports2;
    var Enum = require_enum();
    var util = require_util();
    function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
      var defaultAlreadyEmitted = false;
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) {
          gen("switch(d%s){", prop);
          for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
            if (values[keys[i]] === field.typeDefault && !defaultAlreadyEmitted) {
              gen("default:")('if(typeof(d%s)==="number"){m%s=d%s;break}', prop, prop, prop);
              if (!field.repeated)
                gen("break");
              defaultAlreadyEmitted = true;
            }
            gen("case%j:", keys[i])("case %i:", values[keys[i]])("m%s=%j", prop, values[keys[i]])("break");
          }
          gen("}");
        } else
          gen('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
      } else {
        var isUnsigned = false;
        switch (field.type) {
          case "double":
          case "float":
            gen("m%s=Number(d%s)", prop, prop);
            break;
          case "uint32":
          case "fixed32":
            gen("m%s=d%s>>>0", prop, prop);
            break;
          case "int32":
          case "sint32":
          case "sfixed32":
            gen("m%s=d%s|0", prop, prop);
            break;
          case "uint64":
            isUnsigned = true;
          case "int64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)('else if(typeof d%s==="string")', prop)("m%s=parseInt(d%s,10)", prop, prop)('else if(typeof d%s==="number")', prop)("m%s=d%s", prop, prop)('else if(typeof d%s==="object")', prop)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
            break;
          case "bytes":
            gen('if(typeof d%s==="string")', prop)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)("else if(d%s.length >= 0)", prop)("m%s=d%s", prop, prop);
            break;
          case "string":
            gen("m%s=String(d%s)", prop, prop);
            break;
          case "bool":
            gen("m%s=Boolean(d%s)", prop, prop);
            break;
        }
      }
      return gen;
    }
    converter.fromObject = function fromObject(mtype) {
      var fields = mtype.fieldsArray;
      var gen = util.codegen(["d"], mtype.name + "$fromObject")("if(d instanceof this.ctor)")("return d");
      if (!fields.length)
        return gen("return new this.ctor");
      gen("var m=new this.ctor");
      for (var i = 0; i < fields.length; ++i) {
        var field = fields[i].resolve(), prop = util.safeProp(field.name);
        if (field.map) {
          gen("if(d%s){", prop)('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field.fullName + ": object expected")("m%s={}", prop)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
          genValuePartial_fromObject(
            gen,
            field,
            /* not sorted */
            i,
            prop + "[ks[i]]"
          )("}")("}");
        } else if (field.repeated) {
          gen("if(d%s){", prop)("if(!Array.isArray(d%s))", prop)("throw TypeError(%j)", field.fullName + ": array expected")("m%s=[]", prop)("for(var i=0;i<d%s.length;++i){", prop);
          genValuePartial_fromObject(
            gen,
            field,
            /* not sorted */
            i,
            prop + "[i]"
          )("}")("}");
        } else {
          if (!(field.resolvedType instanceof Enum))
            gen("if(d%s!=null){", prop);
          genValuePartial_fromObject(
            gen,
            field,
            /* not sorted */
            i,
            prop
          );
          if (!(field.resolvedType instanceof Enum))
            gen("}");
        }
      }
      return gen("return m");
    };
    function genValuePartial_toObject(gen, field, fieldIndex, prop) {
      if (field.resolvedType) {
        if (field.resolvedType instanceof Enum)
          gen("d%s=o.enums===String?(types[%i].values[m%s]===undefined?m%s:types[%i].values[m%s]):m%s", prop, fieldIndex, prop, prop, fieldIndex, prop, prop);
        else
          gen("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
      } else {
        var isUnsigned = false;
        switch (field.type) {
          case "double":
          case "float":
            gen("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
            break;
          case "uint64":
            isUnsigned = true;
          case "int64":
          case "sint64":
          case "fixed64":
          case "sfixed64":
            gen('if(typeof m%s==="number")', prop)("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)("else")("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true" : "", prop);
            break;
          case "bytes":
            gen("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
            break;
          default:
            gen("d%s=m%s", prop, prop);
            break;
        }
      }
      return gen;
    }
    converter.toObject = function toObject(mtype) {
      var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
      if (!fields.length)
        return util.codegen()("return {}");
      var gen = util.codegen(["m", "o"], mtype.name + "$toObject")("if(!o)")("o={}")("var d={}");
      var repeatedFields = [], mapFields = [], normalFields = [], i = 0;
      for (; i < fields.length; ++i)
        if (!fields[i].partOf)
          (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);
      if (repeatedFields.length) {
        gen("if(o.arrays||o.defaults){");
        for (i = 0; i < repeatedFields.length; ++i)
          gen("d%s=[]", util.safeProp(repeatedFields[i].name));
        gen("}");
      }
      if (mapFields.length) {
        gen("if(o.objects||o.defaults){");
        for (i = 0; i < mapFields.length; ++i)
          gen("d%s={}", util.safeProp(mapFields[i].name));
        gen("}");
      }
      if (normalFields.length) {
        gen("if(o.defaults){");
        for (i = 0; i < normalFields.length; ++i) {
          var field = normalFields[i], prop = util.safeProp(field.name);
          if (field.resolvedType instanceof Enum)
            gen("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);
          else if (field.long)
            gen("if(util.Long){")("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)("}else")("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());
          else if (field.bytes) {
            var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
            gen("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))("else{")("d%s=%s", prop, arrayDefault)("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)("}");
          } else
            gen("d%s=%j", prop, field.typeDefault);
        }
        gen("}");
      }
      var hasKs2 = false;
      for (i = 0; i < fields.length; ++i) {
        var field = fields[i], index = mtype._fieldsArray.indexOf(field), prop = util.safeProp(field.name);
        if (field.map) {
          if (!hasKs2) {
            hasKs2 = true;
            gen("var ks2");
          }
          gen("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)("d%s={}", prop)("for(var j=0;j<ks2.length;++j){");
          genValuePartial_toObject(
            gen,
            field,
            /* sorted */
            index,
            prop + "[ks2[j]]"
          )("}");
        } else if (field.repeated) {
          gen("if(m%s&&m%s.length){", prop, prop)("d%s=[]", prop)("for(var j=0;j<m%s.length;++j){", prop);
          genValuePartial_toObject(
            gen,
            field,
            /* sorted */
            index,
            prop + "[j]"
          )("}");
        } else {
          gen("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name);
          genValuePartial_toObject(
            gen,
            field,
            /* sorted */
            index,
            prop
          );
          if (field.partOf)
            gen("if(o.oneofs)")("d%s=%j", util.safeProp(field.partOf.name), field.name);
        }
        gen("}");
      }
      return gen("return d");
    };
  }
});

// node_modules/protobufjs/src/wrappers.js
var require_wrappers = __commonJS({
  "node_modules/protobufjs/src/wrappers.js"(exports2) {
    "use strict";
    var wrappers = exports2;
    var Message = require_message();
    wrappers[".google.protobuf.Any"] = {
      fromObject: function(object) {
        if (object && object["@type"]) {
          var name = object["@type"].substring(object["@type"].lastIndexOf("/") + 1);
          var type = this.lookup(name);
          if (type) {
            var type_url = object["@type"].charAt(0) === "." ? object["@type"].slice(1) : object["@type"];
            if (type_url.indexOf("/") === -1) {
              type_url = "/" + type_url;
            }
            return this.create({
              type_url,
              value: type.encode(type.fromObject(object)).finish()
            });
          }
        }
        return this.fromObject(object);
      },
      toObject: function(message, options) {
        var googleApi = "type.googleapis.com/";
        var prefix = "";
        var name = "";
        if (options && options.json && message.type_url && message.value) {
          name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
          prefix = message.type_url.substring(0, message.type_url.lastIndexOf("/") + 1);
          var type = this.lookup(name);
          if (type)
            message = type.decode(message.value);
        }
        if (!(message instanceof this.ctor) && message instanceof Message) {
          var object = message.$type.toObject(message, options);
          var messageName = message.$type.fullName[0] === "." ? message.$type.fullName.slice(1) : message.$type.fullName;
          if (prefix === "") {
            prefix = googleApi;
          }
          name = prefix + messageName;
          object["@type"] = name;
          return object;
        }
        return this.toObject(message, options);
      }
    };
  }
});

// node_modules/protobufjs/src/type.js
var require_type = __commonJS({
  "node_modules/protobufjs/src/type.js"(exports2, module2) {
    "use strict";
    module2.exports = Type;
    var Namespace = require_namespace();
    ((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";
    var Enum = require_enum();
    var OneOf = require_oneof();
    var Field = require_field();
    var MapField = require_mapfield();
    var Service = require_service2();
    var Message = require_message();
    var Reader = require_reader();
    var Writer = require_writer();
    var util = require_util();
    var encoder = require_encoder();
    var decoder = require_decoder();
    var verifier = require_verifier();
    var converter = require_converter();
    var wrappers = require_wrappers();
    function Type(name, options) {
      Namespace.call(this, name, options);
      this.fields = {};
      this.oneofs = void 0;
      this.extensions = void 0;
      this.reserved = void 0;
      this.group = void 0;
      this._fieldsById = null;
      this._fieldsArray = null;
      this._oneofsArray = null;
      this._ctor = null;
    }
    Object.defineProperties(Type.prototype, {
      /**
       * Message fields by id.
       * @name Type#fieldsById
       * @type {Object.<number,Field>}
       * @readonly
       */
      fieldsById: {
        get: function() {
          if (this._fieldsById)
            return this._fieldsById;
          this._fieldsById = {};
          for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
            var field = this.fields[names[i]], id = field.id;
            if (this._fieldsById[id])
              throw Error("duplicate id " + id + " in " + this);
            this._fieldsById[id] = field;
          }
          return this._fieldsById;
        }
      },
      /**
       * Fields of this message as an array for iteration.
       * @name Type#fieldsArray
       * @type {Field[]}
       * @readonly
       */
      fieldsArray: {
        get: function() {
          return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
        }
      },
      /**
       * Oneofs of this message as an array for iteration.
       * @name Type#oneofsArray
       * @type {OneOf[]}
       * @readonly
       */
      oneofsArray: {
        get: function() {
          return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
        }
      },
      /**
       * The registered constructor, if any registered, otherwise a generic constructor.
       * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.
       * @name Type#ctor
       * @type {Constructor<{}>}
       */
      ctor: {
        get: function() {
          return this._ctor || (this.ctor = Type.generateConstructor(this)());
        },
        set: function(ctor) {
          var prototype = ctor.prototype;
          if (!(prototype instanceof Message)) {
            (ctor.prototype = new Message()).constructor = ctor;
            util.merge(ctor.prototype, prototype);
          }
          ctor.$type = ctor.prototype.$type = this;
          util.merge(ctor, Message, true);
          this._ctor = ctor;
          var i = 0;
          for (; i < /* initializes */
          this.fieldsArray.length; ++i)
            this._fieldsArray[i].resolve();
          var ctorProperties = {};
          for (i = 0; i < /* initializes */
          this.oneofsArray.length; ++i)
            ctorProperties[this._oneofsArray[i].resolve().name] = {
              get: util.oneOfGetter(this._oneofsArray[i].oneof),
              set: util.oneOfSetter(this._oneofsArray[i].oneof)
            };
          if (i)
            Object.defineProperties(ctor.prototype, ctorProperties);
        }
      }
    });
    Type.generateConstructor = function generateConstructor(mtype) {
      var gen = util.codegen(["p"], mtype.name);
      for (var i = 0, field; i < mtype.fieldsArray.length; ++i)
        if ((field = mtype._fieldsArray[i]).map)
          gen("this%s={}", util.safeProp(field.name));
        else if (field.repeated)
          gen("this%s=[]", util.safeProp(field.name));
      return gen("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)")("this[ks[i]]=p[ks[i]]");
    };
    function clearCache(type) {
      type._fieldsById = type._fieldsArray = type._oneofsArray = null;
      delete type.encode;
      delete type.decode;
      delete type.verify;
      return type;
    }
    Type.fromJSON = function fromJSON(name, json) {
      var type = new Type(name, json.options);
      type.extensions = json.extensions;
      type.reserved = json.reserved;
      var names = Object.keys(json.fields), i = 0;
      for (; i < names.length; ++i)
        type.add(
          (typeof json.fields[names[i]].keyType !== "undefined" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]])
        );
      if (json.oneofs)
        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)
          type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
      if (json.nested)
        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
          var nested = json.nested[names[i]];
          type.add(
            // most to least likely
            (nested.id !== void 0 ? Field.fromJSON : nested.fields !== void 0 ? Type.fromJSON : nested.values !== void 0 ? Enum.fromJSON : nested.methods !== void 0 ? Service.fromJSON : Namespace.fromJSON)(names[i], nested)
          );
        }
      if (json.extensions && json.extensions.length)
        type.extensions = json.extensions;
      if (json.reserved && json.reserved.length)
        type.reserved = json.reserved;
      if (json.group)
        type.group = true;
      if (json.comment)
        type.comment = json.comment;
      return type;
    };
    Type.prototype.toJSON = function toJSON(toJSONOptions) {
      var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        inherited && inherited.options || void 0,
        "oneofs",
        Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),
        "fields",
        Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) {
          return !obj.declaringField;
        }), toJSONOptions) || {},
        "extensions",
        this.extensions && this.extensions.length ? this.extensions : void 0,
        "reserved",
        this.reserved && this.reserved.length ? this.reserved : void 0,
        "group",
        this.group || void 0,
        "nested",
        inherited && inherited.nested || void 0,
        "comment",
        keepComments ? this.comment : void 0
      ]);
    };
    Type.prototype.resolveAll = function resolveAll() {
      var fields = this.fieldsArray, i = 0;
      while (i < fields.length)
        fields[i++].resolve();
      var oneofs = this.oneofsArray;
      i = 0;
      while (i < oneofs.length)
        oneofs[i++].resolve();
      return Namespace.prototype.resolveAll.call(this);
    };
    Type.prototype.get = function get(name) {
      return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;
    };
    Type.prototype.add = function add(object) {
      if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);
      if (object instanceof Field && object.extend === void 0) {
        if (this._fieldsById ? (
          /* istanbul ignore next */
          this._fieldsById[object.id]
        ) : this.fieldsById[object.id])
          throw Error("duplicate id " + object.id + " in " + this);
        if (this.isReservedId(object.id))
          throw Error("id " + object.id + " is reserved in " + this);
        if (this.isReservedName(object.name))
          throw Error("name '" + object.name + "' is reserved in " + this);
        if (object.parent)
          object.parent.remove(object);
        this.fields[object.name] = object;
        object.message = this;
        object.onAdd(this);
        return clearCache(this);
      }
      if (object instanceof OneOf) {
        if (!this.oneofs)
          this.oneofs = {};
        this.oneofs[object.name] = object;
        object.onAdd(this);
        return clearCache(this);
      }
      return Namespace.prototype.add.call(this, object);
    };
    Type.prototype.remove = function remove(object) {
      if (object instanceof Field && object.extend === void 0) {
        if (!this.fields || this.fields[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.fields[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
      }
      if (object instanceof OneOf) {
        if (!this.oneofs || this.oneofs[object.name] !== object)
          throw Error(object + " is not a member of " + this);
        delete this.oneofs[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
      }
      return Namespace.prototype.remove.call(this, object);
    };
    Type.prototype.isReservedId = function isReservedId(id) {
      return Namespace.isReservedId(this.reserved, id);
    };
    Type.prototype.isReservedName = function isReservedName(name) {
      return Namespace.isReservedName(this.reserved, name);
    };
    Type.prototype.create = function create(properties) {
      return new this.ctor(properties);
    };
    Type.prototype.setup = function setup() {
      var fullName = this.fullName, types = [];
      for (var i = 0; i < /* initializes */
      this.fieldsArray.length; ++i)
        types.push(this._fieldsArray[i].resolve().resolvedType);
      this.encode = encoder(this)({
        Writer,
        types,
        util
      });
      this.decode = decoder(this)({
        Reader,
        types,
        util
      });
      this.verify = verifier(this)({
        types,
        util
      });
      this.fromObject = converter.fromObject(this)({
        types,
        util
      });
      this.toObject = converter.toObject(this)({
        types,
        util
      });
      var wrapper = wrappers[fullName];
      if (wrapper) {
        var originalThis = Object.create(this);
        originalThis.fromObject = this.fromObject;
        this.fromObject = wrapper.fromObject.bind(originalThis);
        originalThis.toObject = this.toObject;
        this.toObject = wrapper.toObject.bind(originalThis);
      }
      return this;
    };
    Type.prototype.encode = function encode_setup(message, writer) {
      return this.setup().encode(message, writer);
    };
    Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
      return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
    };
    Type.prototype.decode = function decode_setup(reader, length) {
      return this.setup().decode(reader, length);
    };
    Type.prototype.decodeDelimited = function decodeDelimited(reader) {
      if (!(reader instanceof Reader))
        reader = Reader.create(reader);
      return this.decode(reader, reader.uint32());
    };
    Type.prototype.verify = function verify_setup(message) {
      return this.setup().verify(message);
    };
    Type.prototype.fromObject = function fromObject(object) {
      return this.setup().fromObject(object);
    };
    Type.prototype.toObject = function toObject(message, options) {
      return this.setup().toObject(message, options);
    };
    Type.d = function decorateType(typeName) {
      return function typeDecorator(target) {
        util.decorateType(target, typeName);
      };
    };
  }
});

// node_modules/protobufjs/src/root.js
var require_root = __commonJS({
  "node_modules/protobufjs/src/root.js"(exports2, module2) {
    "use strict";
    module2.exports = Root;
    var Namespace = require_namespace();
    ((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";
    var Field = require_field();
    var Enum = require_enum();
    var OneOf = require_oneof();
    var util = require_util();
    var Type;
    var parse;
    var common;
    function Root(options) {
      Namespace.call(this, "", options);
      this.deferred = [];
      this.files = [];
    }
    Root.fromJSON = function fromJSON(json, root) {
      if (!root)
        root = new Root();
      if (json.options)
        root.setOptions(json.options);
      return root.addJSON(json.nested);
    };
    Root.prototype.resolvePath = util.path.resolve;
    Root.prototype.fetch = util.fetch;
    function SYNC() {
    }
    Root.prototype.load = function load(filename, options, callback) {
      if (typeof options === "function") {
        callback = options;
        options = void 0;
      }
      var self2 = this;
      if (!callback)
        return util.asPromise(load, self2, filename, options);
      var sync = callback === SYNC;
      function finish(err, root) {
        if (!callback)
          return;
        var cb = callback;
        callback = null;
        if (sync)
          throw err;
        cb(err, root);
      }
      function getBundledFileName(filename2) {
        var idx = filename2.lastIndexOf("google/protobuf/");
        if (idx > -1) {
          var altname = filename2.substring(idx);
          if (altname in common)
            return altname;
        }
        return null;
      }
      function process2(filename2, source) {
        try {
          if (util.isString(source) && source.charAt(0) === "{")
            source = JSON.parse(source);
          if (!util.isString(source))
            self2.setOptions(source.options).addJSON(source.nested);
          else {
            parse.filename = filename2;
            var parsed = parse(source, self2, options), resolved2, i2 = 0;
            if (parsed.imports) {
              for (; i2 < parsed.imports.length; ++i2)
                if (resolved2 = getBundledFileName(parsed.imports[i2]) || self2.resolvePath(filename2, parsed.imports[i2]))
                  fetch(resolved2);
            }
            if (parsed.weakImports) {
              for (i2 = 0; i2 < parsed.weakImports.length; ++i2)
                if (resolved2 = getBundledFileName(parsed.weakImports[i2]) || self2.resolvePath(filename2, parsed.weakImports[i2]))
                  fetch(resolved2, true);
            }
          }
        } catch (err) {
          finish(err);
        }
        if (!sync && !queued)
          finish(null, self2);
      }
      function fetch(filename2, weak) {
        filename2 = getBundledFileName(filename2) || filename2;
        if (self2.files.indexOf(filename2) > -1)
          return;
        self2.files.push(filename2);
        if (filename2 in common) {
          if (sync)
            process2(filename2, common[filename2]);
          else {
            ++queued;
            setTimeout(function() {
              --queued;
              process2(filename2, common[filename2]);
            });
          }
          return;
        }
        if (sync) {
          var source;
          try {
            source = util.fs.readFileSync(filename2).toString("utf8");
          } catch (err) {
            if (!weak)
              finish(err);
            return;
          }
          process2(filename2, source);
        } else {
          ++queued;
          self2.fetch(filename2, function(err, source2) {
            --queued;
            if (!callback)
              return;
            if (err) {
              if (!weak)
                finish(err);
              else if (!queued)
                finish(null, self2);
              return;
            }
            process2(filename2, source2);
          });
        }
      }
      var queued = 0;
      if (util.isString(filename))
        filename = [filename];
      for (var i = 0, resolved; i < filename.length; ++i)
        if (resolved = self2.resolvePath("", filename[i]))
          fetch(resolved);
      if (sync)
        return self2;
      if (!queued)
        finish(null, self2);
      return void 0;
    };
    Root.prototype.loadSync = function loadSync(filename, options) {
      if (!util.isNode)
        throw Error("not supported");
      return this.load(filename, options, SYNC);
    };
    Root.prototype.resolveAll = function resolveAll() {
      if (this.deferred.length)
        throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
          return "'extend " + field.extend + "' in " + field.parent.fullName;
        }).join(", "));
      return Namespace.prototype.resolveAll.call(this);
    };
    var exposeRe = /^[A-Z]/;
    function tryHandleExtension(root, field) {
      var extendedType = field.parent.lookup(field.extend);
      if (extendedType) {
        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, void 0, field.options);
        if (extendedType.get(sisterField.name)) {
          return true;
        }
        sisterField.declaringField = field;
        field.extensionField = sisterField;
        extendedType.add(sisterField);
        return true;
      }
      return false;
    }
    Root.prototype._handleAdd = function _handleAdd(object) {
      if (object instanceof Field) {
        if (
          /* an extension field (implies not part of a oneof) */
          object.extend !== void 0 && /* not already handled */
          !object.extensionField
        ) {
          if (!tryHandleExtension(this, object))
            this.deferred.push(object);
        }
      } else if (object instanceof Enum) {
        if (exposeRe.test(object.name))
          object.parent[object.name] = object.values;
      } else if (!(object instanceof OneOf)) {
        if (object instanceof Type)
          for (var i = 0; i < this.deferred.length; )
            if (tryHandleExtension(this, this.deferred[i]))
              this.deferred.splice(i, 1);
            else
              ++i;
        for (var j = 0; j < /* initializes */
        object.nestedArray.length; ++j)
          this._handleAdd(object._nestedArray[j]);
        if (exposeRe.test(object.name))
          object.parent[object.name] = object;
      }
    };
    Root.prototype._handleRemove = function _handleRemove(object) {
      if (object instanceof Field) {
        if (
          /* an extension field */
          object.extend !== void 0
        ) {
          if (
            /* already handled */
            object.extensionField
          ) {
            object.extensionField.parent.remove(object.extensionField);
            object.extensionField = null;
          } else {
            var index = this.deferred.indexOf(object);
            if (index > -1)
              this.deferred.splice(index, 1);
          }
        }
      } else if (object instanceof Enum) {
        if (exposeRe.test(object.name))
          delete object.parent[object.name];
      } else if (object instanceof Namespace) {
        for (var i = 0; i < /* initializes */
        object.nestedArray.length; ++i)
          this._handleRemove(object._nestedArray[i]);
        if (exposeRe.test(object.name))
          delete object.parent[object.name];
      }
    };
    Root._configure = function(Type_, parse_, common_) {
      Type = Type_;
      parse = parse_;
      common = common_;
    };
  }
});

// node_modules/protobufjs/src/util.js
var require_util = __commonJS({
  "node_modules/protobufjs/src/util.js"(exports2, module2) {
    "use strict";
    var util = module2.exports = require_minimal();
    var roots = require_roots();
    var Type;
    var Enum;
    util.codegen = require_codegen();
    util.fetch = require_fetch();
    util.path = require_path();
    util.fs = util.inquire("fs");
    util.toArray = function toArray(object) {
      if (object) {
        var keys = Object.keys(object), array = new Array(keys.length), index = 0;
        while (index < keys.length)
          array[index] = object[keys[index++]];
        return array;
      }
      return [];
    };
    util.toObject = function toObject(array) {
      var object = {}, index = 0;
      while (index < array.length) {
        var key = array[index++], val = array[index++];
        if (val !== void 0)
          object[key] = val;
      }
      return object;
    };
    var safePropBackslashRe = /\\/g;
    var safePropQuoteRe = /"/g;
    util.isReserved = function isReserved(name) {
      return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
    };
    util.safeProp = function safeProp(prop) {
      if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop))
        return '["' + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, '\\"') + '"]';
      return "." + prop;
    };
    util.ucFirst = function ucFirst(str) {
      return str.charAt(0).toUpperCase() + str.substring(1);
    };
    var camelCaseRe = /_([a-z])/g;
    util.camelCase = function camelCase(str) {
      return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function($0, $1) {
        return $1.toUpperCase();
      });
    };
    util.compareFieldsById = function compareFieldsById(a, b) {
      return a.id - b.id;
    };
    util.decorateType = function decorateType(ctor, typeName) {
      if (ctor.$type) {
        if (typeName && ctor.$type.name !== typeName) {
          util.decorateRoot.remove(ctor.$type);
          ctor.$type.name = typeName;
          util.decorateRoot.add(ctor.$type);
        }
        return ctor.$type;
      }
      if (!Type)
        Type = require_type();
      var type = new Type(typeName || ctor.name);
      util.decorateRoot.add(type);
      type.ctor = ctor;
      Object.defineProperty(ctor, "$type", { value: type, enumerable: false });
      Object.defineProperty(ctor.prototype, "$type", { value: type, enumerable: false });
      return type;
    };
    var decorateEnumIndex = 0;
    util.decorateEnum = function decorateEnum(object) {
      if (object.$type)
        return object.$type;
      if (!Enum)
        Enum = require_enum();
      var enm = new Enum("Enum" + decorateEnumIndex++, object);
      util.decorateRoot.add(enm);
      Object.defineProperty(object, "$type", { value: enm, enumerable: false });
      return enm;
    };
    util.setProperty = function setProperty(dst, path, value) {
      function setProp(dst2, path2, value2) {
        var part = path2.shift();
        if (part === "__proto__" || part === "prototype") {
          return dst2;
        }
        if (path2.length > 0) {
          dst2[part] = setProp(dst2[part] || {}, path2, value2);
        } else {
          var prevValue = dst2[part];
          if (prevValue)
            value2 = [].concat(prevValue).concat(value2);
          dst2[part] = value2;
        }
        return dst2;
      }
      if (typeof dst !== "object")
        throw TypeError("dst must be an object");
      if (!path)
        throw TypeError("path must be specified");
      path = path.split(".");
      return setProp(dst, path, value);
    };
    Object.defineProperty(util, "decorateRoot", {
      get: function() {
        return roots["decorated"] || (roots["decorated"] = new (require_root())());
      }
    });
  }
});

// node_modules/protobufjs/src/object.js
var require_object = __commonJS({
  "node_modules/protobufjs/src/object.js"(exports2, module2) {
    "use strict";
    module2.exports = ReflectionObject;
    ReflectionObject.className = "ReflectionObject";
    var util = require_util();
    var Root;
    function ReflectionObject(name, options) {
      if (!util.isString(name))
        throw TypeError("name must be a string");
      if (options && !util.isObject(options))
        throw TypeError("options must be an object");
      this.options = options;
      this.parsedOptions = null;
      this.name = name;
      this.parent = null;
      this.resolved = false;
      this.comment = null;
      this.filename = null;
    }
    Object.defineProperties(ReflectionObject.prototype, {
      /**
       * Reference to the root namespace.
       * @name ReflectionObject#root
       * @type {Root}
       * @readonly
       */
      root: {
        get: function() {
          var ptr = this;
          while (ptr.parent !== null)
            ptr = ptr.parent;
          return ptr;
        }
      },
      /**
       * Full name including leading dot.
       * @name ReflectionObject#fullName
       * @type {string}
       * @readonly
       */
      fullName: {
        get: function() {
          var path = [this.name], ptr = this.parent;
          while (ptr) {
            path.unshift(ptr.name);
            ptr = ptr.parent;
          }
          return path.join(".");
        }
      }
    });
    ReflectionObject.prototype.toJSON = /* istanbul ignore next */
    function toJSON() {
      throw Error();
    };
    ReflectionObject.prototype.onAdd = function onAdd(parent) {
      if (this.parent && this.parent !== parent)
        this.parent.remove(this);
      this.parent = parent;
      this.resolved = false;
      var root = parent.root;
      if (root instanceof Root)
        root._handleAdd(this);
    };
    ReflectionObject.prototype.onRemove = function onRemove(parent) {
      var root = parent.root;
      if (root instanceof Root)
        root._handleRemove(this);
      this.parent = null;
      this.resolved = false;
    };
    ReflectionObject.prototype.resolve = function resolve() {
      if (this.resolved)
        return this;
      if (this.root instanceof Root)
        this.resolved = true;
      return this;
    };
    ReflectionObject.prototype.getOption = function getOption(name) {
      if (this.options)
        return this.options[name];
      return void 0;
    };
    ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
      if (!ifNotSet || !this.options || this.options[name] === void 0)
        (this.options || (this.options = {}))[name] = value;
      return this;
    };
    ReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {
      if (!this.parsedOptions) {
        this.parsedOptions = [];
      }
      var parsedOptions = this.parsedOptions;
      if (propName) {
        var opt = parsedOptions.find(function(opt2) {
          return Object.prototype.hasOwnProperty.call(opt2, name);
        });
        if (opt) {
          var newValue = opt[name];
          util.setProperty(newValue, propName, value);
        } else {
          opt = {};
          opt[name] = util.setProperty({}, propName, value);
          parsedOptions.push(opt);
        }
      } else {
        var newOpt = {};
        newOpt[name] = value;
        parsedOptions.push(newOpt);
      }
      return this;
    };
    ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
      if (options)
        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)
          this.setOption(keys[i], options[keys[i]], ifNotSet);
      return this;
    };
    ReflectionObject.prototype.toString = function toString() {
      var className = this.constructor.className, fullName = this.fullName;
      if (fullName.length)
        return className + " " + fullName;
      return className;
    };
    ReflectionObject._configure = function(Root_) {
      Root = Root_;
    };
  }
});

// node_modules/protobufjs/src/enum.js
var require_enum = __commonJS({
  "node_modules/protobufjs/src/enum.js"(exports2, module2) {
    "use strict";
    module2.exports = Enum;
    var ReflectionObject = require_object();
    ((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";
    var Namespace = require_namespace();
    var util = require_util();
    function Enum(name, values, options, comment, comments, valuesOptions) {
      ReflectionObject.call(this, name, options);
      if (values && typeof values !== "object")
        throw TypeError("values must be an object");
      this.valuesById = {};
      this.values = Object.create(this.valuesById);
      this.comment = comment;
      this.comments = comments || {};
      this.valuesOptions = valuesOptions;
      this.reserved = void 0;
      if (values) {
        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)
          if (typeof values[keys[i]] === "number")
            this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];
      }
    }
    Enum.fromJSON = function fromJSON(name, json) {
      var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
      enm.reserved = json.reserved;
      return enm;
    };
    Enum.prototype.toJSON = function toJSON(toJSONOptions) {
      var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
      return util.toObject([
        "options",
        this.options,
        "valuesOptions",
        this.valuesOptions,
        "values",
        this.values,
        "reserved",
        this.reserved && this.reserved.length ? this.reserved : void 0,
        "comment",
        keepComments ? this.comment : void 0,
        "comments",
        keepComments ? this.comments : void 0
      ]);
    };
    Enum.prototype.add = function add(name, id, comment, options) {
      if (!util.isString(name))
        throw TypeError("name must be a string");
      if (!util.isInteger(id))
        throw TypeError("id must be an integer");
      if (this.values[name] !== void 0)
        throw Error("duplicate name '" + name + "' in " + this);
      if (this.isReservedId(id))
        throw Error("id " + id + " is reserved in " + this);
      if (this.isReservedName(name))
        throw Error("name '" + name + "' is reserved in " + this);
      if (this.valuesById[id] !== void 0) {
        if (!(this.options && this.options.allow_alias))
          throw Error("duplicate id " + id + " in " + this);
        this.values[name] = id;
      } else
        this.valuesById[this.values[name] = id] = name;
      if (options) {
        if (this.valuesOptions === void 0)
          this.valuesOptions = {};
        this.valuesOptions[name] = options || null;
      }
      this.comments[name] = comment || null;
      return this;
    };
    Enum.prototype.remove = function remove(name) {
      if (!util.isString(name))
        throw TypeError("name must be a string");
      var val = this.values[name];
      if (val == null)
        throw Error("name '" + name + "' does not exist in " + this);
      delete this.valuesById[val];
      delete this.values[name];
      delete this.comments[name];
      if (this.valuesOptions)
        delete this.valuesOptions[name];
      return this;
    };
    Enum.prototype.isReservedId = function isReservedId(id) {
      return Namespace.isReservedId(this.reserved, id);
    };
    Enum.prototype.isReservedName = function isReservedName(name) {
      return Namespace.isReservedName(this.reserved, name);
    };
  }
});

// node_modules/protobufjs/src/encoder.js
var require_encoder = __commonJS({
  "node_modules/protobufjs/src/encoder.js"(exports2, module2) {
    "use strict";
    module2.exports = encoder;
    var Enum = require_enum();
    var types = require_types();
    var util = require_util();
    function genTypePartial(gen, field, fieldIndex, ref) {
      return field.resolvedType.group ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
    }
    function encoder(mtype) {
      var gen = util.codegen(["m", "w"], mtype.name + "$encode")("if(!w)")("w=Writer.create()");
      var i, ref;
      var fields = (
        /* initializes */
        mtype.fieldsArray.slice().sort(util.compareFieldsById)
      );
      for (var i = 0; i < fields.length; ++i) {
        var field = fields[i].resolve(), index = mtype._fieldsArray.indexOf(field), type = field.resolvedType instanceof Enum ? "int32" : field.type, wireType = types.basic[type];
        ref = "m" + util.safeProp(field.name);
        if (field.map) {
          gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j)){", ref, field.name)("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
          if (wireType === void 0)
            gen("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref);
          else
            gen(".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
          gen("}")("}");
        } else if (field.repeated) {
          gen("if(%s!=null&&%s.length){", ref, ref);
          if (field.packed && types.packed[type] !== void 0) {
            gen("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)("for(var i=0;i<%s.length;++i)", ref)("w.%s(%s[i])", type, ref)("w.ldelim()");
          } else {
            gen("for(var i=0;i<%s.length;++i)", ref);
            if (wireType === void 0)
              genTypePartial(gen, field, index, ref + "[i]");
            else
              gen("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);
          }
          gen("}");
        } else {
          if (field.optional)
            gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j))", ref, field.name);
          if (wireType === void 0)
            genTypePartial(gen, field, index, ref);
          else
            gen("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);
        }
      }
      return gen("return w");
    }
  }
});

// node_modules/protobufjs/src/index-light.js
var require_index_light = __commonJS({
  "node_modules/protobufjs/src/index-light.js"(exports2, module2) {
    "use strict";
    var protobuf = module2.exports = require_index_minimal();
    protobuf.build = "light";
    function load(filename, root, callback) {
      if (typeof root === "function") {
        callback = root;
        root = new protobuf.Root();
      } else if (!root)
        root = new protobuf.Root();
      return root.load(filename, callback);
    }
    protobuf.load = load;
    function loadSync(filename, root) {
      if (!root)
        root = new protobuf.Root();
      return root.loadSync(filename);
    }
    protobuf.loadSync = loadSync;
    protobuf.encoder = require_encoder();
    protobuf.decoder = require_decoder();
    protobuf.verifier = require_verifier();
    protobuf.converter = require_converter();
    protobuf.ReflectionObject = require_object();
    protobuf.Namespace = require_namespace();
    protobuf.Root = require_root();
    protobuf.Enum = require_enum();
    protobuf.Type = require_type();
    protobuf.Field = require_field();
    protobuf.OneOf = require_oneof();
    protobuf.MapField = require_mapfield();
    protobuf.Service = require_service2();
    protobuf.Method = require_method();
    protobuf.Message = require_message();
    protobuf.wrappers = require_wrappers();
    protobuf.types = require_types();
    protobuf.util = require_util();
    protobuf.ReflectionObject._configure(protobuf.Root);
    protobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);
    protobuf.Root._configure(protobuf.Type);
    protobuf.Field._configure(protobuf.Type);
  }
});

// node_modules/protobufjs/src/tokenize.js
var require_tokenize = __commonJS({
  "node_modules/protobufjs/src/tokenize.js"(exports2, module2) {
    "use strict";
    module2.exports = tokenize;
    var delimRe = /[\s{}=;:[\],'"()<>]/g;
    var stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g;
    var stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;
    var setCommentRe = /^ *[*/]+ */;
    var setCommentAltRe = /^\s*\*?\/*/;
    var setCommentSplitRe = /\n/g;
    var whitespaceRe = /\s/;
    var unescapeRe = /\\(.?)/g;
    var unescapeMap = {
      "0": "\0",
      "r": "\r",
      "n": "\n",
      "t": "	"
    };
    function unescape(str) {
      return str.replace(unescapeRe, function($0, $1) {
        switch ($1) {
          case "\\":
          case "":
            return $1;
          default:
            return unescapeMap[$1] || "";
        }
      });
    }
    tokenize.unescape = unescape;
    function tokenize(source, alternateCommentMode) {
      source = source.toString();
      var offset = 0, length = source.length, line = 1, lastCommentLine = 0, comments = {};
      var stack = [];
      var stringDelim = null;
      function illegal(subject) {
        return Error("illegal " + subject + " (line " + line + ")");
      }
      function readString() {
        var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
        re.lastIndex = offset - 1;
        var match = re.exec(source);
        if (!match)
          throw illegal("string");
        offset = re.lastIndex;
        push(stringDelim);
        stringDelim = null;
        return unescape(match[1]);
      }
      function charAt(pos) {
        return source.charAt(pos);
      }
      function setComment(start, end, isLeading) {
        var comment = {
          type: source.charAt(start++),
          lineEmpty: false,
          leading: isLeading
        };
        var lookback;
        if (alternateCommentMode) {
          lookback = 2;
        } else {
          lookback = 3;
        }
        var commentOffset = start - lookback, c;
        do {
          if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === "\n") {
            comment.lineEmpty = true;
            break;
          }
        } while (c === " " || c === "	");
        var lines = source.substring(start, end).split(setCommentSplitRe);
        for (var i = 0; i < lines.length; ++i)
          lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "").trim();
        comment.text = lines.join("\n").trim();
        comments[line] = comment;
        lastCommentLine = line;
      }
      function isDoubleSlashCommentLine(startOffset) {
        var endOffset = findEndOfLine(startOffset);
        var lineText = source.substring(startOffset, endOffset);
        var isComment = /^\s*\/\//.test(lineText);
        return isComment;
      }
      function findEndOfLine(cursor) {
        var endOffset = cursor;
        while (endOffset < length && charAt(endOffset) !== "\n") {
          endOffset++;
        }
        return endOffset;
      }
      function next() {
        if (stack.length > 0)
          return stack.shift();
        if (stringDelim)
          return readString();
        var repeat, prev, curr, start, isDoc, isLeadingComment = offset === 0;
        do {
          if (offset === length)
            return null;
          repeat = false;
          while (whitespaceRe.test(curr = charAt(offset))) {
            if (curr === "\n") {
              isLeadingComment = true;
              ++line;
            }
            if (++offset === length)
              return null;
          }
          if (charAt(offset) === "/") {
            if (++offset === length) {
              throw illegal("comment");
            }
            if (charAt(offset) === "/") {
              if (!alternateCommentMode) {
                isDoc = charAt(start = offset + 1) === "/";
                while (charAt(++offset) !== "\n") {
                  if (offset === length) {
                    return null;
                  }
                }
                ++offset;
                if (isDoc) {
                  setComment(start, offset - 1, isLeadingComment);
                  isLeadingComment = true;
                }
                ++line;
                repeat = true;
              } else {
                start = offset;
                isDoc = false;
                if (isDoubleSlashCommentLine(offset - 1)) {
                  isDoc = true;
                  do {
                    offset = findEndOfLine(offset);
                    if (offset === length) {
                      break;
                    }
                    offset++;
                    if (!isLeadingComment) {
                      break;
                    }
                  } while (isDoubleSlashCommentLine(offset));
                } else {
                  offset = Math.min(length, findEndOfLine(offset) + 1);
                }
                if (isDoc) {
                  setComment(start, offset, isLeadingComment);
                  isLeadingComment = true;
                }
                line++;
                repeat = true;
              }
            } else if ((curr = charAt(offset)) === "*") {
              start = offset + 1;
              isDoc = alternateCommentMode || charAt(start) === "*";
              do {
                if (curr === "\n") {
                  ++line;
                }
                if (++offset === length) {
                  throw illegal("comment");
                }
                prev = curr;
                curr = charAt(offset);
              } while (prev !== "*" || curr !== "/");
              ++offset;
              if (isDoc) {
                setComment(start, offset - 2, isLeadingComment);
                isLeadingComment = true;
              }
              repeat = true;
            } else {
              return "/";
            }
          }
        } while (repeat);
        var end = offset;
        delimRe.lastIndex = 0;
        var delim = delimRe.test(charAt(end++));
        if (!delim)
          while (end < length && !delimRe.test(charAt(end)))
            ++end;
        var token = source.substring(offset, offset = end);
        if (token === '"' || token === "'")
          stringDelim = token;
        return token;
      }
      function push(token) {
        stack.push(token);
      }
      function peek() {
        if (!stack.length) {
          var token = next();
          if (token === null)
            return null;
          push(token);
        }
        return stack[0];
      }
      function skip(expected, optional) {
        var actual = peek(), equals = actual === expected;
        if (equals) {
          next();
          return true;
        }
        if (!optional)
          throw illegal("token '" + actual + "', '" + expected + "' expected");
        return false;
      }
      function cmnt(trailingLine) {
        var ret = null;
        var comment;
        if (trailingLine === void 0) {
          comment = comments[line - 1];
          delete comments[line - 1];
          if (comment && (alternateCommentMode || comment.type === "*" || comment.lineEmpty)) {
            ret = comment.leading ? comment.text : null;
          }
        } else {
          if (lastCommentLine < trailingLine) {
            peek();
          }
          comment = comments[trailingLine];
          delete comments[trailingLine];
          if (comment && !comment.lineEmpty && (alternateCommentMode || comment.type === "/")) {
            ret = comment.leading ? null : comment.text;
          }
        }
        return ret;
      }
      return Object.defineProperty({
        next,
        peek,
        push,
        skip,
        cmnt
      }, "line", {
        get: function() {
          return line;
        }
      });
    }
  }
});

// node_modules/protobufjs/src/parse.js
var require_parse = __commonJS({
  "node_modules/protobufjs/src/parse.js"(exports2, module2) {
    "use strict";
    module2.exports = parse;
    parse.filename = null;
    parse.defaults = { keepCase: false };
    var tokenize = require_tokenize();
    var Root = require_root();
    var Type = require_type();
    var Field = require_field();
    var MapField = require_mapfield();
    var OneOf = require_oneof();
    var Enum = require_enum();
    var Service = require_service2();
    var Method = require_method();
    var types = require_types();
    var util = require_util();
    var base10Re = /^[1-9][0-9]*$/;
    var base10NegRe = /^-?[1-9][0-9]*$/;
    var base16Re = /^0[x][0-9a-fA-F]+$/;
    var base16NegRe = /^-?0[x][0-9a-fA-F]+$/;
    var base8Re = /^0[0-7]+$/;
    var base8NegRe = /^-?0[0-7]+$/;
    var numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;
    var nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/;
    var typeRefRe = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/;
    var fqTypeRefRe = /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;
    function parse(source, root, options) {
      if (!(root instanceof Root)) {
        options = root;
        root = new Root();
      }
      if (!options)
        options = parse.defaults;
      var preferTrailingComment = options.preferTrailingComment || false;
      var tn = tokenize(source, options.alternateCommentMode || false), next = tn.next, push = tn.push, peek = tn.peek, skip = tn.skip, cmnt = tn.cmnt;
      var head = true, pkg, imports, weakImports, syntax, isProto3 = false;
      var ptr = root;
      var applyCase = options.keepCase ? function(name) {
        return name;
      } : util.camelCase;
      function illegal(token2, name, insideTryCatch) {
        var filename = parse.filename;
        if (!insideTryCatch)
          parse.filename = null;
        return Error("illegal " + (name || "token") + " '" + token2 + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
      }
      function readString() {
        var values = [], token2;
        do {
          if ((token2 = next()) !== '"' && token2 !== "'")
            throw illegal(token2);
          values.push(next());
          skip(token2);
          token2 = peek();
        } while (token2 === '"' || token2 === "'");
        return values.join("");
      }
      function readValue(acceptTypeRef) {
        var token2 = next();
        switch (token2) {
          case "'":
          case '"':
            push(token2);
            return readString();
          case "true":
          case "TRUE":
            return true;
          case "false":
          case "FALSE":
            return false;
        }
        try {
          return parseNumber(
            token2,
            /* insideTryCatch */
            true
          );
        } catch (e) {
          if (acceptTypeRef && typeRefRe.test(token2))
            return token2;
          throw illegal(token2, "value");
        }
      }
      function readRanges(target, acceptStrings) {
        var token2, start;
        do {
          if (acceptStrings && ((token2 = peek()) === '"' || token2 === "'"))
            target.push(readString());
          else
            target.push([start = parseId(next()), skip("to", true) ? parseId(next()) : start]);
        } while (skip(",", true));
        skip(";");
      }
      function parseNumber(token2, insideTryCatch) {
        var sign = 1;
        if (token2.charAt(0) === "-") {
          sign = -1;
          token2 = token2.substring(1);
        }
        switch (token2) {
          case "inf":
          case "INF":
          case "Inf":
            return sign * Infinity;
          case "nan":
          case "NAN":
          case "Nan":
          case "NaN":
            return NaN;
          case "0":
            return 0;
        }
        if (base10Re.test(token2))
          return sign * parseInt(token2, 10);
        if (base16Re.test(token2))
          return sign * parseInt(token2, 16);
        if (base8Re.test(token2))
          return sign * parseInt(token2, 8);
        if (numberRe.test(token2))
          return sign * parseFloat(token2);
        throw illegal(token2, "number", insideTryCatch);
      }
      function parseId(token2, acceptNegative) {
        switch (token2) {
          case "max":
          case "MAX":
          case "Max":
            return 536870911;
          case "0":
            return 0;
        }
        if (!acceptNegative && token2.charAt(0) === "-")
          throw illegal(token2, "id");
        if (base10NegRe.test(token2))
          return parseInt(token2, 10);
        if (base16NegRe.test(token2))
          return parseInt(token2, 16);
        if (base8NegRe.test(token2))
          return parseInt(token2, 8);
        throw illegal(token2, "id");
      }
      function parsePackage() {
        if (pkg !== void 0)
          throw illegal("package");
        pkg = next();
        if (!typeRefRe.test(pkg))
          throw illegal(pkg, "name");
        ptr = ptr.define(pkg);
        skip(";");
      }
      function parseImport() {
        var token2 = peek();
        var whichImports;
        switch (token2) {
          case "weak":
            whichImports = weakImports || (weakImports = []);
            next();
            break;
          case "public":
            next();
          default:
            whichImports = imports || (imports = []);
            break;
        }
        token2 = readString();
        skip(";");
        whichImports.push(token2);
      }
      function parseSyntax() {
        skip("=");
        syntax = readString();
        isProto3 = syntax === "proto3";
        if (!isProto3 && syntax !== "proto2")
          throw illegal(syntax, "syntax");
        skip(";");
      }
      function parseCommon(parent, token2) {
        switch (token2) {
          case "option":
            parseOption(parent, token2);
            skip(";");
            return true;
          case "message":
            parseType(parent, token2);
            return true;
          case "enum":
            parseEnum(parent, token2);
            return true;
          case "service":
            parseService(parent, token2);
            return true;
          case "extend":
            parseExtension(parent, token2);
            return true;
        }
        return false;
      }
      function ifBlock(obj, fnIf, fnElse) {
        var trailingLine = tn.line;
        if (obj) {
          if (typeof obj.comment !== "string") {
            obj.comment = cmnt();
          }
          obj.filename = parse.filename;
        }
        if (skip("{", true)) {
          var token2;
          while ((token2 = next()) !== "}")
            fnIf(token2);
          skip(";", true);
        } else {
          if (fnElse)
            fnElse();
          skip(";");
          if (obj && (typeof obj.comment !== "string" || preferTrailingComment))
            obj.comment = cmnt(trailingLine) || obj.comment;
        }
      }
      function parseType(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "type name");
        var type = new Type(token2);
        ifBlock(type, function parseType_block(token3) {
          if (parseCommon(type, token3))
            return;
          switch (token3) {
            case "map":
              parseMapField(type, token3);
              break;
            case "required":
            case "repeated":
              parseField(type, token3);
              break;
            case "optional":
              if (isProto3) {
                parseField(type, "proto3_optional");
              } else {
                parseField(type, "optional");
              }
              break;
            case "oneof":
              parseOneOf(type, token3);
              break;
            case "extensions":
              readRanges(type.extensions || (type.extensions = []));
              break;
            case "reserved":
              readRanges(type.reserved || (type.reserved = []), true);
              break;
            default:
              if (!isProto3 || !typeRefRe.test(token3))
                throw illegal(token3);
              push(token3);
              parseField(type, "optional");
              break;
          }
        });
        parent.add(type);
      }
      function parseField(parent, rule, extend) {
        var type = next();
        if (type === "group") {
          parseGroup(parent, rule);
          return;
        }
        while (type.endsWith(".") || peek().startsWith(".")) {
          type += next();
        }
        if (!typeRefRe.test(type))
          throw illegal(type, "type");
        var name = next();
        if (!nameRe.test(name))
          throw illegal(name, "name");
        name = applyCase(name);
        skip("=");
        var field = new Field(name, parseId(next()), type, rule, extend);
        ifBlock(field, function parseField_block(token2) {
          if (token2 === "option") {
            parseOption(field, token2);
            skip(";");
          } else
            throw illegal(token2);
        }, function parseField_line() {
          parseInlineOptions(field);
        });
        if (rule === "proto3_optional") {
          var oneof = new OneOf("_" + name);
          field.setOption("proto3_optional", true);
          oneof.add(field);
          parent.add(oneof);
        } else {
          parent.add(field);
        }
        if (!isProto3 && field.repeated && (types.packed[type] !== void 0 || types.basic[type] === void 0))
          field.setOption(
            "packed",
            false,
            /* ifNotSet */
            true
          );
      }
      function parseGroup(parent, rule) {
        var name = next();
        if (!nameRe.test(name))
          throw illegal(name, "name");
        var fieldName = util.lcFirst(name);
        if (name === fieldName)
          name = util.ucFirst(name);
        skip("=");
        var id = parseId(next());
        var type = new Type(name);
        type.group = true;
        var field = new Field(fieldName, id, name, rule);
        field.filename = parse.filename;
        ifBlock(type, function parseGroup_block(token2) {
          switch (token2) {
            case "option":
              parseOption(type, token2);
              skip(";");
              break;
            case "required":
            case "repeated":
              parseField(type, token2);
              break;
            case "optional":
              if (isProto3) {
                parseField(type, "proto3_optional");
              } else {
                parseField(type, "optional");
              }
              break;
            case "message":
              parseType(type, token2);
              break;
            case "enum":
              parseEnum(type, token2);
              break;
            default:
              throw illegal(token2);
          }
        });
        parent.add(type).add(field);
      }
      function parseMapField(parent) {
        skip("<");
        var keyType = next();
        if (types.mapKey[keyType] === void 0)
          throw illegal(keyType, "type");
        skip(",");
        var valueType = next();
        if (!typeRefRe.test(valueType))
          throw illegal(valueType, "type");
        skip(">");
        var name = next();
        if (!nameRe.test(name))
          throw illegal(name, "name");
        skip("=");
        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);
        ifBlock(field, function parseMapField_block(token2) {
          if (token2 === "option") {
            parseOption(field, token2);
            skip(";");
          } else
            throw illegal(token2);
        }, function parseMapField_line() {
          parseInlineOptions(field);
        });
        parent.add(field);
      }
      function parseOneOf(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var oneof = new OneOf(applyCase(token2));
        ifBlock(oneof, function parseOneOf_block(token3) {
          if (token3 === "option") {
            parseOption(oneof, token3);
            skip(";");
          } else {
            push(token3);
            parseField(oneof, "optional");
          }
        });
        parent.add(oneof);
      }
      function parseEnum(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var enm = new Enum(token2);
        ifBlock(enm, function parseEnum_block(token3) {
          switch (token3) {
            case "option":
              parseOption(enm, token3);
              skip(";");
              break;
            case "reserved":
              readRanges(enm.reserved || (enm.reserved = []), true);
              break;
            default:
              parseEnumValue(enm, token3);
          }
        });
        parent.add(enm);
      }
      function parseEnumValue(parent, token2) {
        if (!nameRe.test(token2))
          throw illegal(token2, "name");
        skip("=");
        var value = parseId(next(), true), dummy = {
          options: void 0
        };
        dummy.setOption = function(name, value2) {
          if (this.options === void 0)
            this.options = {};
          this.options[name] = value2;
        };
        ifBlock(dummy, function parseEnumValue_block(token3) {
          if (token3 === "option") {
            parseOption(dummy, token3);
            skip(";");
          } else
            throw illegal(token3);
        }, function parseEnumValue_line() {
          parseInlineOptions(dummy);
        });
        parent.add(token2, value, dummy.comment, dummy.options);
      }
      function parseOption(parent, token2) {
        var isCustom = skip("(", true);
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2, "name");
        var name = token2;
        var option = name;
        var propName;
        if (isCustom) {
          skip(")");
          name = "(" + name + ")";
          option = name;
          token2 = peek();
          if (fqTypeRefRe.test(token2)) {
            propName = token2.slice(1);
            name += token2;
            next();
          }
        }
        skip("=");
        var optionValue = parseOptionValue(parent, name);
        setParsedOption(parent, option, optionValue, propName);
      }
      function parseOptionValue(parent, name) {
        if (skip("{", true)) {
          var objectResult = {};
          while (!skip("}", true)) {
            if (!nameRe.test(token = next())) {
              throw illegal(token, "name");
            }
            if (token === null) {
              throw illegal(token, "end of input");
            }
            var value;
            var propName = token;
            skip(":", true);
            if (peek() === "{")
              value = parseOptionValue(parent, name + "." + token);
            else if (peek() === "[") {
              value = [];
              var lastValue;
              if (skip("[", true)) {
                do {
                  lastValue = readValue(true);
                  value.push(lastValue);
                } while (skip(",", true));
                skip("]");
                if (typeof lastValue !== "undefined") {
                  setOption(parent, name + "." + token, lastValue);
                }
              }
            } else {
              value = readValue(true);
              setOption(parent, name + "." + token, value);
            }
            var prevValue = objectResult[propName];
            if (prevValue)
              value = [].concat(prevValue).concat(value);
            objectResult[propName] = value;
            skip(",", true);
            skip(";", true);
          }
          return objectResult;
        }
        var simpleValue = readValue(true);
        setOption(parent, name, simpleValue);
        return simpleValue;
      }
      function setOption(parent, name, value) {
        if (parent.setOption)
          parent.setOption(name, value);
      }
      function setParsedOption(parent, name, value, propName) {
        if (parent.setParsedOption)
          parent.setParsedOption(name, value, propName);
      }
      function parseInlineOptions(parent) {
        if (skip("[", true)) {
          do {
            parseOption(parent, "option");
          } while (skip(",", true));
          skip("]");
        }
        return parent;
      }
      function parseService(parent, token2) {
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "service name");
        var service = new Service(token2);
        ifBlock(service, function parseService_block(token3) {
          if (parseCommon(service, token3))
            return;
          if (token3 === "rpc")
            parseMethod(service, token3);
          else
            throw illegal(token3);
        });
        parent.add(service);
      }
      function parseMethod(parent, token2) {
        var commentText = cmnt();
        var type = token2;
        if (!nameRe.test(token2 = next()))
          throw illegal(token2, "name");
        var name = token2, requestType, requestStream, responseType, responseStream;
        skip("(");
        if (skip("stream", true))
          requestStream = true;
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2);
        requestType = token2;
        skip(")");
        skip("returns");
        skip("(");
        if (skip("stream", true))
          responseStream = true;
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2);
        responseType = token2;
        skip(")");
        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);
        method.comment = commentText;
        ifBlock(method, function parseMethod_block(token3) {
          if (token3 === "option") {
            parseOption(method, token3);
            skip(";");
          } else
            throw illegal(token3);
        });
        parent.add(method);
      }
      function parseExtension(parent, token2) {
        if (!typeRefRe.test(token2 = next()))
          throw illegal(token2, "reference");
        var reference = token2;
        ifBlock(null, function parseExtension_block(token3) {
          switch (token3) {
            case "required":
            case "repeated":
              parseField(parent, token3, reference);
              break;
            case "optional":
              if (isProto3) {
                parseField(parent, "proto3_optional", reference);
              } else {
                parseField(parent, "optional", reference);
              }
              break;
            default:
              if (!isProto3 || !typeRefRe.test(token3))
                throw illegal(token3);
              push(token3);
              parseField(parent, "optional", reference);
              break;
          }
        });
      }
      var token;
      while ((token = next()) !== null) {
        switch (token) {
          case "package":
            if (!head)
              throw illegal(token);
            parsePackage();
            break;
          case "import":
            if (!head)
              throw illegal(token);
            parseImport();
            break;
          case "syntax":
            if (!head)
              throw illegal(token);
            parseSyntax();
            break;
          case "option":
            parseOption(ptr, token);
            skip(";");
            break;
          default:
            if (parseCommon(ptr, token)) {
              head = false;
              continue;
            }
            throw illegal(token);
        }
      }
      parse.filename = null;
      return {
        "package": pkg,
        "imports": imports,
        weakImports,
        syntax,
        root
      };
    }
  }
});

// node_modules/protobufjs/src/common.js
var require_common = __commonJS({
  "node_modules/protobufjs/src/common.js"(exports2, module2) {
    "use strict";
    module2.exports = common;
    var commonRe = /\/|\./;
    function common(name, json) {
      if (!commonRe.test(name)) {
        name = "google/protobuf/" + name + ".proto";
        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };
      }
      common[name] = json;
    }
    common("any", {
      /**
       * Properties of a google.protobuf.Any message.
       * @interface IAny
       * @type {Object}
       * @property {string} [typeUrl]
       * @property {Uint8Array} [bytes]
       * @memberof common
       */
      Any: {
        fields: {
          type_url: {
            type: "string",
            id: 1
          },
          value: {
            type: "bytes",
            id: 2
          }
        }
      }
    });
    var timeType;
    common("duration", {
      /**
       * Properties of a google.protobuf.Duration message.
       * @interface IDuration
       * @type {Object}
       * @property {number|Long} [seconds]
       * @property {number} [nanos]
       * @memberof common
       */
      Duration: timeType = {
        fields: {
          seconds: {
            type: "int64",
            id: 1
          },
          nanos: {
            type: "int32",
            id: 2
          }
        }
      }
    });
    common("timestamp", {
      /**
       * Properties of a google.protobuf.Timestamp message.
       * @interface ITimestamp
       * @type {Object}
       * @property {number|Long} [seconds]
       * @property {number} [nanos]
       * @memberof common
       */
      Timestamp: timeType
    });
    common("empty", {
      /**
       * Properties of a google.protobuf.Empty message.
       * @interface IEmpty
       * @memberof common
       */
      Empty: {
        fields: {}
      }
    });
    common("struct", {
      /**
       * Properties of a google.protobuf.Struct message.
       * @interface IStruct
       * @type {Object}
       * @property {Object.<string,IValue>} [fields]
       * @memberof common
       */
      Struct: {
        fields: {
          fields: {
            keyType: "string",
            type: "Value",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.Value message.
       * @interface IValue
       * @type {Object}
       * @property {string} [kind]
       * @property {0} [nullValue]
       * @property {number} [numberValue]
       * @property {string} [stringValue]
       * @property {boolean} [boolValue]
       * @property {IStruct} [structValue]
       * @property {IListValue} [listValue]
       * @memberof common
       */
      Value: {
        oneofs: {
          kind: {
            oneof: [
              "nullValue",
              "numberValue",
              "stringValue",
              "boolValue",
              "structValue",
              "listValue"
            ]
          }
        },
        fields: {
          nullValue: {
            type: "NullValue",
            id: 1
          },
          numberValue: {
            type: "double",
            id: 2
          },
          stringValue: {
            type: "string",
            id: 3
          },
          boolValue: {
            type: "bool",
            id: 4
          },
          structValue: {
            type: "Struct",
            id: 5
          },
          listValue: {
            type: "ListValue",
            id: 6
          }
        }
      },
      NullValue: {
        values: {
          NULL_VALUE: 0
        }
      },
      /**
       * Properties of a google.protobuf.ListValue message.
       * @interface IListValue
       * @type {Object}
       * @property {Array.<IValue>} [values]
       * @memberof common
       */
      ListValue: {
        fields: {
          values: {
            rule: "repeated",
            type: "Value",
            id: 1
          }
        }
      }
    });
    common("wrappers", {
      /**
       * Properties of a google.protobuf.DoubleValue message.
       * @interface IDoubleValue
       * @type {Object}
       * @property {number} [value]
       * @memberof common
       */
      DoubleValue: {
        fields: {
          value: {
            type: "double",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.FloatValue message.
       * @interface IFloatValue
       * @type {Object}
       * @property {number} [value]
       * @memberof common
       */
      FloatValue: {
        fields: {
          value: {
            type: "float",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.Int64Value message.
       * @interface IInt64Value
       * @type {Object}
       * @property {number|Long} [value]
       * @memberof common
       */
      Int64Value: {
        fields: {
          value: {
            type: "int64",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.UInt64Value message.
       * @interface IUInt64Value
       * @type {Object}
       * @property {number|Long} [value]
       * @memberof common
       */
      UInt64Value: {
        fields: {
          value: {
            type: "uint64",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.Int32Value message.
       * @interface IInt32Value
       * @type {Object}
       * @property {number} [value]
       * @memberof common
       */
      Int32Value: {
        fields: {
          value: {
            type: "int32",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.UInt32Value message.
       * @interface IUInt32Value
       * @type {Object}
       * @property {number} [value]
       * @memberof common
       */
      UInt32Value: {
        fields: {
          value: {
            type: "uint32",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.BoolValue message.
       * @interface IBoolValue
       * @type {Object}
       * @property {boolean} [value]
       * @memberof common
       */
      BoolValue: {
        fields: {
          value: {
            type: "bool",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.StringValue message.
       * @interface IStringValue
       * @type {Object}
       * @property {string} [value]
       * @memberof common
       */
      StringValue: {
        fields: {
          value: {
            type: "string",
            id: 1
          }
        }
      },
      /**
       * Properties of a google.protobuf.BytesValue message.
       * @interface IBytesValue
       * @type {Object}
       * @property {Uint8Array} [value]
       * @memberof common
       */
      BytesValue: {
        fields: {
          value: {
            type: "bytes",
            id: 1
          }
        }
      }
    });
    common("field_mask", {
      /**
       * Properties of a google.protobuf.FieldMask message.
       * @interface IDoubleValue
       * @type {Object}
       * @property {number} [value]
       * @memberof common
       */
      FieldMask: {
        fields: {
          paths: {
            rule: "repeated",
            type: "string",
            id: 1
          }
        }
      }
    });
    common.get = function get(file) {
      return common[file] || null;
    };
  }
});

// node_modules/protobufjs/src/index.js
var require_src = __commonJS({
  "node_modules/protobufjs/src/index.js"(exports2, module2) {
    "use strict";
    var protobuf = module2.exports = require_index_light();
    protobuf.build = "full";
    protobuf.tokenize = require_tokenize();
    protobuf.parse = require_parse();
    protobuf.common = require_common();
    protobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);
  }
});

// node_modules/protobufjs/index.js
var require_protobufjs = __commonJS({
  "node_modules/protobufjs/index.js"(exports2, module2) {
    "use strict";
    module2.exports = require_src();
  }
});

// node_modules/protobufjs/google/protobuf/descriptor.json
var require_descriptor = __commonJS({
  "node_modules/protobufjs/google/protobuf/descriptor.json"(exports2, module2) {
    module2.exports = {
      nested: {
        google: {
          nested: {
            protobuf: {
              nested: {
                FileDescriptorSet: {
                  fields: {
                    file: {
                      rule: "repeated",
                      type: "FileDescriptorProto",
                      id: 1
                    }
                  }
                },
                FileDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    package: {
                      type: "string",
                      id: 2
                    },
                    dependency: {
                      rule: "repeated",
                      type: "string",
                      id: 3
                    },
                    publicDependency: {
                      rule: "repeated",
                      type: "int32",
                      id: 10,
                      options: {
                        packed: false
                      }
                    },
                    weakDependency: {
                      rule: "repeated",
                      type: "int32",
                      id: 11,
                      options: {
                        packed: false
                      }
                    },
                    messageType: {
                      rule: "repeated",
                      type: "DescriptorProto",
                      id: 4
                    },
                    enumType: {
                      rule: "repeated",
                      type: "EnumDescriptorProto",
                      id: 5
                    },
                    service: {
                      rule: "repeated",
                      type: "ServiceDescriptorProto",
                      id: 6
                    },
                    extension: {
                      rule: "repeated",
                      type: "FieldDescriptorProto",
                      id: 7
                    },
                    options: {
                      type: "FileOptions",
                      id: 8
                    },
                    sourceCodeInfo: {
                      type: "SourceCodeInfo",
                      id: 9
                    },
                    syntax: {
                      type: "string",
                      id: 12
                    }
                  }
                },
                DescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    field: {
                      rule: "repeated",
                      type: "FieldDescriptorProto",
                      id: 2
                    },
                    extension: {
                      rule: "repeated",
                      type: "FieldDescriptorProto",
                      id: 6
                    },
                    nestedType: {
                      rule: "repeated",
                      type: "DescriptorProto",
                      id: 3
                    },
                    enumType: {
                      rule: "repeated",
                      type: "EnumDescriptorProto",
                      id: 4
                    },
                    extensionRange: {
                      rule: "repeated",
                      type: "ExtensionRange",
                      id: 5
                    },
                    oneofDecl: {
                      rule: "repeated",
                      type: "OneofDescriptorProto",
                      id: 8
                    },
                    options: {
                      type: "MessageOptions",
                      id: 7
                    },
                    reservedRange: {
                      rule: "repeated",
                      type: "ReservedRange",
                      id: 9
                    },
                    reservedName: {
                      rule: "repeated",
                      type: "string",
                      id: 10
                    }
                  },
                  nested: {
                    ExtensionRange: {
                      fields: {
                        start: {
                          type: "int32",
                          id: 1
                        },
                        end: {
                          type: "int32",
                          id: 2
                        }
                      }
                    },
                    ReservedRange: {
                      fields: {
                        start: {
                          type: "int32",
                          id: 1
                        },
                        end: {
                          type: "int32",
                          id: 2
                        }
                      }
                    }
                  }
                },
                FieldDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    number: {
                      type: "int32",
                      id: 3
                    },
                    label: {
                      type: "Label",
                      id: 4
                    },
                    type: {
                      type: "Type",
                      id: 5
                    },
                    typeName: {
                      type: "string",
                      id: 6
                    },
                    extendee: {
                      type: "string",
                      id: 2
                    },
                    defaultValue: {
                      type: "string",
                      id: 7
                    },
                    oneofIndex: {
                      type: "int32",
                      id: 9
                    },
                    jsonName: {
                      type: "string",
                      id: 10
                    },
                    options: {
                      type: "FieldOptions",
                      id: 8
                    }
                  },
                  nested: {
                    Type: {
                      values: {
                        TYPE_DOUBLE: 1,
                        TYPE_FLOAT: 2,
                        TYPE_INT64: 3,
                        TYPE_UINT64: 4,
                        TYPE_INT32: 5,
                        TYPE_FIXED64: 6,
                        TYPE_FIXED32: 7,
                        TYPE_BOOL: 8,
                        TYPE_STRING: 9,
                        TYPE_GROUP: 10,
                        TYPE_MESSAGE: 11,
                        TYPE_BYTES: 12,
                        TYPE_UINT32: 13,
                        TYPE_ENUM: 14,
                        TYPE_SFIXED32: 15,
                        TYPE_SFIXED64: 16,
                        TYPE_SINT32: 17,
                        TYPE_SINT64: 18
                      }
                    },
                    Label: {
                      values: {
                        LABEL_OPTIONAL: 1,
                        LABEL_REQUIRED: 2,
                        LABEL_REPEATED: 3
                      }
                    }
                  }
                },
                OneofDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    options: {
                      type: "OneofOptions",
                      id: 2
                    }
                  }
                },
                EnumDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      rule: "repeated",
                      type: "EnumValueDescriptorProto",
                      id: 2
                    },
                    options: {
                      type: "EnumOptions",
                      id: 3
                    }
                  }
                },
                EnumValueDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    number: {
                      type: "int32",
                      id: 2
                    },
                    options: {
                      type: "EnumValueOptions",
                      id: 3
                    }
                  }
                },
                ServiceDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    method: {
                      rule: "repeated",
                      type: "MethodDescriptorProto",
                      id: 2
                    },
                    options: {
                      type: "ServiceOptions",
                      id: 3
                    }
                  }
                },
                MethodDescriptorProto: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    inputType: {
                      type: "string",
                      id: 2
                    },
                    outputType: {
                      type: "string",
                      id: 3
                    },
                    options: {
                      type: "MethodOptions",
                      id: 4
                    },
                    clientStreaming: {
                      type: "bool",
                      id: 5
                    },
                    serverStreaming: {
                      type: "bool",
                      id: 6
                    }
                  }
                },
                FileOptions: {
                  fields: {
                    javaPackage: {
                      type: "string",
                      id: 1
                    },
                    javaOuterClassname: {
                      type: "string",
                      id: 8
                    },
                    javaMultipleFiles: {
                      type: "bool",
                      id: 10
                    },
                    javaGenerateEqualsAndHash: {
                      type: "bool",
                      id: 20,
                      options: {
                        deprecated: true
                      }
                    },
                    javaStringCheckUtf8: {
                      type: "bool",
                      id: 27
                    },
                    optimizeFor: {
                      type: "OptimizeMode",
                      id: 9,
                      options: {
                        default: "SPEED"
                      }
                    },
                    goPackage: {
                      type: "string",
                      id: 11
                    },
                    ccGenericServices: {
                      type: "bool",
                      id: 16
                    },
                    javaGenericServices: {
                      type: "bool",
                      id: 17
                    },
                    pyGenericServices: {
                      type: "bool",
                      id: 18
                    },
                    deprecated: {
                      type: "bool",
                      id: 23
                    },
                    ccEnableArenas: {
                      type: "bool",
                      id: 31
                    },
                    objcClassPrefix: {
                      type: "string",
                      id: 36
                    },
                    csharpNamespace: {
                      type: "string",
                      id: 37
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      38,
                      38
                    ]
                  ],
                  nested: {
                    OptimizeMode: {
                      values: {
                        SPEED: 1,
                        CODE_SIZE: 2,
                        LITE_RUNTIME: 3
                      }
                    }
                  }
                },
                MessageOptions: {
                  fields: {
                    messageSetWireFormat: {
                      type: "bool",
                      id: 1
                    },
                    noStandardDescriptorAccessor: {
                      type: "bool",
                      id: 2
                    },
                    deprecated: {
                      type: "bool",
                      id: 3
                    },
                    mapEntry: {
                      type: "bool",
                      id: 7
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      8,
                      8
                    ]
                  ]
                },
                FieldOptions: {
                  fields: {
                    ctype: {
                      type: "CType",
                      id: 1,
                      options: {
                        default: "STRING"
                      }
                    },
                    packed: {
                      type: "bool",
                      id: 2
                    },
                    jstype: {
                      type: "JSType",
                      id: 6,
                      options: {
                        default: "JS_NORMAL"
                      }
                    },
                    lazy: {
                      type: "bool",
                      id: 5
                    },
                    deprecated: {
                      type: "bool",
                      id: 3
                    },
                    weak: {
                      type: "bool",
                      id: 10
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ],
                  reserved: [
                    [
                      4,
                      4
                    ]
                  ],
                  nested: {
                    CType: {
                      values: {
                        STRING: 0,
                        CORD: 1,
                        STRING_PIECE: 2
                      }
                    },
                    JSType: {
                      values: {
                        JS_NORMAL: 0,
                        JS_STRING: 1,
                        JS_NUMBER: 2
                      }
                    }
                  }
                },
                OneofOptions: {
                  fields: {
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                EnumOptions: {
                  fields: {
                    allowAlias: {
                      type: "bool",
                      id: 2
                    },
                    deprecated: {
                      type: "bool",
                      id: 3
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                EnumValueOptions: {
                  fields: {
                    deprecated: {
                      type: "bool",
                      id: 1
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                ServiceOptions: {
                  fields: {
                    deprecated: {
                      type: "bool",
                      id: 33
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                MethodOptions: {
                  fields: {
                    deprecated: {
                      type: "bool",
                      id: 33
                    },
                    uninterpretedOption: {
                      rule: "repeated",
                      type: "UninterpretedOption",
                      id: 999
                    }
                  },
                  extensions: [
                    [
                      1e3,
                      536870911
                    ]
                  ]
                },
                UninterpretedOption: {
                  fields: {
                    name: {
                      rule: "repeated",
                      type: "NamePart",
                      id: 2
                    },
                    identifierValue: {
                      type: "string",
                      id: 3
                    },
                    positiveIntValue: {
                      type: "uint64",
                      id: 4
                    },
                    negativeIntValue: {
                      type: "int64",
                      id: 5
                    },
                    doubleValue: {
                      type: "double",
                      id: 6
                    },
                    stringValue: {
                      type: "bytes",
                      id: 7
                    },
                    aggregateValue: {
                      type: "string",
                      id: 8
                    }
                  },
                  nested: {
                    NamePart: {
                      fields: {
                        namePart: {
                          rule: "required",
                          type: "string",
                          id: 1
                        },
                        isExtension: {
                          rule: "required",
                          type: "bool",
                          id: 2
                        }
                      }
                    }
                  }
                },
                SourceCodeInfo: {
                  fields: {
                    location: {
                      rule: "repeated",
                      type: "Location",
                      id: 1
                    }
                  },
                  nested: {
                    Location: {
                      fields: {
                        path: {
                          rule: "repeated",
                          type: "int32",
                          id: 1
                        },
                        span: {
                          rule: "repeated",
                          type: "int32",
                          id: 2
                        },
                        leadingComments: {
                          type: "string",
                          id: 3
                        },
                        trailingComments: {
                          type: "string",
                          id: 4
                        },
                        leadingDetachedComments: {
                          rule: "repeated",
                          type: "string",
                          id: 6
                        }
                      }
                    }
                  }
                },
                GeneratedCodeInfo: {
                  fields: {
                    annotation: {
                      rule: "repeated",
                      type: "Annotation",
                      id: 1
                    }
                  },
                  nested: {
                    Annotation: {
                      fields: {
                        path: {
                          rule: "repeated",
                          type: "int32",
                          id: 1
                        },
                        sourceFile: {
                          type: "string",
                          id: 2
                        },
                        begin: {
                          type: "int32",
                          id: 3
                        },
                        end: {
                          type: "int32",
                          id: 4
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
  }
});

// node_modules/protobufjs/ext/descriptor/index.js
var require_descriptor2 = __commonJS({
  "node_modules/protobufjs/ext/descriptor/index.js"(exports2, module2) {
    "use strict";
    var $protobuf = require_protobufjs();
    module2.exports = exports2 = $protobuf.descriptor = $protobuf.Root.fromJSON(require_descriptor()).lookup(".google.protobuf");
    var Namespace = $protobuf.Namespace;
    var Root = $protobuf.Root;
    var Enum = $protobuf.Enum;
    var Type = $protobuf.Type;
    var Field = $protobuf.Field;
    var MapField = $protobuf.MapField;
    var OneOf = $protobuf.OneOf;
    var Service = $protobuf.Service;
    var Method = $protobuf.Method;
    Root.fromDescriptor = function fromDescriptor(descriptor) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.FileDescriptorSet.decode(descriptor);
      var root = new Root();
      if (descriptor.file) {
        var fileDescriptor, filePackage;
        for (var j = 0, i; j < descriptor.file.length; ++j) {
          filePackage = root;
          if ((fileDescriptor = descriptor.file[j])["package"] && fileDescriptor["package"].length)
            filePackage = root.define(fileDescriptor["package"]);
          if (fileDescriptor.name && fileDescriptor.name.length)
            root.files.push(filePackage.filename = fileDescriptor.name);
          if (fileDescriptor.messageType)
            for (i = 0; i < fileDescriptor.messageType.length; ++i)
              filePackage.add(Type.fromDescriptor(fileDescriptor.messageType[i], fileDescriptor.syntax));
          if (fileDescriptor.enumType)
            for (i = 0; i < fileDescriptor.enumType.length; ++i)
              filePackage.add(Enum.fromDescriptor(fileDescriptor.enumType[i]));
          if (fileDescriptor.extension)
            for (i = 0; i < fileDescriptor.extension.length; ++i)
              filePackage.add(Field.fromDescriptor(fileDescriptor.extension[i]));
          if (fileDescriptor.service)
            for (i = 0; i < fileDescriptor.service.length; ++i)
              filePackage.add(Service.fromDescriptor(fileDescriptor.service[i]));
          var opts = fromDescriptorOptions(fileDescriptor.options, exports2.FileOptions);
          if (opts) {
            var ks = Object.keys(opts);
            for (i = 0; i < ks.length; ++i)
              filePackage.setOption(ks[i], opts[ks[i]]);
          }
        }
      }
      return root;
    };
    Root.prototype.toDescriptor = function toDescriptor(syntax) {
      var set = exports2.FileDescriptorSet.create();
      Root_toDescriptorRecursive(this, set.file, syntax);
      return set;
    };
    function Root_toDescriptorRecursive(ns, files, syntax) {
      var file = exports2.FileDescriptorProto.create({ name: ns.filename || (ns.fullName.substring(1).replace(/\./g, "_") || "root") + ".proto" });
      if (syntax)
        file.syntax = syntax;
      if (!(ns instanceof Root))
        file["package"] = ns.fullName.substring(1);
      for (var i = 0, nested; i < ns.nestedArray.length; ++i)
        if ((nested = ns._nestedArray[i]) instanceof Type)
          file.messageType.push(nested.toDescriptor(syntax));
        else if (nested instanceof Enum)
          file.enumType.push(nested.toDescriptor());
        else if (nested instanceof Field)
          file.extension.push(nested.toDescriptor(syntax));
        else if (nested instanceof Service)
          file.service.push(nested.toDescriptor());
        else if (nested instanceof /* plain */
        Namespace)
          Root_toDescriptorRecursive(nested, files, syntax);
      file.options = toDescriptorOptions(ns.options, exports2.FileOptions);
      if (file.messageType.length + file.enumType.length + file.extension.length + file.service.length)
        files.push(file);
    }
    var unnamedMessageIndex = 0;
    Type.fromDescriptor = function fromDescriptor(descriptor, syntax) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.DescriptorProto.decode(descriptor);
      var type = new Type(descriptor.name.length ? descriptor.name : "Type" + unnamedMessageIndex++, fromDescriptorOptions(descriptor.options, exports2.MessageOptions)), i;
      if (descriptor.oneofDecl)
        for (i = 0; i < descriptor.oneofDecl.length; ++i)
          type.add(OneOf.fromDescriptor(descriptor.oneofDecl[i]));
      if (descriptor.field)
        for (i = 0; i < descriptor.field.length; ++i) {
          var field = Field.fromDescriptor(descriptor.field[i], syntax);
          type.add(field);
          if (descriptor.field[i].hasOwnProperty("oneofIndex"))
            type.oneofsArray[descriptor.field[i].oneofIndex].add(field);
        }
      if (descriptor.extension)
        for (i = 0; i < descriptor.extension.length; ++i)
          type.add(Field.fromDescriptor(descriptor.extension[i], syntax));
      if (descriptor.nestedType)
        for (i = 0; i < descriptor.nestedType.length; ++i) {
          type.add(Type.fromDescriptor(descriptor.nestedType[i], syntax));
          if (descriptor.nestedType[i].options && descriptor.nestedType[i].options.mapEntry)
            type.setOption("map_entry", true);
        }
      if (descriptor.enumType)
        for (i = 0; i < descriptor.enumType.length; ++i)
          type.add(Enum.fromDescriptor(descriptor.enumType[i]));
      if (descriptor.extensionRange && descriptor.extensionRange.length) {
        type.extensions = [];
        for (i = 0; i < descriptor.extensionRange.length; ++i)
          type.extensions.push([descriptor.extensionRange[i].start, descriptor.extensionRange[i].end]);
      }
      if (descriptor.reservedRange && descriptor.reservedRange.length || descriptor.reservedName && descriptor.reservedName.length) {
        type.reserved = [];
        if (descriptor.reservedRange)
          for (i = 0; i < descriptor.reservedRange.length; ++i)
            type.reserved.push([descriptor.reservedRange[i].start, descriptor.reservedRange[i].end]);
        if (descriptor.reservedName)
          for (i = 0; i < descriptor.reservedName.length; ++i)
            type.reserved.push(descriptor.reservedName[i]);
      }
      return type;
    };
    Type.prototype.toDescriptor = function toDescriptor(syntax) {
      var descriptor = exports2.DescriptorProto.create({ name: this.name }), i;
      for (i = 0; i < this.fieldsArray.length; ++i) {
        var fieldDescriptor;
        descriptor.field.push(fieldDescriptor = this._fieldsArray[i].toDescriptor(syntax));
        if (this._fieldsArray[i] instanceof MapField) {
          var keyType = toDescriptorType(this._fieldsArray[i].keyType, this._fieldsArray[i].resolvedKeyType), valueType = toDescriptorType(this._fieldsArray[i].type, this._fieldsArray[i].resolvedType), valueTypeName = valueType === /* type */
          11 || valueType === /* enum */
          14 ? this._fieldsArray[i].resolvedType && shortname(this.parent, this._fieldsArray[i].resolvedType) || this._fieldsArray[i].type : void 0;
          descriptor.nestedType.push(exports2.DescriptorProto.create({
            name: fieldDescriptor.typeName,
            field: [
              exports2.FieldDescriptorProto.create({ name: "key", number: 1, label: 1, type: keyType }),
              // can't reference a type or enum
              exports2.FieldDescriptorProto.create({ name: "value", number: 2, label: 1, type: valueType, typeName: valueTypeName })
            ],
            options: exports2.MessageOptions.create({ mapEntry: true })
          }));
        }
      }
      for (i = 0; i < this.oneofsArray.length; ++i)
        descriptor.oneofDecl.push(this._oneofsArray[i].toDescriptor());
      for (i = 0; i < this.nestedArray.length; ++i) {
        if (this._nestedArray[i] instanceof Field)
          descriptor.field.push(this._nestedArray[i].toDescriptor(syntax));
        else if (this._nestedArray[i] instanceof Type)
          descriptor.nestedType.push(this._nestedArray[i].toDescriptor(syntax));
        else if (this._nestedArray[i] instanceof Enum)
          descriptor.enumType.push(this._nestedArray[i].toDescriptor());
      }
      if (this.extensions)
        for (i = 0; i < this.extensions.length; ++i)
          descriptor.extensionRange.push(exports2.DescriptorProto.ExtensionRange.create({ start: this.extensions[i][0], end: this.extensions[i][1] }));
      if (this.reserved)
        for (i = 0; i < this.reserved.length; ++i)
          if (typeof this.reserved[i] === "string")
            descriptor.reservedName.push(this.reserved[i]);
          else
            descriptor.reservedRange.push(exports2.DescriptorProto.ReservedRange.create({ start: this.reserved[i][0], end: this.reserved[i][1] }));
      descriptor.options = toDescriptorOptions(this.options, exports2.MessageOptions);
      return descriptor;
    };
    var numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;
    Field.fromDescriptor = function fromDescriptor(descriptor, syntax) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.DescriptorProto.decode(descriptor);
      if (typeof descriptor.number !== "number")
        throw Error("missing field id");
      var fieldType;
      if (descriptor.typeName && descriptor.typeName.length)
        fieldType = descriptor.typeName;
      else
        fieldType = fromDescriptorType(descriptor.type);
      var fieldRule;
      switch (descriptor.label) {
        case 1:
          fieldRule = void 0;
          break;
        case 2:
          fieldRule = "required";
          break;
        case 3:
          fieldRule = "repeated";
          break;
        default:
          throw Error("illegal label: " + descriptor.label);
      }
      var extendee = descriptor.extendee;
      if (descriptor.extendee !== void 0) {
        extendee = extendee.length ? extendee : void 0;
      }
      var field = new Field(
        descriptor.name.length ? descriptor.name : "field" + descriptor.number,
        descriptor.number,
        fieldType,
        fieldRule,
        extendee
      );
      field.options = fromDescriptorOptions(descriptor.options, exports2.FieldOptions);
      if (descriptor.defaultValue && descriptor.defaultValue.length) {
        var defaultValue = descriptor.defaultValue;
        switch (defaultValue) {
          case "true":
          case "TRUE":
            defaultValue = true;
            break;
          case "false":
          case "FALSE":
            defaultValue = false;
            break;
          default:
            var match = numberRe.exec(defaultValue);
            if (match)
              defaultValue = parseInt(defaultValue);
            break;
        }
        field.setOption("default", defaultValue);
      }
      if (packableDescriptorType(descriptor.type)) {
        if (syntax === "proto3") {
          if (descriptor.options && !descriptor.options.packed)
            field.setOption("packed", false);
        } else if (!(descriptor.options && descriptor.options.packed))
          field.setOption("packed", false);
      }
      return field;
    };
    Field.prototype.toDescriptor = function toDescriptor(syntax) {
      var descriptor = exports2.FieldDescriptorProto.create({ name: this.name, number: this.id });
      if (this.map) {
        descriptor.type = 11;
        descriptor.typeName = $protobuf.util.ucFirst(this.name);
        descriptor.label = 3;
      } else {
        switch (descriptor.type = toDescriptorType(this.type, this.resolve().resolvedType)) {
          case 10:
          case 11:
          case 14:
            descriptor.typeName = this.resolvedType ? shortname(this.parent, this.resolvedType) : this.type;
            break;
        }
        switch (this.rule) {
          case "repeated":
            descriptor.label = 3;
            break;
          case "required":
            descriptor.label = 2;
            break;
          default:
            descriptor.label = 1;
            break;
        }
      }
      descriptor.extendee = this.extensionField ? this.extensionField.parent.fullName : this.extend;
      if (this.partOf) {
        if ((descriptor.oneofIndex = this.parent.oneofsArray.indexOf(this.partOf)) < 0)
          throw Error("missing oneof");
      }
      if (this.options) {
        descriptor.options = toDescriptorOptions(this.options, exports2.FieldOptions);
        if (this.options["default"] != null)
          descriptor.defaultValue = String(this.options["default"]);
      }
      if (syntax === "proto3") {
        if (!this.packed)
          (descriptor.options || (descriptor.options = exports2.FieldOptions.create())).packed = false;
      } else if (this.packed)
        (descriptor.options || (descriptor.options = exports2.FieldOptions.create())).packed = true;
      return descriptor;
    };
    var unnamedEnumIndex = 0;
    Enum.fromDescriptor = function fromDescriptor(descriptor) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.EnumDescriptorProto.decode(descriptor);
      var values = {};
      if (descriptor.value)
        for (var i = 0; i < descriptor.value.length; ++i) {
          var name = descriptor.value[i].name, value = descriptor.value[i].number || 0;
          values[name && name.length ? name : "NAME" + value] = value;
        }
      return new Enum(
        descriptor.name && descriptor.name.length ? descriptor.name : "Enum" + unnamedEnumIndex++,
        values,
        fromDescriptorOptions(descriptor.options, exports2.EnumOptions)
      );
    };
    Enum.prototype.toDescriptor = function toDescriptor() {
      var values = [];
      for (var i = 0, ks = Object.keys(this.values); i < ks.length; ++i)
        values.push(exports2.EnumValueDescriptorProto.create({ name: ks[i], number: this.values[ks[i]] }));
      return exports2.EnumDescriptorProto.create({
        name: this.name,
        value: values,
        options: toDescriptorOptions(this.options, exports2.EnumOptions)
      });
    };
    var unnamedOneofIndex = 0;
    OneOf.fromDescriptor = function fromDescriptor(descriptor) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.OneofDescriptorProto.decode(descriptor);
      return new OneOf(
        // unnamedOneOfIndex is global, not per type, because we have no ref to a type here
        descriptor.name && descriptor.name.length ? descriptor.name : "oneof" + unnamedOneofIndex++
        // fromDescriptorOptions(descriptor.options, exports.OneofOptions) - only uninterpreted_option
      );
    };
    OneOf.prototype.toDescriptor = function toDescriptor() {
      return exports2.OneofDescriptorProto.create({
        name: this.name
        // options: toDescriptorOptions(this.options, exports.OneofOptions) - only uninterpreted_option
      });
    };
    var unnamedServiceIndex = 0;
    Service.fromDescriptor = function fromDescriptor(descriptor) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.ServiceDescriptorProto.decode(descriptor);
      var service = new Service(descriptor.name && descriptor.name.length ? descriptor.name : "Service" + unnamedServiceIndex++, fromDescriptorOptions(descriptor.options, exports2.ServiceOptions));
      if (descriptor.method)
        for (var i = 0; i < descriptor.method.length; ++i)
          service.add(Method.fromDescriptor(descriptor.method[i]));
      return service;
    };
    Service.prototype.toDescriptor = function toDescriptor() {
      var methods = [];
      for (var i = 0; i < this.methodsArray.length; ++i)
        methods.push(this._methodsArray[i].toDescriptor());
      return exports2.ServiceDescriptorProto.create({
        name: this.name,
        method: methods,
        options: toDescriptorOptions(this.options, exports2.ServiceOptions)
      });
    };
    var unnamedMethodIndex = 0;
    Method.fromDescriptor = function fromDescriptor(descriptor) {
      if (typeof descriptor.length === "number")
        descriptor = exports2.MethodDescriptorProto.decode(descriptor);
      return new Method(
        // unnamedMethodIndex is global, not per service, because we have no ref to a service here
        descriptor.name && descriptor.name.length ? descriptor.name : "Method" + unnamedMethodIndex++,
        "rpc",
        descriptor.inputType,
        descriptor.outputType,
        Boolean(descriptor.clientStreaming),
        Boolean(descriptor.serverStreaming),
        fromDescriptorOptions(descriptor.options, exports2.MethodOptions)
      );
    };
    Method.prototype.toDescriptor = function toDescriptor() {
      return exports2.MethodDescriptorProto.create({
        name: this.name,
        inputType: this.resolvedRequestType ? this.resolvedRequestType.fullName : this.requestType,
        outputType: this.resolvedResponseType ? this.resolvedResponseType.fullName : this.responseType,
        clientStreaming: this.requestStream,
        serverStreaming: this.responseStream,
        options: toDescriptorOptions(this.options, exports2.MethodOptions)
      });
    };
    function fromDescriptorType(type) {
      switch (type) {
        case 1:
          return "double";
        case 2:
          return "float";
        case 3:
          return "int64";
        case 4:
          return "uint64";
        case 5:
          return "int32";
        case 6:
          return "fixed64";
        case 7:
          return "fixed32";
        case 8:
          return "bool";
        case 9:
          return "string";
        case 12:
          return "bytes";
        case 13:
          return "uint32";
        case 15:
          return "sfixed32";
        case 16:
          return "sfixed64";
        case 17:
          return "sint32";
        case 18:
          return "sint64";
      }
      throw Error("illegal type: " + type);
    }
    function packableDescriptorType(type) {
      switch (type) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
          return true;
      }
      return false;
    }
    function toDescriptorType(type, resolvedType) {
      switch (type) {
        case "double":
          return 1;
        case "float":
          return 2;
        case "int64":
          return 3;
        case "uint64":
          return 4;
        case "int32":
          return 5;
        case "fixed64":
          return 6;
        case "fixed32":
          return 7;
        case "bool":
          return 8;
        case "string":
          return 9;
        case "bytes":
          return 12;
        case "uint32":
          return 13;
        case "sfixed32":
          return 15;
        case "sfixed64":
          return 16;
        case "sint32":
          return 17;
        case "sint64":
          return 18;
      }
      if (resolvedType instanceof Enum)
        return 14;
      if (resolvedType instanceof Type)
        return resolvedType.group ? 10 : 11;
      throw Error("illegal type: " + type);
    }
    function fromDescriptorOptions(options, type) {
      if (!options)
        return void 0;
      var out = [];
      for (var i = 0, field, key, val; i < type.fieldsArray.length; ++i)
        if ((key = (field = type._fieldsArray[i]).name) !== "uninterpretedOption") {
          if (options.hasOwnProperty(key)) {
            val = options[key];
            if (field.resolvedType instanceof Enum && typeof val === "number" && field.resolvedType.valuesById[val] !== void 0)
              val = field.resolvedType.valuesById[val];
            out.push(underScore(key), val);
          }
        }
      return out.length ? $protobuf.util.toObject(out) : void 0;
    }
    function toDescriptorOptions(options, type) {
      if (!options)
        return void 0;
      var out = [];
      for (var i = 0, ks = Object.keys(options), key, val; i < ks.length; ++i) {
        val = options[key = ks[i]];
        if (key === "default")
          continue;
        var field = type.fields[key];
        if (!field && !(field = type.fields[key = $protobuf.util.camelCase(key)]))
          continue;
        out.push(key, val);
      }
      return out.length ? type.fromObject($protobuf.util.toObject(out)) : void 0;
    }
    function shortname(from, to) {
      var fromPath = from.fullName.split("."), toPath = to.fullName.split("."), i = 0, j = 0, k = toPath.length - 1;
      if (!(from instanceof Root) && to instanceof Namespace)
        while (i < fromPath.length && j < k && fromPath[i] === toPath[j]) {
          var other = to.lookup(fromPath[i++], true);
          if (other !== null && other !== to)
            break;
          ++j;
        }
      else
        for (; i < fromPath.length && j < k && fromPath[i] === toPath[j]; ++i, ++j)
          ;
      return toPath.slice(j).join(".");
    }
    function underScore(str) {
      return str.substring(0, 1) + str.substring(1).replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) {
        return "_" + $1.toLowerCase();
      });
    }
  }
});

// node_modules/protobufjs/google/protobuf/api.json
var require_api = __commonJS({
  "node_modules/protobufjs/google/protobuf/api.json"(exports2, module2) {
    module2.exports = {
      nested: {
        google: {
          nested: {
            protobuf: {
              nested: {
                Api: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    methods: {
                      rule: "repeated",
                      type: "Method",
                      id: 2
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 3
                    },
                    version: {
                      type: "string",
                      id: 4
                    },
                    sourceContext: {
                      type: "SourceContext",
                      id: 5
                    },
                    mixins: {
                      rule: "repeated",
                      type: "Mixin",
                      id: 6
                    },
                    syntax: {
                      type: "Syntax",
                      id: 7
                    }
                  }
                },
                Method: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    requestTypeUrl: {
                      type: "string",
                      id: 2
                    },
                    requestStreaming: {
                      type: "bool",
                      id: 3
                    },
                    responseTypeUrl: {
                      type: "string",
                      id: 4
                    },
                    responseStreaming: {
                      type: "bool",
                      id: 5
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 6
                    },
                    syntax: {
                      type: "Syntax",
                      id: 7
                    }
                  }
                },
                Mixin: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    root: {
                      type: "string",
                      id: 2
                    }
                  }
                },
                SourceContext: {
                  fields: {
                    fileName: {
                      type: "string",
                      id: 1
                    }
                  }
                },
                Option: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      type: "Any",
                      id: 2
                    }
                  }
                },
                Syntax: {
                  values: {
                    SYNTAX_PROTO2: 0,
                    SYNTAX_PROTO3: 1
                  }
                }
              }
            }
          }
        }
      }
    };
  }
});

// node_modules/protobufjs/google/protobuf/source_context.json
var require_source_context = __commonJS({
  "node_modules/protobufjs/google/protobuf/source_context.json"(exports2, module2) {
    module2.exports = {
      nested: {
        google: {
          nested: {
            protobuf: {
              nested: {
                SourceContext: {
                  fields: {
                    fileName: {
                      type: "string",
                      id: 1
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
  }
});

// node_modules/protobufjs/google/protobuf/type.json
var require_type2 = __commonJS({
  "node_modules/protobufjs/google/protobuf/type.json"(exports2, module2) {
    module2.exports = {
      nested: {
        google: {
          nested: {
            protobuf: {
              nested: {
                Type: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    fields: {
                      rule: "repeated",
                      type: "Field",
                      id: 2
                    },
                    oneofs: {
                      rule: "repeated",
                      type: "string",
                      id: 3
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 4
                    },
                    sourceContext: {
                      type: "SourceContext",
                      id: 5
                    },
                    syntax: {
                      type: "Syntax",
                      id: 6
                    }
                  }
                },
                Field: {
                  fields: {
                    kind: {
                      type: "Kind",
                      id: 1
                    },
                    cardinality: {
                      type: "Cardinality",
                      id: 2
                    },
                    number: {
                      type: "int32",
                      id: 3
                    },
                    name: {
                      type: "string",
                      id: 4
                    },
                    typeUrl: {
                      type: "string",
                      id: 6
                    },
                    oneofIndex: {
                      type: "int32",
                      id: 7
                    },
                    packed: {
                      type: "bool",
                      id: 8
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 9
                    },
                    jsonName: {
                      type: "string",
                      id: 10
                    },
                    defaultValue: {
                      type: "string",
                      id: 11
                    }
                  },
                  nested: {
                    Kind: {
                      values: {
                        TYPE_UNKNOWN: 0,
                        TYPE_DOUBLE: 1,
                        TYPE_FLOAT: 2,
                        TYPE_INT64: 3,
                        TYPE_UINT64: 4,
                        TYPE_INT32: 5,
                        TYPE_FIXED64: 6,
                        TYPE_FIXED32: 7,
                        TYPE_BOOL: 8,
                        TYPE_STRING: 9,
                        TYPE_GROUP: 10,
                        TYPE_MESSAGE: 11,
                        TYPE_BYTES: 12,
                        TYPE_UINT32: 13,
                        TYPE_ENUM: 14,
                        TYPE_SFIXED32: 15,
                        TYPE_SFIXED64: 16,
                        TYPE_SINT32: 17,
                        TYPE_SINT64: 18
                      }
                    },
                    Cardinality: {
                      values: {
                        CARDINALITY_UNKNOWN: 0,
                        CARDINALITY_OPTIONAL: 1,
                        CARDINALITY_REQUIRED: 2,
                        CARDINALITY_REPEATED: 3
                      }
                    }
                  }
                },
                Enum: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    enumvalue: {
                      rule: "repeated",
                      type: "EnumValue",
                      id: 2
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 3
                    },
                    sourceContext: {
                      type: "SourceContext",
                      id: 4
                    },
                    syntax: {
                      type: "Syntax",
                      id: 5
                    }
                  }
                },
                EnumValue: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    number: {
                      type: "int32",
                      id: 2
                    },
                    options: {
                      rule: "repeated",
                      type: "Option",
                      id: 3
                    }
                  }
                },
                Option: {
                  fields: {
                    name: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      type: "Any",
                      id: 2
                    }
                  }
                },
                Syntax: {
                  values: {
                    SYNTAX_PROTO2: 0,
                    SYNTAX_PROTO3: 1
                  }
                },
                Any: {
                  fields: {
                    type_url: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      type: "bytes",
                      id: 2
                    }
                  }
                },
                SourceContext: {
                  fields: {
                    fileName: {
                      type: "string",
                      id: 1
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
  }
});

// node_modules/@grpc/proto-loader/build/src/util.js
var require_util2 = __commonJS({
  "node_modules/@grpc/proto-loader/build/src/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.addCommonProtos = exports2.loadProtosWithOptionsSync = exports2.loadProtosWithOptions = void 0;
    var fs = require("fs");
    var path = require("path");
    var Protobuf = require_protobufjs();
    function addIncludePathResolver(root, includePaths) {
      const originalResolvePath = root.resolvePath;
      root.resolvePath = (origin, target) => {
        if (path.isAbsolute(target)) {
          return target;
        }
        for (const directory of includePaths) {
          const fullPath = path.join(directory, target);
          try {
            fs.accessSync(fullPath, fs.constants.R_OK);
            return fullPath;
          } catch (err) {
            continue;
          }
        }
        process.emitWarning(`${target} not found in any of the include paths ${includePaths}`);
        return originalResolvePath(origin, target);
      };
    }
    async function loadProtosWithOptions(filename, options) {
      const root = new Protobuf.Root();
      options = options || {};
      if (!!options.includeDirs) {
        if (!Array.isArray(options.includeDirs)) {
          return Promise.reject(new Error("The includeDirs option must be an array"));
        }
        addIncludePathResolver(root, options.includeDirs);
      }
      const loadedRoot = await root.load(filename, options);
      loadedRoot.resolveAll();
      return loadedRoot;
    }
    exports2.loadProtosWithOptions = loadProtosWithOptions;
    function loadProtosWithOptionsSync(filename, options) {
      const root = new Protobuf.Root();
      options = options || {};
      if (!!options.includeDirs) {
        if (!Array.isArray(options.includeDirs)) {
          throw new Error("The includeDirs option must be an array");
        }
        addIncludePathResolver(root, options.includeDirs);
      }
      const loadedRoot = root.loadSync(filename, options);
      loadedRoot.resolveAll();
      return loadedRoot;
    }
    exports2.loadProtosWithOptionsSync = loadProtosWithOptionsSync;
    function addCommonProtos() {
      const apiDescriptor = require_api();
      const descriptorDescriptor = require_descriptor();
      const sourceContextDescriptor = require_source_context();
      const typeDescriptor = require_type2();
      Protobuf.common("api", apiDescriptor.nested.google.nested.protobuf.nested);
      Protobuf.common("descriptor", descriptorDescriptor.nested.google.nested.protobuf.nested);
      Protobuf.common("source_context", sourceContextDescriptor.nested.google.nested.protobuf.nested);
      Protobuf.common("type", typeDescriptor.nested.google.nested.protobuf.nested);
    }
    exports2.addCommonProtos = addCommonProtos;
  }
});

// node_modules/long/umd/index.js
var require_umd = __commonJS({
  "node_modules/long/umd/index.js"(exports2, module2) {
    var Long = function(exports3) {
      "use strict";
      Object.defineProperty(exports3, "__esModule", {
        value: true
      });
      exports3.default = void 0;
      var wasm = null;
      try {
        wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
      } catch (e) {
      }
      function Long2(low, high, unsigned) {
        this.low = low | 0;
        this.high = high | 0;
        this.unsigned = !!unsigned;
      }
      Long2.prototype.__isLong__;
      Object.defineProperty(Long2.prototype, "__isLong__", {
        value: true
      });
      function isLong(obj) {
        return (obj && obj["__isLong__"]) === true;
      }
      function ctz32(value) {
        var c = Math.clz32(value & -value);
        return value ? 31 - c : c;
      }
      Long2.isLong = isLong;
      var INT_CACHE = {};
      var UINT_CACHE = {};
      function fromInt(value, unsigned) {
        var obj, cachedObj, cache;
        if (unsigned) {
          value >>>= 0;
          if (cache = 0 <= value && value < 256) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
              return cachedObj;
          }
          obj = fromBits(value, 0, true);
          if (cache)
            UINT_CACHE[value] = obj;
          return obj;
        } else {
          value |= 0;
          if (cache = -128 <= value && value < 128) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
              return cachedObj;
          }
          obj = fromBits(value, value < 0 ? -1 : 0, false);
          if (cache)
            INT_CACHE[value] = obj;
          return obj;
        }
      }
      Long2.fromInt = fromInt;
      function fromNumber(value, unsigned) {
        if (isNaN(value))
          return unsigned ? UZERO : ZERO;
        if (unsigned) {
          if (value < 0)
            return UZERO;
          if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
        } else {
          if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
          if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
        }
        if (value < 0)
          return fromNumber(-value, unsigned).neg();
        return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
      }
      Long2.fromNumber = fromNumber;
      function fromBits(lowBits, highBits, unsigned) {
        return new Long2(lowBits, highBits, unsigned);
      }
      Long2.fromBits = fromBits;
      var pow_dbl = Math.pow;
      function fromString(str, unsigned, radix) {
        if (str.length === 0)
          throw Error("empty string");
        if (typeof unsigned === "number") {
          radix = unsigned;
          unsigned = false;
        } else {
          unsigned = !!unsigned;
        }
        if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
          return unsigned ? UZERO : ZERO;
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
          throw RangeError("radix");
        var p;
        if ((p = str.indexOf("-")) > 0)
          throw Error("interior hyphen");
        else if (p === 0) {
          return fromString(str.substring(1), unsigned, radix).neg();
        }
        var radixToPower = fromNumber(pow_dbl(radix, 8));
        var result = ZERO;
        for (var i = 0; i < str.length; i += 8) {
          var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
          if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
          } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
          }
        }
        result.unsigned = unsigned;
        return result;
      }
      Long2.fromString = fromString;
      function fromValue(val, unsigned) {
        if (typeof val === "number")
          return fromNumber(val, unsigned);
        if (typeof val === "string")
          return fromString(val, unsigned);
        return fromBits(val.low, val.high, typeof unsigned === "boolean" ? unsigned : val.unsigned);
      }
      Long2.fromValue = fromValue;
      var TWO_PWR_16_DBL = 1 << 16;
      var TWO_PWR_24_DBL = 1 << 24;
      var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
      var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
      var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
      var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
      var ZERO = fromInt(0);
      Long2.ZERO = ZERO;
      var UZERO = fromInt(0, true);
      Long2.UZERO = UZERO;
      var ONE = fromInt(1);
      Long2.ONE = ONE;
      var UONE = fromInt(1, true);
      Long2.UONE = UONE;
      var NEG_ONE = fromInt(-1);
      Long2.NEG_ONE = NEG_ONE;
      var MAX_VALUE = fromBits(4294967295 | 0, 2147483647 | 0, false);
      Long2.MAX_VALUE = MAX_VALUE;
      var MAX_UNSIGNED_VALUE = fromBits(4294967295 | 0, 4294967295 | 0, true);
      Long2.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
      var MIN_VALUE = fromBits(0, 2147483648 | 0, false);
      Long2.MIN_VALUE = MIN_VALUE;
      var LongPrototype = Long2.prototype;
      LongPrototype.toInt = function toInt() {
        return this.unsigned ? this.low >>> 0 : this.low;
      };
      LongPrototype.toNumber = function toNumber() {
        if (this.unsigned)
          return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
      };
      LongPrototype.toString = function toString(radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
          throw RangeError("radix");
        if (this.isZero())
          return "0";
        if (this.isNegative()) {
          if (this.eq(MIN_VALUE)) {
            var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
          } else
            return "-" + this.neg().toString(radix);
        }
        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;
        var result = "";
        while (true) {
          var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
          rem = remDiv;
          if (rem.isZero())
            return digits + result;
          else {
            while (digits.length < 6)
              digits = "0" + digits;
            result = "" + digits + result;
          }
        }
      };
      LongPrototype.getHighBits = function getHighBits() {
        return this.high;
      };
      LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
        return this.high >>> 0;
      };
      LongPrototype.getLowBits = function getLowBits() {
        return this.low;
      };
      LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
        return this.low >>> 0;
      };
      LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
        if (this.isNegative())
          return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
        var val = this.high != 0 ? this.high : this.low;
        for (var bit = 31; bit > 0; bit--)
          if ((val & 1 << bit) != 0)
            break;
        return this.high != 0 ? bit + 33 : bit + 1;
      };
      LongPrototype.isZero = function isZero() {
        return this.high === 0 && this.low === 0;
      };
      LongPrototype.eqz = LongPrototype.isZero;
      LongPrototype.isNegative = function isNegative() {
        return !this.unsigned && this.high < 0;
      };
      LongPrototype.isPositive = function isPositive() {
        return this.unsigned || this.high >= 0;
      };
      LongPrototype.isOdd = function isOdd() {
        return (this.low & 1) === 1;
      };
      LongPrototype.isEven = function isEven() {
        return (this.low & 1) === 0;
      };
      LongPrototype.equals = function equals(other) {
        if (!isLong(other))
          other = fromValue(other);
        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
          return false;
        return this.high === other.high && this.low === other.low;
      };
      LongPrototype.eq = LongPrototype.equals;
      LongPrototype.notEquals = function notEquals(other) {
        return !this.eq(
          /* validates */
          other
        );
      };
      LongPrototype.neq = LongPrototype.notEquals;
      LongPrototype.ne = LongPrototype.notEquals;
      LongPrototype.lessThan = function lessThan(other) {
        return this.comp(
          /* validates */
          other
        ) < 0;
      };
      LongPrototype.lt = LongPrototype.lessThan;
      LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
        return this.comp(
          /* validates */
          other
        ) <= 0;
      };
      LongPrototype.lte = LongPrototype.lessThanOrEqual;
      LongPrototype.le = LongPrototype.lessThanOrEqual;
      LongPrototype.greaterThan = function greaterThan(other) {
        return this.comp(
          /* validates */
          other
        ) > 0;
      };
      LongPrototype.gt = LongPrototype.greaterThan;
      LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
        return this.comp(
          /* validates */
          other
        ) >= 0;
      };
      LongPrototype.gte = LongPrototype.greaterThanOrEqual;
      LongPrototype.ge = LongPrototype.greaterThanOrEqual;
      LongPrototype.compare = function compare(other) {
        if (!isLong(other))
          other = fromValue(other);
        if (this.eq(other))
          return 0;
        var thisNeg = this.isNegative(), otherNeg = other.isNegative();
        if (thisNeg && !otherNeg)
          return -1;
        if (!thisNeg && otherNeg)
          return 1;
        if (!this.unsigned)
          return this.sub(other).isNegative() ? -1 : 1;
        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
      };
      LongPrototype.comp = LongPrototype.compare;
      LongPrototype.negate = function negate() {
        if (!this.unsigned && this.eq(MIN_VALUE))
          return MIN_VALUE;
        return this.not().add(ONE);
      };
      LongPrototype.neg = LongPrototype.negate;
      LongPrototype.add = function add(addend) {
        if (!isLong(addend))
          addend = fromValue(addend);
        var a48 = this.high >>> 16;
        var a32 = this.high & 65535;
        var a16 = this.low >>> 16;
        var a00 = this.low & 65535;
        var b48 = addend.high >>> 16;
        var b32 = addend.high & 65535;
        var b16 = addend.low >>> 16;
        var b00 = addend.low & 65535;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 + b48;
        c48 &= 65535;
        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
      };
      LongPrototype.subtract = function subtract(subtrahend) {
        if (!isLong(subtrahend))
          subtrahend = fromValue(subtrahend);
        return this.add(subtrahend.neg());
      };
      LongPrototype.sub = LongPrototype.subtract;
      LongPrototype.multiply = function multiply(multiplier) {
        if (this.isZero())
          return this;
        if (!isLong(multiplier))
          multiplier = fromValue(multiplier);
        if (wasm) {
          var low = wasm["mul"](this.low, this.high, multiplier.low, multiplier.high);
          return fromBits(low, wasm["get_high"](), this.unsigned);
        }
        if (multiplier.isZero())
          return this.unsigned ? UZERO : ZERO;
        if (this.eq(MIN_VALUE))
          return multiplier.isOdd() ? MIN_VALUE : ZERO;
        if (multiplier.eq(MIN_VALUE))
          return this.isOdd() ? MIN_VALUE : ZERO;
        if (this.isNegative()) {
          if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
          else
            return this.neg().mul(multiplier).neg();
        } else if (multiplier.isNegative())
          return this.mul(multiplier.neg()).neg();
        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
          return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
        var a48 = this.high >>> 16;
        var a32 = this.high & 65535;
        var a16 = this.low >>> 16;
        var a00 = this.low & 65535;
        var b48 = multiplier.high >>> 16;
        var b32 = multiplier.high & 65535;
        var b16 = multiplier.low >>> 16;
        var b00 = multiplier.low & 65535;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 65535;
        return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
      };
      LongPrototype.mul = LongPrototype.multiply;
      LongPrototype.divide = function divide(divisor) {
        if (!isLong(divisor))
          divisor = fromValue(divisor);
        if (divisor.isZero())
          throw Error("division by zero");
        if (wasm) {
          if (!this.unsigned && this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) {
            return this;
          }
          var low = (this.unsigned ? wasm["div_u"] : wasm["div_s"])(this.low, this.high, divisor.low, divisor.high);
          return fromBits(low, wasm["get_high"](), this.unsigned);
        }
        if (this.isZero())
          return this.unsigned ? UZERO : ZERO;
        var approx, rem, res;
        if (!this.unsigned) {
          if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
              return MIN_VALUE;
            else if (divisor.eq(MIN_VALUE))
              return ONE;
            else {
              var halfThis = this.shr(1);
              approx = halfThis.div(divisor).shl(1);
              if (approx.eq(ZERO)) {
                return divisor.isNegative() ? ONE : NEG_ONE;
              } else {
                rem = this.sub(divisor.mul(approx));
                res = approx.add(rem.div(divisor));
                return res;
              }
            }
          } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
          if (this.isNegative()) {
            if (divisor.isNegative())
              return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
          } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
          res = ZERO;
        } else {
          if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
          if (divisor.gt(this))
            return UZERO;
          if (divisor.gt(this.shru(1)))
            return UONE;
          res = UZERO;
        }
        rem = this;
        while (rem.gte(divisor)) {
          approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
          var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48), approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);
          while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
          }
          if (approxRes.isZero())
            approxRes = ONE;
          res = res.add(approxRes);
          rem = rem.sub(approxRem);
        }
        return res;
      };
      LongPrototype.div = LongPrototype.divide;
      LongPrototype.modulo = function modulo(divisor) {
        if (!isLong(divisor))
          divisor = fromValue(divisor);
        if (wasm) {
          var low = (this.unsigned ? wasm["rem_u"] : wasm["rem_s"])(this.low, this.high, divisor.low, divisor.high);
          return fromBits(low, wasm["get_high"](), this.unsigned);
        }
        return this.sub(this.div(divisor).mul(divisor));
      };
      LongPrototype.mod = LongPrototype.modulo;
      LongPrototype.rem = LongPrototype.modulo;
      LongPrototype.not = function not() {
        return fromBits(~this.low, ~this.high, this.unsigned);
      };
      LongPrototype.countLeadingZeros = function countLeadingZeros() {
        return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;
      };
      LongPrototype.clz = LongPrototype.countLeadingZeros;
      LongPrototype.countTrailingZeros = function countTrailingZeros() {
        return this.low ? ctz32(this.low) : ctz32(this.high) + 32;
      };
      LongPrototype.ctz = LongPrototype.countTrailingZeros;
      LongPrototype.and = function and(other) {
        if (!isLong(other))
          other = fromValue(other);
        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
      };
      LongPrototype.or = function or(other) {
        if (!isLong(other))
          other = fromValue(other);
        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
      };
      LongPrototype.xor = function xor(other) {
        if (!isLong(other))
          other = fromValue(other);
        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
      };
      LongPrototype.shiftLeft = function shiftLeft(numBits) {
        if (isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        else if (numBits < 32)
          return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
        else
          return fromBits(0, this.low << numBits - 32, this.unsigned);
      };
      LongPrototype.shl = LongPrototype.shiftLeft;
      LongPrototype.shiftRight = function shiftRight(numBits) {
        if (isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        else if (numBits < 32)
          return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
        else
          return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
      };
      LongPrototype.shr = LongPrototype.shiftRight;
      LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
        if (isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        if (numBits < 32)
          return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);
        if (numBits === 32)
          return fromBits(this.high, 0, this.unsigned);
        return fromBits(this.high >>> numBits - 32, 0, this.unsigned);
      };
      LongPrototype.shru = LongPrototype.shiftRightUnsigned;
      LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;
      LongPrototype.rotateLeft = function rotateLeft(numBits) {
        var b;
        if (isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        if (numBits === 32)
          return fromBits(this.high, this.low, this.unsigned);
        if (numBits < 32) {
          b = 32 - numBits;
          return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);
        }
        numBits -= 32;
        b = 32 - numBits;
        return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);
      };
      LongPrototype.rotl = LongPrototype.rotateLeft;
      LongPrototype.rotateRight = function rotateRight(numBits) {
        var b;
        if (isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        if (numBits === 32)
          return fromBits(this.high, this.low, this.unsigned);
        if (numBits < 32) {
          b = 32 - numBits;
          return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);
        }
        numBits -= 32;
        b = 32 - numBits;
        return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);
      };
      LongPrototype.rotr = LongPrototype.rotateRight;
      LongPrototype.toSigned = function toSigned() {
        if (!this.unsigned)
          return this;
        return fromBits(this.low, this.high, false);
      };
      LongPrototype.toUnsigned = function toUnsigned() {
        if (this.unsigned)
          return this;
        return fromBits(this.low, this.high, true);
      };
      LongPrototype.toBytes = function toBytes(le) {
        return le ? this.toBytesLE() : this.toBytesBE();
      };
      LongPrototype.toBytesLE = function toBytesLE() {
        var hi = this.high, lo = this.low;
        return [lo & 255, lo >>> 8 & 255, lo >>> 16 & 255, lo >>> 24, hi & 255, hi >>> 8 & 255, hi >>> 16 & 255, hi >>> 24];
      };
      LongPrototype.toBytesBE = function toBytesBE() {
        var hi = this.high, lo = this.low;
        return [hi >>> 24, hi >>> 16 & 255, hi >>> 8 & 255, hi & 255, lo >>> 24, lo >>> 16 & 255, lo >>> 8 & 255, lo & 255];
      };
      Long2.fromBytes = function fromBytes(bytes, unsigned, le) {
        return le ? Long2.fromBytesLE(bytes, unsigned) : Long2.fromBytesBE(bytes, unsigned);
      };
      Long2.fromBytesLE = function fromBytesLE(bytes, unsigned) {
        return new Long2(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
      };
      Long2.fromBytesBE = function fromBytesBE(bytes, unsigned) {
        return new Long2(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
      };
      var _default = Long2;
      exports3.default = _default;
      return "default" in exports3 ? exports3.default : exports3;
    }({});
    if (typeof define === "function" && define.amd)
      define([], function() {
        return Long;
      });
    else if (typeof module2 === "object" && typeof exports2 === "object")
      module2.exports = Long;
  }
});

// node_modules/@grpc/proto-loader/build/src/index.js
var require_src2 = __commonJS({
  "node_modules/@grpc/proto-loader/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadFileDescriptorSetFromObject = exports2.loadFileDescriptorSetFromBuffer = exports2.fromJSON = exports2.loadSync = exports2.load = exports2.isAnyExtension = exports2.Long = void 0;
    var camelCase = require_lodash();
    var Protobuf = require_protobufjs();
    var descriptor = require_descriptor2();
    var util_1 = require_util2();
    var Long = require_umd();
    exports2.Long = Long;
    function isAnyExtension(obj) {
      return "@type" in obj && typeof obj["@type"] === "string";
    }
    exports2.isAnyExtension = isAnyExtension;
    var descriptorOptions = {
      longs: String,
      enums: String,
      bytes: String,
      defaults: true,
      oneofs: true,
      json: true
    };
    function joinName(baseName, name) {
      if (baseName === "") {
        return name;
      } else {
        return baseName + "." + name;
      }
    }
    function isHandledReflectionObject(obj) {
      return obj instanceof Protobuf.Service || obj instanceof Protobuf.Type || obj instanceof Protobuf.Enum;
    }
    function isNamespaceBase(obj) {
      return obj instanceof Protobuf.Namespace || obj instanceof Protobuf.Root;
    }
    function getAllHandledReflectionObjects(obj, parentName) {
      const objName = joinName(parentName, obj.name);
      if (isHandledReflectionObject(obj)) {
        return [[objName, obj]];
      } else {
        if (isNamespaceBase(obj) && typeof obj.nested !== "undefined") {
          return Object.keys(obj.nested).map((name) => {
            return getAllHandledReflectionObjects(obj.nested[name], objName);
          }).reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);
        }
      }
      return [];
    }
    function createDeserializer(cls, options) {
      return function deserialize(argBuf) {
        return cls.toObject(cls.decode(argBuf), options);
      };
    }
    function createSerializer(cls) {
      return function serialize(arg) {
        if (Array.isArray(arg)) {
          throw new Error(`Failed to serialize message: expected object with ${cls.name} structure, got array instead`);
        }
        const message = cls.fromObject(arg);
        return cls.encode(message).finish();
      };
    }
    function createMethodDefinition(method, serviceName, options, fileDescriptors) {
      const requestType = method.resolvedRequestType;
      const responseType = method.resolvedResponseType;
      return {
        path: "/" + serviceName + "/" + method.name,
        requestStream: !!method.requestStream,
        responseStream: !!method.responseStream,
        requestSerialize: createSerializer(requestType),
        requestDeserialize: createDeserializer(requestType, options),
        responseSerialize: createSerializer(responseType),
        responseDeserialize: createDeserializer(responseType, options),
        // TODO(murgatroid99): Find a better way to handle this
        originalName: camelCase(method.name),
        requestType: createMessageDefinition(requestType, fileDescriptors),
        responseType: createMessageDefinition(responseType, fileDescriptors)
      };
    }
    function createServiceDefinition(service, name, options, fileDescriptors) {
      const def = {};
      for (const method of service.methodsArray) {
        def[method.name] = createMethodDefinition(method, name, options, fileDescriptors);
      }
      return def;
    }
    function createMessageDefinition(message, fileDescriptors) {
      const messageDescriptor = message.toDescriptor("proto3");
      return {
        format: "Protocol Buffer 3 DescriptorProto",
        type: messageDescriptor.$type.toObject(messageDescriptor, descriptorOptions),
        fileDescriptorProtos: fileDescriptors
      };
    }
    function createEnumDefinition(enumType, fileDescriptors) {
      const enumDescriptor = enumType.toDescriptor("proto3");
      return {
        format: "Protocol Buffer 3 EnumDescriptorProto",
        type: enumDescriptor.$type.toObject(enumDescriptor, descriptorOptions),
        fileDescriptorProtos: fileDescriptors
      };
    }
    function createDefinition(obj, name, options, fileDescriptors) {
      if (obj instanceof Protobuf.Service) {
        return createServiceDefinition(obj, name, options, fileDescriptors);
      } else if (obj instanceof Protobuf.Type) {
        return createMessageDefinition(obj, fileDescriptors);
      } else if (obj instanceof Protobuf.Enum) {
        return createEnumDefinition(obj, fileDescriptors);
      } else {
        throw new Error("Type mismatch in reflection object handling");
      }
    }
    function createPackageDefinition(root, options) {
      const def = {};
      root.resolveAll();
      const descriptorList = root.toDescriptor("proto3").file;
      const bufferList = descriptorList.map((value) => Buffer.from(descriptor.FileDescriptorProto.encode(value).finish()));
      for (const [name, obj] of getAllHandledReflectionObjects(root, "")) {
        def[name] = createDefinition(obj, name, options, bufferList);
      }
      return def;
    }
    function createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options) {
      options = options || {};
      const root = Protobuf.Root.fromDescriptor(decodedDescriptorSet);
      root.resolveAll();
      return createPackageDefinition(root, options);
    }
    function load(filename, options) {
      return (0, util_1.loadProtosWithOptions)(filename, options).then((loadedRoot) => {
        return createPackageDefinition(loadedRoot, options);
      });
    }
    exports2.load = load;
    function loadSync(filename, options) {
      const loadedRoot = (0, util_1.loadProtosWithOptionsSync)(filename, options);
      return createPackageDefinition(loadedRoot, options);
    }
    exports2.loadSync = loadSync;
    function fromJSON(json, options) {
      options = options || {};
      const loadedRoot = Protobuf.Root.fromJSON(json);
      loadedRoot.resolveAll();
      return createPackageDefinition(loadedRoot, options);
    }
    exports2.fromJSON = fromJSON;
    function loadFileDescriptorSetFromBuffer(descriptorSet, options) {
      const decodedDescriptorSet = descriptor.FileDescriptorSet.decode(descriptorSet);
      return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);
    }
    exports2.loadFileDescriptorSetFromBuffer = loadFileDescriptorSetFromBuffer;
    function loadFileDescriptorSetFromObject(descriptorSet, options) {
      const decodedDescriptorSet = descriptor.FileDescriptorSet.fromObject(descriptorSet);
      return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);
    }
    exports2.loadFileDescriptorSetFromObject = loadFileDescriptorSetFromObject;
    (0, util_1.addCommonProtos)();
  }
});

// node_modules/@grpc/grpc-js/build/src/channelz.js
var require_channelz = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/channelz.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setup = exports2.getChannelzServiceDefinition = exports2.getChannelzHandlers = exports2.unregisterChannelzRef = exports2.registerChannelzSocket = exports2.registerChannelzServer = exports2.registerChannelzSubchannel = exports2.registerChannelzChannel = exports2.ChannelzCallTracker = exports2.ChannelzChildrenTracker = exports2.ChannelzTrace = void 0;
    var net_1 = require("net");
    var connectivity_state_1 = require_connectivity_state();
    var constants_1 = require_constants();
    var subchannel_address_1 = require_subchannel_address();
    var admin_1 = require_admin();
    var make_client_1 = require_make_client();
    function channelRefToMessage(ref) {
      return {
        channel_id: ref.id,
        name: ref.name
      };
    }
    function subchannelRefToMessage(ref) {
      return {
        subchannel_id: ref.id,
        name: ref.name
      };
    }
    function serverRefToMessage(ref) {
      return {
        server_id: ref.id
      };
    }
    function socketRefToMessage(ref) {
      return {
        socket_id: ref.id,
        name: ref.name
      };
    }
    var TARGET_RETAINED_TRACES = 32;
    var ChannelzTrace = class {
      constructor() {
        this.events = [];
        this.eventsLogged = 0;
        this.creationTimestamp = /* @__PURE__ */ new Date();
      }
      addTrace(severity, description, child) {
        const timestamp = /* @__PURE__ */ new Date();
        this.events.push({
          description,
          severity,
          timestamp,
          childChannel: (child === null || child === void 0 ? void 0 : child.kind) === "channel" ? child : void 0,
          childSubchannel: (child === null || child === void 0 ? void 0 : child.kind) === "subchannel" ? child : void 0
        });
        if (this.events.length >= TARGET_RETAINED_TRACES * 2) {
          this.events = this.events.slice(TARGET_RETAINED_TRACES);
        }
        this.eventsLogged += 1;
      }
      getTraceMessage() {
        return {
          creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),
          num_events_logged: this.eventsLogged,
          events: this.events.map((event) => {
            return {
              description: event.description,
              severity: event.severity,
              timestamp: dateToProtoTimestamp(event.timestamp),
              channel_ref: event.childChannel ? channelRefToMessage(event.childChannel) : null,
              subchannel_ref: event.childSubchannel ? subchannelRefToMessage(event.childSubchannel) : null
            };
          })
        };
      }
    };
    exports2.ChannelzTrace = ChannelzTrace;
    var ChannelzChildrenTracker = class {
      constructor() {
        this.channelChildren = /* @__PURE__ */ new Map();
        this.subchannelChildren = /* @__PURE__ */ new Map();
        this.socketChildren = /* @__PURE__ */ new Map();
      }
      refChild(child) {
        var _a, _b, _c;
        switch (child.kind) {
          case "channel": {
            const trackedChild = (_a = this.channelChildren.get(child.id)) !== null && _a !== void 0 ? _a : {
              ref: child,
              count: 0
            };
            trackedChild.count += 1;
            this.channelChildren.set(child.id, trackedChild);
            break;
          }
          case "subchannel": {
            const trackedChild = (_b = this.subchannelChildren.get(child.id)) !== null && _b !== void 0 ? _b : {
              ref: child,
              count: 0
            };
            trackedChild.count += 1;
            this.subchannelChildren.set(child.id, trackedChild);
            break;
          }
          case "socket": {
            const trackedChild = (_c = this.socketChildren.get(child.id)) !== null && _c !== void 0 ? _c : {
              ref: child,
              count: 0
            };
            trackedChild.count += 1;
            this.socketChildren.set(child.id, trackedChild);
            break;
          }
        }
      }
      unrefChild(child) {
        switch (child.kind) {
          case "channel": {
            const trackedChild = this.channelChildren.get(child.id);
            if (trackedChild !== void 0) {
              trackedChild.count -= 1;
              if (trackedChild.count === 0) {
                this.channelChildren.delete(child.id);
              } else {
                this.channelChildren.set(child.id, trackedChild);
              }
            }
            break;
          }
          case "subchannel": {
            const trackedChild = this.subchannelChildren.get(child.id);
            if (trackedChild !== void 0) {
              trackedChild.count -= 1;
              if (trackedChild.count === 0) {
                this.subchannelChildren.delete(child.id);
              } else {
                this.subchannelChildren.set(child.id, trackedChild);
              }
            }
            break;
          }
          case "socket": {
            const trackedChild = this.socketChildren.get(child.id);
            if (trackedChild !== void 0) {
              trackedChild.count -= 1;
              if (trackedChild.count === 0) {
                this.socketChildren.delete(child.id);
              } else {
                this.socketChildren.set(child.id, trackedChild);
              }
            }
            break;
          }
        }
      }
      getChildLists() {
        const channels2 = [];
        for (const { ref } of this.channelChildren.values()) {
          channels2.push(ref);
        }
        const subchannels2 = [];
        for (const { ref } of this.subchannelChildren.values()) {
          subchannels2.push(ref);
        }
        const sockets2 = [];
        for (const { ref } of this.socketChildren.values()) {
          sockets2.push(ref);
        }
        return { channels: channels2, subchannels: subchannels2, sockets: sockets2 };
      }
    };
    exports2.ChannelzChildrenTracker = ChannelzChildrenTracker;
    var ChannelzCallTracker = class {
      constructor() {
        this.callsStarted = 0;
        this.callsSucceeded = 0;
        this.callsFailed = 0;
        this.lastCallStartedTimestamp = null;
      }
      addCallStarted() {
        this.callsStarted += 1;
        this.lastCallStartedTimestamp = /* @__PURE__ */ new Date();
      }
      addCallSucceeded() {
        this.callsSucceeded += 1;
      }
      addCallFailed() {
        this.callsFailed += 1;
      }
    };
    exports2.ChannelzCallTracker = ChannelzCallTracker;
    var nextId = 1;
    function getNextId() {
      return nextId++;
    }
    var channels = [];
    var subchannels = [];
    var servers = [];
    var sockets = [];
    function registerChannelzChannel(name, getInfo, channelzEnabled) {
      const id = getNextId();
      const ref = { id, name, kind: "channel" };
      if (channelzEnabled) {
        channels[id] = { ref, getInfo };
      }
      return ref;
    }
    exports2.registerChannelzChannel = registerChannelzChannel;
    function registerChannelzSubchannel(name, getInfo, channelzEnabled) {
      const id = getNextId();
      const ref = { id, name, kind: "subchannel" };
      if (channelzEnabled) {
        subchannels[id] = { ref, getInfo };
      }
      return ref;
    }
    exports2.registerChannelzSubchannel = registerChannelzSubchannel;
    function registerChannelzServer(getInfo, channelzEnabled) {
      const id = getNextId();
      const ref = { id, kind: "server" };
      if (channelzEnabled) {
        servers[id] = { ref, getInfo };
      }
      return ref;
    }
    exports2.registerChannelzServer = registerChannelzServer;
    function registerChannelzSocket(name, getInfo, channelzEnabled) {
      const id = getNextId();
      const ref = { id, name, kind: "socket" };
      if (channelzEnabled) {
        sockets[id] = { ref, getInfo };
      }
      return ref;
    }
    exports2.registerChannelzSocket = registerChannelzSocket;
    function unregisterChannelzRef(ref) {
      switch (ref.kind) {
        case "channel":
          delete channels[ref.id];
          return;
        case "subchannel":
          delete subchannels[ref.id];
          return;
        case "server":
          delete servers[ref.id];
          return;
        case "socket":
          delete sockets[ref.id];
          return;
      }
    }
    exports2.unregisterChannelzRef = unregisterChannelzRef;
    function parseIPv6Section(addressSection) {
      const numberValue = Number.parseInt(addressSection, 16);
      return [numberValue / 256 | 0, numberValue % 256];
    }
    function parseIPv6Chunk(addressChunk) {
      if (addressChunk === "") {
        return [];
      }
      const bytePairs = addressChunk.split(":").map((section) => parseIPv6Section(section));
      const result = [];
      return result.concat(...bytePairs);
    }
    function ipAddressStringToBuffer(ipAddress) {
      if ((0, net_1.isIPv4)(ipAddress)) {
        return Buffer.from(Uint8Array.from(ipAddress.split(".").map((segment) => Number.parseInt(segment))));
      } else if ((0, net_1.isIPv6)(ipAddress)) {
        let leftSection;
        let rightSection;
        const doubleColonIndex = ipAddress.indexOf("::");
        if (doubleColonIndex === -1) {
          leftSection = ipAddress;
          rightSection = "";
        } else {
          leftSection = ipAddress.substring(0, doubleColonIndex);
          rightSection = ipAddress.substring(doubleColonIndex + 2);
        }
        const leftBuffer = Buffer.from(parseIPv6Chunk(leftSection));
        const rightBuffer = Buffer.from(parseIPv6Chunk(rightSection));
        const middleBuffer = Buffer.alloc(16 - leftBuffer.length - rightBuffer.length, 0);
        return Buffer.concat([leftBuffer, middleBuffer, rightBuffer]);
      } else {
        return null;
      }
    }
    function connectivityStateToMessage(state) {
      switch (state) {
        case connectivity_state_1.ConnectivityState.CONNECTING:
          return {
            state: "CONNECTING"
          };
        case connectivity_state_1.ConnectivityState.IDLE:
          return {
            state: "IDLE"
          };
        case connectivity_state_1.ConnectivityState.READY:
          return {
            state: "READY"
          };
        case connectivity_state_1.ConnectivityState.SHUTDOWN:
          return {
            state: "SHUTDOWN"
          };
        case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:
          return {
            state: "TRANSIENT_FAILURE"
          };
        default:
          return {
            state: "UNKNOWN"
          };
      }
    }
    function dateToProtoTimestamp(date) {
      if (!date) {
        return null;
      }
      const millisSinceEpoch = date.getTime();
      return {
        seconds: millisSinceEpoch / 1e3 | 0,
        nanos: millisSinceEpoch % 1e3 * 1e6
      };
    }
    function getChannelMessage(channelEntry) {
      const resolvedInfo = channelEntry.getInfo();
      return {
        ref: channelRefToMessage(channelEntry.ref),
        data: {
          target: resolvedInfo.target,
          state: connectivityStateToMessage(resolvedInfo.state),
          calls_started: resolvedInfo.callTracker.callsStarted,
          calls_succeeded: resolvedInfo.callTracker.callsSucceeded,
          calls_failed: resolvedInfo.callTracker.callsFailed,
          last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),
          trace: resolvedInfo.trace.getTraceMessage()
        },
        channel_ref: resolvedInfo.children.channels.map((ref) => channelRefToMessage(ref)),
        subchannel_ref: resolvedInfo.children.subchannels.map((ref) => subchannelRefToMessage(ref))
      };
    }
    function GetChannel(call, callback) {
      const channelId = Number.parseInt(call.request.channel_id);
      const channelEntry = channels[channelId];
      if (channelEntry === void 0) {
        callback({
          code: constants_1.Status.NOT_FOUND,
          details: "No channel data found for id " + channelId
        });
        return;
      }
      callback(null, { channel: getChannelMessage(channelEntry) });
    }
    function GetTopChannels(call, callback) {
      const maxResults = Number.parseInt(call.request.max_results);
      const resultList = [];
      let i = Number.parseInt(call.request.start_channel_id);
      for (; i < channels.length; i++) {
        const channelEntry = channels[i];
        if (channelEntry === void 0) {
          continue;
        }
        resultList.push(getChannelMessage(channelEntry));
        if (resultList.length >= maxResults) {
          break;
        }
      }
      callback(null, {
        channel: resultList,
        end: i >= servers.length
      });
    }
    function getServerMessage(serverEntry) {
      const resolvedInfo = serverEntry.getInfo();
      return {
        ref: serverRefToMessage(serverEntry.ref),
        data: {
          calls_started: resolvedInfo.callTracker.callsStarted,
          calls_succeeded: resolvedInfo.callTracker.callsSucceeded,
          calls_failed: resolvedInfo.callTracker.callsFailed,
          last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),
          trace: resolvedInfo.trace.getTraceMessage()
        },
        listen_socket: resolvedInfo.listenerChildren.sockets.map((ref) => socketRefToMessage(ref))
      };
    }
    function GetServer(call, callback) {
      const serverId = Number.parseInt(call.request.server_id);
      const serverEntry = servers[serverId];
      if (serverEntry === void 0) {
        callback({
          code: constants_1.Status.NOT_FOUND,
          details: "No server data found for id " + serverId
        });
        return;
      }
      callback(null, { server: getServerMessage(serverEntry) });
    }
    function GetServers(call, callback) {
      const maxResults = Number.parseInt(call.request.max_results);
      const resultList = [];
      let i = Number.parseInt(call.request.start_server_id);
      for (; i < servers.length; i++) {
        const serverEntry = servers[i];
        if (serverEntry === void 0) {
          continue;
        }
        resultList.push(getServerMessage(serverEntry));
        if (resultList.length >= maxResults) {
          break;
        }
      }
      callback(null, {
        server: resultList,
        end: i >= servers.length
      });
    }
    function GetSubchannel(call, callback) {
      const subchannelId = Number.parseInt(call.request.subchannel_id);
      const subchannelEntry = subchannels[subchannelId];
      if (subchannelEntry === void 0) {
        callback({
          code: constants_1.Status.NOT_FOUND,
          details: "No subchannel data found for id " + subchannelId
        });
        return;
      }
      const resolvedInfo = subchannelEntry.getInfo();
      const subchannelMessage = {
        ref: subchannelRefToMessage(subchannelEntry.ref),
        data: {
          target: resolvedInfo.target,
          state: connectivityStateToMessage(resolvedInfo.state),
          calls_started: resolvedInfo.callTracker.callsStarted,
          calls_succeeded: resolvedInfo.callTracker.callsSucceeded,
          calls_failed: resolvedInfo.callTracker.callsFailed,
          last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),
          trace: resolvedInfo.trace.getTraceMessage()
        },
        socket_ref: resolvedInfo.children.sockets.map((ref) => socketRefToMessage(ref))
      };
      callback(null, { subchannel: subchannelMessage });
    }
    function subchannelAddressToAddressMessage(subchannelAddress) {
      var _a;
      if ((0, subchannel_address_1.isTcpSubchannelAddress)(subchannelAddress)) {
        return {
          address: "tcpip_address",
          tcpip_address: {
            ip_address: (_a = ipAddressStringToBuffer(subchannelAddress.host)) !== null && _a !== void 0 ? _a : void 0,
            port: subchannelAddress.port
          }
        };
      } else {
        return {
          address: "uds_address",
          uds_address: {
            filename: subchannelAddress.path
          }
        };
      }
    }
    function GetSocket(call, callback) {
      var _a, _b, _c, _d, _e;
      const socketId = Number.parseInt(call.request.socket_id);
      const socketEntry = sockets[socketId];
      if (socketEntry === void 0) {
        callback({
          code: constants_1.Status.NOT_FOUND,
          details: "No socket data found for id " + socketId
        });
        return;
      }
      const resolvedInfo = socketEntry.getInfo();
      const securityMessage = resolvedInfo.security ? {
        model: "tls",
        tls: {
          cipher_suite: resolvedInfo.security.cipherSuiteStandardName ? "standard_name" : "other_name",
          standard_name: (_a = resolvedInfo.security.cipherSuiteStandardName) !== null && _a !== void 0 ? _a : void 0,
          other_name: (_b = resolvedInfo.security.cipherSuiteOtherName) !== null && _b !== void 0 ? _b : void 0,
          local_certificate: (_c = resolvedInfo.security.localCertificate) !== null && _c !== void 0 ? _c : void 0,
          remote_certificate: (_d = resolvedInfo.security.remoteCertificate) !== null && _d !== void 0 ? _d : void 0
        }
      } : null;
      const socketMessage = {
        ref: socketRefToMessage(socketEntry.ref),
        local: resolvedInfo.localAddress ? subchannelAddressToAddressMessage(resolvedInfo.localAddress) : null,
        remote: resolvedInfo.remoteAddress ? subchannelAddressToAddressMessage(resolvedInfo.remoteAddress) : null,
        remote_name: (_e = resolvedInfo.remoteName) !== null && _e !== void 0 ? _e : void 0,
        security: securityMessage,
        data: {
          keep_alives_sent: resolvedInfo.keepAlivesSent,
          streams_started: resolvedInfo.streamsStarted,
          streams_succeeded: resolvedInfo.streamsSucceeded,
          streams_failed: resolvedInfo.streamsFailed,
          last_local_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastLocalStreamCreatedTimestamp),
          last_remote_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastRemoteStreamCreatedTimestamp),
          messages_received: resolvedInfo.messagesReceived,
          messages_sent: resolvedInfo.messagesSent,
          last_message_received_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageReceivedTimestamp),
          last_message_sent_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageSentTimestamp),
          local_flow_control_window: resolvedInfo.localFlowControlWindow ? { value: resolvedInfo.localFlowControlWindow } : null,
          remote_flow_control_window: resolvedInfo.remoteFlowControlWindow ? { value: resolvedInfo.remoteFlowControlWindow } : null
        }
      };
      callback(null, { socket: socketMessage });
    }
    function GetServerSockets(call, callback) {
      const serverId = Number.parseInt(call.request.server_id);
      const serverEntry = servers[serverId];
      if (serverEntry === void 0) {
        callback({
          code: constants_1.Status.NOT_FOUND,
          details: "No server data found for id " + serverId
        });
        return;
      }
      const startId = Number.parseInt(call.request.start_socket_id);
      const maxResults = Number.parseInt(call.request.max_results);
      const resolvedInfo = serverEntry.getInfo();
      const allSockets = resolvedInfo.sessionChildren.sockets.sort((ref1, ref2) => ref1.id - ref2.id);
      const resultList = [];
      let i = 0;
      for (; i < allSockets.length; i++) {
        if (allSockets[i].id >= startId) {
          resultList.push(socketRefToMessage(allSockets[i]));
          if (resultList.length >= maxResults) {
            break;
          }
        }
      }
      callback(null, {
        socket_ref: resultList,
        end: i >= allSockets.length
      });
    }
    function getChannelzHandlers() {
      return {
        GetChannel,
        GetTopChannels,
        GetServer,
        GetServers,
        GetSubchannel,
        GetSocket,
        GetServerSockets
      };
    }
    exports2.getChannelzHandlers = getChannelzHandlers;
    var loadedChannelzDefinition = null;
    function getChannelzServiceDefinition() {
      if (loadedChannelzDefinition) {
        return loadedChannelzDefinition;
      }
      const loaderLoadSync = require_src2().loadSync;
      const loadedProto = loaderLoadSync("channelz.proto", {
        keepCase: true,
        longs: String,
        enums: String,
        defaults: true,
        oneofs: true,
        includeDirs: [`${__dirname}/../../proto`]
      });
      const channelzGrpcObject = (0, make_client_1.loadPackageDefinition)(loadedProto);
      loadedChannelzDefinition = channelzGrpcObject.grpc.channelz.v1.Channelz.service;
      return loadedChannelzDefinition;
    }
    exports2.getChannelzServiceDefinition = getChannelzServiceDefinition;
    function setup() {
      (0, admin_1.registerAdminService)(getChannelzServiceDefinition, getChannelzHandlers);
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/subchannel.js
var require_subchannel = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/subchannel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Subchannel = void 0;
    var connectivity_state_1 = require_connectivity_state();
    var backoff_timeout_1 = require_backoff_timeout();
    var logging = require_logging();
    var constants_1 = require_constants();
    var uri_parser_1 = require_uri_parser();
    var subchannel_address_1 = require_subchannel_address();
    var channelz_1 = require_channelz();
    var TRACER_NAME = "subchannel";
    var KEEPALIVE_MAX_TIME_MS = ~(1 << 31);
    var Subchannel = class {
      /**
       * A class representing a connection to a single backend.
       * @param channelTarget The target string for the channel as a whole
       * @param subchannelAddress The address for the backend that this subchannel
       *     will connect to
       * @param options The channel options, plus any specific subchannel options
       *     for this subchannel
       * @param credentials The channel credentials used to establish this
       *     connection
       */
      constructor(channelTarget, subchannelAddress, options, credentials, connector) {
        var _a;
        this.channelTarget = channelTarget;
        this.subchannelAddress = subchannelAddress;
        this.options = options;
        this.credentials = credentials;
        this.connector = connector;
        this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;
        this.transport = null;
        this.continueConnecting = false;
        this.stateListeners = /* @__PURE__ */ new Set();
        this.refcount = 0;
        this.channelzEnabled = true;
        this.callTracker = new channelz_1.ChannelzCallTracker();
        this.childrenTracker = new channelz_1.ChannelzChildrenTracker();
        this.streamTracker = new channelz_1.ChannelzCallTracker();
        const backoffOptions = {
          initialDelay: options["grpc.initial_reconnect_backoff_ms"],
          maxDelay: options["grpc.max_reconnect_backoff_ms"]
        };
        this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {
          this.handleBackoffTimer();
        }, backoffOptions);
        this.backoffTimeout.unref();
        this.subchannelAddressString = (0, subchannel_address_1.subchannelAddressToString)(subchannelAddress);
        this.keepaliveTime = (_a = options["grpc.keepalive_time_ms"]) !== null && _a !== void 0 ? _a : -1;
        if (options["grpc.enable_channelz"] === 0) {
          this.channelzEnabled = false;
        }
        this.channelzTrace = new channelz_1.ChannelzTrace();
        this.channelzRef = (0, channelz_1.registerChannelzSubchannel)(this.subchannelAddressString, () => this.getChannelzInfo(), this.channelzEnabled);
        if (this.channelzEnabled) {
          this.channelzTrace.addTrace("CT_INFO", "Subchannel created");
        }
        this.trace("Subchannel constructed with options " + JSON.stringify(options, void 0, 2));
      }
      getChannelzInfo() {
        return {
          state: this.connectivityState,
          trace: this.channelzTrace,
          callTracker: this.callTracker,
          children: this.childrenTracker.getChildLists(),
          target: this.subchannelAddressString
        };
      }
      trace(text) {
        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, "(" + this.channelzRef.id + ") " + this.subchannelAddressString + " " + text);
      }
      refTrace(text) {
        logging.trace(constants_1.LogVerbosity.DEBUG, "subchannel_refcount", "(" + this.channelzRef.id + ") " + this.subchannelAddressString + " " + text);
      }
      handleBackoffTimer() {
        if (this.continueConnecting) {
          this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.CONNECTING);
        } else {
          this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.IDLE);
        }
      }
      /**
       * Start a backoff timer with the current nextBackoff timeout
       */
      startBackoff() {
        this.backoffTimeout.runOnce();
      }
      stopBackoff() {
        this.backoffTimeout.stop();
        this.backoffTimeout.reset();
      }
      startConnectingInternal() {
        let options = this.options;
        if (options["grpc.keepalive_time_ms"]) {
          const adjustedKeepaliveTime = Math.min(this.keepaliveTime, KEEPALIVE_MAX_TIME_MS);
          options = Object.assign(Object.assign({}, options), { "grpc.keepalive_time_ms": adjustedKeepaliveTime });
        }
        this.connector.connect(this.subchannelAddress, this.credentials, options).then((transport) => {
          if (this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING], connectivity_state_1.ConnectivityState.READY)) {
            this.transport = transport;
            if (this.channelzEnabled) {
              this.childrenTracker.refChild(transport.getChannelzRef());
            }
            transport.addDisconnectListener((tooManyPings) => {
              this.transitionToState([connectivity_state_1.ConnectivityState.READY], connectivity_state_1.ConnectivityState.IDLE);
              if (tooManyPings && this.keepaliveTime > 0) {
                this.keepaliveTime *= 2;
                logging.log(constants_1.LogVerbosity.ERROR, `Connection to ${(0, uri_parser_1.uriToString)(this.channelTarget)} at ${this.subchannelAddressString} rejected by server because of excess pings. Increasing ping interval to ${this.keepaliveTime} ms`);
              }
            });
          }
        }, (error) => {
          this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING], connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE);
        });
      }
      /**
       * Initiate a state transition from any element of oldStates to the new
       * state. If the current connectivityState is not in oldStates, do nothing.
       * @param oldStates The set of states to transition from
       * @param newState The state to transition to
       * @returns True if the state changed, false otherwise
       */
      transitionToState(oldStates, newState) {
        var _a, _b;
        if (oldStates.indexOf(this.connectivityState) === -1) {
          return false;
        }
        this.trace(connectivity_state_1.ConnectivityState[this.connectivityState] + " -> " + connectivity_state_1.ConnectivityState[newState]);
        if (this.channelzEnabled) {
          this.channelzTrace.addTrace("CT_INFO", "Connectivity state change to " + connectivity_state_1.ConnectivityState[newState]);
        }
        const previousState = this.connectivityState;
        this.connectivityState = newState;
        switch (newState) {
          case connectivity_state_1.ConnectivityState.READY:
            this.stopBackoff();
            break;
          case connectivity_state_1.ConnectivityState.CONNECTING:
            this.startBackoff();
            this.startConnectingInternal();
            this.continueConnecting = false;
            break;
          case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:
            if (this.channelzEnabled && this.transport) {
              this.childrenTracker.unrefChild(this.transport.getChannelzRef());
            }
            (_a = this.transport) === null || _a === void 0 ? void 0 : _a.shutdown();
            this.transport = null;
            if (!this.backoffTimeout.isRunning()) {
              process.nextTick(() => {
                this.handleBackoffTimer();
              });
            }
            break;
          case connectivity_state_1.ConnectivityState.IDLE:
            if (this.channelzEnabled && this.transport) {
              this.childrenTracker.unrefChild(this.transport.getChannelzRef());
            }
            (_b = this.transport) === null || _b === void 0 ? void 0 : _b.shutdown();
            this.transport = null;
            break;
          default:
            throw new Error(`Invalid state: unknown ConnectivityState ${newState}`);
        }
        for (const listener of this.stateListeners) {
          listener(this, previousState, newState, this.keepaliveTime);
        }
        return true;
      }
      ref() {
        this.refTrace("refcount " + this.refcount + " -> " + (this.refcount + 1));
        this.refcount += 1;
      }
      unref() {
        this.refTrace("refcount " + this.refcount + " -> " + (this.refcount - 1));
        this.refcount -= 1;
        if (this.refcount === 0) {
          if (this.channelzEnabled) {
            this.channelzTrace.addTrace("CT_INFO", "Shutting down");
          }
          if (this.channelzEnabled) {
            (0, channelz_1.unregisterChannelzRef)(this.channelzRef);
          }
          process.nextTick(() => {
            this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING, connectivity_state_1.ConnectivityState.READY], connectivity_state_1.ConnectivityState.IDLE);
          });
        }
      }
      unrefIfOneRef() {
        if (this.refcount === 1) {
          this.unref();
          return true;
        }
        return false;
      }
      createCall(metadata, host, method, listener) {
        if (!this.transport) {
          throw new Error("Cannot create call, subchannel not READY");
        }
        let statsTracker;
        if (this.channelzEnabled) {
          this.callTracker.addCallStarted();
          this.streamTracker.addCallStarted();
          statsTracker = {
            onCallEnd: (status) => {
              if (status.code === constants_1.Status.OK) {
                this.callTracker.addCallSucceeded();
              } else {
                this.callTracker.addCallFailed();
              }
            }
          };
        } else {
          statsTracker = {};
        }
        return this.transport.createCall(metadata, host, method, listener, statsTracker);
      }
      /**
       * If the subchannel is currently IDLE, start connecting and switch to the
       * CONNECTING state. If the subchannel is current in TRANSIENT_FAILURE,
       * the next time it would transition to IDLE, start connecting again instead.
       * Otherwise, do nothing.
       */
      startConnecting() {
        process.nextTick(() => {
          if (!this.transitionToState([connectivity_state_1.ConnectivityState.IDLE], connectivity_state_1.ConnectivityState.CONNECTING)) {
            if (this.connectivityState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {
              this.continueConnecting = true;
            }
          }
        });
      }
      /**
       * Get the subchannel's current connectivity state.
       */
      getConnectivityState() {
        return this.connectivityState;
      }
      /**
       * Add a listener function to be called whenever the subchannel's
       * connectivity state changes.
       * @param listener
       */
      addConnectivityStateListener(listener) {
        this.stateListeners.add(listener);
      }
      /**
       * Remove a listener previously added with `addConnectivityStateListener`
       * @param listener A reference to a function previously passed to
       *     `addConnectivityStateListener`
       */
      removeConnectivityStateListener(listener) {
        this.stateListeners.delete(listener);
      }
      /**
       * Reset the backoff timeout, and immediately start connecting if in backoff.
       */
      resetBackoff() {
        process.nextTick(() => {
          this.backoffTimeout.reset();
          this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.CONNECTING);
        });
      }
      getAddress() {
        return this.subchannelAddressString;
      }
      getChannelzRef() {
        return this.channelzRef;
      }
      getRealSubchannel() {
        return this;
      }
      realSubchannelEquals(other) {
        return other.getRealSubchannel() === this;
      }
      throttleKeepalive(newKeepaliveTime) {
        if (newKeepaliveTime > this.keepaliveTime) {
          this.keepaliveTime = newKeepaliveTime;
        }
      }
    };
    exports2.Subchannel = Subchannel;
  }
});

// node_modules/@grpc/grpc-js/build/src/http_proxy.js
var require_http_proxy = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/http_proxy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getProxiedConnection = exports2.mapProxyName = void 0;
    var logging_1 = require_logging();
    var constants_1 = require_constants();
    var resolver_1 = require_resolver();
    var http = require("http");
    var tls = require("tls");
    var logging = require_logging();
    var subchannel_address_1 = require_subchannel_address();
    var uri_parser_1 = require_uri_parser();
    var url_1 = require("url");
    var TRACER_NAME = "proxy";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    function getProxyInfo() {
      let proxyEnv = "";
      let envVar = "";
      if (process.env.grpc_proxy) {
        envVar = "grpc_proxy";
        proxyEnv = process.env.grpc_proxy;
      } else if (process.env.https_proxy) {
        envVar = "https_proxy";
        proxyEnv = process.env.https_proxy;
      } else if (process.env.http_proxy) {
        envVar = "http_proxy";
        proxyEnv = process.env.http_proxy;
      } else {
        return {};
      }
      let proxyUrl;
      try {
        proxyUrl = new url_1.URL(proxyEnv);
      } catch (e) {
        (0, logging_1.log)(constants_1.LogVerbosity.ERROR, `cannot parse value of "${envVar}" env var`);
        return {};
      }
      if (proxyUrl.protocol !== "http:") {
        (0, logging_1.log)(constants_1.LogVerbosity.ERROR, `"${proxyUrl.protocol}" scheme not supported in proxy URI`);
        return {};
      }
      let userCred = null;
      if (proxyUrl.username) {
        if (proxyUrl.password) {
          (0, logging_1.log)(constants_1.LogVerbosity.INFO, "userinfo found in proxy URI");
          userCred = `${proxyUrl.username}:${proxyUrl.password}`;
        } else {
          userCred = proxyUrl.username;
        }
      }
      const hostname = proxyUrl.hostname;
      let port = proxyUrl.port;
      if (port === "") {
        port = "80";
      }
      const result = {
        address: `${hostname}:${port}`
      };
      if (userCred) {
        result.creds = userCred;
      }
      trace("Proxy server " + result.address + " set by environment variable " + envVar);
      return result;
    }
    function getNoProxyHostList() {
      let noProxyStr = process.env.no_grpc_proxy;
      let envVar = "no_grpc_proxy";
      if (!noProxyStr) {
        noProxyStr = process.env.no_proxy;
        envVar = "no_proxy";
      }
      if (noProxyStr) {
        trace("No proxy server list set by environment variable " + envVar);
        return noProxyStr.split(",");
      } else {
        return [];
      }
    }
    function mapProxyName(target, options) {
      var _a;
      const noProxyResult = {
        target,
        extraOptions: {}
      };
      if (((_a = options["grpc.enable_http_proxy"]) !== null && _a !== void 0 ? _a : 1) === 0) {
        return noProxyResult;
      }
      if (target.scheme === "unix") {
        return noProxyResult;
      }
      const proxyInfo = getProxyInfo();
      if (!proxyInfo.address) {
        return noProxyResult;
      }
      const hostPort = (0, uri_parser_1.splitHostPort)(target.path);
      if (!hostPort) {
        return noProxyResult;
      }
      const serverHost = hostPort.host;
      for (const host of getNoProxyHostList()) {
        if (host === serverHost) {
          trace("Not using proxy for target in no_proxy list: " + (0, uri_parser_1.uriToString)(target));
          return noProxyResult;
        }
      }
      const extraOptions = {
        "grpc.http_connect_target": (0, uri_parser_1.uriToString)(target)
      };
      if (proxyInfo.creds) {
        extraOptions["grpc.http_connect_creds"] = proxyInfo.creds;
      }
      return {
        target: {
          scheme: "dns",
          path: proxyInfo.address
        },
        extraOptions
      };
    }
    exports2.mapProxyName = mapProxyName;
    function getProxiedConnection(address, channelOptions, connectionOptions) {
      if (!("grpc.http_connect_target" in channelOptions)) {
        return Promise.resolve({});
      }
      const realTarget = channelOptions["grpc.http_connect_target"];
      const parsedTarget = (0, uri_parser_1.parseUri)(realTarget);
      if (parsedTarget === null) {
        return Promise.resolve({});
      }
      const options = {
        method: "CONNECT",
        path: parsedTarget.path
      };
      const headers = {
        Host: parsedTarget.path
      };
      if ((0, subchannel_address_1.isTcpSubchannelAddress)(address)) {
        options.host = address.host;
        options.port = address.port;
      } else {
        options.socketPath = address.path;
      }
      if ("grpc.http_connect_creds" in channelOptions) {
        headers["Proxy-Authorization"] = "Basic " + Buffer.from(channelOptions["grpc.http_connect_creds"]).toString("base64");
      }
      options.headers = headers;
      const proxyAddressString = (0, subchannel_address_1.subchannelAddressToString)(address);
      trace("Using proxy " + proxyAddressString + " to connect to " + options.path);
      return new Promise((resolve, reject) => {
        const request = http.request(options);
        request.once("connect", (res, socket, head) => {
          var _a;
          request.removeAllListeners();
          socket.removeAllListeners();
          if (res.statusCode === 200) {
            trace("Successfully connected to " + options.path + " through proxy " + proxyAddressString);
            if ("secureContext" in connectionOptions) {
              const targetPath = (0, resolver_1.getDefaultAuthority)(parsedTarget);
              const hostPort = (0, uri_parser_1.splitHostPort)(targetPath);
              const remoteHost = (_a = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _a !== void 0 ? _a : targetPath;
              const cts = tls.connect(Object.assign({ host: remoteHost, servername: remoteHost, socket }, connectionOptions), () => {
                trace("Successfully established a TLS connection to " + options.path + " through proxy " + proxyAddressString);
                resolve({ socket: cts, realTarget: parsedTarget });
              });
              cts.on("error", (error) => {
                trace("Failed to establish a TLS connection to " + options.path + " through proxy " + proxyAddressString + " with error " + error.message);
                reject();
              });
            } else {
              trace("Successfully established a plaintext connection to " + options.path + " through proxy " + proxyAddressString);
              resolve({
                socket,
                realTarget: parsedTarget
              });
            }
          } else {
            (0, logging_1.log)(constants_1.LogVerbosity.ERROR, "Failed to connect to " + options.path + " through proxy " + proxyAddressString + " with status " + res.statusCode);
            reject();
          }
        });
        request.once("error", (err) => {
          request.removeAllListeners();
          (0, logging_1.log)(constants_1.LogVerbosity.ERROR, "Failed to connect to proxy " + proxyAddressString + " with error " + err.message);
          reject();
        });
        request.end();
      });
    }
    exports2.getProxiedConnection = getProxiedConnection;
  }
});

// node_modules/@grpc/grpc-js/build/src/stream-decoder.js
var require_stream_decoder = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/stream-decoder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StreamDecoder = void 0;
    var ReadState;
    (function(ReadState2) {
      ReadState2[ReadState2["NO_DATA"] = 0] = "NO_DATA";
      ReadState2[ReadState2["READING_SIZE"] = 1] = "READING_SIZE";
      ReadState2[ReadState2["READING_MESSAGE"] = 2] = "READING_MESSAGE";
    })(ReadState || (ReadState = {}));
    var StreamDecoder = class {
      constructor() {
        this.readState = ReadState.NO_DATA;
        this.readCompressFlag = Buffer.alloc(1);
        this.readPartialSize = Buffer.alloc(4);
        this.readSizeRemaining = 4;
        this.readMessageSize = 0;
        this.readPartialMessage = [];
        this.readMessageRemaining = 0;
      }
      write(data) {
        let readHead = 0;
        let toRead;
        const result = [];
        while (readHead < data.length) {
          switch (this.readState) {
            case ReadState.NO_DATA:
              this.readCompressFlag = data.slice(readHead, readHead + 1);
              readHead += 1;
              this.readState = ReadState.READING_SIZE;
              this.readPartialSize.fill(0);
              this.readSizeRemaining = 4;
              this.readMessageSize = 0;
              this.readMessageRemaining = 0;
              this.readPartialMessage = [];
              break;
            case ReadState.READING_SIZE:
              toRead = Math.min(data.length - readHead, this.readSizeRemaining);
              data.copy(this.readPartialSize, 4 - this.readSizeRemaining, readHead, readHead + toRead);
              this.readSizeRemaining -= toRead;
              readHead += toRead;
              if (this.readSizeRemaining === 0) {
                this.readMessageSize = this.readPartialSize.readUInt32BE(0);
                this.readMessageRemaining = this.readMessageSize;
                if (this.readMessageRemaining > 0) {
                  this.readState = ReadState.READING_MESSAGE;
                } else {
                  const message = Buffer.concat([this.readCompressFlag, this.readPartialSize], 5);
                  this.readState = ReadState.NO_DATA;
                  result.push(message);
                }
              }
              break;
            case ReadState.READING_MESSAGE:
              toRead = Math.min(data.length - readHead, this.readMessageRemaining);
              this.readPartialMessage.push(data.slice(readHead, readHead + toRead));
              this.readMessageRemaining -= toRead;
              readHead += toRead;
              if (this.readMessageRemaining === 0) {
                const framedMessageBuffers = [
                  this.readCompressFlag,
                  this.readPartialSize
                ].concat(this.readPartialMessage);
                const framedMessage = Buffer.concat(framedMessageBuffers, this.readMessageSize + 5);
                this.readState = ReadState.NO_DATA;
                result.push(framedMessage);
              }
              break;
            default:
              throw new Error("Unexpected read state");
          }
        }
        return result;
      }
    };
    exports2.StreamDecoder = StreamDecoder;
  }
});

// node_modules/@grpc/grpc-js/build/src/subchannel-call.js
var require_subchannel_call = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/subchannel-call.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Http2SubchannelCall = void 0;
    var http2 = require("http2");
    var os = require("os");
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var stream_decoder_1 = require_stream_decoder();
    var logging = require_logging();
    var constants_2 = require_constants();
    var TRACER_NAME = "subchannel_call";
    function getSystemErrorName(errno) {
      for (const [name, num] of Object.entries(os.constants.errno)) {
        if (num === errno) {
          return name;
        }
      }
      return "Unknown system error " + errno;
    }
    var Http2SubchannelCall = class {
      constructor(http2Stream, callEventTracker, listener, transport, callId) {
        this.http2Stream = http2Stream;
        this.callEventTracker = callEventTracker;
        this.listener = listener;
        this.transport = transport;
        this.callId = callId;
        this.decoder = new stream_decoder_1.StreamDecoder();
        this.isReadFilterPending = false;
        this.isPushPending = false;
        this.canPush = false;
        this.readsClosed = false;
        this.statusOutput = false;
        this.unpushedReadMessages = [];
        this.mappedStatusCode = constants_1.Status.UNKNOWN;
        this.finalStatus = null;
        this.internalError = null;
        http2Stream.on("response", (headers, flags) => {
          let headersString = "";
          for (const header of Object.keys(headers)) {
            headersString += "		" + header + ": " + headers[header] + "\n";
          }
          this.trace("Received server headers:\n" + headersString);
          switch (headers[":status"]) {
            case 400:
              this.mappedStatusCode = constants_1.Status.INTERNAL;
              break;
            case 401:
              this.mappedStatusCode = constants_1.Status.UNAUTHENTICATED;
              break;
            case 403:
              this.mappedStatusCode = constants_1.Status.PERMISSION_DENIED;
              break;
            case 404:
              this.mappedStatusCode = constants_1.Status.UNIMPLEMENTED;
              break;
            case 429:
            case 502:
            case 503:
            case 504:
              this.mappedStatusCode = constants_1.Status.UNAVAILABLE;
              break;
            default:
              this.mappedStatusCode = constants_1.Status.UNKNOWN;
          }
          if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {
            this.handleTrailers(headers);
          } else {
            let metadata;
            try {
              metadata = metadata_1.Metadata.fromHttp2Headers(headers);
            } catch (error) {
              this.endCall({
                code: constants_1.Status.UNKNOWN,
                details: error.message,
                metadata: new metadata_1.Metadata()
              });
              return;
            }
            this.listener.onReceiveMetadata(metadata);
          }
        });
        http2Stream.on("trailers", (headers) => {
          this.handleTrailers(headers);
        });
        http2Stream.on("data", (data) => {
          if (this.statusOutput) {
            return;
          }
          this.trace("receive HTTP/2 data frame of length " + data.length);
          const messages = this.decoder.write(data);
          for (const message of messages) {
            this.trace("parsed message of length " + message.length);
            this.callEventTracker.addMessageReceived();
            this.tryPush(message);
          }
        });
        http2Stream.on("end", () => {
          this.readsClosed = true;
          this.maybeOutputStatus();
        });
        http2Stream.on("close", () => {
          process.nextTick(() => {
            var _a;
            this.trace("HTTP/2 stream closed with code " + http2Stream.rstCode);
            if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {
              return;
            }
            let code;
            let details = "";
            switch (http2Stream.rstCode) {
              case http2.constants.NGHTTP2_NO_ERROR:
                if (this.finalStatus !== null) {
                  return;
                }
                code = constants_1.Status.INTERNAL;
                details = `Received RST_STREAM with code ${http2Stream.rstCode}`;
                break;
              case http2.constants.NGHTTP2_REFUSED_STREAM:
                code = constants_1.Status.UNAVAILABLE;
                details = "Stream refused by server";
                break;
              case http2.constants.NGHTTP2_CANCEL:
                code = constants_1.Status.CANCELLED;
                details = "Call cancelled";
                break;
              case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:
                code = constants_1.Status.RESOURCE_EXHAUSTED;
                details = "Bandwidth exhausted or memory limit exceeded";
                break;
              case http2.constants.NGHTTP2_INADEQUATE_SECURITY:
                code = constants_1.Status.PERMISSION_DENIED;
                details = "Protocol not secure enough";
                break;
              case http2.constants.NGHTTP2_INTERNAL_ERROR:
                code = constants_1.Status.INTERNAL;
                if (this.internalError === null) {
                  details = `Received RST_STREAM with code ${http2Stream.rstCode} (Internal server error)`;
                } else {
                  if (this.internalError.code === "ECONNRESET" || this.internalError.code === "ETIMEDOUT") {
                    code = constants_1.Status.UNAVAILABLE;
                    details = this.internalError.message;
                  } else {
                    details = `Received RST_STREAM with code ${http2Stream.rstCode} triggered by internal client error: ${this.internalError.message}`;
                  }
                }
                break;
              default:
                code = constants_1.Status.INTERNAL;
                details = `Received RST_STREAM with code ${http2Stream.rstCode}`;
            }
            this.endCall({
              code,
              details,
              metadata: new metadata_1.Metadata(),
              rstCode: http2Stream.rstCode
            });
          });
        });
        http2Stream.on("error", (err) => {
          if (err.code !== "ERR_HTTP2_STREAM_ERROR") {
            this.trace("Node error event: message=" + err.message + " code=" + err.code + " errno=" + getSystemErrorName(err.errno) + " syscall=" + err.syscall);
            this.internalError = err;
          }
          this.callEventTracker.onStreamEnd(false);
        });
      }
      onDisconnect() {
        this.endCall({
          code: constants_1.Status.UNAVAILABLE,
          details: "Connection dropped",
          metadata: new metadata_1.Metadata()
        });
      }
      outputStatus() {
        if (!this.statusOutput) {
          this.statusOutput = true;
          this.trace("ended with status: code=" + this.finalStatus.code + ' details="' + this.finalStatus.details + '"');
          this.callEventTracker.onCallEnd(this.finalStatus);
          process.nextTick(() => {
            this.listener.onReceiveStatus(this.finalStatus);
          });
          this.http2Stream.resume();
        }
      }
      trace(text) {
        logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, "[" + this.callId + "] " + text);
      }
      /**
       * On first call, emits a 'status' event with the given StatusObject.
       * Subsequent calls are no-ops.
       * @param status The status of the call.
       */
      endCall(status) {
        if (this.finalStatus === null || this.finalStatus.code === constants_1.Status.OK) {
          this.finalStatus = status;
          this.maybeOutputStatus();
        }
        this.destroyHttp2Stream();
      }
      maybeOutputStatus() {
        if (this.finalStatus !== null) {
          if (this.finalStatus.code !== constants_1.Status.OK || this.readsClosed && this.unpushedReadMessages.length === 0 && !this.isReadFilterPending && !this.isPushPending) {
            this.outputStatus();
          }
        }
      }
      push(message) {
        this.trace("pushing to reader message of length " + (message instanceof Buffer ? message.length : null));
        this.canPush = false;
        this.isPushPending = true;
        process.nextTick(() => {
          this.isPushPending = false;
          if (this.statusOutput) {
            return;
          }
          this.listener.onReceiveMessage(message);
          this.maybeOutputStatus();
        });
      }
      tryPush(messageBytes) {
        if (this.canPush) {
          this.http2Stream.pause();
          this.push(messageBytes);
        } else {
          this.trace("unpushedReadMessages.push message of length " + messageBytes.length);
          this.unpushedReadMessages.push(messageBytes);
        }
      }
      handleTrailers(headers) {
        this.callEventTracker.onStreamEnd(true);
        let headersString = "";
        for (const header of Object.keys(headers)) {
          headersString += "		" + header + ": " + headers[header] + "\n";
        }
        this.trace("Received server trailers:\n" + headersString);
        let metadata;
        try {
          metadata = metadata_1.Metadata.fromHttp2Headers(headers);
        } catch (e) {
          metadata = new metadata_1.Metadata();
        }
        const metadataMap = metadata.getMap();
        let code = this.mappedStatusCode;
        if (code === constants_1.Status.UNKNOWN && typeof metadataMap["grpc-status"] === "string") {
          const receivedStatus = Number(metadataMap["grpc-status"]);
          if (receivedStatus in constants_1.Status) {
            code = receivedStatus;
            this.trace("received status code " + receivedStatus + " from server");
          }
          metadata.remove("grpc-status");
        }
        let details = "";
        if (typeof metadataMap["grpc-message"] === "string") {
          try {
            details = decodeURI(metadataMap["grpc-message"]);
          } catch (e) {
            details = metadataMap["grpc-message"];
          }
          metadata.remove("grpc-message");
          this.trace('received status details string "' + details + '" from server');
        }
        const status = { code, details, metadata };
        this.endCall(status);
      }
      destroyHttp2Stream() {
        var _a;
        if (!this.http2Stream.destroyed) {
          let code;
          if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {
            code = http2.constants.NGHTTP2_NO_ERROR;
          } else {
            code = http2.constants.NGHTTP2_CANCEL;
          }
          this.trace("close http2 stream with code " + code);
          this.http2Stream.close(code);
        }
      }
      cancelWithStatus(status, details) {
        this.trace("cancelWithStatus code: " + status + ' details: "' + details + '"');
        this.endCall({ code: status, details, metadata: new metadata_1.Metadata() });
      }
      getStatus() {
        return this.finalStatus;
      }
      getPeer() {
        return this.transport.getPeerName();
      }
      getCallNumber() {
        return this.callId;
      }
      startRead() {
        if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {
          this.readsClosed = true;
          this.maybeOutputStatus();
          return;
        }
        this.canPush = true;
        if (this.unpushedReadMessages.length > 0) {
          const nextMessage = this.unpushedReadMessages.shift();
          this.push(nextMessage);
          return;
        }
        this.http2Stream.resume();
      }
      sendMessageWithContext(context, message) {
        this.trace("write() called with message of length " + message.length);
        const cb = (error) => {
          process.nextTick(() => {
            var _a;
            let code = constants_1.Status.UNAVAILABLE;
            if ((error === null || error === void 0 ? void 0 : error.code) === "ERR_STREAM_WRITE_AFTER_END") {
              code = constants_1.Status.INTERNAL;
            }
            if (error) {
              this.cancelWithStatus(code, `Write error: ${error.message}`);
            }
            (_a = context.callback) === null || _a === void 0 ? void 0 : _a.call(context);
          });
        };
        this.trace("sending data chunk of length " + message.length);
        this.callEventTracker.addMessageSent();
        try {
          this.http2Stream.write(message, cb);
        } catch (error) {
          this.endCall({
            code: constants_1.Status.UNAVAILABLE,
            details: `Write failed with error ${error.message}`,
            metadata: new metadata_1.Metadata()
          });
        }
      }
      halfClose() {
        this.trace("end() called");
        this.trace("calling end() on HTTP/2 stream");
        this.http2Stream.end();
      }
    };
    exports2.Http2SubchannelCall = Http2SubchannelCall;
  }
});

// node_modules/@grpc/grpc-js/build/src/call-number.js
var require_call_number = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/call-number.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getNextCallNumber = void 0;
    var nextCallNumber = 0;
    function getNextCallNumber() {
      return nextCallNumber++;
    }
    exports2.getNextCallNumber = getNextCallNumber;
  }
});

// node_modules/@grpc/grpc-js/package.json
var require_package2 = __commonJS({
  "node_modules/@grpc/grpc-js/package.json"(exports2, module2) {
    module2.exports = {
      name: "@grpc/grpc-js",
      version: "1.9.4",
      description: "gRPC Library for Node - pure JS implementation",
      homepage: "https://grpc.io/",
      repository: "https://github.com/grpc/grpc-node/tree/master/packages/grpc-js",
      main: "build/src/index.js",
      engines: {
        node: "^8.13.0 || >=10.10.0"
      },
      keywords: [],
      author: {
        name: "Google Inc."
      },
      types: "build/src/index.d.ts",
      license: "Apache-2.0",
      devDependencies: {
        "@types/gulp": "^4.0.6",
        "@types/gulp-mocha": "0.0.32",
        "@types/lodash": "^4.14.186",
        "@types/mocha": "^5.2.6",
        "@types/ncp": "^2.0.1",
        "@types/pify": "^3.0.2",
        "@types/semver": "^7.3.9",
        "@typescript-eslint/eslint-plugin": "^5.59.11",
        "@typescript-eslint/parser": "^5.59.11",
        "@typescript-eslint/typescript-estree": "^5.59.11",
        "clang-format": "^1.0.55",
        eslint: "^8.42.0",
        "eslint-config-prettier": "^8.8.0",
        "eslint-plugin-node": "^11.1.0",
        "eslint-plugin-prettier": "^4.2.1",
        execa: "^2.0.3",
        gulp: "^4.0.2",
        "gulp-mocha": "^6.0.0",
        lodash: "^4.17.4",
        madge: "^5.0.1",
        "mocha-jenkins-reporter": "^0.4.1",
        ncp: "^2.0.0",
        pify: "^4.0.1",
        prettier: "^2.8.8",
        rimraf: "^3.0.2",
        semver: "^7.3.5",
        "ts-node": "^10.9.1",
        typescript: "^5.1.3"
      },
      contributors: [
        {
          name: "Google Inc."
        }
      ],
      scripts: {
        build: "npm run compile",
        clean: "rimraf ./build",
        compile: "tsc -p .",
        format: 'clang-format -i -style="{Language: JavaScript, BasedOnStyle: Google, ColumnLimit: 80}" src/*.ts test/*.ts',
        lint: "eslint src/*.ts test/*.ts",
        prepare: "npm run generate-types && npm run compile",
        test: "gulp test",
        check: "npm run lint",
        fix: "eslint --fix src/*.ts test/*.ts",
        pretest: "npm run generate-types && npm run generate-test-types && npm run compile",
        posttest: "npm run check && madge -c ./build/src",
        "generate-types": "proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --includeDirs proto/ --include-dirs test/fixtures/ -O src/generated/ --grpcLib ../index channelz.proto",
        "generate-test-types": "proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --include-dirs test/fixtures/ -O test/generated/ --grpcLib ../../src/index test_service.proto"
      },
      dependencies: {
        "@grpc/proto-loader": "^0.7.8",
        "@types/node": ">=12.12.47"
      },
      files: [
        "src/**/*.ts",
        "build/src/**/*.{js,d.ts,js.map}",
        "proto/*.proto",
        "LICENSE",
        "deps/envoy-api/envoy/api/v2/**/*.proto",
        "deps/envoy-api/envoy/config/**/*.proto",
        "deps/envoy-api/envoy/service/**/*.proto",
        "deps/envoy-api/envoy/type/**/*.proto",
        "deps/udpa/udpa/**/*.proto",
        "deps/googleapis/google/api/*.proto",
        "deps/googleapis/google/rpc/*.proto",
        "deps/protoc-gen-validate/validate/**/*.proto"
      ]
    };
  }
});

// node_modules/@grpc/grpc-js/build/src/transport.js
var require_transport = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/transport.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Http2SubchannelConnector = void 0;
    var http2 = require("http2");
    var tls_1 = require("tls");
    var channelz_1 = require_channelz();
    var constants_1 = require_constants();
    var http_proxy_1 = require_http_proxy();
    var logging = require_logging();
    var resolver_1 = require_resolver();
    var subchannel_address_1 = require_subchannel_address();
    var uri_parser_1 = require_uri_parser();
    var net = require("net");
    var subchannel_call_1 = require_subchannel_call();
    var call_number_1 = require_call_number();
    var TRACER_NAME = "transport";
    var FLOW_CONTROL_TRACER_NAME = "transport_flowctrl";
    var clientVersion = require_package2().version;
    var { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_TE, HTTP2_HEADER_USER_AGENT } = http2.constants;
    var KEEPALIVE_TIMEOUT_MS = 2e4;
    var tooManyPingsData = Buffer.from("too_many_pings", "ascii");
    var Http2Transport = class {
      constructor(session, subchannelAddress, options, remoteName) {
        this.session = session;
        this.remoteName = remoteName;
        this.keepaliveTimeMs = -1;
        this.keepaliveTimeoutMs = KEEPALIVE_TIMEOUT_MS;
        this.keepaliveTimerId = null;
        this.pendingSendKeepalivePing = false;
        this.keepaliveTimeoutId = null;
        this.keepaliveWithoutCalls = false;
        this.activeCalls = /* @__PURE__ */ new Set();
        this.disconnectListeners = [];
        this.disconnectHandled = false;
        this.channelzEnabled = true;
        this.streamTracker = new channelz_1.ChannelzCallTracker();
        this.keepalivesSent = 0;
        this.messagesSent = 0;
        this.messagesReceived = 0;
        this.lastMessageSentTimestamp = null;
        this.lastMessageReceivedTimestamp = null;
        this.subchannelAddressString = (0, subchannel_address_1.subchannelAddressToString)(subchannelAddress);
        if (options["grpc.enable_channelz"] === 0) {
          this.channelzEnabled = false;
        }
        this.channelzRef = (0, channelz_1.registerChannelzSocket)(this.subchannelAddressString, () => this.getChannelzInfo(), this.channelzEnabled);
        this.userAgent = [
          options["grpc.primary_user_agent"],
          `grpc-node-js/${clientVersion}`,
          options["grpc.secondary_user_agent"]
        ].filter((e) => e).join(" ");
        if ("grpc.keepalive_time_ms" in options) {
          this.keepaliveTimeMs = options["grpc.keepalive_time_ms"];
        }
        if ("grpc.keepalive_timeout_ms" in options) {
          this.keepaliveTimeoutMs = options["grpc.keepalive_timeout_ms"];
        }
        if ("grpc.keepalive_permit_without_calls" in options) {
          this.keepaliveWithoutCalls = options["grpc.keepalive_permit_without_calls"] === 1;
        } else {
          this.keepaliveWithoutCalls = false;
        }
        session.once("close", () => {
          this.trace("session closed");
          this.stopKeepalivePings();
          this.handleDisconnect();
        });
        session.once("goaway", (errorCode, lastStreamID, opaqueData) => {
          let tooManyPings = false;
          if (errorCode === http2.constants.NGHTTP2_ENHANCE_YOUR_CALM && opaqueData.equals(tooManyPingsData)) {
            tooManyPings = true;
          }
          this.trace("connection closed by GOAWAY with code " + errorCode);
          this.reportDisconnectToOwner(tooManyPings);
        });
        session.once("error", (error) => {
          this.trace("connection closed with error " + error.message);
        });
        if (logging.isTracerEnabled(TRACER_NAME)) {
          session.on("remoteSettings", (settings) => {
            this.trace("new settings received" + (this.session !== session ? " on the old connection" : "") + ": " + JSON.stringify(settings));
          });
          session.on("localSettings", (settings) => {
            this.trace("local settings acknowledged by remote" + (this.session !== session ? " on the old connection" : "") + ": " + JSON.stringify(settings));
          });
        }
        if (this.keepaliveWithoutCalls) {
          this.maybeStartKeepalivePingTimer();
        }
      }
      getChannelzInfo() {
        var _a, _b, _c;
        const sessionSocket = this.session.socket;
        const remoteAddress = sessionSocket.remoteAddress ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.remoteAddress, sessionSocket.remotePort) : null;
        const localAddress = sessionSocket.localAddress ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.localAddress, sessionSocket.localPort) : null;
        let tlsInfo;
        if (this.session.encrypted) {
          const tlsSocket = sessionSocket;
          const cipherInfo = tlsSocket.getCipher();
          const certificate = tlsSocket.getCertificate();
          const peerCertificate = tlsSocket.getPeerCertificate();
          tlsInfo = {
            cipherSuiteStandardName: (_a = cipherInfo.standardName) !== null && _a !== void 0 ? _a : null,
            cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,
            localCertificate: certificate && "raw" in certificate ? certificate.raw : null,
            remoteCertificate: peerCertificate && "raw" in peerCertificate ? peerCertificate.raw : null
          };
        } else {
          tlsInfo = null;
        }
        const socketInfo = {
          remoteAddress,
          localAddress,
          security: tlsInfo,
          remoteName: this.remoteName,
          streamsStarted: this.streamTracker.callsStarted,
          streamsSucceeded: this.streamTracker.callsSucceeded,
          streamsFailed: this.streamTracker.callsFailed,
          messagesSent: this.messagesSent,
          messagesReceived: this.messagesReceived,
          keepAlivesSent: this.keepalivesSent,
          lastLocalStreamCreatedTimestamp: this.streamTracker.lastCallStartedTimestamp,
          lastRemoteStreamCreatedTimestamp: null,
          lastMessageSentTimestamp: this.lastMessageSentTimestamp,
          lastMessageReceivedTimestamp: this.lastMessageReceivedTimestamp,
          localFlowControlWindow: (_b = this.session.state.localWindowSize) !== null && _b !== void 0 ? _b : null,
          remoteFlowControlWindow: (_c = this.session.state.remoteWindowSize) !== null && _c !== void 0 ? _c : null
        };
        return socketInfo;
      }
      trace(text) {
        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, "(" + this.channelzRef.id + ") " + this.subchannelAddressString + " " + text);
      }
      keepaliveTrace(text) {
        logging.trace(constants_1.LogVerbosity.DEBUG, "keepalive", "(" + this.channelzRef.id + ") " + this.subchannelAddressString + " " + text);
      }
      flowControlTrace(text) {
        logging.trace(constants_1.LogVerbosity.DEBUG, FLOW_CONTROL_TRACER_NAME, "(" + this.channelzRef.id + ") " + this.subchannelAddressString + " " + text);
      }
      internalsTrace(text) {
        logging.trace(constants_1.LogVerbosity.DEBUG, "transport_internals", "(" + this.channelzRef.id + ") " + this.subchannelAddressString + " " + text);
      }
      /**
       * Indicate to the owner of this object that this transport should no longer
       * be used. That happens if the connection drops, or if the server sends a
       * GOAWAY.
       * @param tooManyPings If true, this was triggered by a GOAWAY with data
       * indicating that the session was closed becaues the client sent too many
       * pings.
       * @returns
       */
      reportDisconnectToOwner(tooManyPings) {
        if (this.disconnectHandled) {
          return;
        }
        this.disconnectHandled = true;
        this.disconnectListeners.forEach((listener) => listener(tooManyPings));
      }
      /**
       * Handle connection drops, but not GOAWAYs.
       */
      handleDisconnect() {
        this.reportDisconnectToOwner(false);
        setImmediate(() => {
          for (const call of this.activeCalls) {
            call.onDisconnect();
          }
        });
      }
      addDisconnectListener(listener) {
        this.disconnectListeners.push(listener);
      }
      clearKeepaliveTimer() {
        if (!this.keepaliveTimerId) {
          return;
        }
        clearTimeout(this.keepaliveTimerId);
        this.keepaliveTimerId = null;
      }
      clearKeepaliveTimeout() {
        if (!this.keepaliveTimeoutId) {
          return;
        }
        clearTimeout(this.keepaliveTimeoutId);
        this.keepaliveTimeoutId = null;
      }
      canSendPing() {
        return this.keepaliveTimeMs > 0 && (this.keepaliveWithoutCalls || this.activeCalls.size > 0);
      }
      maybeSendPing() {
        var _a, _b;
        this.clearKeepaliveTimer();
        if (!this.canSendPing()) {
          this.pendingSendKeepalivePing = true;
          return;
        }
        if (this.channelzEnabled) {
          this.keepalivesSent += 1;
        }
        this.keepaliveTrace("Sending ping with timeout " + this.keepaliveTimeoutMs + "ms");
        if (!this.keepaliveTimeoutId) {
          this.keepaliveTimeoutId = setTimeout(() => {
            this.keepaliveTrace("Ping timeout passed without response");
            this.handleDisconnect();
          }, this.keepaliveTimeoutMs);
          (_b = (_a = this.keepaliveTimeoutId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
        try {
          this.session.ping((err, duration, payload) => {
            if (err) {
              this.keepaliveTrace("Ping failed with error " + err.message);
              this.handleDisconnect();
            }
            this.keepaliveTrace("Received ping response");
            this.clearKeepaliveTimeout();
            this.maybeStartKeepalivePingTimer();
          });
        } catch (e) {
          this.handleDisconnect();
        }
      }
      /**
       * Starts the keepalive ping timer if appropriate. If the timer already ran
       * out while there were no active requests, instead send a ping immediately.
       * If the ping timer is already running or a ping is currently in flight,
       * instead do nothing and wait for them to resolve.
       */
      maybeStartKeepalivePingTimer() {
        var _a, _b;
        if (!this.canSendPing()) {
          return;
        }
        if (this.pendingSendKeepalivePing) {
          this.pendingSendKeepalivePing = false;
          this.maybeSendPing();
        } else if (!this.keepaliveTimerId && !this.keepaliveTimeoutId) {
          this.keepaliveTrace("Starting keepalive timer for " + this.keepaliveTimeMs + "ms");
          this.keepaliveTimerId = (_b = (_a = setTimeout(() => {
            this.maybeSendPing();
          }, this.keepaliveTimeMs)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
      }
      stopKeepalivePings() {
        if (this.keepaliveTimerId) {
          clearTimeout(this.keepaliveTimerId);
          this.keepaliveTimerId = null;
        }
        this.clearKeepaliveTimeout();
      }
      removeActiveCall(call) {
        this.activeCalls.delete(call);
        if (this.activeCalls.size === 0) {
          this.session.unref();
        }
      }
      addActiveCall(call) {
        this.activeCalls.add(call);
        if (this.activeCalls.size === 1) {
          this.session.ref();
          if (!this.keepaliveWithoutCalls) {
            this.maybeStartKeepalivePingTimer();
          }
        }
      }
      createCall(metadata, host, method, listener, subchannelCallStatsTracker) {
        const headers = metadata.toHttp2Headers();
        headers[HTTP2_HEADER_AUTHORITY] = host;
        headers[HTTP2_HEADER_USER_AGENT] = this.userAgent;
        headers[HTTP2_HEADER_CONTENT_TYPE] = "application/grpc";
        headers[HTTP2_HEADER_METHOD] = "POST";
        headers[HTTP2_HEADER_PATH] = method;
        headers[HTTP2_HEADER_TE] = "trailers";
        let http2Stream;
        try {
          http2Stream = this.session.request(headers);
        } catch (e) {
          this.handleDisconnect();
          throw e;
        }
        this.flowControlTrace("local window size: " + this.session.state.localWindowSize + " remote window size: " + this.session.state.remoteWindowSize);
        this.internalsTrace("session.closed=" + this.session.closed + " session.destroyed=" + this.session.destroyed + " session.socket.destroyed=" + this.session.socket.destroyed);
        let eventTracker;
        let call;
        if (this.channelzEnabled) {
          this.streamTracker.addCallStarted();
          eventTracker = {
            addMessageSent: () => {
              var _a;
              this.messagesSent += 1;
              this.lastMessageSentTimestamp = /* @__PURE__ */ new Date();
              (_a = subchannelCallStatsTracker.addMessageSent) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);
            },
            addMessageReceived: () => {
              var _a;
              this.messagesReceived += 1;
              this.lastMessageReceivedTimestamp = /* @__PURE__ */ new Date();
              (_a = subchannelCallStatsTracker.addMessageReceived) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);
            },
            onCallEnd: (status) => {
              var _a;
              (_a = subchannelCallStatsTracker.onCallEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, status);
              this.removeActiveCall(call);
            },
            onStreamEnd: (success) => {
              var _a;
              if (success) {
                this.streamTracker.addCallSucceeded();
              } else {
                this.streamTracker.addCallFailed();
              }
              (_a = subchannelCallStatsTracker.onStreamEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, success);
            }
          };
        } else {
          eventTracker = {
            addMessageSent: () => {
              var _a;
              (_a = subchannelCallStatsTracker.addMessageSent) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);
            },
            addMessageReceived: () => {
              var _a;
              (_a = subchannelCallStatsTracker.addMessageReceived) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);
            },
            onCallEnd: (status) => {
              var _a;
              (_a = subchannelCallStatsTracker.onCallEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, status);
              this.removeActiveCall(call);
            },
            onStreamEnd: (success) => {
              var _a;
              (_a = subchannelCallStatsTracker.onStreamEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, success);
            }
          };
        }
        call = new subchannel_call_1.Http2SubchannelCall(http2Stream, eventTracker, listener, this, (0, call_number_1.getNextCallNumber)());
        this.addActiveCall(call);
        return call;
      }
      getChannelzRef() {
        return this.channelzRef;
      }
      getPeerName() {
        return this.subchannelAddressString;
      }
      shutdown() {
        this.session.close();
        (0, channelz_1.unregisterChannelzRef)(this.channelzRef);
      }
    };
    var Http2SubchannelConnector = class {
      constructor(channelTarget) {
        this.channelTarget = channelTarget;
        this.session = null;
        this.isShutdown = false;
      }
      trace(text) {
        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, (0, uri_parser_1.uriToString)(this.channelTarget) + " " + text);
      }
      createSession(address, credentials, options, proxyConnectionResult) {
        if (this.isShutdown) {
          return Promise.reject();
        }
        return new Promise((resolve, reject) => {
          var _a, _b, _c;
          let remoteName;
          if (proxyConnectionResult.realTarget) {
            remoteName = (0, uri_parser_1.uriToString)(proxyConnectionResult.realTarget);
            this.trace("creating HTTP/2 session through proxy to " + (0, uri_parser_1.uriToString)(proxyConnectionResult.realTarget));
          } else {
            remoteName = null;
            this.trace("creating HTTP/2 session to " + (0, subchannel_address_1.subchannelAddressToString)(address));
          }
          const targetAuthority = (0, resolver_1.getDefaultAuthority)((_a = proxyConnectionResult.realTarget) !== null && _a !== void 0 ? _a : this.channelTarget);
          let connectionOptions = credentials._getConnectionOptions() || {};
          connectionOptions.maxSendHeaderBlockLength = Number.MAX_SAFE_INTEGER;
          if ("grpc-node.max_session_memory" in options) {
            connectionOptions.maxSessionMemory = options["grpc-node.max_session_memory"];
          } else {
            connectionOptions.maxSessionMemory = Number.MAX_SAFE_INTEGER;
          }
          let addressScheme = "http://";
          if ("secureContext" in connectionOptions) {
            addressScheme = "https://";
            if (options["grpc.ssl_target_name_override"]) {
              const sslTargetNameOverride = options["grpc.ssl_target_name_override"];
              connectionOptions.checkServerIdentity = (host, cert) => {
                return (0, tls_1.checkServerIdentity)(sslTargetNameOverride, cert);
              };
              connectionOptions.servername = sslTargetNameOverride;
            } else {
              const authorityHostname = (_c = (_b = (0, uri_parser_1.splitHostPort)(targetAuthority)) === null || _b === void 0 ? void 0 : _b.host) !== null && _c !== void 0 ? _c : "localhost";
              connectionOptions.servername = authorityHostname;
            }
            if (proxyConnectionResult.socket) {
              connectionOptions.createConnection = (authority, option) => {
                return proxyConnectionResult.socket;
              };
            }
          } else {
            connectionOptions.createConnection = (authority, option) => {
              if (proxyConnectionResult.socket) {
                return proxyConnectionResult.socket;
              } else {
                return net.connect(address);
              }
            };
          }
          connectionOptions = Object.assign(Object.assign(Object.assign({}, connectionOptions), address), { enableTrace: options["grpc-node.tls_enable_trace"] === 1 });
          const session = http2.connect(addressScheme + targetAuthority, connectionOptions);
          this.session = session;
          session.unref();
          session.once("connect", () => {
            session.removeAllListeners();
            resolve(new Http2Transport(session, address, options, remoteName));
            this.session = null;
          });
          session.once("close", () => {
            this.session = null;
            reject();
          });
          session.once("error", (error) => {
            this.trace("connection failed with error " + error.message);
          });
        });
      }
      connect(address, credentials, options) {
        var _a, _b;
        if (this.isShutdown) {
          return Promise.reject();
        }
        const connectionOptions = credentials._getConnectionOptions() || {};
        if ("secureContext" in connectionOptions) {
          connectionOptions.ALPNProtocols = ["h2"];
          if (options["grpc.ssl_target_name_override"]) {
            const sslTargetNameOverride = options["grpc.ssl_target_name_override"];
            connectionOptions.checkServerIdentity = (host, cert) => {
              return (0, tls_1.checkServerIdentity)(sslTargetNameOverride, cert);
            };
            connectionOptions.servername = sslTargetNameOverride;
          } else {
            if ("grpc.http_connect_target" in options) {
              const targetPath = (0, resolver_1.getDefaultAuthority)((_a = (0, uri_parser_1.parseUri)(options["grpc.http_connect_target"])) !== null && _a !== void 0 ? _a : {
                path: "localhost"
              });
              const hostPort = (0, uri_parser_1.splitHostPort)(targetPath);
              connectionOptions.servername = (_b = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _b !== void 0 ? _b : targetPath;
            }
          }
          if (options["grpc-node.tls_enable_trace"]) {
            connectionOptions.enableTrace = true;
          }
        }
        return (0, http_proxy_1.getProxiedConnection)(address, options, connectionOptions).then((result) => this.createSession(address, credentials, options, result));
      }
      shutdown() {
        var _a;
        this.isShutdown = true;
        (_a = this.session) === null || _a === void 0 ? void 0 : _a.close();
        this.session = null;
      }
    };
    exports2.Http2SubchannelConnector = Http2SubchannelConnector;
  }
});

// node_modules/@grpc/grpc-js/build/src/subchannel-pool.js
var require_subchannel_pool = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/subchannel-pool.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSubchannelPool = exports2.SubchannelPool = void 0;
    var channel_options_1 = require_channel_options();
    var subchannel_1 = require_subchannel();
    var subchannel_address_1 = require_subchannel_address();
    var uri_parser_1 = require_uri_parser();
    var transport_1 = require_transport();
    var REF_CHECK_INTERVAL = 1e4;
    var SubchannelPool = class {
      /**
       * A pool of subchannels use for making connections. Subchannels with the
       * exact same parameters will be reused.
       */
      constructor() {
        this.pool = /* @__PURE__ */ Object.create(null);
        this.cleanupTimer = null;
      }
      /**
       * Unrefs all unused subchannels and cancels the cleanup task if all
       * subchannels have been unrefed.
       */
      unrefUnusedSubchannels() {
        let allSubchannelsUnrefed = true;
        for (const channelTarget in this.pool) {
          const subchannelObjArray = this.pool[channelTarget];
          const refedSubchannels = subchannelObjArray.filter((value) => !value.subchannel.unrefIfOneRef());
          if (refedSubchannels.length > 0) {
            allSubchannelsUnrefed = false;
          }
          this.pool[channelTarget] = refedSubchannels;
        }
        if (allSubchannelsUnrefed && this.cleanupTimer !== null) {
          clearInterval(this.cleanupTimer);
          this.cleanupTimer = null;
        }
      }
      /**
       * Ensures that the cleanup task is spawned.
       */
      ensureCleanupTask() {
        var _a, _b;
        if (this.cleanupTimer === null) {
          this.cleanupTimer = setInterval(() => {
            this.unrefUnusedSubchannels();
          }, REF_CHECK_INTERVAL);
          (_b = (_a = this.cleanupTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
      }
      /**
       * Get a subchannel if one already exists with exactly matching parameters.
       * Otherwise, create and save a subchannel with those parameters.
       * @param channelTarget
       * @param subchannelTarget
       * @param channelArguments
       * @param channelCredentials
       */
      getOrCreateSubchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials) {
        this.ensureCleanupTask();
        const channelTarget = (0, uri_parser_1.uriToString)(channelTargetUri);
        if (channelTarget in this.pool) {
          const subchannelObjArray = this.pool[channelTarget];
          for (const subchannelObj of subchannelObjArray) {
            if ((0, subchannel_address_1.subchannelAddressEqual)(subchannelTarget, subchannelObj.subchannelAddress) && (0, channel_options_1.channelOptionsEqual)(channelArguments, subchannelObj.channelArguments) && channelCredentials._equals(subchannelObj.channelCredentials)) {
              return subchannelObj.subchannel;
            }
          }
        }
        const subchannel = new subchannel_1.Subchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials, new transport_1.Http2SubchannelConnector(channelTargetUri));
        if (!(channelTarget in this.pool)) {
          this.pool[channelTarget] = [];
        }
        this.pool[channelTarget].push({
          subchannelAddress: subchannelTarget,
          channelArguments,
          channelCredentials,
          subchannel
        });
        subchannel.ref();
        return subchannel;
      }
    };
    exports2.SubchannelPool = SubchannelPool;
    var globalSubchannelPool = new SubchannelPool();
    function getSubchannelPool(global2) {
      if (global2) {
        return globalSubchannelPool;
      } else {
        return new SubchannelPool();
      }
    }
    exports2.getSubchannelPool = getSubchannelPool;
  }
});

// node_modules/@grpc/grpc-js/build/src/filter-stack.js
var require_filter_stack = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/filter-stack.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FilterStackFactory = exports2.FilterStack = void 0;
    var FilterStack = class {
      constructor(filters) {
        this.filters = filters;
      }
      sendMetadata(metadata) {
        let result = metadata;
        for (let i = 0; i < this.filters.length; i++) {
          result = this.filters[i].sendMetadata(result);
        }
        return result;
      }
      receiveMetadata(metadata) {
        let result = metadata;
        for (let i = this.filters.length - 1; i >= 0; i--) {
          result = this.filters[i].receiveMetadata(result);
        }
        return result;
      }
      sendMessage(message) {
        let result = message;
        for (let i = 0; i < this.filters.length; i++) {
          result = this.filters[i].sendMessage(result);
        }
        return result;
      }
      receiveMessage(message) {
        let result = message;
        for (let i = this.filters.length - 1; i >= 0; i--) {
          result = this.filters[i].receiveMessage(result);
        }
        return result;
      }
      receiveTrailers(status) {
        let result = status;
        for (let i = this.filters.length - 1; i >= 0; i--) {
          result = this.filters[i].receiveTrailers(result);
        }
        return result;
      }
      push(filters) {
        this.filters.unshift(...filters);
      }
      getFilters() {
        return this.filters;
      }
    };
    exports2.FilterStack = FilterStack;
    var FilterStackFactory = class _FilterStackFactory {
      constructor(factories) {
        this.factories = factories;
      }
      push(filterFactories) {
        this.factories.unshift(...filterFactories);
      }
      clone() {
        return new _FilterStackFactory([...this.factories]);
      }
      createFilter() {
        return new FilterStack(this.factories.map((factory) => factory.createFilter()));
      }
    };
    exports2.FilterStackFactory = FilterStackFactory;
  }
});

// node_modules/@grpc/grpc-js/build/src/compression-algorithms.js
var require_compression_algorithms = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/compression-algorithms.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CompressionAlgorithms = void 0;
    var CompressionAlgorithms;
    (function(CompressionAlgorithms2) {
      CompressionAlgorithms2[CompressionAlgorithms2["identity"] = 0] = "identity";
      CompressionAlgorithms2[CompressionAlgorithms2["deflate"] = 1] = "deflate";
      CompressionAlgorithms2[CompressionAlgorithms2["gzip"] = 2] = "gzip";
    })(CompressionAlgorithms || (exports2.CompressionAlgorithms = CompressionAlgorithms = {}));
  }
});

// node_modules/@grpc/grpc-js/build/src/filter.js
var require_filter = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/filter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseFilter = void 0;
    var BaseFilter = class {
      async sendMetadata(metadata) {
        return metadata;
      }
      receiveMetadata(metadata) {
        return metadata;
      }
      async sendMessage(message) {
        return message;
      }
      async receiveMessage(message) {
        return message;
      }
      receiveTrailers(status) {
        return status;
      }
    };
    exports2.BaseFilter = BaseFilter;
  }
});

// node_modules/@grpc/grpc-js/build/src/compression-filter.js
var require_compression_filter = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/compression-filter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CompressionFilterFactory = exports2.CompressionFilter = void 0;
    var zlib = require("zlib");
    var compression_algorithms_1 = require_compression_algorithms();
    var constants_1 = require_constants();
    var filter_1 = require_filter();
    var logging = require_logging();
    var isCompressionAlgorithmKey = (key) => {
      return typeof key === "number" && typeof compression_algorithms_1.CompressionAlgorithms[key] === "string";
    };
    var CompressionHandler = class {
      /**
       * @param message Raw uncompressed message bytes
       * @param compress Indicates whether the message should be compressed
       * @return Framed message, compressed if applicable
       */
      async writeMessage(message, compress) {
        let messageBuffer = message;
        if (compress) {
          messageBuffer = await this.compressMessage(messageBuffer);
        }
        const output = Buffer.allocUnsafe(messageBuffer.length + 5);
        output.writeUInt8(compress ? 1 : 0, 0);
        output.writeUInt32BE(messageBuffer.length, 1);
        messageBuffer.copy(output, 5);
        return output;
      }
      /**
       * @param data Framed message, possibly compressed
       * @return Uncompressed message
       */
      async readMessage(data) {
        const compressed = data.readUInt8(0) === 1;
        let messageBuffer = data.slice(5);
        if (compressed) {
          messageBuffer = await this.decompressMessage(messageBuffer);
        }
        return messageBuffer;
      }
    };
    var IdentityHandler = class extends CompressionHandler {
      async compressMessage(message) {
        return message;
      }
      async writeMessage(message, compress) {
        const output = Buffer.allocUnsafe(message.length + 5);
        output.writeUInt8(0, 0);
        output.writeUInt32BE(message.length, 1);
        message.copy(output, 5);
        return output;
      }
      decompressMessage(message) {
        return Promise.reject(new Error('Received compressed message but "grpc-encoding" header was identity'));
      }
    };
    var DeflateHandler = class extends CompressionHandler {
      compressMessage(message) {
        return new Promise((resolve, reject) => {
          zlib.deflate(message, (err, output) => {
            if (err) {
              reject(err);
            } else {
              resolve(output);
            }
          });
        });
      }
      decompressMessage(message) {
        return new Promise((resolve, reject) => {
          zlib.inflate(message, (err, output) => {
            if (err) {
              reject(err);
            } else {
              resolve(output);
            }
          });
        });
      }
    };
    var GzipHandler = class extends CompressionHandler {
      compressMessage(message) {
        return new Promise((resolve, reject) => {
          zlib.gzip(message, (err, output) => {
            if (err) {
              reject(err);
            } else {
              resolve(output);
            }
          });
        });
      }
      decompressMessage(message) {
        return new Promise((resolve, reject) => {
          zlib.unzip(message, (err, output) => {
            if (err) {
              reject(err);
            } else {
              resolve(output);
            }
          });
        });
      }
    };
    var UnknownHandler = class extends CompressionHandler {
      constructor(compressionName) {
        super();
        this.compressionName = compressionName;
      }
      compressMessage(message) {
        return Promise.reject(new Error(`Received message compressed with unsupported compression method ${this.compressionName}`));
      }
      decompressMessage(message) {
        return Promise.reject(new Error(`Compression method not supported: ${this.compressionName}`));
      }
    };
    function getCompressionHandler(compressionName) {
      switch (compressionName) {
        case "identity":
          return new IdentityHandler();
        case "deflate":
          return new DeflateHandler();
        case "gzip":
          return new GzipHandler();
        default:
          return new UnknownHandler(compressionName);
      }
    }
    var CompressionFilter = class extends filter_1.BaseFilter {
      constructor(channelOptions, sharedFilterConfig) {
        var _a;
        super();
        this.sharedFilterConfig = sharedFilterConfig;
        this.sendCompression = new IdentityHandler();
        this.receiveCompression = new IdentityHandler();
        this.currentCompressionAlgorithm = "identity";
        const compressionAlgorithmKey = channelOptions["grpc.default_compression_algorithm"];
        if (compressionAlgorithmKey !== void 0) {
          if (isCompressionAlgorithmKey(compressionAlgorithmKey)) {
            const clientSelectedEncoding = compression_algorithms_1.CompressionAlgorithms[compressionAlgorithmKey];
            const serverSupportedEncodings = (_a = sharedFilterConfig.serverSupportedEncodingHeader) === null || _a === void 0 ? void 0 : _a.split(",");
            if (!serverSupportedEncodings || serverSupportedEncodings.includes(clientSelectedEncoding)) {
              this.currentCompressionAlgorithm = clientSelectedEncoding;
              this.sendCompression = getCompressionHandler(this.currentCompressionAlgorithm);
            }
          } else {
            logging.log(constants_1.LogVerbosity.ERROR, `Invalid value provided for grpc.default_compression_algorithm option: ${compressionAlgorithmKey}`);
          }
        }
      }
      async sendMetadata(metadata) {
        const headers = await metadata;
        headers.set("grpc-accept-encoding", "identity,deflate,gzip");
        headers.set("accept-encoding", "identity");
        if (this.currentCompressionAlgorithm === "identity") {
          headers.remove("grpc-encoding");
        } else {
          headers.set("grpc-encoding", this.currentCompressionAlgorithm);
        }
        return headers;
      }
      receiveMetadata(metadata) {
        const receiveEncoding = metadata.get("grpc-encoding");
        if (receiveEncoding.length > 0) {
          const encoding = receiveEncoding[0];
          if (typeof encoding === "string") {
            this.receiveCompression = getCompressionHandler(encoding);
          }
        }
        metadata.remove("grpc-encoding");
        const serverSupportedEncodingsHeader = metadata.get("grpc-accept-encoding")[0];
        if (serverSupportedEncodingsHeader) {
          this.sharedFilterConfig.serverSupportedEncodingHeader = serverSupportedEncodingsHeader;
          const serverSupportedEncodings = serverSupportedEncodingsHeader.split(",");
          if (!serverSupportedEncodings.includes(this.currentCompressionAlgorithm)) {
            this.sendCompression = new IdentityHandler();
            this.currentCompressionAlgorithm = "identity";
          }
        }
        metadata.remove("grpc-accept-encoding");
        return metadata;
      }
      async sendMessage(message) {
        var _a;
        const resolvedMessage = await message;
        let compress;
        if (this.sendCompression instanceof IdentityHandler) {
          compress = false;
        } else {
          compress = (((_a = resolvedMessage.flags) !== null && _a !== void 0 ? _a : 0) & 2) === 0;
        }
        return {
          message: await this.sendCompression.writeMessage(resolvedMessage.message, compress),
          flags: resolvedMessage.flags
        };
      }
      async receiveMessage(message) {
        return this.receiveCompression.readMessage(await message);
      }
    };
    exports2.CompressionFilter = CompressionFilter;
    var CompressionFilterFactory = class {
      constructor(channel, options) {
        this.options = options;
        this.sharedFilterConfig = {};
      }
      createFilter() {
        return new CompressionFilter(this.options, this.sharedFilterConfig);
      }
    };
    exports2.CompressionFilterFactory = CompressionFilterFactory;
  }
});

// node_modules/@grpc/grpc-js/build/src/max-message-size-filter.js
var require_max_message_size_filter = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/max-message-size-filter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MaxMessageSizeFilterFactory = exports2.MaxMessageSizeFilter = void 0;
    var filter_1 = require_filter();
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var MaxMessageSizeFilter = class extends filter_1.BaseFilter {
      constructor(options) {
        super();
        this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;
        this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;
        if ("grpc.max_send_message_length" in options) {
          this.maxSendMessageSize = options["grpc.max_send_message_length"];
        }
        if ("grpc.max_receive_message_length" in options) {
          this.maxReceiveMessageSize = options["grpc.max_receive_message_length"];
        }
      }
      async sendMessage(message) {
        if (this.maxSendMessageSize === -1) {
          return message;
        } else {
          const concreteMessage = await message;
          if (concreteMessage.message.length > this.maxSendMessageSize) {
            throw {
              code: constants_1.Status.RESOURCE_EXHAUSTED,
              details: `Sent message larger than max (${concreteMessage.message.length} vs. ${this.maxSendMessageSize})`,
              metadata: new metadata_1.Metadata()
            };
          } else {
            return concreteMessage;
          }
        }
      }
      async receiveMessage(message) {
        if (this.maxReceiveMessageSize === -1) {
          return message;
        } else {
          const concreteMessage = await message;
          if (concreteMessage.length > this.maxReceiveMessageSize) {
            throw {
              code: constants_1.Status.RESOURCE_EXHAUSTED,
              details: `Received message larger than max (${concreteMessage.length} vs. ${this.maxReceiveMessageSize})`,
              metadata: new metadata_1.Metadata()
            };
          } else {
            return concreteMessage;
          }
        }
      }
    };
    exports2.MaxMessageSizeFilter = MaxMessageSizeFilter;
    var MaxMessageSizeFilterFactory = class {
      constructor(options) {
        this.options = options;
      }
      createFilter() {
        return new MaxMessageSizeFilter(this.options);
      }
    };
    exports2.MaxMessageSizeFilterFactory = MaxMessageSizeFilterFactory;
  }
});

// node_modules/@grpc/grpc-js/build/src/deadline.js
var require_deadline = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/deadline.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deadlineToString = exports2.getRelativeTimeout = exports2.getDeadlineTimeoutString = exports2.minDeadline = void 0;
    function minDeadline(...deadlineList) {
      let minValue = Infinity;
      for (const deadline of deadlineList) {
        const deadlineMsecs = deadline instanceof Date ? deadline.getTime() : deadline;
        if (deadlineMsecs < minValue) {
          minValue = deadlineMsecs;
        }
      }
      return minValue;
    }
    exports2.minDeadline = minDeadline;
    var units = [
      ["m", 1],
      ["S", 1e3],
      ["M", 60 * 1e3],
      ["H", 60 * 60 * 1e3]
    ];
    function getDeadlineTimeoutString(deadline) {
      const now = (/* @__PURE__ */ new Date()).getTime();
      if (deadline instanceof Date) {
        deadline = deadline.getTime();
      }
      const timeoutMs = Math.max(deadline - now, 0);
      for (const [unit, factor] of units) {
        const amount = timeoutMs / factor;
        if (amount < 1e8) {
          return String(Math.ceil(amount)) + unit;
        }
      }
      throw new Error("Deadline is too far in the future");
    }
    exports2.getDeadlineTimeoutString = getDeadlineTimeoutString;
    var MAX_TIMEOUT_TIME = 2147483647;
    function getRelativeTimeout(deadline) {
      const deadlineMs = deadline instanceof Date ? deadline.getTime() : deadline;
      const now = (/* @__PURE__ */ new Date()).getTime();
      const timeout = deadlineMs - now;
      if (timeout < 0) {
        return 0;
      } else if (timeout > MAX_TIMEOUT_TIME) {
        return Infinity;
      } else {
        return timeout;
      }
    }
    exports2.getRelativeTimeout = getRelativeTimeout;
    function deadlineToString(deadline) {
      if (deadline instanceof Date) {
        return deadline.toISOString();
      } else {
        const dateDeadline = new Date(deadline);
        if (Number.isNaN(dateDeadline.getTime())) {
          return "" + deadline;
        } else {
          return dateDeadline.toISOString();
        }
      }
    }
    exports2.deadlineToString = deadlineToString;
  }
});

// node_modules/@grpc/grpc-js/build/src/control-plane-status.js
var require_control_plane_status = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/control-plane-status.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.restrictControlPlaneStatusCode = void 0;
    var constants_1 = require_constants();
    var INAPPROPRIATE_CONTROL_PLANE_CODES = [
      constants_1.Status.OK,
      constants_1.Status.INVALID_ARGUMENT,
      constants_1.Status.NOT_FOUND,
      constants_1.Status.ALREADY_EXISTS,
      constants_1.Status.FAILED_PRECONDITION,
      constants_1.Status.ABORTED,
      constants_1.Status.OUT_OF_RANGE,
      constants_1.Status.DATA_LOSS
    ];
    function restrictControlPlaneStatusCode(code, details) {
      if (INAPPROPRIATE_CONTROL_PLANE_CODES.includes(code)) {
        return {
          code: constants_1.Status.INTERNAL,
          details: `Invalid status from control plane: ${code} ${constants_1.Status[code]} ${details}`
        };
      } else {
        return { code, details };
      }
    }
    exports2.restrictControlPlaneStatusCode = restrictControlPlaneStatusCode;
  }
});

// node_modules/@grpc/grpc-js/build/src/load-balancing-call.js
var require_load_balancing_call = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/load-balancing-call.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LoadBalancingCall = void 0;
    var connectivity_state_1 = require_connectivity_state();
    var constants_1 = require_constants();
    var deadline_1 = require_deadline();
    var metadata_1 = require_metadata();
    var picker_1 = require_picker();
    var uri_parser_1 = require_uri_parser();
    var logging = require_logging();
    var control_plane_status_1 = require_control_plane_status();
    var http2 = require("http2");
    var TRACER_NAME = "load_balancing_call";
    var LoadBalancingCall = class {
      constructor(channel, callConfig, methodName, host, credentials, deadline, callNumber) {
        var _a, _b;
        this.channel = channel;
        this.callConfig = callConfig;
        this.methodName = methodName;
        this.host = host;
        this.credentials = credentials;
        this.deadline = deadline;
        this.callNumber = callNumber;
        this.child = null;
        this.readPending = false;
        this.pendingMessage = null;
        this.pendingHalfClose = false;
        this.ended = false;
        this.metadata = null;
        this.listener = null;
        this.onCallEnded = null;
        const splitPath = this.methodName.split("/");
        let serviceName = "";
        if (splitPath.length >= 2) {
          serviceName = splitPath[1];
        }
        const hostname = (_b = (_a = (0, uri_parser_1.splitHostPort)(this.host)) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : "localhost";
        this.serviceUrl = `https://${hostname}/${serviceName}`;
      }
      trace(text) {
        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, "[" + this.callNumber + "] " + text);
      }
      outputStatus(status, progress) {
        var _a, _b;
        if (!this.ended) {
          this.ended = true;
          this.trace("ended with status: code=" + status.code + ' details="' + status.details + '"');
          const finalStatus = Object.assign(Object.assign({}, status), { progress });
          (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(finalStatus);
          (_b = this.onCallEnded) === null || _b === void 0 ? void 0 : _b.call(this, finalStatus.code);
        }
      }
      doPick() {
        var _a, _b;
        if (this.ended) {
          return;
        }
        if (!this.metadata) {
          throw new Error("doPick called before start");
        }
        this.trace("Pick called");
        const pickResult = this.channel.doPick(this.metadata, this.callConfig.pickInformation);
        const subchannelString = pickResult.subchannel ? "(" + pickResult.subchannel.getChannelzRef().id + ") " + pickResult.subchannel.getAddress() : "" + pickResult.subchannel;
        this.trace("Pick result: " + picker_1.PickResultType[pickResult.pickResultType] + " subchannel: " + subchannelString + " status: " + ((_a = pickResult.status) === null || _a === void 0 ? void 0 : _a.code) + " " + ((_b = pickResult.status) === null || _b === void 0 ? void 0 : _b.details));
        switch (pickResult.pickResultType) {
          case picker_1.PickResultType.COMPLETE:
            this.credentials.generateMetadata({ service_url: this.serviceUrl }).then((credsMetadata) => {
              var _a2, _b2, _c;
              if (this.ended) {
                this.trace("Credentials metadata generation finished after call ended");
                return;
              }
              const finalMetadata = this.metadata.clone();
              finalMetadata.merge(credsMetadata);
              if (finalMetadata.get("authorization").length > 1) {
                this.outputStatus({
                  code: constants_1.Status.INTERNAL,
                  details: '"authorization" metadata cannot have multiple values',
                  metadata: new metadata_1.Metadata()
                }, "PROCESSED");
              }
              if (pickResult.subchannel.getConnectivityState() !== connectivity_state_1.ConnectivityState.READY) {
                this.trace("Picked subchannel " + subchannelString + " has state " + connectivity_state_1.ConnectivityState[pickResult.subchannel.getConnectivityState()] + " after getting credentials metadata. Retrying pick");
                this.doPick();
                return;
              }
              if (this.deadline !== Infinity) {
                finalMetadata.set("grpc-timeout", (0, deadline_1.getDeadlineTimeoutString)(this.deadline));
              }
              try {
                this.child = pickResult.subchannel.getRealSubchannel().createCall(finalMetadata, this.host, this.methodName, {
                  onReceiveMetadata: (metadata) => {
                    this.trace("Received metadata");
                    this.listener.onReceiveMetadata(metadata);
                  },
                  onReceiveMessage: (message) => {
                    this.trace("Received message");
                    this.listener.onReceiveMessage(message);
                  },
                  onReceiveStatus: (status) => {
                    this.trace("Received status");
                    if (status.rstCode === http2.constants.NGHTTP2_REFUSED_STREAM) {
                      this.outputStatus(status, "REFUSED");
                    } else {
                      this.outputStatus(status, "PROCESSED");
                    }
                  }
                });
              } catch (error) {
                this.trace("Failed to start call on picked subchannel " + subchannelString + " with error " + error.message);
                this.outputStatus({
                  code: constants_1.Status.INTERNAL,
                  details: "Failed to start HTTP/2 stream with error " + error.message,
                  metadata: new metadata_1.Metadata()
                }, "NOT_STARTED");
                return;
              }
              (_b2 = (_a2 = this.callConfig).onCommitted) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
              (_c = pickResult.onCallStarted) === null || _c === void 0 ? void 0 : _c.call(pickResult);
              this.onCallEnded = pickResult.onCallEnded;
              this.trace("Created child call [" + this.child.getCallNumber() + "]");
              if (this.readPending) {
                this.child.startRead();
              }
              if (this.pendingMessage) {
                this.child.sendMessageWithContext(this.pendingMessage.context, this.pendingMessage.message);
              }
              if (this.pendingHalfClose) {
                this.child.halfClose();
              }
            }, (error) => {
              const { code: code2, details: details2 } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(typeof error.code === "number" ? error.code : constants_1.Status.UNKNOWN, `Getting metadata from plugin failed with error: ${error.message}`);
              this.outputStatus({
                code: code2,
                details: details2,
                metadata: new metadata_1.Metadata()
              }, "PROCESSED");
            });
            break;
          case picker_1.PickResultType.DROP:
            const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);
            setImmediate(() => {
              this.outputStatus({ code, details, metadata: pickResult.status.metadata }, "DROP");
            });
            break;
          case picker_1.PickResultType.TRANSIENT_FAILURE:
            if (this.metadata.getOptions().waitForReady) {
              this.channel.queueCallForPick(this);
            } else {
              const { code: code2, details: details2 } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);
              setImmediate(() => {
                this.outputStatus({ code: code2, details: details2, metadata: pickResult.status.metadata }, "PROCESSED");
              });
            }
            break;
          case picker_1.PickResultType.QUEUE:
            this.channel.queueCallForPick(this);
        }
      }
      cancelWithStatus(status, details) {
        var _a;
        this.trace("cancelWithStatus code: " + status + ' details: "' + details + '"');
        (_a = this.child) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(status, details);
        this.outputStatus({ code: status, details, metadata: new metadata_1.Metadata() }, "PROCESSED");
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.child) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : this.channel.getTarget();
      }
      start(metadata, listener) {
        this.trace("start called");
        this.listener = listener;
        this.metadata = metadata;
        this.doPick();
      }
      sendMessageWithContext(context, message) {
        this.trace("write() called with message of length " + message.length);
        if (this.child) {
          this.child.sendMessageWithContext(context, message);
        } else {
          this.pendingMessage = { context, message };
        }
      }
      startRead() {
        this.trace("startRead called");
        if (this.child) {
          this.child.startRead();
        } else {
          this.readPending = true;
        }
      }
      halfClose() {
        this.trace("halfClose called");
        if (this.child) {
          this.child.halfClose();
        } else {
          this.pendingHalfClose = true;
        }
      }
      setCredentials(credentials) {
        throw new Error("Method not implemented.");
      }
      getCallNumber() {
        return this.callNumber;
      }
    };
    exports2.LoadBalancingCall = LoadBalancingCall;
  }
});

// node_modules/@grpc/grpc-js/build/src/resolving-call.js
var require_resolving_call = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolving-call.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ResolvingCall = void 0;
    var constants_1 = require_constants();
    var deadline_1 = require_deadline();
    var metadata_1 = require_metadata();
    var logging = require_logging();
    var control_plane_status_1 = require_control_plane_status();
    var TRACER_NAME = "resolving_call";
    var ResolvingCall = class {
      constructor(channel, method, options, filterStackFactory, credentials, callNumber) {
        this.channel = channel;
        this.method = method;
        this.filterStackFactory = filterStackFactory;
        this.credentials = credentials;
        this.callNumber = callNumber;
        this.child = null;
        this.readPending = false;
        this.pendingMessage = null;
        this.pendingHalfClose = false;
        this.ended = false;
        this.readFilterPending = false;
        this.writeFilterPending = false;
        this.pendingChildStatus = null;
        this.metadata = null;
        this.listener = null;
        this.statusWatchers = [];
        this.deadlineTimer = setTimeout(() => {
        }, 0);
        this.filterStack = null;
        this.deadline = options.deadline;
        this.host = options.host;
        if (options.parentCall) {
          if (options.flags & constants_1.Propagate.CANCELLATION) {
            options.parentCall.on("cancelled", () => {
              this.cancelWithStatus(constants_1.Status.CANCELLED, "Cancelled by parent call");
            });
          }
          if (options.flags & constants_1.Propagate.DEADLINE) {
            this.trace("Propagating deadline from parent: " + options.parentCall.getDeadline());
            this.deadline = (0, deadline_1.minDeadline)(this.deadline, options.parentCall.getDeadline());
          }
        }
        this.trace("Created");
        this.runDeadlineTimer();
      }
      trace(text) {
        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, "[" + this.callNumber + "] " + text);
      }
      runDeadlineTimer() {
        clearTimeout(this.deadlineTimer);
        this.trace("Deadline: " + (0, deadline_1.deadlineToString)(this.deadline));
        const timeout = (0, deadline_1.getRelativeTimeout)(this.deadline);
        if (timeout !== Infinity) {
          this.trace("Deadline will be reached in " + timeout + "ms");
          const handleDeadline = () => {
            this.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, "Deadline exceeded");
          };
          if (timeout <= 0) {
            process.nextTick(handleDeadline);
          } else {
            this.deadlineTimer = setTimeout(handleDeadline, timeout);
          }
        }
      }
      outputStatus(status) {
        if (!this.ended) {
          this.ended = true;
          if (!this.filterStack) {
            this.filterStack = this.filterStackFactory.createFilter();
          }
          clearTimeout(this.deadlineTimer);
          const filteredStatus = this.filterStack.receiveTrailers(status);
          this.trace("ended with status: code=" + filteredStatus.code + ' details="' + filteredStatus.details + '"');
          this.statusWatchers.forEach((watcher) => watcher(filteredStatus));
          process.nextTick(() => {
            var _a;
            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(filteredStatus);
          });
        }
      }
      sendMessageOnChild(context, message) {
        if (!this.child) {
          throw new Error("sendMessageonChild called with child not populated");
        }
        const child = this.child;
        this.writeFilterPending = true;
        this.filterStack.sendMessage(Promise.resolve({ message, flags: context.flags })).then((filteredMessage) => {
          this.writeFilterPending = false;
          child.sendMessageWithContext(context, filteredMessage.message);
          if (this.pendingHalfClose) {
            child.halfClose();
          }
        }, (status) => {
          this.cancelWithStatus(status.code, status.details);
        });
      }
      getConfig() {
        if (this.ended) {
          return;
        }
        if (!this.metadata || !this.listener) {
          throw new Error("getConfig called before start");
        }
        const configResult = this.channel.getConfig(this.method, this.metadata);
        if (configResult.type === "NONE") {
          this.channel.queueCallForConfig(this);
          return;
        } else if (configResult.type === "ERROR") {
          if (this.metadata.getOptions().waitForReady) {
            this.channel.queueCallForConfig(this);
          } else {
            this.outputStatus(configResult.error);
          }
          return;
        }
        const config = configResult.config;
        if (config.status !== constants_1.Status.OK) {
          const { code, details } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(config.status, "Failed to route call to method " + this.method);
          this.outputStatus({
            code,
            details,
            metadata: new metadata_1.Metadata()
          });
          return;
        }
        if (config.methodConfig.timeout) {
          const configDeadline = /* @__PURE__ */ new Date();
          configDeadline.setSeconds(configDeadline.getSeconds() + config.methodConfig.timeout.seconds);
          configDeadline.setMilliseconds(configDeadline.getMilliseconds() + config.methodConfig.timeout.nanos / 1e6);
          this.deadline = (0, deadline_1.minDeadline)(this.deadline, configDeadline);
          this.runDeadlineTimer();
        }
        this.filterStackFactory.push(config.dynamicFilterFactories);
        this.filterStack = this.filterStackFactory.createFilter();
        this.filterStack.sendMetadata(Promise.resolve(this.metadata)).then((filteredMetadata) => {
          this.child = this.channel.createInnerCall(config, this.method, this.host, this.credentials, this.deadline);
          this.trace("Created child [" + this.child.getCallNumber() + "]");
          this.child.start(filteredMetadata, {
            onReceiveMetadata: (metadata) => {
              this.trace("Received metadata");
              this.listener.onReceiveMetadata(this.filterStack.receiveMetadata(metadata));
            },
            onReceiveMessage: (message) => {
              this.trace("Received message");
              this.readFilterPending = true;
              this.filterStack.receiveMessage(message).then((filteredMesssage) => {
                this.trace("Finished filtering received message");
                this.readFilterPending = false;
                this.listener.onReceiveMessage(filteredMesssage);
                if (this.pendingChildStatus) {
                  this.outputStatus(this.pendingChildStatus);
                }
              }, (status) => {
                this.cancelWithStatus(status.code, status.details);
              });
            },
            onReceiveStatus: (status) => {
              this.trace("Received status");
              if (this.readFilterPending) {
                this.pendingChildStatus = status;
              } else {
                this.outputStatus(status);
              }
            }
          });
          if (this.readPending) {
            this.child.startRead();
          }
          if (this.pendingMessage) {
            this.sendMessageOnChild(this.pendingMessage.context, this.pendingMessage.message);
          } else if (this.pendingHalfClose) {
            this.child.halfClose();
          }
        }, (status) => {
          this.outputStatus(status);
        });
      }
      reportResolverError(status) {
        var _a;
        if ((_a = this.metadata) === null || _a === void 0 ? void 0 : _a.getOptions().waitForReady) {
          this.channel.queueCallForConfig(this);
        } else {
          this.outputStatus(status);
        }
      }
      cancelWithStatus(status, details) {
        var _a;
        this.trace("cancelWithStatus code: " + status + ' details: "' + details + '"');
        (_a = this.child) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(status, details);
        this.outputStatus({
          code: status,
          details,
          metadata: new metadata_1.Metadata()
        });
      }
      getPeer() {
        var _a, _b;
        return (_b = (_a = this.child) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : this.channel.getTarget();
      }
      start(metadata, listener) {
        this.trace("start called");
        this.metadata = metadata.clone();
        this.listener = listener;
        this.getConfig();
      }
      sendMessageWithContext(context, message) {
        this.trace("write() called with message of length " + message.length);
        if (this.child) {
          this.sendMessageOnChild(context, message);
        } else {
          this.pendingMessage = { context, message };
        }
      }
      startRead() {
        this.trace("startRead called");
        if (this.child) {
          this.child.startRead();
        } else {
          this.readPending = true;
        }
      }
      halfClose() {
        this.trace("halfClose called");
        if (this.child && !this.writeFilterPending) {
          this.child.halfClose();
        } else {
          this.pendingHalfClose = true;
        }
      }
      setCredentials(credentials) {
        this.credentials = this.credentials.compose(credentials);
      }
      addStatusWatcher(watcher) {
        this.statusWatchers.push(watcher);
      }
      getCallNumber() {
        return this.callNumber;
      }
    };
    exports2.ResolvingCall = ResolvingCall;
  }
});

// node_modules/@grpc/grpc-js/build/src/retrying-call.js
var require_retrying_call = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/retrying-call.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RetryingCall = exports2.MessageBufferTracker = exports2.RetryThrottler = void 0;
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var logging = require_logging();
    var TRACER_NAME = "retrying_call";
    var RetryThrottler = class {
      constructor(maxTokens, tokenRatio, previousRetryThrottler) {
        this.maxTokens = maxTokens;
        this.tokenRatio = tokenRatio;
        if (previousRetryThrottler) {
          this.tokens = previousRetryThrottler.tokens * (maxTokens / previousRetryThrottler.maxTokens);
        } else {
          this.tokens = maxTokens;
        }
      }
      addCallSucceeded() {
        this.tokens = Math.max(this.tokens + this.tokenRatio, this.maxTokens);
      }
      addCallFailed() {
        this.tokens = Math.min(this.tokens - 1, 0);
      }
      canRetryCall() {
        return this.tokens > this.maxTokens / 2;
      }
    };
    exports2.RetryThrottler = RetryThrottler;
    var MessageBufferTracker = class {
      constructor(totalLimit, limitPerCall) {
        this.totalLimit = totalLimit;
        this.limitPerCall = limitPerCall;
        this.totalAllocated = 0;
        this.allocatedPerCall = /* @__PURE__ */ new Map();
      }
      allocate(size, callId) {
        var _a;
        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;
        if (this.limitPerCall - currentPerCall < size || this.totalLimit - this.totalAllocated < size) {
          return false;
        }
        this.allocatedPerCall.set(callId, currentPerCall + size);
        this.totalAllocated += size;
        return true;
      }
      free(size, callId) {
        var _a;
        if (this.totalAllocated < size) {
          throw new Error(`Invalid buffer allocation state: call ${callId} freed ${size} > total allocated ${this.totalAllocated}`);
        }
        this.totalAllocated -= size;
        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;
        if (currentPerCall < size) {
          throw new Error(`Invalid buffer allocation state: call ${callId} freed ${size} > allocated for call ${currentPerCall}`);
        }
        this.allocatedPerCall.set(callId, currentPerCall - size);
      }
      freeAll(callId) {
        var _a;
        const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;
        if (this.totalAllocated < currentPerCall) {
          throw new Error(`Invalid buffer allocation state: call ${callId} allocated ${currentPerCall} > total allocated ${this.totalAllocated}`);
        }
        this.totalAllocated -= currentPerCall;
        this.allocatedPerCall.delete(callId);
      }
    };
    exports2.MessageBufferTracker = MessageBufferTracker;
    var PREVIONS_RPC_ATTEMPTS_METADATA_KEY = "grpc-previous-rpc-attempts";
    var RetryingCall = class {
      constructor(channel, callConfig, methodName, host, credentials, deadline, callNumber, bufferTracker, retryThrottler) {
        this.channel = channel;
        this.callConfig = callConfig;
        this.methodName = methodName;
        this.host = host;
        this.credentials = credentials;
        this.deadline = deadline;
        this.callNumber = callNumber;
        this.bufferTracker = bufferTracker;
        this.retryThrottler = retryThrottler;
        this.listener = null;
        this.initialMetadata = null;
        this.underlyingCalls = [];
        this.writeBuffer = [];
        this.writeBufferOffset = 0;
        this.readStarted = false;
        this.transparentRetryUsed = false;
        this.attempts = 0;
        this.hedgingTimer = null;
        this.committedCallIndex = null;
        this.initialRetryBackoffSec = 0;
        this.nextRetryBackoffSec = 0;
        if (callConfig.methodConfig.retryPolicy) {
          this.state = "RETRY";
          const retryPolicy = callConfig.methodConfig.retryPolicy;
          this.nextRetryBackoffSec = this.initialRetryBackoffSec = Number(retryPolicy.initialBackoff.substring(0, retryPolicy.initialBackoff.length - 1));
        } else if (callConfig.methodConfig.hedgingPolicy) {
          this.state = "HEDGING";
        } else {
          this.state = "TRANSPARENT_ONLY";
        }
      }
      getCallNumber() {
        return this.callNumber;
      }
      trace(text) {
        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, "[" + this.callNumber + "] " + text);
      }
      reportStatus(statusObject) {
        this.trace("ended with status: code=" + statusObject.code + ' details="' + statusObject.details + '"');
        this.bufferTracker.freeAll(this.callNumber);
        this.writeBufferOffset = this.writeBufferOffset + this.writeBuffer.length;
        this.writeBuffer = [];
        process.nextTick(() => {
          var _a;
          (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus({
            code: statusObject.code,
            details: statusObject.details,
            metadata: statusObject.metadata
          });
        });
      }
      cancelWithStatus(status, details) {
        this.trace("cancelWithStatus code: " + status + ' details: "' + details + '"');
        this.reportStatus({ code: status, details, metadata: new metadata_1.Metadata() });
        for (const { call } of this.underlyingCalls) {
          call.cancelWithStatus(status, details);
        }
      }
      getPeer() {
        if (this.committedCallIndex !== null) {
          return this.underlyingCalls[this.committedCallIndex].call.getPeer();
        } else {
          return "unknown";
        }
      }
      getBufferEntry(messageIndex) {
        var _a;
        return (_a = this.writeBuffer[messageIndex - this.writeBufferOffset]) !== null && _a !== void 0 ? _a : {
          entryType: "FREED",
          allocated: false
        };
      }
      getNextBufferIndex() {
        return this.writeBufferOffset + this.writeBuffer.length;
      }
      clearSentMessages() {
        if (this.state !== "COMMITTED") {
          return;
        }
        const earliestNeededMessageIndex = this.underlyingCalls[this.committedCallIndex].nextMessageToSend;
        for (let messageIndex = this.writeBufferOffset; messageIndex < earliestNeededMessageIndex; messageIndex++) {
          const bufferEntry = this.getBufferEntry(messageIndex);
          if (bufferEntry.allocated) {
            this.bufferTracker.free(bufferEntry.message.message.length, this.callNumber);
          }
        }
        this.writeBuffer = this.writeBuffer.slice(earliestNeededMessageIndex - this.writeBufferOffset);
        this.writeBufferOffset = earliestNeededMessageIndex;
      }
      commitCall(index) {
        if (this.state === "COMMITTED") {
          return;
        }
        if (this.underlyingCalls[index].state === "COMPLETED") {
          return;
        }
        this.trace("Committing call [" + this.underlyingCalls[index].call.getCallNumber() + "] at index " + index);
        this.state = "COMMITTED";
        this.committedCallIndex = index;
        for (let i = 0; i < this.underlyingCalls.length; i++) {
          if (i === index) {
            continue;
          }
          if (this.underlyingCalls[i].state === "COMPLETED") {
            continue;
          }
          this.underlyingCalls[i].state = "COMPLETED";
          this.underlyingCalls[i].call.cancelWithStatus(constants_1.Status.CANCELLED, "Discarded in favor of other hedged attempt");
        }
        this.clearSentMessages();
      }
      commitCallWithMostMessages() {
        if (this.state === "COMMITTED") {
          return;
        }
        let mostMessages = -1;
        let callWithMostMessages = -1;
        for (const [index, childCall] of this.underlyingCalls.entries()) {
          if (childCall.state === "ACTIVE" && childCall.nextMessageToSend > mostMessages) {
            mostMessages = childCall.nextMessageToSend;
            callWithMostMessages = index;
          }
        }
        if (callWithMostMessages === -1) {
          this.state = "TRANSPARENT_ONLY";
        } else {
          this.commitCall(callWithMostMessages);
        }
      }
      isStatusCodeInList(list, code) {
        return list.some((value) => value === code || value.toString().toLowerCase() === constants_1.Status[code].toLowerCase());
      }
      getNextRetryBackoffMs() {
        var _a;
        const retryPolicy = (_a = this.callConfig) === null || _a === void 0 ? void 0 : _a.methodConfig.retryPolicy;
        if (!retryPolicy) {
          return 0;
        }
        const nextBackoffMs = Math.random() * this.nextRetryBackoffSec * 1e3;
        const maxBackoffSec = Number(retryPolicy.maxBackoff.substring(0, retryPolicy.maxBackoff.length - 1));
        this.nextRetryBackoffSec = Math.min(this.nextRetryBackoffSec * retryPolicy.backoffMultiplier, maxBackoffSec);
        return nextBackoffMs;
      }
      maybeRetryCall(pushback, callback) {
        if (this.state !== "RETRY") {
          callback(false);
          return;
        }
        const retryPolicy = this.callConfig.methodConfig.retryPolicy;
        if (this.attempts >= Math.min(retryPolicy.maxAttempts, 5)) {
          callback(false);
          return;
        }
        let retryDelayMs;
        if (pushback === null) {
          retryDelayMs = this.getNextRetryBackoffMs();
        } else if (pushback < 0) {
          this.state = "TRANSPARENT_ONLY";
          callback(false);
          return;
        } else {
          retryDelayMs = pushback;
          this.nextRetryBackoffSec = this.initialRetryBackoffSec;
        }
        setTimeout(() => {
          var _a, _b;
          if (this.state !== "RETRY") {
            callback(false);
            return;
          }
          if ((_b = (_a = this.retryThrottler) === null || _a === void 0 ? void 0 : _a.canRetryCall()) !== null && _b !== void 0 ? _b : true) {
            callback(true);
            this.attempts += 1;
            this.startNewAttempt();
          }
        }, retryDelayMs);
      }
      countActiveCalls() {
        let count = 0;
        for (const call of this.underlyingCalls) {
          if ((call === null || call === void 0 ? void 0 : call.state) === "ACTIVE") {
            count += 1;
          }
        }
        return count;
      }
      handleProcessedStatus(status, callIndex, pushback) {
        var _a, _b, _c;
        switch (this.state) {
          case "COMMITTED":
          case "TRANSPARENT_ONLY":
            this.commitCall(callIndex);
            this.reportStatus(status);
            break;
          case "HEDGING":
            if (this.isStatusCodeInList((_a = this.callConfig.methodConfig.hedgingPolicy.nonFatalStatusCodes) !== null && _a !== void 0 ? _a : [], status.code)) {
              (_b = this.retryThrottler) === null || _b === void 0 ? void 0 : _b.addCallFailed();
              let delayMs;
              if (pushback === null) {
                delayMs = 0;
              } else if (pushback < 0) {
                this.state = "TRANSPARENT_ONLY";
                this.commitCall(callIndex);
                this.reportStatus(status);
                return;
              } else {
                delayMs = pushback;
              }
              setTimeout(() => {
                this.maybeStartHedgingAttempt();
                if (this.countActiveCalls() === 0) {
                  this.commitCall(callIndex);
                  this.reportStatus(status);
                }
              }, delayMs);
            } else {
              this.commitCall(callIndex);
              this.reportStatus(status);
            }
            break;
          case "RETRY":
            if (this.isStatusCodeInList(this.callConfig.methodConfig.retryPolicy.retryableStatusCodes, status.code)) {
              (_c = this.retryThrottler) === null || _c === void 0 ? void 0 : _c.addCallFailed();
              this.maybeRetryCall(pushback, (retried) => {
                if (!retried) {
                  this.commitCall(callIndex);
                  this.reportStatus(status);
                }
              });
            } else {
              this.commitCall(callIndex);
              this.reportStatus(status);
            }
            break;
        }
      }
      getPushback(metadata) {
        const mdValue = metadata.get("grpc-retry-pushback-ms");
        if (mdValue.length === 0) {
          return null;
        }
        try {
          return parseInt(mdValue[0]);
        } catch (e) {
          return -1;
        }
      }
      handleChildStatus(status, callIndex) {
        var _a;
        if (this.underlyingCalls[callIndex].state === "COMPLETED") {
          return;
        }
        this.trace("state=" + this.state + " handling status with progress " + status.progress + " from child [" + this.underlyingCalls[callIndex].call.getCallNumber() + "] in state " + this.underlyingCalls[callIndex].state);
        this.underlyingCalls[callIndex].state = "COMPLETED";
        if (status.code === constants_1.Status.OK) {
          (_a = this.retryThrottler) === null || _a === void 0 ? void 0 : _a.addCallSucceeded();
          this.commitCall(callIndex);
          this.reportStatus(status);
          return;
        }
        if (this.state === "COMMITTED") {
          this.reportStatus(status);
          return;
        }
        const pushback = this.getPushback(status.metadata);
        switch (status.progress) {
          case "NOT_STARTED":
            this.startNewAttempt();
            break;
          case "REFUSED":
            if (this.transparentRetryUsed) {
              this.handleProcessedStatus(status, callIndex, pushback);
            } else {
              this.transparentRetryUsed = true;
              this.startNewAttempt();
            }
            break;
          case "DROP":
            this.commitCall(callIndex);
            this.reportStatus(status);
            break;
          case "PROCESSED":
            this.handleProcessedStatus(status, callIndex, pushback);
            break;
        }
      }
      maybeStartHedgingAttempt() {
        if (this.state !== "HEDGING") {
          return;
        }
        if (!this.callConfig.methodConfig.hedgingPolicy) {
          return;
        }
        const hedgingPolicy = this.callConfig.methodConfig.hedgingPolicy;
        if (this.attempts >= Math.min(hedgingPolicy.maxAttempts, 5)) {
          return;
        }
        this.attempts += 1;
        this.startNewAttempt();
        this.maybeStartHedgingTimer();
      }
      maybeStartHedgingTimer() {
        var _a, _b, _c;
        if (this.hedgingTimer) {
          clearTimeout(this.hedgingTimer);
        }
        if (this.state !== "HEDGING") {
          return;
        }
        if (!this.callConfig.methodConfig.hedgingPolicy) {
          return;
        }
        const hedgingPolicy = this.callConfig.methodConfig.hedgingPolicy;
        if (this.attempts >= Math.min(hedgingPolicy.maxAttempts, 5)) {
          return;
        }
        const hedgingDelayString = (_a = hedgingPolicy.hedgingDelay) !== null && _a !== void 0 ? _a : "0s";
        const hedgingDelaySec = Number(hedgingDelayString.substring(0, hedgingDelayString.length - 1));
        this.hedgingTimer = setTimeout(() => {
          this.maybeStartHedgingAttempt();
        }, hedgingDelaySec * 1e3);
        (_c = (_b = this.hedgingTimer).unref) === null || _c === void 0 ? void 0 : _c.call(_b);
      }
      startNewAttempt() {
        const child = this.channel.createLoadBalancingCall(this.callConfig, this.methodName, this.host, this.credentials, this.deadline);
        this.trace("Created child call [" + child.getCallNumber() + "] for attempt " + this.attempts);
        const index = this.underlyingCalls.length;
        this.underlyingCalls.push({
          state: "ACTIVE",
          call: child,
          nextMessageToSend: 0
        });
        const previousAttempts = this.attempts - 1;
        const initialMetadata = this.initialMetadata.clone();
        if (previousAttempts > 0) {
          initialMetadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);
        }
        let receivedMetadata = false;
        child.start(initialMetadata, {
          onReceiveMetadata: (metadata) => {
            this.trace("Received metadata from child [" + child.getCallNumber() + "]");
            this.commitCall(index);
            receivedMetadata = true;
            if (previousAttempts > 0) {
              metadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);
            }
            if (this.underlyingCalls[index].state === "ACTIVE") {
              this.listener.onReceiveMetadata(metadata);
            }
          },
          onReceiveMessage: (message) => {
            this.trace("Received message from child [" + child.getCallNumber() + "]");
            this.commitCall(index);
            if (this.underlyingCalls[index].state === "ACTIVE") {
              this.listener.onReceiveMessage(message);
            }
          },
          onReceiveStatus: (status) => {
            this.trace("Received status from child [" + child.getCallNumber() + "]");
            if (!receivedMetadata && previousAttempts > 0) {
              status.metadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);
            }
            this.handleChildStatus(status, index);
          }
        });
        this.sendNextChildMessage(index);
        if (this.readStarted) {
          child.startRead();
        }
      }
      start(metadata, listener) {
        this.trace("start called");
        this.listener = listener;
        this.initialMetadata = metadata;
        this.attempts += 1;
        this.startNewAttempt();
        this.maybeStartHedgingTimer();
      }
      handleChildWriteCompleted(childIndex) {
        var _a, _b;
        const childCall = this.underlyingCalls[childIndex];
        const messageIndex = childCall.nextMessageToSend;
        (_b = (_a = this.getBufferEntry(messageIndex)).callback) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.clearSentMessages();
        childCall.nextMessageToSend += 1;
        this.sendNextChildMessage(childIndex);
      }
      sendNextChildMessage(childIndex) {
        const childCall = this.underlyingCalls[childIndex];
        if (childCall.state === "COMPLETED") {
          return;
        }
        if (this.getBufferEntry(childCall.nextMessageToSend)) {
          const bufferEntry = this.getBufferEntry(childCall.nextMessageToSend);
          switch (bufferEntry.entryType) {
            case "MESSAGE":
              childCall.call.sendMessageWithContext({
                callback: (error) => {
                  this.handleChildWriteCompleted(childIndex);
                }
              }, bufferEntry.message.message);
              break;
            case "HALF_CLOSE":
              childCall.nextMessageToSend += 1;
              childCall.call.halfClose();
              break;
            case "FREED":
              break;
          }
        }
      }
      sendMessageWithContext(context, message) {
        var _a;
        this.trace("write() called with message of length " + message.length);
        const writeObj = {
          message,
          flags: context.flags
        };
        const messageIndex = this.getNextBufferIndex();
        const bufferEntry = {
          entryType: "MESSAGE",
          message: writeObj,
          allocated: this.bufferTracker.allocate(message.length, this.callNumber)
        };
        this.writeBuffer.push(bufferEntry);
        if (bufferEntry.allocated) {
          (_a = context.callback) === null || _a === void 0 ? void 0 : _a.call(context);
          for (const [callIndex, call] of this.underlyingCalls.entries()) {
            if (call.state === "ACTIVE" && call.nextMessageToSend === messageIndex) {
              call.call.sendMessageWithContext({
                callback: (error) => {
                  this.handleChildWriteCompleted(callIndex);
                }
              }, message);
            }
          }
        } else {
          this.commitCallWithMostMessages();
          if (this.committedCallIndex === null) {
            return;
          }
          const call = this.underlyingCalls[this.committedCallIndex];
          bufferEntry.callback = context.callback;
          if (call.state === "ACTIVE" && call.nextMessageToSend === messageIndex) {
            call.call.sendMessageWithContext({
              callback: (error) => {
                this.handleChildWriteCompleted(this.committedCallIndex);
              }
            }, message);
          }
        }
      }
      startRead() {
        this.trace("startRead called");
        this.readStarted = true;
        for (const underlyingCall of this.underlyingCalls) {
          if ((underlyingCall === null || underlyingCall === void 0 ? void 0 : underlyingCall.state) === "ACTIVE") {
            underlyingCall.call.startRead();
          }
        }
      }
      halfClose() {
        this.trace("halfClose called");
        const halfCloseIndex = this.getNextBufferIndex();
        this.writeBuffer.push({
          entryType: "HALF_CLOSE",
          allocated: false
        });
        for (const call of this.underlyingCalls) {
          if ((call === null || call === void 0 ? void 0 : call.state) === "ACTIVE" && call.nextMessageToSend === halfCloseIndex) {
            call.nextMessageToSend += 1;
            call.call.halfClose();
          }
        }
      }
      setCredentials(newCredentials) {
        throw new Error("Method not implemented.");
      }
      getMethod() {
        return this.methodName;
      }
      getHost() {
        return this.host;
      }
    };
    exports2.RetryingCall = RetryingCall;
  }
});

// node_modules/@grpc/grpc-js/build/src/subchannel-interface.js
var require_subchannel_interface = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/subchannel-interface.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseSubchannelWrapper = void 0;
    var BaseSubchannelWrapper = class {
      constructor(child) {
        this.child = child;
      }
      getConnectivityState() {
        return this.child.getConnectivityState();
      }
      addConnectivityStateListener(listener) {
        this.child.addConnectivityStateListener(listener);
      }
      removeConnectivityStateListener(listener) {
        this.child.removeConnectivityStateListener(listener);
      }
      startConnecting() {
        this.child.startConnecting();
      }
      getAddress() {
        return this.child.getAddress();
      }
      throttleKeepalive(newKeepaliveTime) {
        this.child.throttleKeepalive(newKeepaliveTime);
      }
      ref() {
        this.child.ref();
      }
      unref() {
        this.child.unref();
      }
      getChannelzRef() {
        return this.child.getChannelzRef();
      }
      getRealSubchannel() {
        return this.child.getRealSubchannel();
      }
      realSubchannelEquals(other) {
        return this.getRealSubchannel() === other.getRealSubchannel();
      }
    };
    exports2.BaseSubchannelWrapper = BaseSubchannelWrapper;
  }
});

// node_modules/@grpc/grpc-js/build/src/internal-channel.js
var require_internal_channel = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/internal-channel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InternalChannel = void 0;
    var channel_credentials_1 = require_channel_credentials();
    var resolving_load_balancer_1 = require_resolving_load_balancer();
    var subchannel_pool_1 = require_subchannel_pool();
    var picker_1 = require_picker();
    var constants_1 = require_constants();
    var filter_stack_1 = require_filter_stack();
    var compression_filter_1 = require_compression_filter();
    var resolver_1 = require_resolver();
    var logging_1 = require_logging();
    var max_message_size_filter_1 = require_max_message_size_filter();
    var http_proxy_1 = require_http_proxy();
    var uri_parser_1 = require_uri_parser();
    var connectivity_state_1 = require_connectivity_state();
    var channelz_1 = require_channelz();
    var load_balancing_call_1 = require_load_balancing_call();
    var deadline_1 = require_deadline();
    var resolving_call_1 = require_resolving_call();
    var call_number_1 = require_call_number();
    var control_plane_status_1 = require_control_plane_status();
    var retrying_call_1 = require_retrying_call();
    var subchannel_interface_1 = require_subchannel_interface();
    var MAX_TIMEOUT_TIME = 2147483647;
    var MIN_IDLE_TIMEOUT_MS = 1e3;
    var DEFAULT_IDLE_TIMEOUT_MS = 30 * 60 * 1e3;
    var RETRY_THROTTLER_MAP = /* @__PURE__ */ new Map();
    var DEFAULT_RETRY_BUFFER_SIZE_BYTES = 1 << 24;
    var DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES = 1 << 20;
    var ChannelSubchannelWrapper = class extends subchannel_interface_1.BaseSubchannelWrapper {
      constructor(childSubchannel, channel) {
        super(childSubchannel);
        this.channel = channel;
        this.refCount = 0;
        this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime) => {
          channel.throttleKeepalive(keepaliveTime);
        };
        childSubchannel.addConnectivityStateListener(this.subchannelStateListener);
      }
      ref() {
        this.child.ref();
        this.refCount += 1;
      }
      unref() {
        this.child.unref();
        this.refCount -= 1;
        if (this.refCount <= 0) {
          this.child.removeConnectivityStateListener(this.subchannelStateListener);
          this.channel.removeWrappedSubchannel(this);
        }
      }
    };
    var InternalChannel = class {
      constructor(target, credentials, options) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        this.credentials = credentials;
        this.options = options;
        this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;
        this.currentPicker = new picker_1.UnavailablePicker();
        this.configSelectionQueue = [];
        this.pickQueue = [];
        this.connectivityStateWatchers = [];
        this.configSelector = null;
        this.currentResolutionError = null;
        this.wrappedSubchannels = /* @__PURE__ */ new Set();
        this.callCount = 0;
        this.idleTimer = null;
        this.channelzEnabled = true;
        this.callTracker = new channelz_1.ChannelzCallTracker();
        this.childrenTracker = new channelz_1.ChannelzChildrenTracker();
        if (typeof target !== "string") {
          throw new TypeError("Channel target must be a string");
        }
        if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {
          throw new TypeError("Channel credentials must be a ChannelCredentials object");
        }
        if (options) {
          if (typeof options !== "object") {
            throw new TypeError("Channel options must be an object");
          }
        }
        this.originalTarget = target;
        const originalTargetUri = (0, uri_parser_1.parseUri)(target);
        if (originalTargetUri === null) {
          throw new Error(`Could not parse target name "${target}"`);
        }
        const defaultSchemeMapResult = (0, resolver_1.mapUriDefaultScheme)(originalTargetUri);
        if (defaultSchemeMapResult === null) {
          throw new Error(`Could not find a default scheme for target name "${target}"`);
        }
        this.callRefTimer = setInterval(() => {
        }, MAX_TIMEOUT_TIME);
        (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        if (this.options["grpc.enable_channelz"] === 0) {
          this.channelzEnabled = false;
        }
        this.channelzTrace = new channelz_1.ChannelzTrace();
        this.channelzRef = (0, channelz_1.registerChannelzChannel)(target, () => this.getChannelzInfo(), this.channelzEnabled);
        if (this.channelzEnabled) {
          this.channelzTrace.addTrace("CT_INFO", "Channel created");
        }
        if (this.options["grpc.default_authority"]) {
          this.defaultAuthority = this.options["grpc.default_authority"];
        } else {
          this.defaultAuthority = (0, resolver_1.getDefaultAuthority)(defaultSchemeMapResult);
        }
        const proxyMapResult = (0, http_proxy_1.mapProxyName)(defaultSchemeMapResult, options);
        this.target = proxyMapResult.target;
        this.options = Object.assign({}, this.options, proxyMapResult.extraOptions);
        this.subchannelPool = (0, subchannel_pool_1.getSubchannelPool)(((_c = options["grpc.use_local_subchannel_pool"]) !== null && _c !== void 0 ? _c : 0) === 0);
        this.retryBufferTracker = new retrying_call_1.MessageBufferTracker((_d = options["grpc.retry_buffer_size"]) !== null && _d !== void 0 ? _d : DEFAULT_RETRY_BUFFER_SIZE_BYTES, (_e = options["grpc.per_rpc_retry_buffer_size"]) !== null && _e !== void 0 ? _e : DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES);
        this.keepaliveTime = (_f = options["grpc.keepalive_time_ms"]) !== null && _f !== void 0 ? _f : -1;
        this.idleTimeoutMs = Math.max((_g = options["grpc.client_idle_timeout_ms"]) !== null && _g !== void 0 ? _g : DEFAULT_IDLE_TIMEOUT_MS, MIN_IDLE_TIMEOUT_MS);
        const channelControlHelper = {
          createSubchannel: (subchannelAddress, subchannelArgs) => {
            const subchannel = this.subchannelPool.getOrCreateSubchannel(this.target, subchannelAddress, Object.assign({}, this.options, subchannelArgs), this.credentials);
            subchannel.throttleKeepalive(this.keepaliveTime);
            if (this.channelzEnabled) {
              this.channelzTrace.addTrace("CT_INFO", "Created subchannel or used existing subchannel", subchannel.getChannelzRef());
            }
            const wrappedSubchannel = new ChannelSubchannelWrapper(subchannel, this);
            this.wrappedSubchannels.add(wrappedSubchannel);
            return wrappedSubchannel;
          },
          updateState: (connectivityState, picker) => {
            this.currentPicker = picker;
            const queueCopy = this.pickQueue.slice();
            this.pickQueue = [];
            this.callRefTimerUnref();
            for (const call of queueCopy) {
              call.doPick();
            }
            this.updateState(connectivityState);
          },
          requestReresolution: () => {
            throw new Error("Resolving load balancer should never call requestReresolution");
          },
          addChannelzChild: (child) => {
            if (this.channelzEnabled) {
              this.childrenTracker.refChild(child);
            }
          },
          removeChannelzChild: (child) => {
            if (this.channelzEnabled) {
              this.childrenTracker.unrefChild(child);
            }
          }
        };
        this.resolvingLoadBalancer = new resolving_load_balancer_1.ResolvingLoadBalancer(this.target, channelControlHelper, options, (serviceConfig, configSelector) => {
          if (serviceConfig.retryThrottling) {
            RETRY_THROTTLER_MAP.set(this.getTarget(), new retrying_call_1.RetryThrottler(serviceConfig.retryThrottling.maxTokens, serviceConfig.retryThrottling.tokenRatio, RETRY_THROTTLER_MAP.get(this.getTarget())));
          } else {
            RETRY_THROTTLER_MAP.delete(this.getTarget());
          }
          if (this.channelzEnabled) {
            this.channelzTrace.addTrace("CT_INFO", "Address resolution succeeded");
          }
          this.configSelector = configSelector;
          this.currentResolutionError = null;
          process.nextTick(() => {
            const localQueue = this.configSelectionQueue;
            this.configSelectionQueue = [];
            this.callRefTimerUnref();
            for (const call of localQueue) {
              call.getConfig();
            }
            this.configSelectionQueue = [];
          });
        }, (status) => {
          if (this.channelzEnabled) {
            this.channelzTrace.addTrace("CT_WARNING", "Address resolution failed with code " + status.code + ' and details "' + status.details + '"');
          }
          if (this.configSelectionQueue.length > 0) {
            this.trace("Name resolution failed with calls queued for config selection");
          }
          if (this.configSelector === null) {
            this.currentResolutionError = Object.assign(Object.assign({}, (0, control_plane_status_1.restrictControlPlaneStatusCode)(status.code, status.details)), { metadata: status.metadata });
          }
          const localQueue = this.configSelectionQueue;
          this.configSelectionQueue = [];
          this.callRefTimerUnref();
          for (const call of localQueue) {
            call.reportResolverError(status);
          }
        });
        this.filterStackFactory = new filter_stack_1.FilterStackFactory([
          new max_message_size_filter_1.MaxMessageSizeFilterFactory(this.options),
          new compression_filter_1.CompressionFilterFactory(this, this.options)
        ]);
        this.trace("Channel constructed with options " + JSON.stringify(options, void 0, 2));
        const error = new Error();
        (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, "channel_stacktrace", "(" + this.channelzRef.id + ") Channel constructed \n" + ((_h = error.stack) === null || _h === void 0 ? void 0 : _h.substring(error.stack.indexOf("\n") + 1)));
      }
      getChannelzInfo() {
        return {
          target: this.originalTarget,
          state: this.connectivityState,
          trace: this.channelzTrace,
          callTracker: this.callTracker,
          children: this.childrenTracker.getChildLists()
        };
      }
      trace(text, verbosityOverride) {
        (0, logging_1.trace)(verbosityOverride !== null && verbosityOverride !== void 0 ? verbosityOverride : constants_1.LogVerbosity.DEBUG, "channel", "(" + this.channelzRef.id + ") " + (0, uri_parser_1.uriToString)(this.target) + " " + text);
      }
      callRefTimerRef() {
        var _a, _b, _c, _d;
        if (!((_b = (_a = this.callRefTimer).hasRef) === null || _b === void 0 ? void 0 : _b.call(_a))) {
          this.trace("callRefTimer.ref | configSelectionQueue.length=" + this.configSelectionQueue.length + " pickQueue.length=" + this.pickQueue.length);
          (_d = (_c = this.callRefTimer).ref) === null || _d === void 0 ? void 0 : _d.call(_c);
        }
      }
      callRefTimerUnref() {
        var _a, _b;
        if (!this.callRefTimer.hasRef || this.callRefTimer.hasRef()) {
          this.trace("callRefTimer.unref | configSelectionQueue.length=" + this.configSelectionQueue.length + " pickQueue.length=" + this.pickQueue.length);
          (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
      }
      removeConnectivityStateWatcher(watcherObject) {
        const watcherIndex = this.connectivityStateWatchers.findIndex((value) => value === watcherObject);
        if (watcherIndex >= 0) {
          this.connectivityStateWatchers.splice(watcherIndex, 1);
        }
      }
      updateState(newState) {
        (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, "connectivity_state", "(" + this.channelzRef.id + ") " + (0, uri_parser_1.uriToString)(this.target) + " " + connectivity_state_1.ConnectivityState[this.connectivityState] + " -> " + connectivity_state_1.ConnectivityState[newState]);
        if (this.channelzEnabled) {
          this.channelzTrace.addTrace("CT_INFO", "Connectivity state change to " + connectivity_state_1.ConnectivityState[newState]);
        }
        this.connectivityState = newState;
        const watchersCopy = this.connectivityStateWatchers.slice();
        for (const watcherObject of watchersCopy) {
          if (newState !== watcherObject.currentState) {
            if (watcherObject.timer) {
              clearTimeout(watcherObject.timer);
            }
            this.removeConnectivityStateWatcher(watcherObject);
            watcherObject.callback();
          }
        }
        if (newState !== connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {
          this.currentResolutionError = null;
        }
      }
      throttleKeepalive(newKeepaliveTime) {
        if (newKeepaliveTime > this.keepaliveTime) {
          this.keepaliveTime = newKeepaliveTime;
          for (const wrappedSubchannel of this.wrappedSubchannels) {
            wrappedSubchannel.throttleKeepalive(newKeepaliveTime);
          }
        }
      }
      removeWrappedSubchannel(wrappedSubchannel) {
        this.wrappedSubchannels.delete(wrappedSubchannel);
      }
      doPick(metadata, extraPickInfo) {
        return this.currentPicker.pick({
          metadata,
          extraPickInfo
        });
      }
      queueCallForPick(call) {
        this.pickQueue.push(call);
        this.callRefTimerRef();
      }
      getConfig(method, metadata) {
        this.resolvingLoadBalancer.exitIdle();
        if (this.configSelector) {
          return {
            type: "SUCCESS",
            config: this.configSelector(method, metadata)
          };
        } else {
          if (this.currentResolutionError) {
            return {
              type: "ERROR",
              error: this.currentResolutionError
            };
          } else {
            return {
              type: "NONE"
            };
          }
        }
      }
      queueCallForConfig(call) {
        this.configSelectionQueue.push(call);
        this.callRefTimerRef();
      }
      enterIdle() {
        this.resolvingLoadBalancer.destroy();
        this.updateState(connectivity_state_1.ConnectivityState.IDLE);
        this.currentPicker = new picker_1.QueuePicker(this.resolvingLoadBalancer);
      }
      maybeStartIdleTimer() {
        var _a, _b;
        if (this.callCount === 0) {
          this.idleTimer = setTimeout(() => {
            this.trace("Idle timer triggered after " + this.idleTimeoutMs + "ms of inactivity");
            this.enterIdle();
          }, this.idleTimeoutMs);
          (_b = (_a = this.idleTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
      }
      onCallStart() {
        if (this.channelzEnabled) {
          this.callTracker.addCallStarted();
        }
        this.callCount += 1;
        if (this.idleTimer) {
          clearTimeout(this.idleTimer);
          this.idleTimer = null;
        }
      }
      onCallEnd(status) {
        if (this.channelzEnabled) {
          if (status.code === constants_1.Status.OK) {
            this.callTracker.addCallSucceeded();
          } else {
            this.callTracker.addCallFailed();
          }
        }
        this.callCount -= 1;
        this.maybeStartIdleTimer();
      }
      createLoadBalancingCall(callConfig, method, host, credentials, deadline) {
        const callNumber = (0, call_number_1.getNextCallNumber)();
        this.trace("createLoadBalancingCall [" + callNumber + '] method="' + method + '"');
        return new load_balancing_call_1.LoadBalancingCall(this, callConfig, method, host, credentials, deadline, callNumber);
      }
      createRetryingCall(callConfig, method, host, credentials, deadline) {
        const callNumber = (0, call_number_1.getNextCallNumber)();
        this.trace("createRetryingCall [" + callNumber + '] method="' + method + '"');
        return new retrying_call_1.RetryingCall(this, callConfig, method, host, credentials, deadline, callNumber, this.retryBufferTracker, RETRY_THROTTLER_MAP.get(this.getTarget()));
      }
      createInnerCall(callConfig, method, host, credentials, deadline) {
        if (this.options["grpc.enable_retries"] === 0) {
          return this.createLoadBalancingCall(callConfig, method, host, credentials, deadline);
        } else {
          return this.createRetryingCall(callConfig, method, host, credentials, deadline);
        }
      }
      createResolvingCall(method, deadline, host, parentCall, propagateFlags) {
        const callNumber = (0, call_number_1.getNextCallNumber)();
        this.trace("createResolvingCall [" + callNumber + '] method="' + method + '", deadline=' + (0, deadline_1.deadlineToString)(deadline));
        const finalOptions = {
          deadline,
          flags: propagateFlags !== null && propagateFlags !== void 0 ? propagateFlags : constants_1.Propagate.DEFAULTS,
          host: host !== null && host !== void 0 ? host : this.defaultAuthority,
          parentCall
        };
        const call = new resolving_call_1.ResolvingCall(this, method, finalOptions, this.filterStackFactory.clone(), this.credentials._getCallCredentials(), callNumber);
        this.onCallStart();
        call.addStatusWatcher((status) => {
          this.onCallEnd(status);
        });
        return call;
      }
      close() {
        this.resolvingLoadBalancer.destroy();
        this.updateState(connectivity_state_1.ConnectivityState.SHUTDOWN);
        clearInterval(this.callRefTimer);
        if (this.channelzEnabled) {
          (0, channelz_1.unregisterChannelzRef)(this.channelzRef);
        }
        this.subchannelPool.unrefUnusedSubchannels();
      }
      getTarget() {
        return (0, uri_parser_1.uriToString)(this.target);
      }
      getConnectivityState(tryToConnect) {
        const connectivityState = this.connectivityState;
        if (tryToConnect) {
          this.resolvingLoadBalancer.exitIdle();
          this.maybeStartIdleTimer();
        }
        return connectivityState;
      }
      watchConnectivityState(currentState, deadline, callback) {
        if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {
          throw new Error("Channel has been shut down");
        }
        let timer = null;
        if (deadline !== Infinity) {
          const deadlineDate = deadline instanceof Date ? deadline : new Date(deadline);
          const now = /* @__PURE__ */ new Date();
          if (deadline === -Infinity || deadlineDate <= now) {
            process.nextTick(callback, new Error("Deadline passed without connectivity state change"));
            return;
          }
          timer = setTimeout(() => {
            this.removeConnectivityStateWatcher(watcherObject);
            callback(new Error("Deadline passed without connectivity state change"));
          }, deadlineDate.getTime() - now.getTime());
        }
        const watcherObject = {
          currentState,
          callback,
          timer
        };
        this.connectivityStateWatchers.push(watcherObject);
      }
      /**
       * Get the channelz reference object for this channel. The returned value is
       * garbage if channelz is disabled for this channel.
       * @returns
       */
      getChannelzRef() {
        return this.channelzRef;
      }
      createCall(method, deadline, host, parentCall, propagateFlags) {
        if (typeof method !== "string") {
          throw new TypeError("Channel#createCall: method must be a string");
        }
        if (!(typeof deadline === "number" || deadline instanceof Date)) {
          throw new TypeError("Channel#createCall: deadline must be a number or Date");
        }
        if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {
          throw new Error("Channel has been shut down");
        }
        return this.createResolvingCall(method, deadline, host, parentCall, propagateFlags);
      }
    };
    exports2.InternalChannel = InternalChannel;
  }
});

// node_modules/@grpc/grpc-js/build/src/channel.js
var require_channel = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/channel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChannelImplementation = void 0;
    var channel_credentials_1 = require_channel_credentials();
    var internal_channel_1 = require_internal_channel();
    var ChannelImplementation = class {
      constructor(target, credentials, options) {
        if (typeof target !== "string") {
          throw new TypeError("Channel target must be a string");
        }
        if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {
          throw new TypeError("Channel credentials must be a ChannelCredentials object");
        }
        if (options) {
          if (typeof options !== "object") {
            throw new TypeError("Channel options must be an object");
          }
        }
        this.internalChannel = new internal_channel_1.InternalChannel(target, credentials, options);
      }
      close() {
        this.internalChannel.close();
      }
      getTarget() {
        return this.internalChannel.getTarget();
      }
      getConnectivityState(tryToConnect) {
        return this.internalChannel.getConnectivityState(tryToConnect);
      }
      watchConnectivityState(currentState, deadline, callback) {
        this.internalChannel.watchConnectivityState(currentState, deadline, callback);
      }
      /**
       * Get the channelz reference object for this channel. The returned value is
       * garbage if channelz is disabled for this channel.
       * @returns
       */
      getChannelzRef() {
        return this.internalChannel.getChannelzRef();
      }
      createCall(method, deadline, host, parentCall, propagateFlags) {
        if (typeof method !== "string") {
          throw new TypeError("Channel#createCall: method must be a string");
        }
        if (!(typeof deadline === "number" || deadline instanceof Date)) {
          throw new TypeError("Channel#createCall: deadline must be a number or Date");
        }
        return this.internalChannel.createCall(method, deadline, host, parentCall, propagateFlags);
      }
    };
    exports2.ChannelImplementation = ChannelImplementation;
  }
});

// node_modules/@grpc/grpc-js/build/src/server-call.js
var require_server_call = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/server-call.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Http2ServerCallStream = exports2.ServerDuplexStreamImpl = exports2.ServerWritableStreamImpl = exports2.ServerReadableStreamImpl = exports2.ServerUnaryCallImpl = void 0;
    var events_1 = require("events");
    var http2 = require("http2");
    var stream_1 = require("stream");
    var zlib = require("zlib");
    var util_1 = require("util");
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var stream_decoder_1 = require_stream_decoder();
    var logging = require_logging();
    var error_1 = require_error();
    var TRACER_NAME = "server_call";
    var unzip = (0, util_1.promisify)(zlib.unzip);
    var inflate = (0, util_1.promisify)(zlib.inflate);
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var GRPC_ACCEPT_ENCODING_HEADER = "grpc-accept-encoding";
    var GRPC_ENCODING_HEADER = "grpc-encoding";
    var GRPC_MESSAGE_HEADER = "grpc-message";
    var GRPC_STATUS_HEADER = "grpc-status";
    var GRPC_TIMEOUT_HEADER = "grpc-timeout";
    var DEADLINE_REGEX = /(\d{1,8})\s*([HMSmun])/;
    var deadlineUnitsToMs = {
      H: 36e5,
      M: 6e4,
      S: 1e3,
      m: 1,
      u: 1e-3,
      n: 1e-6
    };
    var defaultCompressionHeaders = {
      // TODO(cjihrig): Remove these encoding headers from the default response
      // once compression is integrated.
      [GRPC_ACCEPT_ENCODING_HEADER]: "identity,deflate,gzip",
      [GRPC_ENCODING_HEADER]: "identity"
    };
    var defaultResponseHeaders = {
      [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK,
      [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: "application/grpc+proto"
    };
    var defaultResponseOptions = {
      waitForTrailers: true
    };
    var ServerUnaryCallImpl = class extends events_1.EventEmitter {
      constructor(call, metadata, request) {
        super();
        this.call = call;
        this.metadata = metadata;
        this.request = request;
        this.cancelled = false;
        this.call.setupSurfaceCall(this);
      }
      getPeer() {
        return this.call.getPeer();
      }
      sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
      }
      getDeadline() {
        return this.call.getDeadline();
      }
      getPath() {
        return this.call.getPath();
      }
    };
    exports2.ServerUnaryCallImpl = ServerUnaryCallImpl;
    var ServerReadableStreamImpl = class extends stream_1.Readable {
      constructor(call, metadata, deserialize, encoding) {
        super({ objectMode: true });
        this.call = call;
        this.metadata = metadata;
        this.deserialize = deserialize;
        this.cancelled = false;
        this.call.setupSurfaceCall(this);
        this.call.setupReadable(this, encoding);
      }
      _read(size) {
        if (!this.call.consumeUnpushedMessages(this)) {
          return;
        }
        this.call.resume();
      }
      getPeer() {
        return this.call.getPeer();
      }
      sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
      }
      getDeadline() {
        return this.call.getDeadline();
      }
      getPath() {
        return this.call.getPath();
      }
    };
    exports2.ServerReadableStreamImpl = ServerReadableStreamImpl;
    var ServerWritableStreamImpl = class extends stream_1.Writable {
      constructor(call, metadata, serialize, request) {
        super({ objectMode: true });
        this.call = call;
        this.metadata = metadata;
        this.serialize = serialize;
        this.request = request;
        this.cancelled = false;
        this.trailingMetadata = new metadata_1.Metadata();
        this.call.setupSurfaceCall(this);
        this.on("error", (err) => {
          this.call.sendError(err);
          this.end();
        });
      }
      getPeer() {
        return this.call.getPeer();
      }
      sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
      }
      getDeadline() {
        return this.call.getDeadline();
      }
      getPath() {
        return this.call.getPath();
      }
      _write(chunk, encoding, callback) {
        try {
          const response = this.call.serializeMessage(chunk);
          if (!this.call.write(response)) {
            this.call.once("drain", callback);
            return;
          }
        } catch (err) {
          this.emit("error", {
            details: (0, error_1.getErrorMessage)(err),
            code: constants_1.Status.INTERNAL
          });
        }
        callback();
      }
      _final(callback) {
        this.call.sendStatus({
          code: constants_1.Status.OK,
          details: "OK",
          metadata: this.trailingMetadata
        });
        callback(null);
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      end(metadata) {
        if (metadata) {
          this.trailingMetadata = metadata;
        }
        return super.end();
      }
    };
    exports2.ServerWritableStreamImpl = ServerWritableStreamImpl;
    var ServerDuplexStreamImpl = class extends stream_1.Duplex {
      constructor(call, metadata, serialize, deserialize, encoding) {
        super({ objectMode: true });
        this.call = call;
        this.metadata = metadata;
        this.serialize = serialize;
        this.deserialize = deserialize;
        this.cancelled = false;
        this.trailingMetadata = new metadata_1.Metadata();
        this.call.setupSurfaceCall(this);
        this.call.setupReadable(this, encoding);
        this.on("error", (err) => {
          this.call.sendError(err);
          this.end();
        });
      }
      getPeer() {
        return this.call.getPeer();
      }
      sendMetadata(responseMetadata) {
        this.call.sendMetadata(responseMetadata);
      }
      getDeadline() {
        return this.call.getDeadline();
      }
      getPath() {
        return this.call.getPath();
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      end(metadata) {
        if (metadata) {
          this.trailingMetadata = metadata;
        }
        return super.end();
      }
    };
    exports2.ServerDuplexStreamImpl = ServerDuplexStreamImpl;
    ServerDuplexStreamImpl.prototype._read = ServerReadableStreamImpl.prototype._read;
    ServerDuplexStreamImpl.prototype._write = ServerWritableStreamImpl.prototype._write;
    ServerDuplexStreamImpl.prototype._final = ServerWritableStreamImpl.prototype._final;
    var Http2ServerCallStream = class extends events_1.EventEmitter {
      constructor(stream, handler, options) {
        super();
        this.stream = stream;
        this.handler = handler;
        this.cancelled = false;
        this.deadlineTimer = null;
        this.statusSent = false;
        this.deadline = Infinity;
        this.wantTrailers = false;
        this.metadataSent = false;
        this.canPush = false;
        this.isPushPending = false;
        this.bufferedMessages = [];
        this.messagesToPush = [];
        this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;
        this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;
        this.stream.once("error", (err) => {
        });
        this.stream.once("close", () => {
          var _a;
          trace("Request to method " + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + " stream closed with rstCode " + this.stream.rstCode);
          if (!this.statusSent) {
            this.cancelled = true;
            this.emit("cancelled", "cancelled");
            this.emit("streamEnd", false);
            this.sendStatus({
              code: constants_1.Status.CANCELLED,
              details: "Cancelled by client",
              metadata: null
            });
            if (this.deadlineTimer)
              clearTimeout(this.deadlineTimer);
          }
        });
        this.stream.on("drain", () => {
          this.emit("drain");
        });
        if ("grpc.max_send_message_length" in options) {
          this.maxSendMessageSize = options["grpc.max_send_message_length"];
        }
        if ("grpc.max_receive_message_length" in options) {
          this.maxReceiveMessageSize = options["grpc.max_receive_message_length"];
        }
      }
      checkCancelled() {
        if (this.stream.destroyed || this.stream.closed) {
          this.cancelled = true;
        }
        return this.cancelled;
      }
      getDecompressedMessage(message, encoding) {
        if (encoding === "deflate") {
          return inflate(message.subarray(5));
        } else if (encoding === "gzip") {
          return unzip(message.subarray(5));
        } else if (encoding === "identity") {
          return message.subarray(5);
        }
        return Promise.reject({
          code: constants_1.Status.UNIMPLEMENTED,
          details: `Received message compressed with unsupported encoding "${encoding}"`
        });
      }
      sendMetadata(customMetadata) {
        if (this.checkCancelled()) {
          return;
        }
        if (this.metadataSent) {
          return;
        }
        this.metadataSent = true;
        const custom = customMetadata ? customMetadata.toHttp2Headers() : null;
        const headers = Object.assign(Object.assign(Object.assign({}, defaultResponseHeaders), defaultCompressionHeaders), custom);
        this.stream.respond(headers, defaultResponseOptions);
      }
      receiveMetadata(headers) {
        const metadata = metadata_1.Metadata.fromHttp2Headers(headers);
        if (logging.isTracerEnabled(TRACER_NAME)) {
          trace("Request to " + this.handler.path + " received headers " + JSON.stringify(metadata.toJSON()));
        }
        const timeoutHeader = metadata.get(GRPC_TIMEOUT_HEADER);
        if (timeoutHeader.length > 0) {
          const match = timeoutHeader[0].toString().match(DEADLINE_REGEX);
          if (match === null) {
            const err = new Error("Invalid deadline");
            err.code = constants_1.Status.OUT_OF_RANGE;
            this.sendError(err);
            return metadata;
          }
          const timeout = +match[1] * deadlineUnitsToMs[match[2]] | 0;
          const now = /* @__PURE__ */ new Date();
          this.deadline = now.setMilliseconds(now.getMilliseconds() + timeout);
          this.deadlineTimer = setTimeout(handleExpiredDeadline, timeout, this);
          metadata.remove(GRPC_TIMEOUT_HEADER);
        }
        metadata.remove(http2.constants.HTTP2_HEADER_ACCEPT_ENCODING);
        metadata.remove(http2.constants.HTTP2_HEADER_TE);
        metadata.remove(http2.constants.HTTP2_HEADER_CONTENT_TYPE);
        metadata.remove("grpc-accept-encoding");
        return metadata;
      }
      receiveUnaryMessage(encoding) {
        return new Promise((resolve, reject) => {
          const { stream } = this;
          let receivedLength = 0;
          const call = this;
          const body = [];
          const limit = this.maxReceiveMessageSize;
          this.stream.on("data", onData);
          this.stream.on("end", onEnd);
          this.stream.on("error", onEnd);
          function onData(chunk) {
            receivedLength += chunk.byteLength;
            if (limit !== -1 && receivedLength > limit) {
              stream.removeListener("data", onData);
              stream.removeListener("end", onEnd);
              stream.removeListener("error", onEnd);
              reject({
                code: constants_1.Status.RESOURCE_EXHAUSTED,
                details: `Received message larger than max (${receivedLength} vs. ${limit})`
              });
              return;
            }
            body.push(chunk);
          }
          function onEnd(err) {
            stream.removeListener("data", onData);
            stream.removeListener("end", onEnd);
            stream.removeListener("error", onEnd);
            if (err !== void 0) {
              reject({ code: constants_1.Status.INTERNAL, details: err.message });
              return;
            }
            if (receivedLength === 0) {
              reject({
                code: constants_1.Status.INTERNAL,
                details: "received empty unary message"
              });
              return;
            }
            call.emit("receiveMessage");
            const requestBytes = Buffer.concat(body, receivedLength);
            const compressed = requestBytes.readUInt8(0) === 1;
            const compressedMessageEncoding = compressed ? encoding : "identity";
            const decompressedMessage = call.getDecompressedMessage(requestBytes, compressedMessageEncoding);
            if (Buffer.isBuffer(decompressedMessage)) {
              resolve(call.deserializeMessageWithInternalError(decompressedMessage));
              return;
            }
            decompressedMessage.then((decompressed) => resolve(call.deserializeMessageWithInternalError(decompressed)), (err2) => reject(err2.code ? err2 : {
              code: constants_1.Status.INTERNAL,
              details: `Received "grpc-encoding" header "${encoding}" but ${encoding} decompression failed`
            }));
          }
        });
      }
      async deserializeMessageWithInternalError(buffer) {
        try {
          return this.deserializeMessage(buffer);
        } catch (err) {
          throw {
            details: (0, error_1.getErrorMessage)(err),
            code: constants_1.Status.INTERNAL
          };
        }
      }
      serializeMessage(value) {
        const messageBuffer = this.handler.serialize(value);
        const byteLength = messageBuffer.byteLength;
        const output = Buffer.allocUnsafe(byteLength + 5);
        output.writeUInt8(0, 0);
        output.writeUInt32BE(byteLength, 1);
        messageBuffer.copy(output, 5);
        return output;
      }
      deserializeMessage(bytes) {
        return this.handler.deserialize(bytes);
      }
      async sendUnaryMessage(err, value, metadata, flags) {
        if (this.checkCancelled()) {
          return;
        }
        if (metadata === void 0) {
          metadata = null;
        }
        if (err) {
          if (!Object.prototype.hasOwnProperty.call(err, "metadata") && metadata) {
            err.metadata = metadata;
          }
          this.sendError(err);
          return;
        }
        try {
          const response = this.serializeMessage(value);
          this.write(response);
          this.sendStatus({ code: constants_1.Status.OK, details: "OK", metadata });
        } catch (err2) {
          this.sendError({
            details: (0, error_1.getErrorMessage)(err2),
            code: constants_1.Status.INTERNAL
          });
        }
      }
      sendStatus(statusObj) {
        var _a, _b;
        this.emit("callEnd", statusObj.code);
        this.emit("streamEnd", statusObj.code === constants_1.Status.OK);
        if (this.checkCancelled()) {
          return;
        }
        trace("Request to method " + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + " ended with status code: " + constants_1.Status[statusObj.code] + " details: " + statusObj.details);
        if (this.deadlineTimer)
          clearTimeout(this.deadlineTimer);
        if (this.stream.headersSent) {
          if (!this.wantTrailers) {
            this.wantTrailers = true;
            this.stream.once("wantTrailers", () => {
              var _a2;
              const trailersToSend = Object.assign({ [GRPC_STATUS_HEADER]: statusObj.code, [GRPC_MESSAGE_HEADER]: encodeURI(statusObj.details) }, (_a2 = statusObj.metadata) === null || _a2 === void 0 ? void 0 : _a2.toHttp2Headers());
              this.stream.sendTrailers(trailersToSend);
              this.statusSent = true;
            });
            this.stream.end();
          }
        } else {
          const trailersToSend = Object.assign(Object.assign({ [GRPC_STATUS_HEADER]: statusObj.code, [GRPC_MESSAGE_HEADER]: encodeURI(statusObj.details) }, defaultResponseHeaders), (_b = statusObj.metadata) === null || _b === void 0 ? void 0 : _b.toHttp2Headers());
          this.stream.respond(trailersToSend, { endStream: true });
          this.statusSent = true;
        }
      }
      sendError(error) {
        const status = {
          code: constants_1.Status.UNKNOWN,
          details: "message" in error ? error.message : "Unknown Error",
          metadata: "metadata" in error && error.metadata !== void 0 ? error.metadata : null
        };
        if ("code" in error && typeof error.code === "number" && Number.isInteger(error.code)) {
          status.code = error.code;
          if ("details" in error && typeof error.details === "string") {
            status.details = error.details;
          }
        }
        this.sendStatus(status);
      }
      write(chunk) {
        if (this.checkCancelled()) {
          return;
        }
        if (this.maxSendMessageSize !== -1 && chunk.length > this.maxSendMessageSize) {
          this.sendError({
            code: constants_1.Status.RESOURCE_EXHAUSTED,
            details: `Sent message larger than max (${chunk.length} vs. ${this.maxSendMessageSize})`
          });
          return;
        }
        this.sendMetadata();
        this.emit("sendMessage");
        return this.stream.write(chunk);
      }
      resume() {
        this.stream.resume();
      }
      setupSurfaceCall(call) {
        this.once("cancelled", (reason) => {
          call.cancelled = true;
          call.emit("cancelled", reason);
        });
        this.once("callEnd", (status) => call.emit("callEnd", status));
      }
      setupReadable(readable, encoding) {
        const decoder = new stream_decoder_1.StreamDecoder();
        let readsDone = false;
        let pendingMessageProcessing = false;
        let pushedEnd = false;
        const maybePushEnd = async () => {
          if (!pushedEnd && readsDone && !pendingMessageProcessing) {
            pushedEnd = true;
            await this.pushOrBufferMessage(readable, null);
          }
        };
        this.stream.on("data", async (data) => {
          const messages = decoder.write(data);
          pendingMessageProcessing = true;
          this.stream.pause();
          for (const message of messages) {
            if (this.maxReceiveMessageSize !== -1 && message.length > this.maxReceiveMessageSize) {
              this.sendError({
                code: constants_1.Status.RESOURCE_EXHAUSTED,
                details: `Received message larger than max (${message.length} vs. ${this.maxReceiveMessageSize})`
              });
              return;
            }
            this.emit("receiveMessage");
            const compressed = message.readUInt8(0) === 1;
            const compressedMessageEncoding = compressed ? encoding : "identity";
            const decompressedMessage = await this.getDecompressedMessage(message, compressedMessageEncoding);
            if (!decompressedMessage)
              return;
            await this.pushOrBufferMessage(readable, decompressedMessage);
          }
          pendingMessageProcessing = false;
          this.stream.resume();
          await maybePushEnd();
        });
        this.stream.once("end", async () => {
          readsDone = true;
          await maybePushEnd();
        });
      }
      consumeUnpushedMessages(readable) {
        this.canPush = true;
        while (this.messagesToPush.length > 0) {
          const nextMessage = this.messagesToPush.shift();
          const canPush = readable.push(nextMessage);
          if (nextMessage === null || canPush === false) {
            this.canPush = false;
            break;
          }
        }
        return this.canPush;
      }
      async pushOrBufferMessage(readable, messageBytes) {
        if (this.isPushPending) {
          this.bufferedMessages.push(messageBytes);
        } else {
          await this.pushMessage(readable, messageBytes);
        }
      }
      async pushMessage(readable, messageBytes) {
        if (messageBytes === null) {
          trace("Received end of stream");
          if (this.canPush) {
            readable.push(null);
          } else {
            this.messagesToPush.push(null);
          }
          return;
        }
        trace("Received message of length " + messageBytes.length);
        this.isPushPending = true;
        try {
          const deserialized = await this.deserializeMessage(messageBytes);
          if (this.canPush) {
            if (!readable.push(deserialized)) {
              this.canPush = false;
              this.stream.pause();
            }
          } else {
            this.messagesToPush.push(deserialized);
          }
        } catch (error) {
          this.bufferedMessages.length = 0;
          let code = (0, error_1.getErrorCode)(error);
          if (code === null || code < constants_1.Status.OK || code > constants_1.Status.UNAUTHENTICATED) {
            code = constants_1.Status.INTERNAL;
          }
          readable.emit("error", {
            details: (0, error_1.getErrorMessage)(error),
            code
          });
        }
        this.isPushPending = false;
        if (this.bufferedMessages.length > 0) {
          await this.pushMessage(readable, this.bufferedMessages.shift());
        }
      }
      getPeer() {
        var _a;
        const socket = (_a = this.stream.session) === null || _a === void 0 ? void 0 : _a.socket;
        if (socket === null || socket === void 0 ? void 0 : socket.remoteAddress) {
          if (socket.remotePort) {
            return `${socket.remoteAddress}:${socket.remotePort}`;
          } else {
            return socket.remoteAddress;
          }
        } else {
          return "unknown";
        }
      }
      getDeadline() {
        return this.deadline;
      }
      getPath() {
        return this.handler.path;
      }
    };
    exports2.Http2ServerCallStream = Http2ServerCallStream;
    function handleExpiredDeadline(call) {
      const err = new Error("Deadline exceeded");
      err.code = constants_1.Status.DEADLINE_EXCEEDED;
      call.sendError(err);
      call.cancelled = true;
      call.emit("cancelled", "deadline");
    }
  }
});

// node_modules/@grpc/grpc-js/build/src/server-credentials.js
var require_server_credentials = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/server-credentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ServerCredentials = void 0;
    var tls_helpers_1 = require_tls_helpers();
    var ServerCredentials = class {
      static createInsecure() {
        return new InsecureServerCredentials();
      }
      static createSsl(rootCerts, keyCertPairs, checkClientCertificate = false) {
        if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {
          throw new TypeError("rootCerts must be null or a Buffer");
        }
        if (!Array.isArray(keyCertPairs)) {
          throw new TypeError("keyCertPairs must be an array");
        }
        if (typeof checkClientCertificate !== "boolean") {
          throw new TypeError("checkClientCertificate must be a boolean");
        }
        const cert = [];
        const key = [];
        for (let i = 0; i < keyCertPairs.length; i++) {
          const pair = keyCertPairs[i];
          if (pair === null || typeof pair !== "object") {
            throw new TypeError(`keyCertPair[${i}] must be an object`);
          }
          if (!Buffer.isBuffer(pair.private_key)) {
            throw new TypeError(`keyCertPair[${i}].private_key must be a Buffer`);
          }
          if (!Buffer.isBuffer(pair.cert_chain)) {
            throw new TypeError(`keyCertPair[${i}].cert_chain must be a Buffer`);
          }
          cert.push(pair.cert_chain);
          key.push(pair.private_key);
        }
        return new SecureServerCredentials({
          ca: rootCerts || (0, tls_helpers_1.getDefaultRootsData)() || void 0,
          cert,
          key,
          requestCert: checkClientCertificate,
          ciphers: tls_helpers_1.CIPHER_SUITES
        });
      }
    };
    exports2.ServerCredentials = ServerCredentials;
    var InsecureServerCredentials = class extends ServerCredentials {
      _isSecure() {
        return false;
      }
      _getSettings() {
        return null;
      }
    };
    var SecureServerCredentials = class extends ServerCredentials {
      constructor(options) {
        super();
        this.options = options;
      }
      _isSecure() {
        return true;
      }
      _getSettings() {
        return this.options;
      }
    };
  }
});

// node_modules/@grpc/grpc-js/build/src/server.js
var require_server = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/server.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Server = void 0;
    var http2 = require("http2");
    var constants_1 = require_constants();
    var server_call_1 = require_server_call();
    var server_credentials_1 = require_server_credentials();
    var resolver_1 = require_resolver();
    var logging = require_logging();
    var subchannel_address_1 = require_subchannel_address();
    var uri_parser_1 = require_uri_parser();
    var channelz_1 = require_channelz();
    var UNLIMITED_CONNECTION_AGE_MS = ~(1 << 31);
    var KEEPALIVE_MAX_TIME_MS = ~(1 << 31);
    var KEEPALIVE_TIMEOUT_MS = 2e4;
    var { HTTP2_HEADER_PATH } = http2.constants;
    var TRACER_NAME = "server";
    function noop() {
    }
    function getUnimplementedStatusResponse(methodName) {
      return {
        code: constants_1.Status.UNIMPLEMENTED,
        details: `The server does not implement the method ${methodName}`
      };
    }
    function getDefaultHandler(handlerType, methodName) {
      const unimplementedStatusResponse = getUnimplementedStatusResponse(methodName);
      switch (handlerType) {
        case "unary":
          return (call, callback) => {
            callback(unimplementedStatusResponse, null);
          };
        case "clientStream":
          return (call, callback) => {
            callback(unimplementedStatusResponse, null);
          };
        case "serverStream":
          return (call) => {
            call.emit("error", unimplementedStatusResponse);
          };
        case "bidi":
          return (call) => {
            call.emit("error", unimplementedStatusResponse);
          };
        default:
          throw new Error(`Invalid handlerType ${handlerType}`);
      }
    }
    var Server = class {
      constructor(options) {
        var _a, _b, _c, _d;
        this.http2ServerList = [];
        this.handlers = /* @__PURE__ */ new Map();
        this.sessions = /* @__PURE__ */ new Map();
        this.started = false;
        this.serverAddressString = "null";
        this.channelzEnabled = true;
        this.channelzTrace = new channelz_1.ChannelzTrace();
        this.callTracker = new channelz_1.ChannelzCallTracker();
        this.listenerChildrenTracker = new channelz_1.ChannelzChildrenTracker();
        this.sessionChildrenTracker = new channelz_1.ChannelzChildrenTracker();
        this.options = options !== null && options !== void 0 ? options : {};
        if (this.options["grpc.enable_channelz"] === 0) {
          this.channelzEnabled = false;
        }
        this.channelzRef = (0, channelz_1.registerChannelzServer)(() => this.getChannelzInfo(), this.channelzEnabled);
        if (this.channelzEnabled) {
          this.channelzTrace.addTrace("CT_INFO", "Server created");
        }
        this.maxConnectionAgeMs = (_a = this.options["grpc.max_connection_age_ms"]) !== null && _a !== void 0 ? _a : UNLIMITED_CONNECTION_AGE_MS;
        this.maxConnectionAgeGraceMs = (_b = this.options["grpc.max_connection_age_grace_ms"]) !== null && _b !== void 0 ? _b : UNLIMITED_CONNECTION_AGE_MS;
        this.keepaliveTimeMs = (_c = this.options["grpc.keepalive_time_ms"]) !== null && _c !== void 0 ? _c : KEEPALIVE_MAX_TIME_MS;
        this.keepaliveTimeoutMs = (_d = this.options["grpc.keepalive_timeout_ms"]) !== null && _d !== void 0 ? _d : KEEPALIVE_TIMEOUT_MS;
        this.trace("Server constructed");
      }
      getChannelzInfo() {
        return {
          trace: this.channelzTrace,
          callTracker: this.callTracker,
          listenerChildren: this.listenerChildrenTracker.getChildLists(),
          sessionChildren: this.sessionChildrenTracker.getChildLists()
        };
      }
      getChannelzSessionInfoGetter(session) {
        return () => {
          var _a, _b, _c;
          const sessionInfo = this.sessions.get(session);
          const sessionSocket = session.socket;
          const remoteAddress = sessionSocket.remoteAddress ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.remoteAddress, sessionSocket.remotePort) : null;
          const localAddress = sessionSocket.localAddress ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.localAddress, sessionSocket.localPort) : null;
          let tlsInfo;
          if (session.encrypted) {
            const tlsSocket = sessionSocket;
            const cipherInfo = tlsSocket.getCipher();
            const certificate = tlsSocket.getCertificate();
            const peerCertificate = tlsSocket.getPeerCertificate();
            tlsInfo = {
              cipherSuiteStandardName: (_a = cipherInfo.standardName) !== null && _a !== void 0 ? _a : null,
              cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,
              localCertificate: certificate && "raw" in certificate ? certificate.raw : null,
              remoteCertificate: peerCertificate && "raw" in peerCertificate ? peerCertificate.raw : null
            };
          } else {
            tlsInfo = null;
          }
          const socketInfo = {
            remoteAddress,
            localAddress,
            security: tlsInfo,
            remoteName: null,
            streamsStarted: sessionInfo.streamTracker.callsStarted,
            streamsSucceeded: sessionInfo.streamTracker.callsSucceeded,
            streamsFailed: sessionInfo.streamTracker.callsFailed,
            messagesSent: sessionInfo.messagesSent,
            messagesReceived: sessionInfo.messagesReceived,
            keepAlivesSent: 0,
            lastLocalStreamCreatedTimestamp: null,
            lastRemoteStreamCreatedTimestamp: sessionInfo.streamTracker.lastCallStartedTimestamp,
            lastMessageSentTimestamp: sessionInfo.lastMessageSentTimestamp,
            lastMessageReceivedTimestamp: sessionInfo.lastMessageReceivedTimestamp,
            localFlowControlWindow: (_b = session.state.localWindowSize) !== null && _b !== void 0 ? _b : null,
            remoteFlowControlWindow: (_c = session.state.remoteWindowSize) !== null && _c !== void 0 ? _c : null
          };
          return socketInfo;
        };
      }
      trace(text) {
        logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, "(" + this.channelzRef.id + ") " + text);
      }
      addProtoService() {
        throw new Error("Not implemented. Use addService() instead");
      }
      addService(service, implementation) {
        if (service === null || typeof service !== "object" || implementation === null || typeof implementation !== "object") {
          throw new Error("addService() requires two objects as arguments");
        }
        const serviceKeys = Object.keys(service);
        if (serviceKeys.length === 0) {
          throw new Error("Cannot add an empty service to a server");
        }
        serviceKeys.forEach((name) => {
          const attrs = service[name];
          let methodType;
          if (attrs.requestStream) {
            if (attrs.responseStream) {
              methodType = "bidi";
            } else {
              methodType = "clientStream";
            }
          } else {
            if (attrs.responseStream) {
              methodType = "serverStream";
            } else {
              methodType = "unary";
            }
          }
          let implFn = implementation[name];
          let impl;
          if (implFn === void 0 && typeof attrs.originalName === "string") {
            implFn = implementation[attrs.originalName];
          }
          if (implFn !== void 0) {
            impl = implFn.bind(implementation);
          } else {
            impl = getDefaultHandler(methodType, name);
          }
          const success = this.register(attrs.path, impl, attrs.responseSerialize, attrs.requestDeserialize, methodType);
          if (success === false) {
            throw new Error(`Method handler for ${attrs.path} already provided.`);
          }
        });
      }
      removeService(service) {
        if (service === null || typeof service !== "object") {
          throw new Error("removeService() requires object as argument");
        }
        const serviceKeys = Object.keys(service);
        serviceKeys.forEach((name) => {
          const attrs = service[name];
          this.unregister(attrs.path);
        });
      }
      bind(port, creds) {
        throw new Error("Not implemented. Use bindAsync() instead");
      }
      bindAsync(port, creds, callback) {
        if (this.started === true) {
          throw new Error("server is already started");
        }
        if (typeof port !== "string") {
          throw new TypeError("port must be a string");
        }
        if (creds === null || !(creds instanceof server_credentials_1.ServerCredentials)) {
          throw new TypeError("creds must be a ServerCredentials object");
        }
        if (typeof callback !== "function") {
          throw new TypeError("callback must be a function");
        }
        const initialPortUri = (0, uri_parser_1.parseUri)(port);
        if (initialPortUri === null) {
          throw new Error(`Could not parse port "${port}"`);
        }
        const portUri = (0, resolver_1.mapUriDefaultScheme)(initialPortUri);
        if (portUri === null) {
          throw new Error(`Could not get a default scheme for port "${port}"`);
        }
        const serverOptions = {
          maxSendHeaderBlockLength: Number.MAX_SAFE_INTEGER
        };
        if ("grpc-node.max_session_memory" in this.options) {
          serverOptions.maxSessionMemory = this.options["grpc-node.max_session_memory"];
        } else {
          serverOptions.maxSessionMemory = Number.MAX_SAFE_INTEGER;
        }
        if ("grpc.max_concurrent_streams" in this.options) {
          serverOptions.settings = {
            maxConcurrentStreams: this.options["grpc.max_concurrent_streams"]
          };
        }
        const deferredCallback = (error, port2) => {
          process.nextTick(() => callback(error, port2));
        };
        const setupServer = () => {
          let http2Server;
          if (creds._isSecure()) {
            const secureServerOptions = Object.assign(serverOptions, creds._getSettings());
            secureServerOptions.enableTrace = this.options["grpc-node.tls_enable_trace"] === 1;
            http2Server = http2.createSecureServer(secureServerOptions);
            http2Server.on("secureConnection", (socket) => {
              socket.on("error", (e) => {
                this.trace("An incoming TLS connection closed with error: " + e.message);
              });
            });
          } else {
            http2Server = http2.createServer(serverOptions);
          }
          http2Server.setTimeout(0, noop);
          this._setupHandlers(http2Server);
          return http2Server;
        };
        const bindSpecificPort = (addressList, portNum, previousCount) => {
          if (addressList.length === 0) {
            return Promise.resolve({ port: portNum, count: previousCount });
          }
          return Promise.all(addressList.map((address) => {
            this.trace("Attempting to bind " + (0, subchannel_address_1.subchannelAddressToString)(address));
            let addr;
            if ((0, subchannel_address_1.isTcpSubchannelAddress)(address)) {
              addr = {
                host: address.host,
                port: portNum
              };
            } else {
              addr = address;
            }
            const http2Server = setupServer();
            return new Promise((resolve, reject) => {
              const onError = (err) => {
                this.trace("Failed to bind " + (0, subchannel_address_1.subchannelAddressToString)(address) + " with error " + err.message);
                resolve(err);
              };
              http2Server.once("error", onError);
              http2Server.listen(addr, () => {
                const boundAddress = http2Server.address();
                let boundSubchannelAddress;
                if (typeof boundAddress === "string") {
                  boundSubchannelAddress = {
                    path: boundAddress
                  };
                } else {
                  boundSubchannelAddress = {
                    host: boundAddress.address,
                    port: boundAddress.port
                  };
                }
                const channelzRef = (0, channelz_1.registerChannelzSocket)((0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress), () => {
                  return {
                    localAddress: boundSubchannelAddress,
                    remoteAddress: null,
                    security: null,
                    remoteName: null,
                    streamsStarted: 0,
                    streamsSucceeded: 0,
                    streamsFailed: 0,
                    messagesSent: 0,
                    messagesReceived: 0,
                    keepAlivesSent: 0,
                    lastLocalStreamCreatedTimestamp: null,
                    lastRemoteStreamCreatedTimestamp: null,
                    lastMessageSentTimestamp: null,
                    lastMessageReceivedTimestamp: null,
                    localFlowControlWindow: null,
                    remoteFlowControlWindow: null
                  };
                }, this.channelzEnabled);
                if (this.channelzEnabled) {
                  this.listenerChildrenTracker.refChild(channelzRef);
                }
                this.http2ServerList.push({
                  server: http2Server,
                  channelzRef
                });
                this.trace("Successfully bound " + (0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress));
                resolve("port" in boundSubchannelAddress ? boundSubchannelAddress.port : portNum);
                http2Server.removeListener("error", onError);
              });
            });
          })).then((results) => {
            let count = 0;
            for (const result of results) {
              if (typeof result === "number") {
                count += 1;
                if (result !== portNum) {
                  throw new Error("Invalid state: multiple port numbers added from single address");
                }
              }
            }
            return {
              port: portNum,
              count: count + previousCount
            };
          });
        };
        const bindWildcardPort = (addressList) => {
          if (addressList.length === 0) {
            return Promise.resolve({ port: 0, count: 0 });
          }
          const address = addressList[0];
          const http2Server = setupServer();
          return new Promise((resolve, reject) => {
            const onError = (err) => {
              this.trace("Failed to bind " + (0, subchannel_address_1.subchannelAddressToString)(address) + " with error " + err.message);
              resolve(bindWildcardPort(addressList.slice(1)));
            };
            http2Server.once("error", onError);
            http2Server.listen(address, () => {
              const boundAddress = http2Server.address();
              const boundSubchannelAddress = {
                host: boundAddress.address,
                port: boundAddress.port
              };
              const channelzRef = (0, channelz_1.registerChannelzSocket)((0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress), () => {
                return {
                  localAddress: boundSubchannelAddress,
                  remoteAddress: null,
                  security: null,
                  remoteName: null,
                  streamsStarted: 0,
                  streamsSucceeded: 0,
                  streamsFailed: 0,
                  messagesSent: 0,
                  messagesReceived: 0,
                  keepAlivesSent: 0,
                  lastLocalStreamCreatedTimestamp: null,
                  lastRemoteStreamCreatedTimestamp: null,
                  lastMessageSentTimestamp: null,
                  lastMessageReceivedTimestamp: null,
                  localFlowControlWindow: null,
                  remoteFlowControlWindow: null
                };
              }, this.channelzEnabled);
              if (this.channelzEnabled) {
                this.listenerChildrenTracker.refChild(channelzRef);
              }
              this.http2ServerList.push({
                server: http2Server,
                channelzRef
              });
              this.trace("Successfully bound " + (0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress));
              resolve(bindSpecificPort(addressList.slice(1), boundAddress.port, 1));
              http2Server.removeListener("error", onError);
            });
          });
        };
        const resolverListener = {
          onSuccessfulResolution: (addressList, serviceConfig, serviceConfigError) => {
            resolverListener.onSuccessfulResolution = () => {
            };
            if (addressList.length === 0) {
              deferredCallback(new Error(`No addresses resolved for port ${port}`), 0);
              return;
            }
            let bindResultPromise;
            if ((0, subchannel_address_1.isTcpSubchannelAddress)(addressList[0])) {
              if (addressList[0].port === 0) {
                bindResultPromise = bindWildcardPort(addressList);
              } else {
                bindResultPromise = bindSpecificPort(addressList, addressList[0].port, 0);
              }
            } else {
              bindResultPromise = bindSpecificPort(addressList, 1, 0);
            }
            bindResultPromise.then((bindResult) => {
              if (bindResult.count === 0) {
                const errorString = `No address added out of total ${addressList.length} resolved`;
                logging.log(constants_1.LogVerbosity.ERROR, errorString);
                deferredCallback(new Error(errorString), 0);
              } else {
                if (bindResult.count < addressList.length) {
                  logging.log(constants_1.LogVerbosity.INFO, `WARNING Only ${bindResult.count} addresses added out of total ${addressList.length} resolved`);
                }
                deferredCallback(null, bindResult.port);
              }
            }, (error) => {
              const errorString = `No address added out of total ${addressList.length} resolved`;
              logging.log(constants_1.LogVerbosity.ERROR, errorString);
              deferredCallback(new Error(errorString), 0);
            });
          },
          onError: (error) => {
            deferredCallback(new Error(error.details), 0);
          }
        };
        const resolver = (0, resolver_1.createResolver)(portUri, resolverListener, this.options);
        resolver.updateResolution();
      }
      forceShutdown() {
        for (const { server: http2Server, channelzRef: ref } of this.http2ServerList) {
          if (http2Server.listening) {
            http2Server.close(() => {
              if (this.channelzEnabled) {
                this.listenerChildrenTracker.unrefChild(ref);
                (0, channelz_1.unregisterChannelzRef)(ref);
              }
            });
          }
        }
        this.started = false;
        this.sessions.forEach((channelzInfo, session) => {
          session.destroy(http2.constants.NGHTTP2_CANCEL);
        });
        this.sessions.clear();
        if (this.channelzEnabled) {
          (0, channelz_1.unregisterChannelzRef)(this.channelzRef);
        }
      }
      register(name, handler, serialize, deserialize, type) {
        if (this.handlers.has(name)) {
          return false;
        }
        this.handlers.set(name, {
          func: handler,
          serialize,
          deserialize,
          type,
          path: name
        });
        return true;
      }
      unregister(name) {
        return this.handlers.delete(name);
      }
      start() {
        if (this.http2ServerList.length === 0 || this.http2ServerList.every(({ server: http2Server }) => http2Server.listening !== true)) {
          throw new Error("server must be bound in order to start");
        }
        if (this.started === true) {
          throw new Error("server is already started");
        }
        if (this.channelzEnabled) {
          this.channelzTrace.addTrace("CT_INFO", "Starting");
        }
        this.started = true;
      }
      tryShutdown(callback) {
        const wrappedCallback = (error) => {
          if (this.channelzEnabled) {
            (0, channelz_1.unregisterChannelzRef)(this.channelzRef);
          }
          callback(error);
        };
        let pendingChecks = 0;
        function maybeCallback() {
          pendingChecks--;
          if (pendingChecks === 0) {
            wrappedCallback();
          }
        }
        this.started = false;
        for (const { server: http2Server, channelzRef: ref } of this.http2ServerList) {
          if (http2Server.listening) {
            pendingChecks++;
            http2Server.close(() => {
              if (this.channelzEnabled) {
                this.listenerChildrenTracker.unrefChild(ref);
                (0, channelz_1.unregisterChannelzRef)(ref);
              }
              maybeCallback();
            });
          }
        }
        this.sessions.forEach((channelzInfo, session) => {
          if (!session.closed) {
            pendingChecks += 1;
            session.close(maybeCallback);
          }
        });
        if (pendingChecks === 0) {
          wrappedCallback();
        }
      }
      addHttp2Port() {
        throw new Error("Not yet implemented");
      }
      /**
       * Get the channelz reference object for this server. The returned value is
       * garbage if channelz is disabled for this server.
       * @returns
       */
      getChannelzRef() {
        return this.channelzRef;
      }
      _verifyContentType(stream, headers) {
        const contentType = headers[http2.constants.HTTP2_HEADER_CONTENT_TYPE];
        if (typeof contentType !== "string" || !contentType.startsWith("application/grpc")) {
          stream.respond({
            [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE
          }, { endStream: true });
          return false;
        }
        return true;
      }
      _retrieveHandler(path) {
        this.trace("Received call to method " + path + " at address " + this.serverAddressString);
        const handler = this.handlers.get(path);
        if (handler === void 0) {
          this.trace("No handler registered for method " + path + ". Sending UNIMPLEMENTED status.");
          return null;
        }
        return handler;
      }
      _respondWithError(err, stream, channelzSessionInfo = null) {
        const call = new server_call_1.Http2ServerCallStream(stream, null, this.options);
        if (err.code === void 0) {
          err.code = constants_1.Status.INTERNAL;
        }
        if (this.channelzEnabled) {
          this.callTracker.addCallFailed();
          channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();
        }
        call.sendError(err);
      }
      _channelzHandler(stream, headers) {
        const channelzSessionInfo = this.sessions.get(stream.session);
        this.callTracker.addCallStarted();
        channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallStarted();
        if (!this._verifyContentType(stream, headers)) {
          this.callTracker.addCallFailed();
          channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();
          return;
        }
        const path = headers[HTTP2_HEADER_PATH];
        const handler = this._retrieveHandler(path);
        if (!handler) {
          this._respondWithError(getUnimplementedStatusResponse(path), stream, channelzSessionInfo);
          return;
        }
        const call = new server_call_1.Http2ServerCallStream(stream, handler, this.options);
        call.once("callEnd", (code) => {
          if (code === constants_1.Status.OK) {
            this.callTracker.addCallSucceeded();
          } else {
            this.callTracker.addCallFailed();
          }
        });
        if (channelzSessionInfo) {
          call.once("streamEnd", (success) => {
            if (success) {
              channelzSessionInfo.streamTracker.addCallSucceeded();
            } else {
              channelzSessionInfo.streamTracker.addCallFailed();
            }
          });
          call.on("sendMessage", () => {
            channelzSessionInfo.messagesSent += 1;
            channelzSessionInfo.lastMessageSentTimestamp = /* @__PURE__ */ new Date();
          });
          call.on("receiveMessage", () => {
            channelzSessionInfo.messagesReceived += 1;
            channelzSessionInfo.lastMessageReceivedTimestamp = /* @__PURE__ */ new Date();
          });
        }
        if (!this._runHandlerForCall(call, handler, headers)) {
          this.callTracker.addCallFailed();
          channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();
          call.sendError({
            code: constants_1.Status.INTERNAL,
            details: `Unknown handler type: ${handler.type}`
          });
        }
      }
      _streamHandler(stream, headers) {
        if (this._verifyContentType(stream, headers) !== true) {
          return;
        }
        const path = headers[HTTP2_HEADER_PATH];
        const handler = this._retrieveHandler(path);
        if (!handler) {
          this._respondWithError(getUnimplementedStatusResponse(path), stream, null);
          return;
        }
        const call = new server_call_1.Http2ServerCallStream(stream, handler, this.options);
        if (!this._runHandlerForCall(call, handler, headers)) {
          call.sendError({
            code: constants_1.Status.INTERNAL,
            details: `Unknown handler type: ${handler.type}`
          });
        }
      }
      _runHandlerForCall(call, handler, headers) {
        var _a;
        const metadata = call.receiveMetadata(headers);
        const encoding = (_a = metadata.get("grpc-encoding")[0]) !== null && _a !== void 0 ? _a : "identity";
        metadata.remove("grpc-encoding");
        const { type } = handler;
        if (type === "unary") {
          handleUnary(call, handler, metadata, encoding);
        } else if (type === "clientStream") {
          handleClientStreaming(call, handler, metadata, encoding);
        } else if (type === "serverStream") {
          handleServerStreaming(call, handler, metadata, encoding);
        } else if (type === "bidi") {
          handleBidiStreaming(call, handler, metadata, encoding);
        } else {
          return false;
        }
        return true;
      }
      _setupHandlers(http2Server) {
        if (http2Server === null) {
          return;
        }
        const serverAddress = http2Server.address();
        let serverAddressString = "null";
        if (serverAddress) {
          if (typeof serverAddress === "string") {
            serverAddressString = serverAddress;
          } else {
            serverAddressString = serverAddress.address + ":" + serverAddress.port;
          }
        }
        this.serverAddressString = serverAddressString;
        const handler = this.channelzEnabled ? this._channelzHandler : this._streamHandler;
        http2Server.on("stream", handler.bind(this));
        http2Server.on("session", (session) => {
          var _a, _b, _c, _d, _e;
          if (!this.started) {
            session.destroy();
            return;
          }
          const channelzRef = (0, channelz_1.registerChannelzSocket)((_a = session.socket.remoteAddress) !== null && _a !== void 0 ? _a : "unknown", this.getChannelzSessionInfoGetter(session), this.channelzEnabled);
          const channelzSessionInfo = {
            ref: channelzRef,
            streamTracker: new channelz_1.ChannelzCallTracker(),
            messagesSent: 0,
            messagesReceived: 0,
            lastMessageSentTimestamp: null,
            lastMessageReceivedTimestamp: null
          };
          this.sessions.set(session, channelzSessionInfo);
          const clientAddress = session.socket.remoteAddress;
          if (this.channelzEnabled) {
            this.channelzTrace.addTrace("CT_INFO", "Connection established by client " + clientAddress);
            this.sessionChildrenTracker.refChild(channelzRef);
          }
          let connectionAgeTimer = null;
          let connectionAgeGraceTimer = null;
          let sessionClosedByServer = false;
          if (this.maxConnectionAgeMs !== UNLIMITED_CONNECTION_AGE_MS) {
            const jitterMagnitude = this.maxConnectionAgeMs / 10;
            const jitter = Math.random() * jitterMagnitude * 2 - jitterMagnitude;
            connectionAgeTimer = (_c = (_b = setTimeout(() => {
              var _a2, _b2;
              sessionClosedByServer = true;
              if (this.channelzEnabled) {
                this.channelzTrace.addTrace("CT_INFO", "Connection dropped by max connection age from " + clientAddress);
              }
              try {
                session.goaway(http2.constants.NGHTTP2_NO_ERROR, ~(1 << 31), Buffer.from("max_age"));
              } catch (e) {
                session.destroy();
                return;
              }
              session.close();
              if (this.maxConnectionAgeGraceMs !== UNLIMITED_CONNECTION_AGE_MS) {
                connectionAgeGraceTimer = (_b2 = (_a2 = setTimeout(() => {
                  session.destroy();
                }, this.maxConnectionAgeGraceMs)).unref) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
              }
            }, this.maxConnectionAgeMs + jitter)).unref) === null || _c === void 0 ? void 0 : _c.call(_b);
          }
          const keeapliveTimeTimer = (_e = (_d = setInterval(() => {
            var _a2, _b2;
            const timeoutTImer = (_b2 = (_a2 = setTimeout(() => {
              sessionClosedByServer = true;
              if (this.channelzEnabled) {
                this.channelzTrace.addTrace("CT_INFO", "Connection dropped by keepalive timeout from " + clientAddress);
              }
              session.close();
            }, this.keepaliveTimeoutMs)).unref) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
            try {
              session.ping((err, duration, payload) => {
                clearTimeout(timeoutTImer);
              });
            } catch (e) {
              session.destroy();
            }
          }, this.keepaliveTimeMs)).unref) === null || _e === void 0 ? void 0 : _e.call(_d);
          session.on("close", () => {
            if (this.channelzEnabled) {
              if (!sessionClosedByServer) {
                this.channelzTrace.addTrace("CT_INFO", "Connection dropped by client " + clientAddress);
              }
              this.sessionChildrenTracker.unrefChild(channelzRef);
              (0, channelz_1.unregisterChannelzRef)(channelzRef);
            }
            if (connectionAgeTimer) {
              clearTimeout(connectionAgeTimer);
            }
            if (connectionAgeGraceTimer) {
              clearTimeout(connectionAgeGraceTimer);
            }
            if (keeapliveTimeTimer) {
              clearTimeout(keeapliveTimeTimer);
            }
            this.sessions.delete(session);
          });
        });
      }
    };
    exports2.Server = Server;
    async function handleUnary(call, handler, metadata, encoding) {
      try {
        const request = await call.receiveUnaryMessage(encoding);
        if (request === void 0 || call.cancelled) {
          return;
        }
        const emitter = new server_call_1.ServerUnaryCallImpl(call, metadata, request);
        handler.func(emitter, (err, value, trailer, flags) => {
          call.sendUnaryMessage(err, value, trailer, flags);
        });
      } catch (err) {
        call.sendError(err);
      }
    }
    function handleClientStreaming(call, handler, metadata, encoding) {
      const stream = new server_call_1.ServerReadableStreamImpl(call, metadata, handler.deserialize, encoding);
      function respond(err, value, trailer, flags) {
        stream.destroy();
        call.sendUnaryMessage(err, value, trailer, flags);
      }
      if (call.cancelled) {
        return;
      }
      stream.on("error", respond);
      handler.func(stream, respond);
    }
    async function handleServerStreaming(call, handler, metadata, encoding) {
      try {
        const request = await call.receiveUnaryMessage(encoding);
        if (request === void 0 || call.cancelled) {
          return;
        }
        const stream = new server_call_1.ServerWritableStreamImpl(call, metadata, handler.serialize, request);
        handler.func(stream);
      } catch (err) {
        call.sendError(err);
      }
    }
    function handleBidiStreaming(call, handler, metadata, encoding) {
      const stream = new server_call_1.ServerDuplexStreamImpl(call, metadata, handler.serialize, handler.deserialize, encoding);
      if (call.cancelled) {
        return;
      }
      handler.func(stream);
    }
  }
});

// node_modules/@grpc/grpc-js/build/src/status-builder.js
var require_status_builder = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/status-builder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StatusBuilder = void 0;
    var StatusBuilder = class {
      constructor() {
        this.code = null;
        this.details = null;
        this.metadata = null;
      }
      /**
       * Adds a status code to the builder.
       */
      withCode(code) {
        this.code = code;
        return this;
      }
      /**
       * Adds details to the builder.
       */
      withDetails(details) {
        this.details = details;
        return this;
      }
      /**
       * Adds metadata to the builder.
       */
      withMetadata(metadata) {
        this.metadata = metadata;
        return this;
      }
      /**
       * Builds the status object.
       */
      build() {
        const status = {};
        if (this.code !== null) {
          status.code = this.code;
        }
        if (this.details !== null) {
          status.details = this.details;
        }
        if (this.metadata !== null) {
          status.metadata = this.metadata;
        }
        return status;
      }
    };
    exports2.StatusBuilder = StatusBuilder;
  }
});

// node_modules/@grpc/grpc-js/build/src/duration.js
var require_duration = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/duration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isDuration = exports2.durationToMs = exports2.msToDuration = void 0;
    function msToDuration(millis) {
      return {
        seconds: millis / 1e3 | 0,
        nanos: millis % 1e3 * 1e6 | 0
      };
    }
    exports2.msToDuration = msToDuration;
    function durationToMs(duration) {
      return duration.seconds * 1e3 + duration.nanos / 1e6 | 0;
    }
    exports2.durationToMs = durationToMs;
    function isDuration(value) {
      return typeof value.seconds === "number" && typeof value.nanos === "number";
    }
    exports2.isDuration = isDuration;
  }
});

// node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js
var require_load_balancer_outlier_detection = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setup = exports2.OutlierDetectionLoadBalancer = exports2.OutlierDetectionLoadBalancingConfig = void 0;
    var connectivity_state_1 = require_connectivity_state();
    var constants_1 = require_constants();
    var duration_1 = require_duration();
    var experimental_1 = require_experimental();
    var load_balancer_1 = require_load_balancer();
    var load_balancer_child_handler_1 = require_load_balancer_child_handler();
    var picker_1 = require_picker();
    var subchannel_address_1 = require_subchannel_address();
    var subchannel_interface_1 = require_subchannel_interface();
    var logging = require_logging();
    var TRACER_NAME = "outlier_detection";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var TYPE_NAME = "outlier_detection";
    var OUTLIER_DETECTION_ENABLED = ((_a = process.env.GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION) !== null && _a !== void 0 ? _a : "true") === "true";
    var defaultSuccessRateEjectionConfig = {
      stdev_factor: 1900,
      enforcement_percentage: 100,
      minimum_hosts: 5,
      request_volume: 100
    };
    var defaultFailurePercentageEjectionConfig = {
      threshold: 85,
      enforcement_percentage: 100,
      minimum_hosts: 5,
      request_volume: 50
    };
    function validateFieldType(obj, fieldName, expectedType, objectName) {
      if (fieldName in obj && typeof obj[fieldName] !== expectedType) {
        const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;
        throw new Error(`outlier detection config ${fullFieldName} parse error: expected ${expectedType}, got ${typeof obj[fieldName]}`);
      }
    }
    function validatePositiveDuration(obj, fieldName, objectName) {
      const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;
      if (fieldName in obj) {
        if (!(0, duration_1.isDuration)(obj[fieldName])) {
          throw new Error(`outlier detection config ${fullFieldName} parse error: expected Duration, got ${typeof obj[fieldName]}`);
        }
        if (!(obj[fieldName].seconds >= 0 && obj[fieldName].seconds <= 315576e6 && obj[fieldName].nanos >= 0 && obj[fieldName].nanos <= 999999999)) {
          throw new Error(`outlier detection config ${fullFieldName} parse error: values out of range for non-negative Duaration`);
        }
      }
    }
    function validatePercentage(obj, fieldName, objectName) {
      const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;
      validateFieldType(obj, fieldName, "number", objectName);
      if (fieldName in obj && !(obj[fieldName] >= 0 && obj[fieldName] <= 100)) {
        throw new Error(`outlier detection config ${fullFieldName} parse error: value out of range for percentage (0-100)`);
      }
    }
    var OutlierDetectionLoadBalancingConfig = class _OutlierDetectionLoadBalancingConfig {
      constructor(intervalMs, baseEjectionTimeMs, maxEjectionTimeMs, maxEjectionPercent, successRateEjection, failurePercentageEjection, childPolicy) {
        this.childPolicy = childPolicy;
        if (childPolicy.length > 0 && childPolicy[0].getLoadBalancerName() === "pick_first") {
          throw new Error("outlier_detection LB policy cannot have a pick_first child policy");
        }
        this.intervalMs = intervalMs !== null && intervalMs !== void 0 ? intervalMs : 1e4;
        this.baseEjectionTimeMs = baseEjectionTimeMs !== null && baseEjectionTimeMs !== void 0 ? baseEjectionTimeMs : 3e4;
        this.maxEjectionTimeMs = maxEjectionTimeMs !== null && maxEjectionTimeMs !== void 0 ? maxEjectionTimeMs : 3e5;
        this.maxEjectionPercent = maxEjectionPercent !== null && maxEjectionPercent !== void 0 ? maxEjectionPercent : 10;
        this.successRateEjection = successRateEjection ? Object.assign(Object.assign({}, defaultSuccessRateEjectionConfig), successRateEjection) : null;
        this.failurePercentageEjection = failurePercentageEjection ? Object.assign(Object.assign({}, defaultFailurePercentageEjectionConfig), failurePercentageEjection) : null;
      }
      getLoadBalancerName() {
        return TYPE_NAME;
      }
      toJsonObject() {
        return {
          interval: (0, duration_1.msToDuration)(this.intervalMs),
          base_ejection_time: (0, duration_1.msToDuration)(this.baseEjectionTimeMs),
          max_ejection_time: (0, duration_1.msToDuration)(this.maxEjectionTimeMs),
          max_ejection_percent: this.maxEjectionPercent,
          success_rate_ejection: this.successRateEjection,
          failure_percentage_ejection: this.failurePercentageEjection,
          child_policy: this.childPolicy.map((policy) => policy.toJsonObject())
        };
      }
      getIntervalMs() {
        return this.intervalMs;
      }
      getBaseEjectionTimeMs() {
        return this.baseEjectionTimeMs;
      }
      getMaxEjectionTimeMs() {
        return this.maxEjectionTimeMs;
      }
      getMaxEjectionPercent() {
        return this.maxEjectionPercent;
      }
      getSuccessRateEjectionConfig() {
        return this.successRateEjection;
      }
      getFailurePercentageEjectionConfig() {
        return this.failurePercentageEjection;
      }
      getChildPolicy() {
        return this.childPolicy;
      }
      copyWithChildPolicy(childPolicy) {
        return new _OutlierDetectionLoadBalancingConfig(this.intervalMs, this.baseEjectionTimeMs, this.maxEjectionTimeMs, this.maxEjectionPercent, this.successRateEjection, this.failurePercentageEjection, childPolicy);
      }
      static createFromJson(obj) {
        var _a2;
        validatePositiveDuration(obj, "interval");
        validatePositiveDuration(obj, "base_ejection_time");
        validatePositiveDuration(obj, "max_ejection_time");
        validatePercentage(obj, "max_ejection_percent");
        if ("success_rate_ejection" in obj) {
          if (typeof obj.success_rate_ejection !== "object") {
            throw new Error("outlier detection config success_rate_ejection must be an object");
          }
          validateFieldType(obj.success_rate_ejection, "stdev_factor", "number", "success_rate_ejection");
          validatePercentage(obj.success_rate_ejection, "enforcement_percentage", "success_rate_ejection");
          validateFieldType(obj.success_rate_ejection, "minimum_hosts", "number", "success_rate_ejection");
          validateFieldType(obj.success_rate_ejection, "request_volume", "number", "success_rate_ejection");
        }
        if ("failure_percentage_ejection" in obj) {
          if (typeof obj.failure_percentage_ejection !== "object") {
            throw new Error("outlier detection config failure_percentage_ejection must be an object");
          }
          validatePercentage(obj.failure_percentage_ejection, "threshold", "failure_percentage_ejection");
          validatePercentage(obj.failure_percentage_ejection, "enforcement_percentage", "failure_percentage_ejection");
          validateFieldType(obj.failure_percentage_ejection, "minimum_hosts", "number", "failure_percentage_ejection");
          validateFieldType(obj.failure_percentage_ejection, "request_volume", "number", "failure_percentage_ejection");
        }
        return new _OutlierDetectionLoadBalancingConfig(obj.interval ? (0, duration_1.durationToMs)(obj.interval) : null, obj.base_ejection_time ? (0, duration_1.durationToMs)(obj.base_ejection_time) : null, obj.max_ejection_time ? (0, duration_1.durationToMs)(obj.max_ejection_time) : null, (_a2 = obj.max_ejection_percent) !== null && _a2 !== void 0 ? _a2 : null, obj.success_rate_ejection, obj.failure_percentage_ejection, obj.child_policy.map(load_balancer_1.validateLoadBalancingConfig));
      }
    };
    exports2.OutlierDetectionLoadBalancingConfig = OutlierDetectionLoadBalancingConfig;
    var OutlierDetectionSubchannelWrapper = class extends subchannel_interface_1.BaseSubchannelWrapper {
      constructor(childSubchannel, mapEntry) {
        super(childSubchannel);
        this.mapEntry = mapEntry;
        this.stateListeners = [];
        this.ejected = false;
        this.refCount = 0;
        this.childSubchannelState = childSubchannel.getConnectivityState();
        childSubchannel.addConnectivityStateListener((subchannel, previousState, newState, keepaliveTime) => {
          this.childSubchannelState = newState;
          if (!this.ejected) {
            for (const listener of this.stateListeners) {
              listener(this, previousState, newState, keepaliveTime);
            }
          }
        });
      }
      getConnectivityState() {
        if (this.ejected) {
          return connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE;
        } else {
          return this.childSubchannelState;
        }
      }
      /**
       * Add a listener function to be called whenever the wrapper's
       * connectivity state changes.
       * @param listener
       */
      addConnectivityStateListener(listener) {
        this.stateListeners.push(listener);
      }
      /**
       * Remove a listener previously added with `addConnectivityStateListener`
       * @param listener A reference to a function previously passed to
       *     `addConnectivityStateListener`
       */
      removeConnectivityStateListener(listener) {
        const listenerIndex = this.stateListeners.indexOf(listener);
        if (listenerIndex > -1) {
          this.stateListeners.splice(listenerIndex, 1);
        }
      }
      ref() {
        this.child.ref();
        this.refCount += 1;
      }
      unref() {
        this.child.unref();
        this.refCount -= 1;
        if (this.refCount <= 0) {
          if (this.mapEntry) {
            const index = this.mapEntry.subchannelWrappers.indexOf(this);
            if (index >= 0) {
              this.mapEntry.subchannelWrappers.splice(index, 1);
            }
          }
        }
      }
      eject() {
        this.ejected = true;
        for (const listener of this.stateListeners) {
          listener(this, this.childSubchannelState, connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, -1);
        }
      }
      uneject() {
        this.ejected = false;
        for (const listener of this.stateListeners) {
          listener(this, connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, this.childSubchannelState, -1);
        }
      }
      getMapEntry() {
        return this.mapEntry;
      }
      getWrappedSubchannel() {
        return this.child;
      }
    };
    function createEmptyBucket() {
      return {
        success: 0,
        failure: 0
      };
    }
    var CallCounter = class {
      constructor() {
        this.activeBucket = createEmptyBucket();
        this.inactiveBucket = createEmptyBucket();
      }
      addSuccess() {
        this.activeBucket.success += 1;
      }
      addFailure() {
        this.activeBucket.failure += 1;
      }
      switchBuckets() {
        this.inactiveBucket = this.activeBucket;
        this.activeBucket = createEmptyBucket();
      }
      getLastSuccesses() {
        return this.inactiveBucket.success;
      }
      getLastFailures() {
        return this.inactiveBucket.failure;
      }
    };
    var OutlierDetectionPicker = class {
      constructor(wrappedPicker, countCalls) {
        this.wrappedPicker = wrappedPicker;
        this.countCalls = countCalls;
      }
      pick(pickArgs) {
        const wrappedPick = this.wrappedPicker.pick(pickArgs);
        if (wrappedPick.pickResultType === picker_1.PickResultType.COMPLETE) {
          const subchannelWrapper = wrappedPick.subchannel;
          const mapEntry = subchannelWrapper.getMapEntry();
          if (mapEntry) {
            let onCallEnded = wrappedPick.onCallEnded;
            if (this.countCalls) {
              onCallEnded = (statusCode) => {
                var _a2;
                if (statusCode === constants_1.Status.OK) {
                  mapEntry.counter.addSuccess();
                } else {
                  mapEntry.counter.addFailure();
                }
                (_a2 = wrappedPick.onCallEnded) === null || _a2 === void 0 ? void 0 : _a2.call(wrappedPick, statusCode);
              };
            }
            return Object.assign(Object.assign({}, wrappedPick), { subchannel: subchannelWrapper.getWrappedSubchannel(), onCallEnded });
          } else {
            return Object.assign(Object.assign({}, wrappedPick), { subchannel: subchannelWrapper.getWrappedSubchannel() });
          }
        } else {
          return wrappedPick;
        }
      }
    };
    var OutlierDetectionLoadBalancer = class {
      constructor(channelControlHelper) {
        this.addressMap = /* @__PURE__ */ new Map();
        this.latestConfig = null;
        this.timerStartTime = null;
        this.childBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler((0, experimental_1.createChildChannelControlHelper)(channelControlHelper, {
          createSubchannel: (subchannelAddress, subchannelArgs) => {
            const originalSubchannel = channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);
            const mapEntry = this.addressMap.get((0, subchannel_address_1.subchannelAddressToString)(subchannelAddress));
            const subchannelWrapper = new OutlierDetectionSubchannelWrapper(originalSubchannel, mapEntry);
            if ((mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.currentEjectionTimestamp) !== null) {
              subchannelWrapper.eject();
            }
            mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.subchannelWrappers.push(subchannelWrapper);
            return subchannelWrapper;
          },
          updateState: (connectivityState, picker) => {
            if (connectivityState === connectivity_state_1.ConnectivityState.READY) {
              channelControlHelper.updateState(connectivityState, new OutlierDetectionPicker(picker, this.isCountingEnabled()));
            } else {
              channelControlHelper.updateState(connectivityState, picker);
            }
          }
        }));
        this.ejectionTimer = setInterval(() => {
        }, 0);
        clearInterval(this.ejectionTimer);
      }
      isCountingEnabled() {
        return this.latestConfig !== null && (this.latestConfig.getSuccessRateEjectionConfig() !== null || this.latestConfig.getFailurePercentageEjectionConfig() !== null);
      }
      getCurrentEjectionPercent() {
        let ejectionCount = 0;
        for (const mapEntry of this.addressMap.values()) {
          if (mapEntry.currentEjectionTimestamp !== null) {
            ejectionCount += 1;
          }
        }
        return ejectionCount * 100 / this.addressMap.size;
      }
      runSuccessRateCheck(ejectionTimestamp) {
        if (!this.latestConfig) {
          return;
        }
        const successRateConfig = this.latestConfig.getSuccessRateEjectionConfig();
        if (!successRateConfig) {
          return;
        }
        trace("Running success rate check");
        const targetRequestVolume = successRateConfig.request_volume;
        let addresesWithTargetVolume = 0;
        const successRates = [];
        for (const [address, mapEntry] of this.addressMap) {
          const successes = mapEntry.counter.getLastSuccesses();
          const failures = mapEntry.counter.getLastFailures();
          trace("Stats for " + address + ": successes=" + successes + " failures=" + failures + " targetRequestVolume=" + targetRequestVolume);
          if (successes + failures >= targetRequestVolume) {
            addresesWithTargetVolume += 1;
            successRates.push(successes / (successes + failures));
          }
        }
        trace("Found " + addresesWithTargetVolume + " success rate candidates; currentEjectionPercent=" + this.getCurrentEjectionPercent() + " successRates=[" + successRates + "]");
        if (addresesWithTargetVolume < successRateConfig.minimum_hosts) {
          return;
        }
        const successRateMean = successRates.reduce((a, b) => a + b) / successRates.length;
        let successRateDeviationSum = 0;
        for (const rate of successRates) {
          const deviation = rate - successRateMean;
          successRateDeviationSum += deviation * deviation;
        }
        const successRateVariance = successRateDeviationSum / successRates.length;
        const successRateStdev = Math.sqrt(successRateVariance);
        const ejectionThreshold = successRateMean - successRateStdev * (successRateConfig.stdev_factor / 1e3);
        trace("stdev=" + successRateStdev + " ejectionThreshold=" + ejectionThreshold);
        for (const [address, mapEntry] of this.addressMap.entries()) {
          if (this.getCurrentEjectionPercent() >= this.latestConfig.getMaxEjectionPercent()) {
            break;
          }
          const successes = mapEntry.counter.getLastSuccesses();
          const failures = mapEntry.counter.getLastFailures();
          if (successes + failures < targetRequestVolume) {
            continue;
          }
          const successRate = successes / (successes + failures);
          trace("Checking candidate " + address + " successRate=" + successRate);
          if (successRate < ejectionThreshold) {
            const randomNumber = Math.random() * 100;
            trace("Candidate " + address + " randomNumber=" + randomNumber + " enforcement_percentage=" + successRateConfig.enforcement_percentage);
            if (randomNumber < successRateConfig.enforcement_percentage) {
              trace("Ejecting candidate " + address);
              this.eject(mapEntry, ejectionTimestamp);
            }
          }
        }
      }
      runFailurePercentageCheck(ejectionTimestamp) {
        if (!this.latestConfig) {
          return;
        }
        const failurePercentageConfig = this.latestConfig.getFailurePercentageEjectionConfig();
        if (!failurePercentageConfig) {
          return;
        }
        trace("Running failure percentage check. threshold=" + failurePercentageConfig.threshold + " request volume threshold=" + failurePercentageConfig.request_volume);
        let addressesWithTargetVolume = 0;
        for (const mapEntry of this.addressMap.values()) {
          const successes = mapEntry.counter.getLastSuccesses();
          const failures = mapEntry.counter.getLastFailures();
          if (successes + failures >= failurePercentageConfig.request_volume) {
            addressesWithTargetVolume += 1;
          }
        }
        if (addressesWithTargetVolume < failurePercentageConfig.minimum_hosts) {
          return;
        }
        for (const [address, mapEntry] of this.addressMap.entries()) {
          if (this.getCurrentEjectionPercent() >= this.latestConfig.getMaxEjectionPercent()) {
            break;
          }
          const successes = mapEntry.counter.getLastSuccesses();
          const failures = mapEntry.counter.getLastFailures();
          trace("Candidate successes=" + successes + " failures=" + failures);
          if (successes + failures < failurePercentageConfig.request_volume) {
            continue;
          }
          const failurePercentage = failures * 100 / (failures + successes);
          if (failurePercentage > failurePercentageConfig.threshold) {
            const randomNumber = Math.random() * 100;
            trace("Candidate " + address + " randomNumber=" + randomNumber + " enforcement_percentage=" + failurePercentageConfig.enforcement_percentage);
            if (randomNumber < failurePercentageConfig.enforcement_percentage) {
              trace("Ejecting candidate " + address);
              this.eject(mapEntry, ejectionTimestamp);
            }
          }
        }
      }
      eject(mapEntry, ejectionTimestamp) {
        mapEntry.currentEjectionTimestamp = /* @__PURE__ */ new Date();
        mapEntry.ejectionTimeMultiplier += 1;
        for (const subchannelWrapper of mapEntry.subchannelWrappers) {
          subchannelWrapper.eject();
        }
      }
      uneject(mapEntry) {
        mapEntry.currentEjectionTimestamp = null;
        for (const subchannelWrapper of mapEntry.subchannelWrappers) {
          subchannelWrapper.uneject();
        }
      }
      switchAllBuckets() {
        for (const mapEntry of this.addressMap.values()) {
          mapEntry.counter.switchBuckets();
        }
      }
      startTimer(delayMs) {
        var _a2, _b;
        this.ejectionTimer = setTimeout(() => this.runChecks(), delayMs);
        (_b = (_a2 = this.ejectionTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a2);
      }
      runChecks() {
        const ejectionTimestamp = /* @__PURE__ */ new Date();
        trace("Ejection timer running");
        this.switchAllBuckets();
        if (!this.latestConfig) {
          return;
        }
        this.timerStartTime = ejectionTimestamp;
        this.startTimer(this.latestConfig.getIntervalMs());
        this.runSuccessRateCheck(ejectionTimestamp);
        this.runFailurePercentageCheck(ejectionTimestamp);
        for (const [address, mapEntry] of this.addressMap.entries()) {
          if (mapEntry.currentEjectionTimestamp === null) {
            if (mapEntry.ejectionTimeMultiplier > 0) {
              mapEntry.ejectionTimeMultiplier -= 1;
            }
          } else {
            const baseEjectionTimeMs = this.latestConfig.getBaseEjectionTimeMs();
            const maxEjectionTimeMs = this.latestConfig.getMaxEjectionTimeMs();
            const returnTime = new Date(mapEntry.currentEjectionTimestamp.getTime());
            returnTime.setMilliseconds(returnTime.getMilliseconds() + Math.min(baseEjectionTimeMs * mapEntry.ejectionTimeMultiplier, Math.max(baseEjectionTimeMs, maxEjectionTimeMs)));
            if (returnTime < /* @__PURE__ */ new Date()) {
              trace("Unejecting " + address);
              this.uneject(mapEntry);
            }
          }
        }
      }
      updateAddressList(addressList, lbConfig, attributes) {
        if (!(lbConfig instanceof OutlierDetectionLoadBalancingConfig)) {
          return;
        }
        const subchannelAddresses = /* @__PURE__ */ new Set();
        for (const address of addressList) {
          subchannelAddresses.add((0, subchannel_address_1.subchannelAddressToString)(address));
        }
        for (const address of subchannelAddresses) {
          if (!this.addressMap.has(address)) {
            trace("Adding map entry for " + address);
            this.addressMap.set(address, {
              counter: new CallCounter(),
              currentEjectionTimestamp: null,
              ejectionTimeMultiplier: 0,
              subchannelWrappers: []
            });
          }
        }
        for (const key of this.addressMap.keys()) {
          if (!subchannelAddresses.has(key)) {
            trace("Removing map entry for " + key);
            this.addressMap.delete(key);
          }
        }
        const childPolicy = (0, load_balancer_1.getFirstUsableConfig)(lbConfig.getChildPolicy(), true);
        this.childBalancer.updateAddressList(addressList, childPolicy, attributes);
        if (lbConfig.getSuccessRateEjectionConfig() || lbConfig.getFailurePercentageEjectionConfig()) {
          if (this.timerStartTime) {
            trace("Previous timer existed. Replacing timer");
            clearTimeout(this.ejectionTimer);
            const remainingDelay = lbConfig.getIntervalMs() - ((/* @__PURE__ */ new Date()).getTime() - this.timerStartTime.getTime());
            this.startTimer(remainingDelay);
          } else {
            trace("Starting new timer");
            this.timerStartTime = /* @__PURE__ */ new Date();
            this.startTimer(lbConfig.getIntervalMs());
            this.switchAllBuckets();
          }
        } else {
          trace("Counting disabled. Cancelling timer.");
          this.timerStartTime = null;
          clearTimeout(this.ejectionTimer);
          for (const mapEntry of this.addressMap.values()) {
            this.uneject(mapEntry);
            mapEntry.ejectionTimeMultiplier = 0;
          }
        }
        this.latestConfig = lbConfig;
      }
      exitIdle() {
        this.childBalancer.exitIdle();
      }
      resetBackoff() {
        this.childBalancer.resetBackoff();
      }
      destroy() {
        clearTimeout(this.ejectionTimer);
        this.childBalancer.destroy();
      }
      getTypeName() {
        return TYPE_NAME;
      }
    };
    exports2.OutlierDetectionLoadBalancer = OutlierDetectionLoadBalancer;
    function setup() {
      if (OUTLIER_DETECTION_ENABLED) {
        (0, experimental_1.registerLoadBalancerType)(TYPE_NAME, OutlierDetectionLoadBalancer, OutlierDetectionLoadBalancingConfig);
      }
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/experimental.js
var require_experimental = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/experimental.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OutlierDetectionLoadBalancingConfig = exports2.BaseSubchannelWrapper = exports2.registerAdminService = exports2.FilterStackFactory = exports2.BaseFilter = exports2.PickResultType = exports2.QueuePicker = exports2.UnavailablePicker = exports2.ChildLoadBalancerHandler = exports2.subchannelAddressToString = exports2.validateLoadBalancingConfig = exports2.getFirstUsableConfig = exports2.registerLoadBalancerType = exports2.createChildChannelControlHelper = exports2.BackoffTimeout = exports2.durationToMs = exports2.uriToString = exports2.createResolver = exports2.registerResolver = exports2.log = exports2.trace = void 0;
    var logging_1 = require_logging();
    Object.defineProperty(exports2, "trace", { enumerable: true, get: function() {
      return logging_1.trace;
    } });
    Object.defineProperty(exports2, "log", { enumerable: true, get: function() {
      return logging_1.log;
    } });
    var resolver_1 = require_resolver();
    Object.defineProperty(exports2, "registerResolver", { enumerable: true, get: function() {
      return resolver_1.registerResolver;
    } });
    Object.defineProperty(exports2, "createResolver", { enumerable: true, get: function() {
      return resolver_1.createResolver;
    } });
    var uri_parser_1 = require_uri_parser();
    Object.defineProperty(exports2, "uriToString", { enumerable: true, get: function() {
      return uri_parser_1.uriToString;
    } });
    var duration_1 = require_duration();
    Object.defineProperty(exports2, "durationToMs", { enumerable: true, get: function() {
      return duration_1.durationToMs;
    } });
    var backoff_timeout_1 = require_backoff_timeout();
    Object.defineProperty(exports2, "BackoffTimeout", { enumerable: true, get: function() {
      return backoff_timeout_1.BackoffTimeout;
    } });
    var load_balancer_1 = require_load_balancer();
    Object.defineProperty(exports2, "createChildChannelControlHelper", { enumerable: true, get: function() {
      return load_balancer_1.createChildChannelControlHelper;
    } });
    Object.defineProperty(exports2, "registerLoadBalancerType", { enumerable: true, get: function() {
      return load_balancer_1.registerLoadBalancerType;
    } });
    Object.defineProperty(exports2, "getFirstUsableConfig", { enumerable: true, get: function() {
      return load_balancer_1.getFirstUsableConfig;
    } });
    Object.defineProperty(exports2, "validateLoadBalancingConfig", { enumerable: true, get: function() {
      return load_balancer_1.validateLoadBalancingConfig;
    } });
    var subchannel_address_1 = require_subchannel_address();
    Object.defineProperty(exports2, "subchannelAddressToString", { enumerable: true, get: function() {
      return subchannel_address_1.subchannelAddressToString;
    } });
    var load_balancer_child_handler_1 = require_load_balancer_child_handler();
    Object.defineProperty(exports2, "ChildLoadBalancerHandler", { enumerable: true, get: function() {
      return load_balancer_child_handler_1.ChildLoadBalancerHandler;
    } });
    var picker_1 = require_picker();
    Object.defineProperty(exports2, "UnavailablePicker", { enumerable: true, get: function() {
      return picker_1.UnavailablePicker;
    } });
    Object.defineProperty(exports2, "QueuePicker", { enumerable: true, get: function() {
      return picker_1.QueuePicker;
    } });
    Object.defineProperty(exports2, "PickResultType", { enumerable: true, get: function() {
      return picker_1.PickResultType;
    } });
    var filter_1 = require_filter();
    Object.defineProperty(exports2, "BaseFilter", { enumerable: true, get: function() {
      return filter_1.BaseFilter;
    } });
    var filter_stack_1 = require_filter_stack();
    Object.defineProperty(exports2, "FilterStackFactory", { enumerable: true, get: function() {
      return filter_stack_1.FilterStackFactory;
    } });
    var admin_1 = require_admin();
    Object.defineProperty(exports2, "registerAdminService", { enumerable: true, get: function() {
      return admin_1.registerAdminService;
    } });
    var subchannel_interface_1 = require_subchannel_interface();
    Object.defineProperty(exports2, "BaseSubchannelWrapper", { enumerable: true, get: function() {
      return subchannel_interface_1.BaseSubchannelWrapper;
    } });
    var load_balancer_outlier_detection_1 = require_load_balancer_outlier_detection();
    Object.defineProperty(exports2, "OutlierDetectionLoadBalancingConfig", { enumerable: true, get: function() {
      return load_balancer_outlier_detection_1.OutlierDetectionLoadBalancingConfig;
    } });
  }
});

// node_modules/@grpc/grpc-js/build/src/resolver-dns.js
var require_resolver_dns = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolver-dns.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setup = void 0;
    var resolver_1 = require_resolver();
    var dns = require("dns");
    var util = require("util");
    var service_config_1 = require_service_config();
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var logging = require_logging();
    var constants_2 = require_constants();
    var uri_parser_1 = require_uri_parser();
    var net_1 = require("net");
    var backoff_timeout_1 = require_backoff_timeout();
    var TRACER_NAME = "dns_resolver";
    function trace(text) {
      logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var DEFAULT_PORT = 443;
    var DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS = 3e4;
    var resolveTxtPromise = util.promisify(dns.resolveTxt);
    var dnsLookupPromise = util.promisify(dns.lookup);
    function mergeArrays(...arrays) {
      const result = [];
      for (let i = 0; i < Math.max.apply(null, arrays.map((array) => array.length)); i++) {
        for (const array of arrays) {
          if (i < array.length) {
            result.push(array[i]);
          }
        }
      }
      return result;
    }
    var DnsResolver = class {
      constructor(target, listener, channelOptions) {
        var _a, _b, _c;
        this.target = target;
        this.listener = listener;
        this.pendingLookupPromise = null;
        this.pendingTxtPromise = null;
        this.latestLookupResult = null;
        this.latestServiceConfig = null;
        this.latestServiceConfigError = null;
        this.continueResolving = false;
        this.isNextResolutionTimerRunning = false;
        this.isServiceConfigEnabled = true;
        trace("Resolver constructed for target " + (0, uri_parser_1.uriToString)(target));
        const hostPort = (0, uri_parser_1.splitHostPort)(target.path);
        if (hostPort === null) {
          this.ipResult = null;
          this.dnsHostname = null;
          this.port = null;
        } else {
          if ((0, net_1.isIPv4)(hostPort.host) || (0, net_1.isIPv6)(hostPort.host)) {
            this.ipResult = [
              {
                host: hostPort.host,
                port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT
              }
            ];
            this.dnsHostname = null;
            this.port = null;
          } else {
            this.ipResult = null;
            this.dnsHostname = hostPort.host;
            this.port = (_b = hostPort.port) !== null && _b !== void 0 ? _b : DEFAULT_PORT;
          }
        }
        this.percentage = Math.random() * 100;
        if (channelOptions["grpc.service_config_disable_resolution"] === 1) {
          this.isServiceConfigEnabled = false;
        }
        this.defaultResolutionError = {
          code: constants_1.Status.UNAVAILABLE,
          details: `Name resolution failed for target ${(0, uri_parser_1.uriToString)(this.target)}`,
          metadata: new metadata_1.Metadata()
        };
        const backoffOptions = {
          initialDelay: channelOptions["grpc.initial_reconnect_backoff_ms"],
          maxDelay: channelOptions["grpc.max_reconnect_backoff_ms"]
        };
        this.backoff = new backoff_timeout_1.BackoffTimeout(() => {
          if (this.continueResolving) {
            this.startResolutionWithBackoff();
          }
        }, backoffOptions);
        this.backoff.unref();
        this.minTimeBetweenResolutionsMs = (_c = channelOptions["grpc.dns_min_time_between_resolutions_ms"]) !== null && _c !== void 0 ? _c : DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS;
        this.nextResolutionTimer = setTimeout(() => {
        }, 0);
        clearTimeout(this.nextResolutionTimer);
      }
      /**
       * If the target is an IP address, just provide that address as a result.
       * Otherwise, initiate A, AAAA, and TXT lookups
       */
      startResolution() {
        if (this.ipResult !== null) {
          trace("Returning IP address for target " + (0, uri_parser_1.uriToString)(this.target));
          setImmediate(() => {
            this.listener.onSuccessfulResolution(this.ipResult, null, null, null, {});
          });
          this.backoff.stop();
          this.backoff.reset();
          this.stopNextResolutionTimer();
          return;
        }
        if (this.dnsHostname === null) {
          trace("Failed to parse DNS address " + (0, uri_parser_1.uriToString)(this.target));
          setImmediate(() => {
            this.listener.onError({
              code: constants_1.Status.UNAVAILABLE,
              details: `Failed to parse DNS address ${(0, uri_parser_1.uriToString)(this.target)}`,
              metadata: new metadata_1.Metadata()
            });
          });
          this.stopNextResolutionTimer();
        } else {
          if (this.pendingLookupPromise !== null) {
            return;
          }
          trace("Looking up DNS hostname " + this.dnsHostname);
          this.latestLookupResult = null;
          const hostname = this.dnsHostname;
          this.pendingLookupPromise = dnsLookupPromise(hostname, { all: true });
          this.pendingLookupPromise.then((addressList) => {
            if (this.pendingLookupPromise === null) {
              return;
            }
            this.pendingLookupPromise = null;
            this.backoff.reset();
            this.backoff.stop();
            const ip4Addresses = addressList.filter((addr) => addr.family === 4);
            const ip6Addresses = addressList.filter((addr) => addr.family === 6);
            this.latestLookupResult = mergeArrays(ip6Addresses, ip4Addresses).map((addr) => ({ host: addr.address, port: +this.port }));
            const allAddressesString = "[" + this.latestLookupResult.map((addr) => addr.host + ":" + addr.port).join(",") + "]";
            trace("Resolved addresses for target " + (0, uri_parser_1.uriToString)(this.target) + ": " + allAddressesString);
            if (this.latestLookupResult.length === 0) {
              this.listener.onError(this.defaultResolutionError);
              return;
            }
            this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});
          }, (err) => {
            if (this.pendingLookupPromise === null) {
              return;
            }
            trace("Resolution error for target " + (0, uri_parser_1.uriToString)(this.target) + ": " + err.message);
            this.pendingLookupPromise = null;
            this.stopNextResolutionTimer();
            this.listener.onError(this.defaultResolutionError);
          });
          if (this.isServiceConfigEnabled && this.pendingTxtPromise === null) {
            this.pendingTxtPromise = resolveTxtPromise(hostname);
            this.pendingTxtPromise.then((txtRecord) => {
              if (this.pendingTxtPromise === null) {
                return;
              }
              this.pendingTxtPromise = null;
              try {
                this.latestServiceConfig = (0, service_config_1.extractAndSelectServiceConfig)(txtRecord, this.percentage);
              } catch (err) {
                this.latestServiceConfigError = {
                  code: constants_1.Status.UNAVAILABLE,
                  details: `Parsing service config failed with error ${err.message}`,
                  metadata: new metadata_1.Metadata()
                };
              }
              if (this.latestLookupResult !== null) {
                this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});
              }
            }, (err) => {
            });
          }
        }
      }
      startNextResolutionTimer() {
        var _a, _b;
        clearTimeout(this.nextResolutionTimer);
        this.nextResolutionTimer = (_b = (_a = setTimeout(() => {
          this.stopNextResolutionTimer();
          if (this.continueResolving) {
            this.startResolutionWithBackoff();
          }
        }, this.minTimeBetweenResolutionsMs)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.isNextResolutionTimerRunning = true;
      }
      stopNextResolutionTimer() {
        clearTimeout(this.nextResolutionTimer);
        this.isNextResolutionTimerRunning = false;
      }
      startResolutionWithBackoff() {
        if (this.pendingLookupPromise === null) {
          this.continueResolving = false;
          this.backoff.runOnce();
          this.startNextResolutionTimer();
          this.startResolution();
        }
      }
      updateResolution() {
        if (this.pendingLookupPromise === null) {
          if (this.isNextResolutionTimerRunning || this.backoff.isRunning()) {
            if (this.isNextResolutionTimerRunning) {
              trace('resolution update delayed by "min time between resolutions" rate limit');
            } else {
              trace("resolution update delayed by backoff timer until " + this.backoff.getEndTime().toISOString());
            }
            this.continueResolving = true;
          } else {
            this.startResolutionWithBackoff();
          }
        }
      }
      /**
       * Reset the resolver to the same state it had when it was created. In-flight
       * DNS requests cannot be cancelled, but they are discarded and their results
       * will be ignored.
       */
      destroy() {
        this.continueResolving = false;
        this.backoff.reset();
        this.backoff.stop();
        this.stopNextResolutionTimer();
        this.pendingLookupPromise = null;
        this.pendingTxtPromise = null;
        this.latestLookupResult = null;
        this.latestServiceConfig = null;
        this.latestServiceConfigError = null;
      }
      /**
       * Get the default authority for the given target. For IP targets, that is
       * the IP address. For DNS targets, it is the hostname.
       * @param target
       */
      static getDefaultAuthority(target) {
        return target.path;
      }
    };
    function setup() {
      (0, resolver_1.registerResolver)("dns", DnsResolver);
      (0, resolver_1.registerDefaultScheme)("dns");
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/resolver-uds.js
var require_resolver_uds = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolver-uds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setup = void 0;
    var resolver_1 = require_resolver();
    var UdsResolver = class {
      constructor(target, listener, channelOptions) {
        this.listener = listener;
        this.addresses = [];
        let path;
        if (target.authority === "") {
          path = "/" + target.path;
        } else {
          path = target.path;
        }
        this.addresses = [{ path }];
      }
      updateResolution() {
        process.nextTick(this.listener.onSuccessfulResolution, this.addresses, null, null, null, {});
      }
      destroy() {
      }
      static getDefaultAuthority(target) {
        return "localhost";
      }
    };
    function setup() {
      (0, resolver_1.registerResolver)("unix", UdsResolver);
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/resolver-ip.js
var require_resolver_ip = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/resolver-ip.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setup = void 0;
    var net_1 = require("net");
    var constants_1 = require_constants();
    var metadata_1 = require_metadata();
    var resolver_1 = require_resolver();
    var uri_parser_1 = require_uri_parser();
    var logging = require_logging();
    var TRACER_NAME = "ip_resolver";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var IPV4_SCHEME = "ipv4";
    var IPV6_SCHEME = "ipv6";
    var DEFAULT_PORT = 443;
    var IpResolver = class {
      constructor(target, listener, channelOptions) {
        var _a;
        this.listener = listener;
        this.addresses = [];
        this.error = null;
        trace("Resolver constructed for target " + (0, uri_parser_1.uriToString)(target));
        const addresses = [];
        if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {
          this.error = {
            code: constants_1.Status.UNAVAILABLE,
            details: `Unrecognized scheme ${target.scheme} in IP resolver`,
            metadata: new metadata_1.Metadata()
          };
          return;
        }
        const pathList = target.path.split(",");
        for (const path of pathList) {
          const hostPort = (0, uri_parser_1.splitHostPort)(path);
          if (hostPort === null) {
            this.error = {
              code: constants_1.Status.UNAVAILABLE,
              details: `Failed to parse ${target.scheme} address ${path}`,
              metadata: new metadata_1.Metadata()
            };
            return;
          }
          if (target.scheme === IPV4_SCHEME && !(0, net_1.isIPv4)(hostPort.host) || target.scheme === IPV6_SCHEME && !(0, net_1.isIPv6)(hostPort.host)) {
            this.error = {
              code: constants_1.Status.UNAVAILABLE,
              details: `Failed to parse ${target.scheme} address ${path}`,
              metadata: new metadata_1.Metadata()
            };
            return;
          }
          addresses.push({
            host: hostPort.host,
            port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT
          });
        }
        this.addresses = addresses;
        trace("Parsed " + target.scheme + " address list " + this.addresses);
      }
      updateResolution() {
        process.nextTick(() => {
          if (this.error) {
            this.listener.onError(this.error);
          } else {
            this.listener.onSuccessfulResolution(this.addresses, null, null, null, {});
          }
        });
      }
      destroy() {
      }
      static getDefaultAuthority(target) {
        return target.path.split(",")[0];
      }
    };
    function setup() {
      (0, resolver_1.registerResolver)(IPV4_SCHEME, IpResolver);
      (0, resolver_1.registerResolver)(IPV6_SCHEME, IpResolver);
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js
var require_load_balancer_pick_first = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setup = exports2.PickFirstLoadBalancer = exports2.shuffled = exports2.PickFirstLoadBalancingConfig = void 0;
    var load_balancer_1 = require_load_balancer();
    var connectivity_state_1 = require_connectivity_state();
    var picker_1 = require_picker();
    var logging = require_logging();
    var constants_1 = require_constants();
    var TRACER_NAME = "pick_first";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var TYPE_NAME = "pick_first";
    var CONNECTION_DELAY_INTERVAL_MS = 250;
    var PickFirstLoadBalancingConfig = class _PickFirstLoadBalancingConfig {
      constructor(shuffleAddressList) {
        this.shuffleAddressList = shuffleAddressList;
      }
      getLoadBalancerName() {
        return TYPE_NAME;
      }
      toJsonObject() {
        return {
          [TYPE_NAME]: {
            shuffleAddressList: this.shuffleAddressList
          }
        };
      }
      getShuffleAddressList() {
        return this.shuffleAddressList;
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      static createFromJson(obj) {
        if ("shuffleAddressList" in obj && !(typeof obj.shuffleAddressList === "boolean")) {
          throw new Error("pick_first config field shuffleAddressList must be a boolean if provided");
        }
        return new _PickFirstLoadBalancingConfig(obj.shuffleAddressList === true);
      }
    };
    exports2.PickFirstLoadBalancingConfig = PickFirstLoadBalancingConfig;
    var PickFirstPicker = class {
      constructor(subchannel) {
        this.subchannel = subchannel;
      }
      pick(pickArgs) {
        return {
          pickResultType: picker_1.PickResultType.COMPLETE,
          subchannel: this.subchannel,
          status: null,
          onCallStarted: null,
          onCallEnded: null
        };
      }
    };
    function shuffled(list) {
      const result = list.slice();
      for (let i = result.length - 1; i > 1; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        const temp = result[i];
        result[i] = result[j];
        result[j] = temp;
      }
      return result;
    }
    exports2.shuffled = shuffled;
    var PickFirstLoadBalancer = class {
      /**
       * Load balancer that attempts to connect to each backend in the address list
       * in order, and picks the first one that connects, using it for every
       * request.
       * @param channelControlHelper `ChannelControlHelper` instance provided by
       *     this load balancer's owner.
       */
      constructor(channelControlHelper) {
        this.channelControlHelper = channelControlHelper;
        this.children = [];
        this.currentState = connectivity_state_1.ConnectivityState.IDLE;
        this.currentSubchannelIndex = 0;
        this.currentPick = null;
        this.subchannelStateListener = (subchannel, previousState, newState) => {
          this.onSubchannelStateUpdate(subchannel, previousState, newState);
        };
        this.triedAllSubchannels = false;
        this.stickyTransientFailureMode = false;
        this.connectionDelayTimeout = setTimeout(() => {
        }, 0);
        clearTimeout(this.connectionDelayTimeout);
      }
      allChildrenHaveReportedTF() {
        return this.children.every((child) => child.hasReportedTransientFailure);
      }
      calculateAndReportNewState() {
        if (this.currentPick) {
          this.updateState(connectivity_state_1.ConnectivityState.READY, new PickFirstPicker(this.currentPick));
        } else if (this.children.length === 0) {
          this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));
        } else {
          if (this.stickyTransientFailureMode) {
            this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker());
          } else {
            this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
          }
        }
      }
      maybeEnterStickyTransientFailureMode() {
        if (this.stickyTransientFailureMode) {
          return;
        }
        if (!this.allChildrenHaveReportedTF()) {
          return;
        }
        this.stickyTransientFailureMode = true;
        this.channelControlHelper.requestReresolution();
        for (const { subchannel } of this.children) {
          subchannel.startConnecting();
        }
        this.calculateAndReportNewState();
      }
      removeCurrentPick() {
        if (this.currentPick !== null) {
          const currentPick = this.currentPick;
          this.currentPick = null;
          currentPick.unref();
          currentPick.removeConnectivityStateListener(this.subchannelStateListener);
          this.channelControlHelper.removeChannelzChild(currentPick.getChannelzRef());
        }
      }
      onSubchannelStateUpdate(subchannel, previousState, newState) {
        var _a;
        if ((_a = this.currentPick) === null || _a === void 0 ? void 0 : _a.realSubchannelEquals(subchannel)) {
          if (newState !== connectivity_state_1.ConnectivityState.READY) {
            this.removeCurrentPick();
            this.calculateAndReportNewState();
            this.channelControlHelper.requestReresolution();
          }
          return;
        }
        for (const [index, child] of this.children.entries()) {
          if (subchannel.realSubchannelEquals(child.subchannel)) {
            if (newState === connectivity_state_1.ConnectivityState.READY) {
              this.pickSubchannel(child.subchannel);
            }
            if (newState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {
              child.hasReportedTransientFailure = true;
              this.maybeEnterStickyTransientFailureMode();
              if (index === this.currentSubchannelIndex) {
                this.startNextSubchannelConnecting(index + 1);
              }
            }
            child.subchannel.startConnecting();
            return;
          }
        }
      }
      startNextSubchannelConnecting(startIndex) {
        clearTimeout(this.connectionDelayTimeout);
        if (this.triedAllSubchannels || this.stickyTransientFailureMode) {
          return;
        }
        for (const [index, child] of this.children.entries()) {
          if (index >= startIndex) {
            const subchannelState = child.subchannel.getConnectivityState();
            if (subchannelState === connectivity_state_1.ConnectivityState.IDLE || subchannelState === connectivity_state_1.ConnectivityState.CONNECTING) {
              this.startConnecting(index);
              return;
            }
          }
        }
        this.triedAllSubchannels = true;
        this.maybeEnterStickyTransientFailureMode();
      }
      /**
       * Have a single subchannel in the `subchannels` list start connecting.
       * @param subchannelIndex The index into the `subchannels` list.
       */
      startConnecting(subchannelIndex) {
        var _a, _b;
        clearTimeout(this.connectionDelayTimeout);
        this.currentSubchannelIndex = subchannelIndex;
        if (this.children[subchannelIndex].subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.IDLE) {
          trace("Start connecting to subchannel with address " + this.children[subchannelIndex].subchannel.getAddress());
          process.nextTick(() => {
            var _a2;
            (_a2 = this.children[subchannelIndex]) === null || _a2 === void 0 ? void 0 : _a2.subchannel.startConnecting();
          });
        }
        this.connectionDelayTimeout = (_b = (_a = setTimeout(() => {
          this.startNextSubchannelConnecting(subchannelIndex + 1);
        }, CONNECTION_DELAY_INTERVAL_MS)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
      }
      pickSubchannel(subchannel) {
        if (this.currentPick && subchannel.realSubchannelEquals(this.currentPick)) {
          return;
        }
        trace("Pick subchannel with address " + subchannel.getAddress());
        this.stickyTransientFailureMode = false;
        if (this.currentPick !== null) {
          this.currentPick.unref();
          this.channelControlHelper.removeChannelzChild(this.currentPick.getChannelzRef());
          this.currentPick.removeConnectivityStateListener(this.subchannelStateListener);
        }
        this.currentPick = subchannel;
        subchannel.ref();
        this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());
        this.resetSubchannelList();
        clearTimeout(this.connectionDelayTimeout);
        this.calculateAndReportNewState();
      }
      updateState(newState, picker) {
        trace(connectivity_state_1.ConnectivityState[this.currentState] + " -> " + connectivity_state_1.ConnectivityState[newState]);
        this.currentState = newState;
        this.channelControlHelper.updateState(newState, picker);
      }
      resetSubchannelList() {
        for (const child of this.children) {
          if (child.subchannel !== this.currentPick) {
            child.subchannel.removeConnectivityStateListener(this.subchannelStateListener);
          }
          child.subchannel.unref();
          this.channelControlHelper.removeChannelzChild(child.subchannel.getChannelzRef());
        }
        this.currentSubchannelIndex = 0;
        this.children = [];
        this.triedAllSubchannels = false;
      }
      updateAddressList(addressList, lbConfig) {
        if (!(lbConfig instanceof PickFirstLoadBalancingConfig)) {
          return;
        }
        if (lbConfig.getShuffleAddressList()) {
          addressList = shuffled(addressList);
        }
        const newChildrenList = addressList.map((address) => ({
          subchannel: this.channelControlHelper.createSubchannel(address, {}),
          hasReportedTransientFailure: false
        }));
        for (const { subchannel } of newChildrenList) {
          subchannel.ref();
          this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());
        }
        this.resetSubchannelList();
        this.children = newChildrenList;
        for (const { subchannel } of this.children) {
          subchannel.addConnectivityStateListener(this.subchannelStateListener);
          if (subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.READY) {
            this.pickSubchannel(subchannel);
            return;
          }
        }
        for (const child of this.children) {
          if (child.subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {
            child.hasReportedTransientFailure = true;
          }
        }
        this.startNextSubchannelConnecting(0);
        this.calculateAndReportNewState();
      }
      exitIdle() {
      }
      resetBackoff() {
      }
      destroy() {
        this.resetSubchannelList();
        this.removeCurrentPick();
      }
      getTypeName() {
        return TYPE_NAME;
      }
    };
    exports2.PickFirstLoadBalancer = PickFirstLoadBalancer;
    function setup() {
      (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, PickFirstLoadBalancer, PickFirstLoadBalancingConfig);
      (0, load_balancer_1.registerDefaultLoadBalancerType)(TYPE_NAME);
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js
var require_load_balancer_round_robin = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setup = exports2.RoundRobinLoadBalancer = void 0;
    var load_balancer_1 = require_load_balancer();
    var connectivity_state_1 = require_connectivity_state();
    var picker_1 = require_picker();
    var subchannel_address_1 = require_subchannel_address();
    var logging = require_logging();
    var constants_1 = require_constants();
    var TRACER_NAME = "round_robin";
    function trace(text) {
      logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
    }
    var TYPE_NAME = "round_robin";
    var RoundRobinLoadBalancingConfig = class _RoundRobinLoadBalancingConfig {
      getLoadBalancerName() {
        return TYPE_NAME;
      }
      constructor() {
      }
      toJsonObject() {
        return {
          [TYPE_NAME]: {}
        };
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      static createFromJson(obj) {
        return new _RoundRobinLoadBalancingConfig();
      }
    };
    var RoundRobinPicker = class {
      constructor(subchannelList, nextIndex = 0) {
        this.subchannelList = subchannelList;
        this.nextIndex = nextIndex;
      }
      pick(pickArgs) {
        const pickedSubchannel = this.subchannelList[this.nextIndex];
        this.nextIndex = (this.nextIndex + 1) % this.subchannelList.length;
        return {
          pickResultType: picker_1.PickResultType.COMPLETE,
          subchannel: pickedSubchannel,
          status: null,
          onCallStarted: null,
          onCallEnded: null
        };
      }
      /**
       * Check what the next subchannel returned would be. Used by the load
       * balancer implementation to preserve this part of the picker state if
       * possible when a subchannel connects or disconnects.
       */
      peekNextSubchannel() {
        return this.subchannelList[this.nextIndex];
      }
    };
    var RoundRobinLoadBalancer = class {
      constructor(channelControlHelper) {
        this.channelControlHelper = channelControlHelper;
        this.subchannels = [];
        this.currentState = connectivity_state_1.ConnectivityState.IDLE;
        this.currentReadyPicker = null;
        this.subchannelStateListener = (subchannel, previousState, newState) => {
          this.calculateAndUpdateState();
          if (newState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE || newState === connectivity_state_1.ConnectivityState.IDLE) {
            this.channelControlHelper.requestReresolution();
            subchannel.startConnecting();
          }
        };
      }
      countSubchannelsWithState(state) {
        return this.subchannels.filter((subchannel) => subchannel.getConnectivityState() === state).length;
      }
      calculateAndUpdateState() {
        if (this.countSubchannelsWithState(connectivity_state_1.ConnectivityState.READY) > 0) {
          const readySubchannels = this.subchannels.filter((subchannel) => subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.READY);
          let index = 0;
          if (this.currentReadyPicker !== null) {
            index = readySubchannels.indexOf(this.currentReadyPicker.peekNextSubchannel());
            if (index < 0) {
              index = 0;
            }
          }
          this.updateState(connectivity_state_1.ConnectivityState.READY, new RoundRobinPicker(readySubchannels, index));
        } else if (this.countSubchannelsWithState(connectivity_state_1.ConnectivityState.CONNECTING) > 0) {
          this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
        } else if (this.countSubchannelsWithState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) > 0) {
          this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker());
        } else {
          this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));
        }
      }
      updateState(newState, picker) {
        trace(connectivity_state_1.ConnectivityState[this.currentState] + " -> " + connectivity_state_1.ConnectivityState[newState]);
        if (newState === connectivity_state_1.ConnectivityState.READY) {
          this.currentReadyPicker = picker;
        } else {
          this.currentReadyPicker = null;
        }
        this.currentState = newState;
        this.channelControlHelper.updateState(newState, picker);
      }
      resetSubchannelList() {
        for (const subchannel of this.subchannels) {
          subchannel.removeConnectivityStateListener(this.subchannelStateListener);
          subchannel.unref();
          this.channelControlHelper.removeChannelzChild(subchannel.getChannelzRef());
        }
        this.subchannels = [];
      }
      updateAddressList(addressList, lbConfig) {
        this.resetSubchannelList();
        trace("Connect to address list " + addressList.map((address) => (0, subchannel_address_1.subchannelAddressToString)(address)));
        this.subchannels = addressList.map((address) => this.channelControlHelper.createSubchannel(address, {}));
        for (const subchannel of this.subchannels) {
          subchannel.ref();
          subchannel.addConnectivityStateListener(this.subchannelStateListener);
          this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());
          const subchannelState = subchannel.getConnectivityState();
          if (subchannelState === connectivity_state_1.ConnectivityState.IDLE || subchannelState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {
            subchannel.startConnecting();
          }
        }
        this.calculateAndUpdateState();
      }
      exitIdle() {
        for (const subchannel of this.subchannels) {
          subchannel.startConnecting();
        }
      }
      resetBackoff() {
      }
      destroy() {
        this.resetSubchannelList();
      }
      getTypeName() {
        return TYPE_NAME;
      }
    };
    exports2.RoundRobinLoadBalancer = RoundRobinLoadBalancer;
    function setup() {
      (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, RoundRobinLoadBalancer, RoundRobinLoadBalancingConfig);
    }
    exports2.setup = setup;
  }
});

// node_modules/@grpc/grpc-js/build/src/index.js
var require_src3 = __commonJS({
  "node_modules/@grpc/grpc-js/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.experimental = exports2.addAdminServicesToServer = exports2.getChannelzHandlers = exports2.getChannelzServiceDefinition = exports2.InterceptorConfigurationError = exports2.InterceptingCall = exports2.RequesterBuilder = exports2.ListenerBuilder = exports2.StatusBuilder = exports2.getClientChannel = exports2.ServerCredentials = exports2.Server = exports2.setLogVerbosity = exports2.setLogger = exports2.load = exports2.loadObject = exports2.CallCredentials = exports2.ChannelCredentials = exports2.waitForClientReady = exports2.closeClient = exports2.Channel = exports2.makeGenericClientConstructor = exports2.makeClientConstructor = exports2.loadPackageDefinition = exports2.Client = exports2.compressionAlgorithms = exports2.propagate = exports2.connectivityState = exports2.status = exports2.logVerbosity = exports2.Metadata = exports2.credentials = void 0;
    var call_credentials_1 = require_call_credentials();
    Object.defineProperty(exports2, "CallCredentials", { enumerable: true, get: function() {
      return call_credentials_1.CallCredentials;
    } });
    var channel_1 = require_channel();
    Object.defineProperty(exports2, "Channel", { enumerable: true, get: function() {
      return channel_1.ChannelImplementation;
    } });
    var compression_algorithms_1 = require_compression_algorithms();
    Object.defineProperty(exports2, "compressionAlgorithms", { enumerable: true, get: function() {
      return compression_algorithms_1.CompressionAlgorithms;
    } });
    var connectivity_state_1 = require_connectivity_state();
    Object.defineProperty(exports2, "connectivityState", { enumerable: true, get: function() {
      return connectivity_state_1.ConnectivityState;
    } });
    var channel_credentials_1 = require_channel_credentials();
    Object.defineProperty(exports2, "ChannelCredentials", { enumerable: true, get: function() {
      return channel_credentials_1.ChannelCredentials;
    } });
    var client_1 = require_client();
    Object.defineProperty(exports2, "Client", { enumerable: true, get: function() {
      return client_1.Client;
    } });
    var constants_1 = require_constants();
    Object.defineProperty(exports2, "logVerbosity", { enumerable: true, get: function() {
      return constants_1.LogVerbosity;
    } });
    Object.defineProperty(exports2, "status", { enumerable: true, get: function() {
      return constants_1.Status;
    } });
    Object.defineProperty(exports2, "propagate", { enumerable: true, get: function() {
      return constants_1.Propagate;
    } });
    var logging = require_logging();
    var make_client_1 = require_make_client();
    Object.defineProperty(exports2, "loadPackageDefinition", { enumerable: true, get: function() {
      return make_client_1.loadPackageDefinition;
    } });
    Object.defineProperty(exports2, "makeClientConstructor", { enumerable: true, get: function() {
      return make_client_1.makeClientConstructor;
    } });
    Object.defineProperty(exports2, "makeGenericClientConstructor", { enumerable: true, get: function() {
      return make_client_1.makeClientConstructor;
    } });
    var metadata_1 = require_metadata();
    Object.defineProperty(exports2, "Metadata", { enumerable: true, get: function() {
      return metadata_1.Metadata;
    } });
    var server_1 = require_server();
    Object.defineProperty(exports2, "Server", { enumerable: true, get: function() {
      return server_1.Server;
    } });
    var server_credentials_1 = require_server_credentials();
    Object.defineProperty(exports2, "ServerCredentials", { enumerable: true, get: function() {
      return server_credentials_1.ServerCredentials;
    } });
    var status_builder_1 = require_status_builder();
    Object.defineProperty(exports2, "StatusBuilder", { enumerable: true, get: function() {
      return status_builder_1.StatusBuilder;
    } });
    exports2.credentials = {
      /**
       * Combine a ChannelCredentials with any number of CallCredentials into a
       * single ChannelCredentials object.
       * @param channelCredentials The ChannelCredentials object.
       * @param callCredentials Any number of CallCredentials objects.
       * @return The resulting ChannelCredentials object.
       */
      combineChannelCredentials: (channelCredentials, ...callCredentials) => {
        return callCredentials.reduce((acc, other) => acc.compose(other), channelCredentials);
      },
      /**
       * Combine any number of CallCredentials into a single CallCredentials
       * object.
       * @param first The first CallCredentials object.
       * @param additional Any number of additional CallCredentials objects.
       * @return The resulting CallCredentials object.
       */
      combineCallCredentials: (first, ...additional) => {
        return additional.reduce((acc, other) => acc.compose(other), first);
      },
      // from channel-credentials.ts
      createInsecure: channel_credentials_1.ChannelCredentials.createInsecure,
      createSsl: channel_credentials_1.ChannelCredentials.createSsl,
      createFromSecureContext: channel_credentials_1.ChannelCredentials.createFromSecureContext,
      // from call-credentials.ts
      createFromMetadataGenerator: call_credentials_1.CallCredentials.createFromMetadataGenerator,
      createFromGoogleCredential: call_credentials_1.CallCredentials.createFromGoogleCredential,
      createEmpty: call_credentials_1.CallCredentials.createEmpty
    };
    var closeClient = (client2) => client2.close();
    exports2.closeClient = closeClient;
    var waitForClientReady = (client2, deadline, callback) => client2.waitForReady(deadline, callback);
    exports2.waitForClientReady = waitForClientReady;
    var loadObject = (value, options) => {
      throw new Error("Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead");
    };
    exports2.loadObject = loadObject;
    var load = (filename, format, options) => {
      throw new Error("Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead");
    };
    exports2.load = load;
    var setLogger = (logger) => {
      logging.setLogger(logger);
    };
    exports2.setLogger = setLogger;
    var setLogVerbosity = (verbosity) => {
      logging.setLoggerVerbosity(verbosity);
    };
    exports2.setLogVerbosity = setLogVerbosity;
    var getClientChannel = (client2) => {
      return client_1.Client.prototype.getChannel.call(client2);
    };
    exports2.getClientChannel = getClientChannel;
    var client_interceptors_1 = require_client_interceptors();
    Object.defineProperty(exports2, "ListenerBuilder", { enumerable: true, get: function() {
      return client_interceptors_1.ListenerBuilder;
    } });
    Object.defineProperty(exports2, "RequesterBuilder", { enumerable: true, get: function() {
      return client_interceptors_1.RequesterBuilder;
    } });
    Object.defineProperty(exports2, "InterceptingCall", { enumerable: true, get: function() {
      return client_interceptors_1.InterceptingCall;
    } });
    Object.defineProperty(exports2, "InterceptorConfigurationError", { enumerable: true, get: function() {
      return client_interceptors_1.InterceptorConfigurationError;
    } });
    var channelz_1 = require_channelz();
    Object.defineProperty(exports2, "getChannelzServiceDefinition", { enumerable: true, get: function() {
      return channelz_1.getChannelzServiceDefinition;
    } });
    Object.defineProperty(exports2, "getChannelzHandlers", { enumerable: true, get: function() {
      return channelz_1.getChannelzHandlers;
    } });
    var admin_1 = require_admin();
    Object.defineProperty(exports2, "addAdminServicesToServer", { enumerable: true, get: function() {
      return admin_1.addAdminServicesToServer;
    } });
    var experimental = require_experimental();
    exports2.experimental = experimental;
    var resolver_dns = require_resolver_dns();
    var resolver_uds = require_resolver_uds();
    var resolver_ip = require_resolver_ip();
    var load_balancer_pick_first = require_load_balancer_pick_first();
    var load_balancer_round_robin = require_load_balancer_round_robin();
    var load_balancer_outlier_detection = require_load_balancer_outlier_detection();
    var channelz = require_channelz();
    var clientVersion = require_package2().version;
    (() => {
      logging.trace(constants_1.LogVerbosity.DEBUG, "index", "Loading @grpc/grpc-js version " + clientVersion);
      resolver_dns.setup();
      resolver_uds.setup();
      resolver_ip.setup();
      load_balancer_pick_first.setup();
      load_balancer_round_robin.setup();
      load_balancer_outlier_detection.setup();
      channelz.setup();
    })();
  }
});

// node_modules/extend/index.js
var require_extend = __commonJS({
  "node_modules/extend/index.js"(exports2, module2) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var defineProperty = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;
    var isArray = function isArray2(arr) {
      if (typeof Array.isArray === "function") {
        return Array.isArray(arr);
      }
      return toStr.call(arr) === "[object Array]";
    };
    var isPlainObject = function isPlainObject2(obj) {
      if (!obj || toStr.call(obj) !== "[object Object]") {
        return false;
      }
      var hasOwnConstructor = hasOwn.call(obj, "constructor");
      var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false;
      }
      var key;
      for (key in obj) {
      }
      return typeof key === "undefined" || hasOwn.call(obj, key);
    };
    var setProperty = function setProperty2(target, options) {
      if (defineProperty && options.name === "__proto__") {
        defineProperty(target, options.name, {
          enumerable: true,
          configurable: true,
          value: options.newValue,
          writable: true
        });
      } else {
        target[options.name] = options.newValue;
      }
    };
    var getProperty = function getProperty2(obj, name) {
      if (name === "__proto__") {
        if (!hasOwn.call(obj, name)) {
          return void 0;
        } else if (gOPD) {
          return gOPD(obj, name).value;
        }
      }
      return obj[name];
    };
    module2.exports = function extend() {
      var options, name, src, copy, copyIsArray, clone;
      var target = arguments[0];
      var i = 1;
      var length = arguments.length;
      var deep = false;
      if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        i = 2;
      }
      if (target == null || typeof target !== "object" && typeof target !== "function") {
        target = {};
      }
      for (; i < length; ++i) {
        options = arguments[i];
        if (options != null) {
          for (name in options) {
            src = getProperty(target, name);
            copy = getProperty(options, name);
            if (target !== copy) {
              if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && isArray(src) ? src : [];
                } else {
                  clone = src && isPlainObject(src) ? src : {};
                }
                setProperty(target, { name, newValue: extend(deep, clone, copy) });
              } else if (typeof copy !== "undefined") {
                setProperty(target, { name, newValue: copy });
              }
            }
          }
        }
      }
      return target;
    };
  }
});

// node_modules/webidl-conversions/lib/index.js
var require_lib = __commonJS({
  "node_modules/webidl-conversions/lib/index.js"(exports2, module2) {
    "use strict";
    var conversions = {};
    module2.exports = conversions;
    function sign(x) {
      return x < 0 ? -1 : 1;
    }
    function evenRound(x) {
      if (x % 1 === 0.5 && (x & 1) === 0) {
        return Math.floor(x);
      } else {
        return Math.round(x);
      }
    }
    function createNumberConversion(bitLength, typeOpts) {
      if (!typeOpts.unsigned) {
        --bitLength;
      }
      const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
      const upperBound = Math.pow(2, bitLength) - 1;
      const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
      const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
      return function(V, opts) {
        if (!opts)
          opts = {};
        let x = +V;
        if (opts.enforceRange) {
          if (!Number.isFinite(x)) {
            throw new TypeError("Argument is not a finite number");
          }
          x = sign(x) * Math.floor(Math.abs(x));
          if (x < lowerBound || x > upperBound) {
            throw new TypeError("Argument is not in byte range");
          }
          return x;
        }
        if (!isNaN(x) && opts.clamp) {
          x = evenRound(x);
          if (x < lowerBound)
            x = lowerBound;
          if (x > upperBound)
            x = upperBound;
          return x;
        }
        if (!Number.isFinite(x) || x === 0) {
          return 0;
        }
        x = sign(x) * Math.floor(Math.abs(x));
        x = x % moduloVal;
        if (!typeOpts.unsigned && x >= moduloBound) {
          return x - moduloVal;
        } else if (typeOpts.unsigned) {
          if (x < 0) {
            x += moduloVal;
          } else if (x === -0) {
            return 0;
          }
        }
        return x;
      };
    }
    conversions["void"] = function() {
      return void 0;
    };
    conversions["boolean"] = function(val) {
      return !!val;
    };
    conversions["byte"] = createNumberConversion(8, { unsigned: false });
    conversions["octet"] = createNumberConversion(8, { unsigned: true });
    conversions["short"] = createNumberConversion(16, { unsigned: false });
    conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });
    conversions["long"] = createNumberConversion(32, { unsigned: false });
    conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });
    conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
    conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });
    conversions["double"] = function(V) {
      const x = +V;
      if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite floating-point value");
      }
      return x;
    };
    conversions["unrestricted double"] = function(V) {
      const x = +V;
      if (isNaN(x)) {
        throw new TypeError("Argument is NaN");
      }
      return x;
    };
    conversions["float"] = conversions["double"];
    conversions["unrestricted float"] = conversions["unrestricted double"];
    conversions["DOMString"] = function(V, opts) {
      if (!opts)
        opts = {};
      if (opts.treatNullAsEmptyString && V === null) {
        return "";
      }
      return String(V);
    };
    conversions["ByteString"] = function(V, opts) {
      const x = String(V);
      let c = void 0;
      for (let i = 0; (c = x.codePointAt(i)) !== void 0; ++i) {
        if (c > 255) {
          throw new TypeError("Argument is not a valid bytestring");
        }
      }
      return x;
    };
    conversions["USVString"] = function(V) {
      const S = String(V);
      const n = S.length;
      const U = [];
      for (let i = 0; i < n; ++i) {
        const c = S.charCodeAt(i);
        if (c < 55296 || c > 57343) {
          U.push(String.fromCodePoint(c));
        } else if (56320 <= c && c <= 57343) {
          U.push(String.fromCodePoint(65533));
        } else {
          if (i === n - 1) {
            U.push(String.fromCodePoint(65533));
          } else {
            const d = S.charCodeAt(i + 1);
            if (56320 <= d && d <= 57343) {
              const a = c & 1023;
              const b = d & 1023;
              U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
              ++i;
            } else {
              U.push(String.fromCodePoint(65533));
            }
          }
        }
      }
      return U.join("");
    };
    conversions["Date"] = function(V, opts) {
      if (!(V instanceof Date)) {
        throw new TypeError("Argument is not a Date object");
      }
      if (isNaN(V)) {
        return void 0;
      }
      return V;
    };
    conversions["RegExp"] = function(V, opts) {
      if (!(V instanceof RegExp)) {
        V = new RegExp(V);
      }
      return V;
    };
  }
});

// node_modules/whatwg-url/lib/utils.js
var require_utils = __commonJS({
  "node_modules/whatwg-url/lib/utils.js"(exports2, module2) {
    "use strict";
    module2.exports.mixin = function mixin(target, source) {
      const keys = Object.getOwnPropertyNames(source);
      for (let i = 0; i < keys.length; ++i) {
        Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
      }
    };
    module2.exports.wrapperSymbol = Symbol("wrapper");
    module2.exports.implSymbol = Symbol("impl");
    module2.exports.wrapperForImpl = function(impl) {
      return impl[module2.exports.wrapperSymbol];
    };
    module2.exports.implForWrapper = function(wrapper) {
      return wrapper[module2.exports.implSymbol];
    };
  }
});

// node_modules/tr46/lib/mappingTable.json
var require_mappingTable = __commonJS({
  "node_modules/tr46/lib/mappingTable.json"(exports2, module2) {
    module2.exports = [[[0, 44], "disallowed_STD3_valid"], [[45, 46], "valid"], [[47, 47], "disallowed_STD3_valid"], [[48, 57], "valid"], [[58, 64], "disallowed_STD3_valid"], [[65, 65], "mapped", [97]], [[66, 66], "mapped", [98]], [[67, 67], "mapped", [99]], [[68, 68], "mapped", [100]], [[69, 69], "mapped", [101]], [[70, 70], "mapped", [102]], [[71, 71], "mapped", [103]], [[72, 72], "mapped", [104]], [[73, 73], "mapped", [105]], [[74, 74], "mapped", [106]], [[75, 75], "mapped", [107]], [[76, 76], "mapped", [108]], [[77, 77], "mapped", [109]], [[78, 78], "mapped", [110]], [[79, 79], "mapped", [111]], [[80, 80], "mapped", [112]], [[81, 81], "mapped", [113]], [[82, 82], "mapped", [114]], [[83, 83], "mapped", [115]], [[84, 84], "mapped", [116]], [[85, 85], "mapped", [117]], [[86, 86], "mapped", [118]], [[87, 87], "mapped", [119]], [[88, 88], "mapped", [120]], [[89, 89], "mapped", [121]], [[90, 90], "mapped", [122]], [[91, 96], "disallowed_STD3_valid"], [[97, 122], "valid"], [[123, 127], "disallowed_STD3_valid"], [[128, 159], "disallowed"], [[160, 160], "disallowed_STD3_mapped", [32]], [[161, 167], "valid", [], "NV8"], [[168, 168], "disallowed_STD3_mapped", [32, 776]], [[169, 169], "valid", [], "NV8"], [[170, 170], "mapped", [97]], [[171, 172], "valid", [], "NV8"], [[173, 173], "ignored"], [[174, 174], "valid", [], "NV8"], [[175, 175], "disallowed_STD3_mapped", [32, 772]], [[176, 177], "valid", [], "NV8"], [[178, 178], "mapped", [50]], [[179, 179], "mapped", [51]], [[180, 180], "disallowed_STD3_mapped", [32, 769]], [[181, 181], "mapped", [956]], [[182, 182], "valid", [], "NV8"], [[183, 183], "valid"], [[184, 184], "disallowed_STD3_mapped", [32, 807]], [[185, 185], "mapped", [49]], [[186, 186], "mapped", [111]], [[187, 187], "valid", [], "NV8"], [[188, 188], "mapped", [49, 8260, 52]], [[189, 189], "mapped", [49, 8260, 50]], [[190, 190], "mapped", [51, 8260, 52]], [[191, 191], "valid", [], "NV8"], [[192, 192], "mapped", [224]], [[193, 193], "mapped", [225]], [[194, 194], "mapped", [226]], [[195, 195], "mapped", [227]], [[196, 196], "mapped", [228]], [[197, 197], "mapped", [229]], [[198, 198], "mapped", [230]], [[199, 199], "mapped", [231]], [[200, 200], "mapped", [232]], [[201, 201], "mapped", [233]], [[202, 202], "mapped", [234]], [[203, 203], "mapped", [235]], [[204, 204], "mapped", [236]], [[205, 205], "mapped", [237]], [[206, 206], "mapped", [238]], [[207, 207], "mapped", [239]], [[208, 208], "mapped", [240]], [[209, 209], "mapped", [241]], [[210, 210], "mapped", [242]], [[211, 211], "mapped", [243]], [[212, 212], "mapped", [244]], [[213, 213], "mapped", [245]], [[214, 214], "mapped", [246]], [[215, 215], "valid", [], "NV8"], [[216, 216], "mapped", [248]], [[217, 217], "mapped", [249]], [[218, 218], "mapped", [250]], [[219, 219], "mapped", [251]], [[220, 220], "mapped", [252]], [[221, 221], "mapped", [253]], [[222, 222], "mapped", [254]], [[223, 223], "deviation", [115, 115]], [[224, 246], "valid"], [[247, 247], "valid", [], "NV8"], [[248, 255], "valid"], [[256, 256], "mapped", [257]], [[257, 257], "valid"], [[258, 258], "mapped", [259]], [[259, 259], "valid"], [[260, 260], "mapped", [261]], [[261, 261], "valid"], [[262, 262], "mapped", [263]], [[263, 263], "valid"], [[264, 264], "mapped", [265]], [[265, 265], "valid"], [[266, 266], "mapped", [267]], [[267, 267], "valid"], [[268, 268], "mapped", [269]], [[269, 269], "valid"], [[270, 270], "mapped", [271]], [[271, 271], "valid"], [[272, 272], "mapped", [273]], [[273, 273], "valid"], [[274, 274], "mapped", [275]], [[275, 275], "valid"], [[276, 276], "mapped", [277]], [[277, 277], "valid"], [[278, 278], "mapped", [279]], [[279, 279], "valid"], [[280, 280], "mapped", [281]], [[281, 281], "valid"], [[282, 282], "mapped", [283]], [[283, 283], "valid"], [[284, 284], "mapped", [285]], [[285, 285], "valid"], [[286, 286], "mapped", [287]], [[287, 287], "valid"], [[288, 288], "mapped", [289]], [[289, 289], "valid"], [[290, 290], "mapped", [291]], [[291, 291], "valid"], [[292, 292], "mapped", [293]], [[293, 293], "valid"], [[294, 294], "mapped", [295]], [[295, 295], "valid"], [[296, 296], "mapped", [297]], [[297, 297], "valid"], [[298, 298], "mapped", [299]], [[299, 299], "valid"], [[300, 300], "mapped", [301]], [[301, 301], "valid"], [[302, 302], "mapped", [303]], [[303, 303], "valid"], [[304, 304], "mapped", [105, 775]], [[305, 305], "valid"], [[306, 307], "mapped", [105, 106]], [[308, 308], "mapped", [309]], [[309, 309], "valid"], [[310, 310], "mapped", [311]], [[311, 312], "valid"], [[313, 313], "mapped", [314]], [[314, 314], "valid"], [[315, 315], "mapped", [316]], [[316, 316], "valid"], [[317, 317], "mapped", [318]], [[318, 318], "valid"], [[319, 320], "mapped", [108, 183]], [[321, 321], "mapped", [322]], [[322, 322], "valid"], [[323, 323], "mapped", [324]], [[324, 324], "valid"], [[325, 325], "mapped", [326]], [[326, 326], "valid"], [[327, 327], "mapped", [328]], [[328, 328], "valid"], [[329, 329], "mapped", [700, 110]], [[330, 330], "mapped", [331]], [[331, 331], "valid"], [[332, 332], "mapped", [333]], [[333, 333], "valid"], [[334, 334], "mapped", [335]], [[335, 335], "valid"], [[336, 336], "mapped", [337]], [[337, 337], "valid"], [[338, 338], "mapped", [339]], [[339, 339], "valid"], [[340, 340], "mapped", [341]], [[341, 341], "valid"], [[342, 342], "mapped", [343]], [[343, 343], "valid"], [[344, 344], "mapped", [345]], [[345, 345], "valid"], [[346, 346], "mapped", [347]], [[347, 347], "valid"], [[348, 348], "mapped", [349]], [[349, 349], "valid"], [[350, 350], "mapped", [351]], [[351, 351], "valid"], [[352, 352], "mapped", [353]], [[353, 353], "valid"], [[354, 354], "mapped", [355]], [[355, 355], "valid"], [[356, 356], "mapped", [357]], [[357, 357], "valid"], [[358, 358], "mapped", [359]], [[359, 359], "valid"], [[360, 360], "mapped", [361]], [[361, 361], "valid"], [[362, 362], "mapped", [363]], [[363, 363], "valid"], [[364, 364], "mapped", [365]], [[365, 365], "valid"], [[366, 366], "mapped", [367]], [[367, 367], "valid"], [[368, 368], "mapped", [369]], [[369, 369], "valid"], [[370, 370], "mapped", [371]], [[371, 371], "valid"], [[372, 372], "mapped", [373]], [[373, 373], "valid"], [[374, 374], "mapped", [375]], [[375, 375], "valid"], [[376, 376], "mapped", [255]], [[377, 377], "mapped", [378]], [[378, 378], "valid"], [[379, 379], "mapped", [380]], [[380, 380], "valid"], [[381, 381], "mapped", [382]], [[382, 382], "valid"], [[383, 383], "mapped", [115]], [[384, 384], "valid"], [[385, 385], "mapped", [595]], [[386, 386], "mapped", [387]], [[387, 387], "valid"], [[388, 388], "mapped", [389]], [[389, 389], "valid"], [[390, 390], "mapped", [596]], [[391, 391], "mapped", [392]], [[392, 392], "valid"], [[393, 393], "mapped", [598]], [[394, 394], "mapped", [599]], [[395, 395], "mapped", [396]], [[396, 397], "valid"], [[398, 398], "mapped", [477]], [[399, 399], "mapped", [601]], [[400, 400], "mapped", [603]], [[401, 401], "mapped", [402]], [[402, 402], "valid"], [[403, 403], "mapped", [608]], [[404, 404], "mapped", [611]], [[405, 405], "valid"], [[406, 406], "mapped", [617]], [[407, 407], "mapped", [616]], [[408, 408], "mapped", [409]], [[409, 411], "valid"], [[412, 412], "mapped", [623]], [[413, 413], "mapped", [626]], [[414, 414], "valid"], [[415, 415], "mapped", [629]], [[416, 416], "mapped", [417]], [[417, 417], "valid"], [[418, 418], "mapped", [419]], [[419, 419], "valid"], [[420, 420], "mapped", [421]], [[421, 421], "valid"], [[422, 422], "mapped", [640]], [[423, 423], "mapped", [424]], [[424, 424], "valid"], [[425, 425], "mapped", [643]], [[426, 427], "valid"], [[428, 428], "mapped", [429]], [[429, 429], "valid"], [[430, 430], "mapped", [648]], [[431, 431], "mapped", [432]], [[432, 432], "valid"], [[433, 433], "mapped", [650]], [[434, 434], "mapped", [651]], [[435, 435], "mapped", [436]], [[436, 436], "valid"], [[437, 437], "mapped", [438]], [[438, 438], "valid"], [[439, 439], "mapped", [658]], [[440, 440], "mapped", [441]], [[441, 443], "valid"], [[444, 444], "mapped", [445]], [[445, 451], "valid"], [[452, 454], "mapped", [100, 382]], [[455, 457], "mapped", [108, 106]], [[458, 460], "mapped", [110, 106]], [[461, 461], "mapped", [462]], [[462, 462], "valid"], [[463, 463], "mapped", [464]], [[464, 464], "valid"], [[465, 465], "mapped", [466]], [[466, 466], "valid"], [[467, 467], "mapped", [468]], [[468, 468], "valid"], [[469, 469], "mapped", [470]], [[470, 470], "valid"], [[471, 471], "mapped", [472]], [[472, 472], "valid"], [[473, 473], "mapped", [474]], [[474, 474], "valid"], [[475, 475], "mapped", [476]], [[476, 477], "valid"], [[478, 478], "mapped", [479]], [[479, 479], "valid"], [[480, 480], "mapped", [481]], [[481, 481], "valid"], [[482, 482], "mapped", [483]], [[483, 483], "valid"], [[484, 484], "mapped", [485]], [[485, 485], "valid"], [[486, 486], "mapped", [487]], [[487, 487], "valid"], [[488, 488], "mapped", [489]], [[489, 489], "valid"], [[490, 490], "mapped", [491]], [[491, 491], "valid"], [[492, 492], "mapped", [493]], [[493, 493], "valid"], [[494, 494], "mapped", [495]], [[495, 496], "valid"], [[497, 499], "mapped", [100, 122]], [[500, 500], "mapped", [501]], [[501, 501], "valid"], [[502, 502], "mapped", [405]], [[503, 503], "mapped", [447]], [[504, 504], "mapped", [505]], [[505, 505], "valid"], [[506, 506], "mapped", [507]], [[507, 507], "valid"], [[508, 508], "mapped", [509]], [[509, 509], "valid"], [[510, 510], "mapped", [511]], [[511, 511], "valid"], [[512, 512], "mapped", [513]], [[513, 513], "valid"], [[514, 514], "mapped", [515]], [[515, 515], "valid"], [[516, 516], "mapped", [517]], [[517, 517], "valid"], [[518, 518], "mapped", [519]], [[519, 519], "valid"], [[520, 520], "mapped", [521]], [[521, 521], "valid"], [[522, 522], "mapped", [523]], [[523, 523], "valid"], [[524, 524], "mapped", [525]], [[525, 525], "valid"], [[526, 526], "mapped", [527]], [[527, 527], "valid"], [[528, 528], "mapped", [529]], [[529, 529], "valid"], [[530, 530], "mapped", [531]], [[531, 531], "valid"], [[532, 532], "mapped", [533]], [[533, 533], "valid"], [[534, 534], "mapped", [535]], [[535, 535], "valid"], [[536, 536], "mapped", [537]], [[537, 537], "valid"], [[538, 538], "mapped", [539]], [[539, 539], "valid"], [[540, 540], "mapped", [541]], [[541, 541], "valid"], [[542, 542], "mapped", [543]], [[543, 543], "valid"], [[544, 544], "mapped", [414]], [[545, 545], "valid"], [[546, 546], "mapped", [547]], [[547, 547], "valid"], [[548, 548], "mapped", [549]], [[549, 549], "valid"], [[550, 550], "mapped", [551]], [[551, 551], "valid"], [[552, 552], "mapped", [553]], [[553, 553], "valid"], [[554, 554], "mapped", [555]], [[555, 555], "valid"], [[556, 556], "mapped", [557]], [[557, 557], "valid"], [[558, 558], "mapped", [559]], [[559, 559], "valid"], [[560, 560], "mapped", [561]], [[561, 561], "valid"], [[562, 562], "mapped", [563]], [[563, 563], "valid"], [[564, 566], "valid"], [[567, 569], "valid"], [[570, 570], "mapped", [11365]], [[571, 571], "mapped", [572]], [[572, 572], "valid"], [[573, 573], "mapped", [410]], [[574, 574], "mapped", [11366]], [[575, 576], "valid"], [[577, 577], "mapped", [578]], [[578, 578], "valid"], [[579, 579], "mapped", [384]], [[580, 580], "mapped", [649]], [[581, 581], "mapped", [652]], [[582, 582], "mapped", [583]], [[583, 583], "valid"], [[584, 584], "mapped", [585]], [[585, 585], "valid"], [[586, 586], "mapped", [587]], [[587, 587], "valid"], [[588, 588], "mapped", [589]], [[589, 589], "valid"], [[590, 590], "mapped", [591]], [[591, 591], "valid"], [[592, 680], "valid"], [[681, 685], "valid"], [[686, 687], "valid"], [[688, 688], "mapped", [104]], [[689, 689], "mapped", [614]], [[690, 690], "mapped", [106]], [[691, 691], "mapped", [114]], [[692, 692], "mapped", [633]], [[693, 693], "mapped", [635]], [[694, 694], "mapped", [641]], [[695, 695], "mapped", [119]], [[696, 696], "mapped", [121]], [[697, 705], "valid"], [[706, 709], "valid", [], "NV8"], [[710, 721], "valid"], [[722, 727], "valid", [], "NV8"], [[728, 728], "disallowed_STD3_mapped", [32, 774]], [[729, 729], "disallowed_STD3_mapped", [32, 775]], [[730, 730], "disallowed_STD3_mapped", [32, 778]], [[731, 731], "disallowed_STD3_mapped", [32, 808]], [[732, 732], "disallowed_STD3_mapped", [32, 771]], [[733, 733], "disallowed_STD3_mapped", [32, 779]], [[734, 734], "valid", [], "NV8"], [[735, 735], "valid", [], "NV8"], [[736, 736], "mapped", [611]], [[737, 737], "mapped", [108]], [[738, 738], "mapped", [115]], [[739, 739], "mapped", [120]], [[740, 740], "mapped", [661]], [[741, 745], "valid", [], "NV8"], [[746, 747], "valid", [], "NV8"], [[748, 748], "valid"], [[749, 749], "valid", [], "NV8"], [[750, 750], "valid"], [[751, 767], "valid", [], "NV8"], [[768, 831], "valid"], [[832, 832], "mapped", [768]], [[833, 833], "mapped", [769]], [[834, 834], "valid"], [[835, 835], "mapped", [787]], [[836, 836], "mapped", [776, 769]], [[837, 837], "mapped", [953]], [[838, 846], "valid"], [[847, 847], "ignored"], [[848, 855], "valid"], [[856, 860], "valid"], [[861, 863], "valid"], [[864, 865], "valid"], [[866, 866], "valid"], [[867, 879], "valid"], [[880, 880], "mapped", [881]], [[881, 881], "valid"], [[882, 882], "mapped", [883]], [[883, 883], "valid"], [[884, 884], "mapped", [697]], [[885, 885], "valid"], [[886, 886], "mapped", [887]], [[887, 887], "valid"], [[888, 889], "disallowed"], [[890, 890], "disallowed_STD3_mapped", [32, 953]], [[891, 893], "valid"], [[894, 894], "disallowed_STD3_mapped", [59]], [[895, 895], "mapped", [1011]], [[896, 899], "disallowed"], [[900, 900], "disallowed_STD3_mapped", [32, 769]], [[901, 901], "disallowed_STD3_mapped", [32, 776, 769]], [[902, 902], "mapped", [940]], [[903, 903], "mapped", [183]], [[904, 904], "mapped", [941]], [[905, 905], "mapped", [942]], [[906, 906], "mapped", [943]], [[907, 907], "disallowed"], [[908, 908], "mapped", [972]], [[909, 909], "disallowed"], [[910, 910], "mapped", [973]], [[911, 911], "mapped", [974]], [[912, 912], "valid"], [[913, 913], "mapped", [945]], [[914, 914], "mapped", [946]], [[915, 915], "mapped", [947]], [[916, 916], "mapped", [948]], [[917, 917], "mapped", [949]], [[918, 918], "mapped", [950]], [[919, 919], "mapped", [951]], [[920, 920], "mapped", [952]], [[921, 921], "mapped", [953]], [[922, 922], "mapped", [954]], [[923, 923], "mapped", [955]], [[924, 924], "mapped", [956]], [[925, 925], "mapped", [957]], [[926, 926], "mapped", [958]], [[927, 927], "mapped", [959]], [[928, 928], "mapped", [960]], [[929, 929], "mapped", [961]], [[930, 930], "disallowed"], [[931, 931], "mapped", [963]], [[932, 932], "mapped", [964]], [[933, 933], "mapped", [965]], [[934, 934], "mapped", [966]], [[935, 935], "mapped", [967]], [[936, 936], "mapped", [968]], [[937, 937], "mapped", [969]], [[938, 938], "mapped", [970]], [[939, 939], "mapped", [971]], [[940, 961], "valid"], [[962, 962], "deviation", [963]], [[963, 974], "valid"], [[975, 975], "mapped", [983]], [[976, 976], "mapped", [946]], [[977, 977], "mapped", [952]], [[978, 978], "mapped", [965]], [[979, 979], "mapped", [973]], [[980, 980], "mapped", [971]], [[981, 981], "mapped", [966]], [[982, 982], "mapped", [960]], [[983, 983], "valid"], [[984, 984], "mapped", [985]], [[985, 985], "valid"], [[986, 986], "mapped", [987]], [[987, 987], "valid"], [[988, 988], "mapped", [989]], [[989, 989], "valid"], [[990, 990], "mapped", [991]], [[991, 991], "valid"], [[992, 992], "mapped", [993]], [[993, 993], "valid"], [[994, 994], "mapped", [995]], [[995, 995], "valid"], [[996, 996], "mapped", [997]], [[997, 997], "valid"], [[998, 998], "mapped", [999]], [[999, 999], "valid"], [[1e3, 1e3], "mapped", [1001]], [[1001, 1001], "valid"], [[1002, 1002], "mapped", [1003]], [[1003, 1003], "valid"], [[1004, 1004], "mapped", [1005]], [[1005, 1005], "valid"], [[1006, 1006], "mapped", [1007]], [[1007, 1007], "valid"], [[1008, 1008], "mapped", [954]], [[1009, 1009], "mapped", [961]], [[1010, 1010], "mapped", [963]], [[1011, 1011], "valid"], [[1012, 1012], "mapped", [952]], [[1013, 1013], "mapped", [949]], [[1014, 1014], "valid", [], "NV8"], [[1015, 1015], "mapped", [1016]], [[1016, 1016], "valid"], [[1017, 1017], "mapped", [963]], [[1018, 1018], "mapped", [1019]], [[1019, 1019], "valid"], [[1020, 1020], "valid"], [[1021, 1021], "mapped", [891]], [[1022, 1022], "mapped", [892]], [[1023, 1023], "mapped", [893]], [[1024, 1024], "mapped", [1104]], [[1025, 1025], "mapped", [1105]], [[1026, 1026], "mapped", [1106]], [[1027, 1027], "mapped", [1107]], [[1028, 1028], "mapped", [1108]], [[1029, 1029], "mapped", [1109]], [[1030, 1030], "mapped", [1110]], [[1031, 1031], "mapped", [1111]], [[1032, 1032], "mapped", [1112]], [[1033, 1033], "mapped", [1113]], [[1034, 1034], "mapped", [1114]], [[1035, 1035], "mapped", [1115]], [[1036, 1036], "mapped", [1116]], [[1037, 1037], "mapped", [1117]], [[1038, 1038], "mapped", [1118]], [[1039, 1039], "mapped", [1119]], [[1040, 1040], "mapped", [1072]], [[1041, 1041], "mapped", [1073]], [[1042, 1042], "mapped", [1074]], [[1043, 1043], "mapped", [1075]], [[1044, 1044], "mapped", [1076]], [[1045, 1045], "mapped", [1077]], [[1046, 1046], "mapped", [1078]], [[1047, 1047], "mapped", [1079]], [[1048, 1048], "mapped", [1080]], [[1049, 1049], "mapped", [1081]], [[1050, 1050], "mapped", [1082]], [[1051, 1051], "mapped", [1083]], [[1052, 1052], "mapped", [1084]], [[1053, 1053], "mapped", [1085]], [[1054, 1054], "mapped", [1086]], [[1055, 1055], "mapped", [1087]], [[1056, 1056], "mapped", [1088]], [[1057, 1057], "mapped", [1089]], [[1058, 1058], "mapped", [1090]], [[1059, 1059], "mapped", [1091]], [[1060, 1060], "mapped", [1092]], [[1061, 1061], "mapped", [1093]], [[1062, 1062], "mapped", [1094]], [[1063, 1063], "mapped", [1095]], [[1064, 1064], "mapped", [1096]], [[1065, 1065], "mapped", [1097]], [[1066, 1066], "mapped", [1098]], [[1067, 1067], "mapped", [1099]], [[1068, 1068], "mapped", [1100]], [[1069, 1069], "mapped", [1101]], [[1070, 1070], "mapped", [1102]], [[1071, 1071], "mapped", [1103]], [[1072, 1103], "valid"], [[1104, 1104], "valid"], [[1105, 1116], "valid"], [[1117, 1117], "valid"], [[1118, 1119], "valid"], [[1120, 1120], "mapped", [1121]], [[1121, 1121], "valid"], [[1122, 1122], "mapped", [1123]], [[1123, 1123], "valid"], [[1124, 1124], "mapped", [1125]], [[1125, 1125], "valid"], [[1126, 1126], "mapped", [1127]], [[1127, 1127], "valid"], [[1128, 1128], "mapped", [1129]], [[1129, 1129], "valid"], [[1130, 1130], "mapped", [1131]], [[1131, 1131], "valid"], [[1132, 1132], "mapped", [1133]], [[1133, 1133], "valid"], [[1134, 1134], "mapped", [1135]], [[1135, 1135], "valid"], [[1136, 1136], "mapped", [1137]], [[1137, 1137], "valid"], [[1138, 1138], "mapped", [1139]], [[1139, 1139], "valid"], [[1140, 1140], "mapped", [1141]], [[1141, 1141], "valid"], [[1142, 1142], "mapped", [1143]], [[1143, 1143], "valid"], [[1144, 1144], "mapped", [1145]], [[1145, 1145], "valid"], [[1146, 1146], "mapped", [1147]], [[1147, 1147], "valid"], [[1148, 1148], "mapped", [1149]], [[1149, 1149], "valid"], [[1150, 1150], "mapped", [1151]], [[1151, 1151], "valid"], [[1152, 1152], "mapped", [1153]], [[1153, 1153], "valid"], [[1154, 1154], "valid", [], "NV8"], [[1155, 1158], "valid"], [[1159, 1159], "valid"], [[1160, 1161], "valid", [], "NV8"], [[1162, 1162], "mapped", [1163]], [[1163, 1163], "valid"], [[1164, 1164], "mapped", [1165]], [[1165, 1165], "valid"], [[1166, 1166], "mapped", [1167]], [[1167, 1167], "valid"], [[1168, 1168], "mapped", [1169]], [[1169, 1169], "valid"], [[1170, 1170], "mapped", [1171]], [[1171, 1171], "valid"], [[1172, 1172], "mapped", [1173]], [[1173, 1173], "valid"], [[1174, 1174], "mapped", [1175]], [[1175, 1175], "valid"], [[1176, 1176], "mapped", [1177]], [[1177, 1177], "valid"], [[1178, 1178], "mapped", [1179]], [[1179, 1179], "valid"], [[1180, 1180], "mapped", [1181]], [[1181, 1181], "valid"], [[1182, 1182], "mapped", [1183]], [[1183, 1183], "valid"], [[1184, 1184], "mapped", [1185]], [[1185, 1185], "valid"], [[1186, 1186], "mapped", [1187]], [[1187, 1187], "valid"], [[1188, 1188], "mapped", [1189]], [[1189, 1189], "valid"], [[1190, 1190], "mapped", [1191]], [[1191, 1191], "valid"], [[1192, 1192], "mapped", [1193]], [[1193, 1193], "valid"], [[1194, 1194], "mapped", [1195]], [[1195, 1195], "valid"], [[1196, 1196], "mapped", [1197]], [[1197, 1197], "valid"], [[1198, 1198], "mapped", [1199]], [[1199, 1199], "valid"], [[1200, 1200], "mapped", [1201]], [[1201, 1201], "valid"], [[1202, 1202], "mapped", [1203]], [[1203, 1203], "valid"], [[1204, 1204], "mapped", [1205]], [[1205, 1205], "valid"], [[1206, 1206], "mapped", [1207]], [[1207, 1207], "valid"], [[1208, 1208], "mapped", [1209]], [[1209, 1209], "valid"], [[1210, 1210], "mapped", [1211]], [[1211, 1211], "valid"], [[1212, 1212], "mapped", [1213]], [[1213, 1213], "valid"], [[1214, 1214], "mapped", [1215]], [[1215, 1215], "valid"], [[1216, 1216], "disallowed"], [[1217, 1217], "mapped", [1218]], [[1218, 1218], "valid"], [[1219, 1219], "mapped", [1220]], [[1220, 1220], "valid"], [[1221, 1221], "mapped", [1222]], [[1222, 1222], "valid"], [[1223, 1223], "mapped", [1224]], [[1224, 1224], "valid"], [[1225, 1225], "mapped", [1226]], [[1226, 1226], "valid"], [[1227, 1227], "mapped", [1228]], [[1228, 1228], "valid"], [[1229, 1229], "mapped", [1230]], [[1230, 1230], "valid"], [[1231, 1231], "valid"], [[1232, 1232], "mapped", [1233]], [[1233, 1233], "valid"], [[1234, 1234], "mapped", [1235]], [[1235, 1235], "valid"], [[1236, 1236], "mapped", [1237]], [[1237, 1237], "valid"], [[1238, 1238], "mapped", [1239]], [[1239, 1239], "valid"], [[1240, 1240], "mapped", [1241]], [[1241, 1241], "valid"], [[1242, 1242], "mapped", [1243]], [[1243, 1243], "valid"], [[1244, 1244], "mapped", [1245]], [[1245, 1245], "valid"], [[1246, 1246], "mapped", [1247]], [[1247, 1247], "valid"], [[1248, 1248], "mapped", [1249]], [[1249, 1249], "valid"], [[1250, 1250], "mapped", [1251]], [[1251, 1251], "valid"], [[1252, 1252], "mapped", [1253]], [[1253, 1253], "valid"], [[1254, 1254], "mapped", [1255]], [[1255, 1255], "valid"], [[1256, 1256], "mapped", [1257]], [[1257, 1257], "valid"], [[1258, 1258], "mapped", [1259]], [[1259, 1259], "valid"], [[1260, 1260], "mapped", [1261]], [[1261, 1261], "valid"], [[1262, 1262], "mapped", [1263]], [[1263, 1263], "valid"], [[1264, 1264], "mapped", [1265]], [[1265, 1265], "valid"], [[1266, 1266], "mapped", [1267]], [[1267, 1267], "valid"], [[1268, 1268], "mapped", [1269]], [[1269, 1269], "valid"], [[1270, 1270], "mapped", [1271]], [[1271, 1271], "valid"], [[1272, 1272], "mapped", [1273]], [[1273, 1273], "valid"], [[1274, 1274], "mapped", [1275]], [[1275, 1275], "valid"], [[1276, 1276], "mapped", [1277]], [[1277, 1277], "valid"], [[1278, 1278], "mapped", [1279]], [[1279, 1279], "valid"], [[1280, 1280], "mapped", [1281]], [[1281, 1281], "valid"], [[1282, 1282], "mapped", [1283]], [[1283, 1283], "valid"], [[1284, 1284], "mapped", [1285]], [[1285, 1285], "valid"], [[1286, 1286], "mapped", [1287]], [[1287, 1287], "valid"], [[1288, 1288], "mapped", [1289]], [[1289, 1289], "valid"], [[1290, 1290], "mapped", [1291]], [[1291, 1291], "valid"], [[1292, 1292], "mapped", [1293]], [[1293, 1293], "valid"], [[1294, 1294], "mapped", [1295]], [[1295, 1295], "valid"], [[1296, 1296], "mapped", [1297]], [[1297, 1297], "valid"], [[1298, 1298], "mapped", [1299]], [[1299, 1299], "valid"], [[1300, 1300], "mapped", [1301]], [[1301, 1301], "valid"], [[1302, 1302], "mapped", [1303]], [[1303, 1303], "valid"], [[1304, 1304], "mapped", [1305]], [[1305, 1305], "valid"], [[1306, 1306], "mapped", [1307]], [[1307, 1307], "valid"], [[1308, 1308], "mapped", [1309]], [[1309, 1309], "valid"], [[1310, 1310], "mapped", [1311]], [[1311, 1311], "valid"], [[1312, 1312], "mapped", [1313]], [[1313, 1313], "valid"], [[1314, 1314], "mapped", [1315]], [[1315, 1315], "valid"], [[1316, 1316], "mapped", [1317]], [[1317, 1317], "valid"], [[1318, 1318], "mapped", [1319]], [[1319, 1319], "valid"], [[1320, 1320], "mapped", [1321]], [[1321, 1321], "valid"], [[1322, 1322], "mapped", [1323]], [[1323, 1323], "valid"], [[1324, 1324], "mapped", [1325]], [[1325, 1325], "valid"], [[1326, 1326], "mapped", [1327]], [[1327, 1327], "valid"], [[1328, 1328], "disallowed"], [[1329, 1329], "mapped", [1377]], [[1330, 1330], "mapped", [1378]], [[1331, 1331], "mapped", [1379]], [[1332, 1332], "mapped", [1380]], [[1333, 1333], "mapped", [1381]], [[1334, 1334], "mapped", [1382]], [[1335, 1335], "mapped", [1383]], [[1336, 1336], "mapped", [1384]], [[1337, 1337], "mapped", [1385]], [[1338, 1338], "mapped", [1386]], [[1339, 1339], "mapped", [1387]], [[1340, 1340], "mapped", [1388]], [[1341, 1341], "mapped", [1389]], [[1342, 1342], "mapped", [1390]], [[1343, 1343], "mapped", [1391]], [[1344, 1344], "mapped", [1392]], [[1345, 1345], "mapped", [1393]], [[1346, 1346], "mapped", [1394]], [[1347, 1347], "mapped", [1395]], [[1348, 1348], "mapped", [1396]], [[1349, 1349], "mapped", [1397]], [[1350, 1350], "mapped", [1398]], [[1351, 1351], "mapped", [1399]], [[1352, 1352], "mapped", [1400]], [[1353, 1353], "mapped", [1401]], [[1354, 1354], "mapped", [1402]], [[1355, 1355], "mapped", [1403]], [[1356, 1356], "mapped", [1404]], [[1357, 1357], "mapped", [1405]], [[1358, 1358], "mapped", [1406]], [[1359, 1359], "mapped", [1407]], [[1360, 1360], "mapped", [1408]], [[1361, 1361], "mapped", [1409]], [[1362, 1362], "mapped", [1410]], [[1363, 1363], "mapped", [1411]], [[1364, 1364], "mapped", [1412]], [[1365, 1365], "mapped", [1413]], [[1366, 1366], "mapped", [1414]], [[1367, 1368], "disallowed"], [[1369, 1369], "valid"], [[1370, 1375], "valid", [], "NV8"], [[1376, 1376], "disallowed"], [[1377, 1414], "valid"], [[1415, 1415], "mapped", [1381, 1410]], [[1416, 1416], "disallowed"], [[1417, 1417], "valid", [], "NV8"], [[1418, 1418], "valid", [], "NV8"], [[1419, 1420], "disallowed"], [[1421, 1422], "valid", [], "NV8"], [[1423, 1423], "valid", [], "NV8"], [[1424, 1424], "disallowed"], [[1425, 1441], "valid"], [[1442, 1442], "valid"], [[1443, 1455], "valid"], [[1456, 1465], "valid"], [[1466, 1466], "valid"], [[1467, 1469], "valid"], [[1470, 1470], "valid", [], "NV8"], [[1471, 1471], "valid"], [[1472, 1472], "valid", [], "NV8"], [[1473, 1474], "valid"], [[1475, 1475], "valid", [], "NV8"], [[1476, 1476], "valid"], [[1477, 1477], "valid"], [[1478, 1478], "valid", [], "NV8"], [[1479, 1479], "valid"], [[1480, 1487], "disallowed"], [[1488, 1514], "valid"], [[1515, 1519], "disallowed"], [[1520, 1524], "valid"], [[1525, 1535], "disallowed"], [[1536, 1539], "disallowed"], [[1540, 1540], "disallowed"], [[1541, 1541], "disallowed"], [[1542, 1546], "valid", [], "NV8"], [[1547, 1547], "valid", [], "NV8"], [[1548, 1548], "valid", [], "NV8"], [[1549, 1551], "valid", [], "NV8"], [[1552, 1557], "valid"], [[1558, 1562], "valid"], [[1563, 1563], "valid", [], "NV8"], [[1564, 1564], "disallowed"], [[1565, 1565], "disallowed"], [[1566, 1566], "valid", [], "NV8"], [[1567, 1567], "valid", [], "NV8"], [[1568, 1568], "valid"], [[1569, 1594], "valid"], [[1595, 1599], "valid"], [[1600, 1600], "valid", [], "NV8"], [[1601, 1618], "valid"], [[1619, 1621], "valid"], [[1622, 1624], "valid"], [[1625, 1630], "valid"], [[1631, 1631], "valid"], [[1632, 1641], "valid"], [[1642, 1645], "valid", [], "NV8"], [[1646, 1647], "valid"], [[1648, 1652], "valid"], [[1653, 1653], "mapped", [1575, 1652]], [[1654, 1654], "mapped", [1608, 1652]], [[1655, 1655], "mapped", [1735, 1652]], [[1656, 1656], "mapped", [1610, 1652]], [[1657, 1719], "valid"], [[1720, 1721], "valid"], [[1722, 1726], "valid"], [[1727, 1727], "valid"], [[1728, 1742], "valid"], [[1743, 1743], "valid"], [[1744, 1747], "valid"], [[1748, 1748], "valid", [], "NV8"], [[1749, 1756], "valid"], [[1757, 1757], "disallowed"], [[1758, 1758], "valid", [], "NV8"], [[1759, 1768], "valid"], [[1769, 1769], "valid", [], "NV8"], [[1770, 1773], "valid"], [[1774, 1775], "valid"], [[1776, 1785], "valid"], [[1786, 1790], "valid"], [[1791, 1791], "valid"], [[1792, 1805], "valid", [], "NV8"], [[1806, 1806], "disallowed"], [[1807, 1807], "disallowed"], [[1808, 1836], "valid"], [[1837, 1839], "valid"], [[1840, 1866], "valid"], [[1867, 1868], "disallowed"], [[1869, 1871], "valid"], [[1872, 1901], "valid"], [[1902, 1919], "valid"], [[1920, 1968], "valid"], [[1969, 1969], "valid"], [[1970, 1983], "disallowed"], [[1984, 2037], "valid"], [[2038, 2042], "valid", [], "NV8"], [[2043, 2047], "disallowed"], [[2048, 2093], "valid"], [[2094, 2095], "disallowed"], [[2096, 2110], "valid", [], "NV8"], [[2111, 2111], "disallowed"], [[2112, 2139], "valid"], [[2140, 2141], "disallowed"], [[2142, 2142], "valid", [], "NV8"], [[2143, 2207], "disallowed"], [[2208, 2208], "valid"], [[2209, 2209], "valid"], [[2210, 2220], "valid"], [[2221, 2226], "valid"], [[2227, 2228], "valid"], [[2229, 2274], "disallowed"], [[2275, 2275], "valid"], [[2276, 2302], "valid"], [[2303, 2303], "valid"], [[2304, 2304], "valid"], [[2305, 2307], "valid"], [[2308, 2308], "valid"], [[2309, 2361], "valid"], [[2362, 2363], "valid"], [[2364, 2381], "valid"], [[2382, 2382], "valid"], [[2383, 2383], "valid"], [[2384, 2388], "valid"], [[2389, 2389], "valid"], [[2390, 2391], "valid"], [[2392, 2392], "mapped", [2325, 2364]], [[2393, 2393], "mapped", [2326, 2364]], [[2394, 2394], "mapped", [2327, 2364]], [[2395, 2395], "mapped", [2332, 2364]], [[2396, 2396], "mapped", [2337, 2364]], [[2397, 2397], "mapped", [2338, 2364]], [[2398, 2398], "mapped", [2347, 2364]], [[2399, 2399], "mapped", [2351, 2364]], [[2400, 2403], "valid"], [[2404, 2405], "valid", [], "NV8"], [[2406, 2415], "valid"], [[2416, 2416], "valid", [], "NV8"], [[2417, 2418], "valid"], [[2419, 2423], "valid"], [[2424, 2424], "valid"], [[2425, 2426], "valid"], [[2427, 2428], "valid"], [[2429, 2429], "valid"], [[2430, 2431], "valid"], [[2432, 2432], "valid"], [[2433, 2435], "valid"], [[2436, 2436], "disallowed"], [[2437, 2444], "valid"], [[2445, 2446], "disallowed"], [[2447, 2448], "valid"], [[2449, 2450], "disallowed"], [[2451, 2472], "valid"], [[2473, 2473], "disallowed"], [[2474, 2480], "valid"], [[2481, 2481], "disallowed"], [[2482, 2482], "valid"], [[2483, 2485], "disallowed"], [[2486, 2489], "valid"], [[2490, 2491], "disallowed"], [[2492, 2492], "valid"], [[2493, 2493], "valid"], [[2494, 2500], "valid"], [[2501, 2502], "disallowed"], [[2503, 2504], "valid"], [[2505, 2506], "disallowed"], [[2507, 2509], "valid"], [[2510, 2510], "valid"], [[2511, 2518], "disallowed"], [[2519, 2519], "valid"], [[2520, 2523], "disallowed"], [[2524, 2524], "mapped", [2465, 2492]], [[2525, 2525], "mapped", [2466, 2492]], [[2526, 2526], "disallowed"], [[2527, 2527], "mapped", [2479, 2492]], [[2528, 2531], "valid"], [[2532, 2533], "disallowed"], [[2534, 2545], "valid"], [[2546, 2554], "valid", [], "NV8"], [[2555, 2555], "valid", [], "NV8"], [[2556, 2560], "disallowed"], [[2561, 2561], "valid"], [[2562, 2562], "valid"], [[2563, 2563], "valid"], [[2564, 2564], "disallowed"], [[2565, 2570], "valid"], [[2571, 2574], "disallowed"], [[2575, 2576], "valid"], [[2577, 2578], "disallowed"], [[2579, 2600], "valid"], [[2601, 2601], "disallowed"], [[2602, 2608], "valid"], [[2609, 2609], "disallowed"], [[2610, 2610], "valid"], [[2611, 2611], "mapped", [2610, 2620]], [[2612, 2612], "disallowed"], [[2613, 2613], "valid"], [[2614, 2614], "mapped", [2616, 2620]], [[2615, 2615], "disallowed"], [[2616, 2617], "valid"], [[2618, 2619], "disallowed"], [[2620, 2620], "valid"], [[2621, 2621], "disallowed"], [[2622, 2626], "valid"], [[2627, 2630], "disallowed"], [[2631, 2632], "valid"], [[2633, 2634], "disallowed"], [[2635, 2637], "valid"], [[2638, 2640], "disallowed"], [[2641, 2641], "valid"], [[2642, 2648], "disallowed"], [[2649, 2649], "mapped", [2582, 2620]], [[2650, 2650], "mapped", [2583, 2620]], [[2651, 2651], "mapped", [2588, 2620]], [[2652, 2652], "valid"], [[2653, 2653], "disallowed"], [[2654, 2654], "mapped", [2603, 2620]], [[2655, 2661], "disallowed"], [[2662, 2676], "valid"], [[2677, 2677], "valid"], [[2678, 2688], "disallowed"], [[2689, 2691], "valid"], [[2692, 2692], "disallowed"], [[2693, 2699], "valid"], [[2700, 2700], "valid"], [[2701, 2701], "valid"], [[2702, 2702], "disallowed"], [[2703, 2705], "valid"], [[2706, 2706], "disallowed"], [[2707, 2728], "valid"], [[2729, 2729], "disallowed"], [[2730, 2736], "valid"], [[2737, 2737], "disallowed"], [[2738, 2739], "valid"], [[2740, 2740], "disallowed"], [[2741, 2745], "valid"], [[2746, 2747], "disallowed"], [[2748, 2757], "valid"], [[2758, 2758], "disallowed"], [[2759, 2761], "valid"], [[2762, 2762], "disallowed"], [[2763, 2765], "valid"], [[2766, 2767], "disallowed"], [[2768, 2768], "valid"], [[2769, 2783], "disallowed"], [[2784, 2784], "valid"], [[2785, 2787], "valid"], [[2788, 2789], "disallowed"], [[2790, 2799], "valid"], [[2800, 2800], "valid", [], "NV8"], [[2801, 2801], "valid", [], "NV8"], [[2802, 2808], "disallowed"], [[2809, 2809], "valid"], [[2810, 2816], "disallowed"], [[2817, 2819], "valid"], [[2820, 2820], "disallowed"], [[2821, 2828], "valid"], [[2829, 2830], "disallowed"], [[2831, 2832], "valid"], [[2833, 2834], "disallowed"], [[2835, 2856], "valid"], [[2857, 2857], "disallowed"], [[2858, 2864], "valid"], [[2865, 2865], "disallowed"], [[2866, 2867], "valid"], [[2868, 2868], "disallowed"], [[2869, 2869], "valid"], [[2870, 2873], "valid"], [[2874, 2875], "disallowed"], [[2876, 2883], "valid"], [[2884, 2884], "valid"], [[2885, 2886], "disallowed"], [[2887, 2888], "valid"], [[2889, 2890], "disallowed"], [[2891, 2893], "valid"], [[2894, 2901], "disallowed"], [[2902, 2903], "valid"], [[2904, 2907], "disallowed"], [[2908, 2908], "mapped", [2849, 2876]], [[2909, 2909], "mapped", [2850, 2876]], [[2910, 2910], "disallowed"], [[2911, 2913], "valid"], [[2914, 2915], "valid"], [[2916, 2917], "disallowed"], [[2918, 2927], "valid"], [[2928, 2928], "valid", [], "NV8"], [[2929, 2929], "valid"], [[2930, 2935], "valid", [], "NV8"], [[2936, 2945], "disallowed"], [[2946, 2947], "valid"], [[2948, 2948], "disallowed"], [[2949, 2954], "valid"], [[2955, 2957], "disallowed"], [[2958, 2960], "valid"], [[2961, 2961], "disallowed"], [[2962, 2965], "valid"], [[2966, 2968], "disallowed"], [[2969, 2970], "valid"], [[2971, 2971], "disallowed"], [[2972, 2972], "valid"], [[2973, 2973], "disallowed"], [[2974, 2975], "valid"], [[2976, 2978], "disallowed"], [[2979, 2980], "valid"], [[2981, 2983], "disallowed"], [[2984, 2986], "valid"], [[2987, 2989], "disallowed"], [[2990, 2997], "valid"], [[2998, 2998], "valid"], [[2999, 3001], "valid"], [[3002, 3005], "disallowed"], [[3006, 3010], "valid"], [[3011, 3013], "disallowed"], [[3014, 3016], "valid"], [[3017, 3017], "disallowed"], [[3018, 3021], "valid"], [[3022, 3023], "disallowed"], [[3024, 3024], "valid"], [[3025, 3030], "disallowed"], [[3031, 3031], "valid"], [[3032, 3045], "disallowed"], [[3046, 3046], "valid"], [[3047, 3055], "valid"], [[3056, 3058], "valid", [], "NV8"], [[3059, 3066], "valid", [], "NV8"], [[3067, 3071], "disallowed"], [[3072, 3072], "valid"], [[3073, 3075], "valid"], [[3076, 3076], "disallowed"], [[3077, 3084], "valid"], [[3085, 3085], "disallowed"], [[3086, 3088], "valid"], [[3089, 3089], "disallowed"], [[3090, 3112], "valid"], [[3113, 3113], "disallowed"], [[3114, 3123], "valid"], [[3124, 3124], "valid"], [[3125, 3129], "valid"], [[3130, 3132], "disallowed"], [[3133, 3133], "valid"], [[3134, 3140], "valid"], [[3141, 3141], "disallowed"], [[3142, 3144], "valid"], [[3145, 3145], "disallowed"], [[3146, 3149], "valid"], [[3150, 3156], "disallowed"], [[3157, 3158], "valid"], [[3159, 3159], "disallowed"], [[3160, 3161], "valid"], [[3162, 3162], "valid"], [[3163, 3167], "disallowed"], [[3168, 3169], "valid"], [[3170, 3171], "valid"], [[3172, 3173], "disallowed"], [[3174, 3183], "valid"], [[3184, 3191], "disallowed"], [[3192, 3199], "valid", [], "NV8"], [[3200, 3200], "disallowed"], [[3201, 3201], "valid"], [[3202, 3203], "valid"], [[3204, 3204], "disallowed"], [[3205, 3212], "valid"], [[3213, 3213], "disallowed"], [[3214, 3216], "valid"], [[3217, 3217], "disallowed"], [[3218, 3240], "valid"], [[3241, 3241], "disallowed"], [[3242, 3251], "valid"], [[3252, 3252], "disallowed"], [[3253, 3257], "valid"], [[3258, 3259], "disallowed"], [[3260, 3261], "valid"], [[3262, 3268], "valid"], [[3269, 3269], "disallowed"], [[3270, 3272], "valid"], [[3273, 3273], "disallowed"], [[3274, 3277], "valid"], [[3278, 3284], "disallowed"], [[3285, 3286], "valid"], [[3287, 3293], "disallowed"], [[3294, 3294], "valid"], [[3295, 3295], "disallowed"], [[3296, 3297], "valid"], [[3298, 3299], "valid"], [[3300, 3301], "disallowed"], [[3302, 3311], "valid"], [[3312, 3312], "disallowed"], [[3313, 3314], "valid"], [[3315, 3328], "disallowed"], [[3329, 3329], "valid"], [[3330, 3331], "valid"], [[3332, 3332], "disallowed"], [[3333, 3340], "valid"], [[3341, 3341], "disallowed"], [[3342, 3344], "valid"], [[3345, 3345], "disallowed"], [[3346, 3368], "valid"], [[3369, 3369], "valid"], [[3370, 3385], "valid"], [[3386, 3386], "valid"], [[3387, 3388], "disallowed"], [[3389, 3389], "valid"], [[3390, 3395], "valid"], [[3396, 3396], "valid"], [[3397, 3397], "disallowed"], [[3398, 3400], "valid"], [[3401, 3401], "disallowed"], [[3402, 3405], "valid"], [[3406, 3406], "valid"], [[3407, 3414], "disallowed"], [[3415, 3415], "valid"], [[3416, 3422], "disallowed"], [[3423, 3423], "valid"], [[3424, 3425], "valid"], [[3426, 3427], "valid"], [[3428, 3429], "disallowed"], [[3430, 3439], "valid"], [[3440, 3445], "valid", [], "NV8"], [[3446, 3448], "disallowed"], [[3449, 3449], "valid", [], "NV8"], [[3450, 3455], "valid"], [[3456, 3457], "disallowed"], [[3458, 3459], "valid"], [[3460, 3460], "disallowed"], [[3461, 3478], "valid"], [[3479, 3481], "disallowed"], [[3482, 3505], "valid"], [[3506, 3506], "disallowed"], [[3507, 3515], "valid"], [[3516, 3516], "disallowed"], [[3517, 3517], "valid"], [[3518, 3519], "disallowed"], [[3520, 3526], "valid"], [[3527, 3529], "disallowed"], [[3530, 3530], "valid"], [[3531, 3534], "disallowed"], [[3535, 3540], "valid"], [[3541, 3541], "disallowed"], [[3542, 3542], "valid"], [[3543, 3543], "disallowed"], [[3544, 3551], "valid"], [[3552, 3557], "disallowed"], [[3558, 3567], "valid"], [[3568, 3569], "disallowed"], [[3570, 3571], "valid"], [[3572, 3572], "valid", [], "NV8"], [[3573, 3584], "disallowed"], [[3585, 3634], "valid"], [[3635, 3635], "mapped", [3661, 3634]], [[3636, 3642], "valid"], [[3643, 3646], "disallowed"], [[3647, 3647], "valid", [], "NV8"], [[3648, 3662], "valid"], [[3663, 3663], "valid", [], "NV8"], [[3664, 3673], "valid"], [[3674, 3675], "valid", [], "NV8"], [[3676, 3712], "disallowed"], [[3713, 3714], "valid"], [[3715, 3715], "disallowed"], [[3716, 3716], "valid"], [[3717, 3718], "disallowed"], [[3719, 3720], "valid"], [[3721, 3721], "disallowed"], [[3722, 3722], "valid"], [[3723, 3724], "disallowed"], [[3725, 3725], "valid"], [[3726, 3731], "disallowed"], [[3732, 3735], "valid"], [[3736, 3736], "disallowed"], [[3737, 3743], "valid"], [[3744, 3744], "disallowed"], [[3745, 3747], "valid"], [[3748, 3748], "disallowed"], [[3749, 3749], "valid"], [[3750, 3750], "disallowed"], [[3751, 3751], "valid"], [[3752, 3753], "disallowed"], [[3754, 3755], "valid"], [[3756, 3756], "disallowed"], [[3757, 3762], "valid"], [[3763, 3763], "mapped", [3789, 3762]], [[3764, 3769], "valid"], [[3770, 3770], "disallowed"], [[3771, 3773], "valid"], [[3774, 3775], "disallowed"], [[3776, 3780], "valid"], [[3781, 3781], "disallowed"], [[3782, 3782], "valid"], [[3783, 3783], "disallowed"], [[3784, 3789], "valid"], [[3790, 3791], "disallowed"], [[3792, 3801], "valid"], [[3802, 3803], "disallowed"], [[3804, 3804], "mapped", [3755, 3737]], [[3805, 3805], "mapped", [3755, 3745]], [[3806, 3807], "valid"], [[3808, 3839], "disallowed"], [[3840, 3840], "valid"], [[3841, 3850], "valid", [], "NV8"], [[3851, 3851], "valid"], [[3852, 3852], "mapped", [3851]], [[3853, 3863], "valid", [], "NV8"], [[3864, 3865], "valid"], [[3866, 3871], "valid", [], "NV8"], [[3872, 3881], "valid"], [[3882, 3892], "valid", [], "NV8"], [[3893, 3893], "valid"], [[3894, 3894], "valid", [], "NV8"], [[3895, 3895], "valid"], [[3896, 3896], "valid", [], "NV8"], [[3897, 3897], "valid"], [[3898, 3901], "valid", [], "NV8"], [[3902, 3906], "valid"], [[3907, 3907], "mapped", [3906, 4023]], [[3908, 3911], "valid"], [[3912, 3912], "disallowed"], [[3913, 3916], "valid"], [[3917, 3917], "mapped", [3916, 4023]], [[3918, 3921], "valid"], [[3922, 3922], "mapped", [3921, 4023]], [[3923, 3926], "valid"], [[3927, 3927], "mapped", [3926, 4023]], [[3928, 3931], "valid"], [[3932, 3932], "mapped", [3931, 4023]], [[3933, 3944], "valid"], [[3945, 3945], "mapped", [3904, 4021]], [[3946, 3946], "valid"], [[3947, 3948], "valid"], [[3949, 3952], "disallowed"], [[3953, 3954], "valid"], [[3955, 3955], "mapped", [3953, 3954]], [[3956, 3956], "valid"], [[3957, 3957], "mapped", [3953, 3956]], [[3958, 3958], "mapped", [4018, 3968]], [[3959, 3959], "mapped", [4018, 3953, 3968]], [[3960, 3960], "mapped", [4019, 3968]], [[3961, 3961], "mapped", [4019, 3953, 3968]], [[3962, 3968], "valid"], [[3969, 3969], "mapped", [3953, 3968]], [[3970, 3972], "valid"], [[3973, 3973], "valid", [], "NV8"], [[3974, 3979], "valid"], [[3980, 3983], "valid"], [[3984, 3986], "valid"], [[3987, 3987], "mapped", [3986, 4023]], [[3988, 3989], "valid"], [[3990, 3990], "valid"], [[3991, 3991], "valid"], [[3992, 3992], "disallowed"], [[3993, 3996], "valid"], [[3997, 3997], "mapped", [3996, 4023]], [[3998, 4001], "valid"], [[4002, 4002], "mapped", [4001, 4023]], [[4003, 4006], "valid"], [[4007, 4007], "mapped", [4006, 4023]], [[4008, 4011], "valid"], [[4012, 4012], "mapped", [4011, 4023]], [[4013, 4013], "valid"], [[4014, 4016], "valid"], [[4017, 4023], "valid"], [[4024, 4024], "valid"], [[4025, 4025], "mapped", [3984, 4021]], [[4026, 4028], "valid"], [[4029, 4029], "disallowed"], [[4030, 4037], "valid", [], "NV8"], [[4038, 4038], "valid"], [[4039, 4044], "valid", [], "NV8"], [[4045, 4045], "disallowed"], [[4046, 4046], "valid", [], "NV8"], [[4047, 4047], "valid", [], "NV8"], [[4048, 4049], "valid", [], "NV8"], [[4050, 4052], "valid", [], "NV8"], [[4053, 4056], "valid", [], "NV8"], [[4057, 4058], "valid", [], "NV8"], [[4059, 4095], "disallowed"], [[4096, 4129], "valid"], [[4130, 4130], "valid"], [[4131, 4135], "valid"], [[4136, 4136], "valid"], [[4137, 4138], "valid"], [[4139, 4139], "valid"], [[4140, 4146], "valid"], [[4147, 4149], "valid"], [[4150, 4153], "valid"], [[4154, 4159], "valid"], [[4160, 4169], "valid"], [[4170, 4175], "valid", [], "NV8"], [[4176, 4185], "valid"], [[4186, 4249], "valid"], [[4250, 4253], "valid"], [[4254, 4255], "valid", [], "NV8"], [[4256, 4293], "disallowed"], [[4294, 4294], "disallowed"], [[4295, 4295], "mapped", [11559]], [[4296, 4300], "disallowed"], [[4301, 4301], "mapped", [11565]], [[4302, 4303], "disallowed"], [[4304, 4342], "valid"], [[4343, 4344], "valid"], [[4345, 4346], "valid"], [[4347, 4347], "valid", [], "NV8"], [[4348, 4348], "mapped", [4316]], [[4349, 4351], "valid"], [[4352, 4441], "valid", [], "NV8"], [[4442, 4446], "valid", [], "NV8"], [[4447, 4448], "disallowed"], [[4449, 4514], "valid", [], "NV8"], [[4515, 4519], "valid", [], "NV8"], [[4520, 4601], "valid", [], "NV8"], [[4602, 4607], "valid", [], "NV8"], [[4608, 4614], "valid"], [[4615, 4615], "valid"], [[4616, 4678], "valid"], [[4679, 4679], "valid"], [[4680, 4680], "valid"], [[4681, 4681], "disallowed"], [[4682, 4685], "valid"], [[4686, 4687], "disallowed"], [[4688, 4694], "valid"], [[4695, 4695], "disallowed"], [[4696, 4696], "valid"], [[4697, 4697], "disallowed"], [[4698, 4701], "valid"], [[4702, 4703], "disallowed"], [[4704, 4742], "valid"], [[4743, 4743], "valid"], [[4744, 4744], "valid"], [[4745, 4745], "disallowed"], [[4746, 4749], "valid"], [[4750, 4751], "disallowed"], [[4752, 4782], "valid"], [[4783, 4783], "valid"], [[4784, 4784], "valid"], [[4785, 4785], "disallowed"], [[4786, 4789], "valid"], [[4790, 4791], "disallowed"], [[4792, 4798], "valid"], [[4799, 4799], "disallowed"], [[4800, 4800], "valid"], [[4801, 4801], "disallowed"], [[4802, 4805], "valid"], [[4806, 4807], "disallowed"], [[4808, 4814], "valid"], [[4815, 4815], "valid"], [[4816, 4822], "valid"], [[4823, 4823], "disallowed"], [[4824, 4846], "valid"], [[4847, 4847], "valid"], [[4848, 4878], "valid"], [[4879, 4879], "valid"], [[4880, 4880], "valid"], [[4881, 4881], "disallowed"], [[4882, 4885], "valid"], [[4886, 4887], "disallowed"], [[4888, 4894], "valid"], [[4895, 4895], "valid"], [[4896, 4934], "valid"], [[4935, 4935], "valid"], [[4936, 4954], "valid"], [[4955, 4956], "disallowed"], [[4957, 4958], "valid"], [[4959, 4959], "valid"], [[4960, 4960], "valid", [], "NV8"], [[4961, 4988], "valid", [], "NV8"], [[4989, 4991], "disallowed"], [[4992, 5007], "valid"], [[5008, 5017], "valid", [], "NV8"], [[5018, 5023], "disallowed"], [[5024, 5108], "valid"], [[5109, 5109], "valid"], [[5110, 5111], "disallowed"], [[5112, 5112], "mapped", [5104]], [[5113, 5113], "mapped", [5105]], [[5114, 5114], "mapped", [5106]], [[5115, 5115], "mapped", [5107]], [[5116, 5116], "mapped", [5108]], [[5117, 5117], "mapped", [5109]], [[5118, 5119], "disallowed"], [[5120, 5120], "valid", [], "NV8"], [[5121, 5740], "valid"], [[5741, 5742], "valid", [], "NV8"], [[5743, 5750], "valid"], [[5751, 5759], "valid"], [[5760, 5760], "disallowed"], [[5761, 5786], "valid"], [[5787, 5788], "valid", [], "NV8"], [[5789, 5791], "disallowed"], [[5792, 5866], "valid"], [[5867, 5872], "valid", [], "NV8"], [[5873, 5880], "valid"], [[5881, 5887], "disallowed"], [[5888, 5900], "valid"], [[5901, 5901], "disallowed"], [[5902, 5908], "valid"], [[5909, 5919], "disallowed"], [[5920, 5940], "valid"], [[5941, 5942], "valid", [], "NV8"], [[5943, 5951], "disallowed"], [[5952, 5971], "valid"], [[5972, 5983], "disallowed"], [[5984, 5996], "valid"], [[5997, 5997], "disallowed"], [[5998, 6e3], "valid"], [[6001, 6001], "disallowed"], [[6002, 6003], "valid"], [[6004, 6015], "disallowed"], [[6016, 6067], "valid"], [[6068, 6069], "disallowed"], [[6070, 6099], "valid"], [[6100, 6102], "valid", [], "NV8"], [[6103, 6103], "valid"], [[6104, 6107], "valid", [], "NV8"], [[6108, 6108], "valid"], [[6109, 6109], "valid"], [[6110, 6111], "disallowed"], [[6112, 6121], "valid"], [[6122, 6127], "disallowed"], [[6128, 6137], "valid", [], "NV8"], [[6138, 6143], "disallowed"], [[6144, 6149], "valid", [], "NV8"], [[6150, 6150], "disallowed"], [[6151, 6154], "valid", [], "NV8"], [[6155, 6157], "ignored"], [[6158, 6158], "disallowed"], [[6159, 6159], "disallowed"], [[6160, 6169], "valid"], [[6170, 6175], "disallowed"], [[6176, 6263], "valid"], [[6264, 6271], "disallowed"], [[6272, 6313], "valid"], [[6314, 6314], "valid"], [[6315, 6319], "disallowed"], [[6320, 6389], "valid"], [[6390, 6399], "disallowed"], [[6400, 6428], "valid"], [[6429, 6430], "valid"], [[6431, 6431], "disallowed"], [[6432, 6443], "valid"], [[6444, 6447], "disallowed"], [[6448, 6459], "valid"], [[6460, 6463], "disallowed"], [[6464, 6464], "valid", [], "NV8"], [[6465, 6467], "disallowed"], [[6468, 6469], "valid", [], "NV8"], [[6470, 6509], "valid"], [[6510, 6511], "disallowed"], [[6512, 6516], "valid"], [[6517, 6527], "disallowed"], [[6528, 6569], "valid"], [[6570, 6571], "valid"], [[6572, 6575], "disallowed"], [[6576, 6601], "valid"], [[6602, 6607], "disallowed"], [[6608, 6617], "valid"], [[6618, 6618], "valid", [], "XV8"], [[6619, 6621], "disallowed"], [[6622, 6623], "valid", [], "NV8"], [[6624, 6655], "valid", [], "NV8"], [[6656, 6683], "valid"], [[6684, 6685], "disallowed"], [[6686, 6687], "valid", [], "NV8"], [[6688, 6750], "valid"], [[6751, 6751], "disallowed"], [[6752, 6780], "valid"], [[6781, 6782], "disallowed"], [[6783, 6793], "valid"], [[6794, 6799], "disallowed"], [[6800, 6809], "valid"], [[6810, 6815], "disallowed"], [[6816, 6822], "valid", [], "NV8"], [[6823, 6823], "valid"], [[6824, 6829], "valid", [], "NV8"], [[6830, 6831], "disallowed"], [[6832, 6845], "valid"], [[6846, 6846], "valid", [], "NV8"], [[6847, 6911], "disallowed"], [[6912, 6987], "valid"], [[6988, 6991], "disallowed"], [[6992, 7001], "valid"], [[7002, 7018], "valid", [], "NV8"], [[7019, 7027], "valid"], [[7028, 7036], "valid", [], "NV8"], [[7037, 7039], "disallowed"], [[7040, 7082], "valid"], [[7083, 7085], "valid"], [[7086, 7097], "valid"], [[7098, 7103], "valid"], [[7104, 7155], "valid"], [[7156, 7163], "disallowed"], [[7164, 7167], "valid", [], "NV8"], [[7168, 7223], "valid"], [[7224, 7226], "disallowed"], [[7227, 7231], "valid", [], "NV8"], [[7232, 7241], "valid"], [[7242, 7244], "disallowed"], [[7245, 7293], "valid"], [[7294, 7295], "valid", [], "NV8"], [[7296, 7359], "disallowed"], [[7360, 7367], "valid", [], "NV8"], [[7368, 7375], "disallowed"], [[7376, 7378], "valid"], [[7379, 7379], "valid", [], "NV8"], [[7380, 7410], "valid"], [[7411, 7414], "valid"], [[7415, 7415], "disallowed"], [[7416, 7417], "valid"], [[7418, 7423], "disallowed"], [[7424, 7467], "valid"], [[7468, 7468], "mapped", [97]], [[7469, 7469], "mapped", [230]], [[7470, 7470], "mapped", [98]], [[7471, 7471], "valid"], [[7472, 7472], "mapped", [100]], [[7473, 7473], "mapped", [101]], [[7474, 7474], "mapped", [477]], [[7475, 7475], "mapped", [103]], [[7476, 7476], "mapped", [104]], [[7477, 7477], "mapped", [105]], [[7478, 7478], "mapped", [106]], [[7479, 7479], "mapped", [107]], [[7480, 7480], "mapped", [108]], [[7481, 7481], "mapped", [109]], [[7482, 7482], "mapped", [110]], [[7483, 7483], "valid"], [[7484, 7484], "mapped", [111]], [[7485, 7485], "mapped", [547]], [[7486, 7486], "mapped", [112]], [[7487, 7487], "mapped", [114]], [[7488, 7488], "mapped", [116]], [[7489, 7489], "mapped", [117]], [[7490, 7490], "mapped", [119]], [[7491, 7491], "mapped", [97]], [[7492, 7492], "mapped", [592]], [[7493, 7493], "mapped", [593]], [[7494, 7494], "mapped", [7426]], [[7495, 7495], "mapped", [98]], [[7496, 7496], "mapped", [100]], [[7497, 7497], "mapped", [101]], [[7498, 7498], "mapped", [601]], [[7499, 7499], "mapped", [603]], [[7500, 7500], "mapped", [604]], [[7501, 7501], "mapped", [103]], [[7502, 7502], "valid"], [[7503, 7503], "mapped", [107]], [[7504, 7504], "mapped", [109]], [[7505, 7505], "mapped", [331]], [[7506, 7506], "mapped", [111]], [[7507, 7507], "mapped", [596]], [[7508, 7508], "mapped", [7446]], [[7509, 7509], "mapped", [7447]], [[7510, 7510], "mapped", [112]], [[7511, 7511], "mapped", [116]], [[7512, 7512], "mapped", [117]], [[7513, 7513], "mapped", [7453]], [[7514, 7514], "mapped", [623]], [[7515, 7515], "mapped", [118]], [[7516, 7516], "mapped", [7461]], [[7517, 7517], "mapped", [946]], [[7518, 7518], "mapped", [947]], [[7519, 7519], "mapped", [948]], [[7520, 7520], "mapped", [966]], [[7521, 7521], "mapped", [967]], [[7522, 7522], "mapped", [105]], [[7523, 7523], "mapped", [114]], [[7524, 7524], "mapped", [117]], [[7525, 7525], "mapped", [118]], [[7526, 7526], "mapped", [946]], [[7527, 7527], "mapped", [947]], [[7528, 7528], "mapped", [961]], [[7529, 7529], "mapped", [966]], [[7530, 7530], "mapped", [967]], [[7531, 7531], "valid"], [[7532, 7543], "valid"], [[7544, 7544], "mapped", [1085]], [[7545, 7578], "valid"], [[7579, 7579], "mapped", [594]], [[7580, 7580], "mapped", [99]], [[7581, 7581], "mapped", [597]], [[7582, 7582], "mapped", [240]], [[7583, 7583], "mapped", [604]], [[7584, 7584], "mapped", [102]], [[7585, 7585], "mapped", [607]], [[7586, 7586], "mapped", [609]], [[7587, 7587], "mapped", [613]], [[7588, 7588], "mapped", [616]], [[7589, 7589], "mapped", [617]], [[7590, 7590], "mapped", [618]], [[7591, 7591], "mapped", [7547]], [[7592, 7592], "mapped", [669]], [[7593, 7593], "mapped", [621]], [[7594, 7594], "mapped", [7557]], [[7595, 7595], "mapped", [671]], [[7596, 7596], "mapped", [625]], [[7597, 7597], "mapped", [624]], [[7598, 7598], "mapped", [626]], [[7599, 7599], "mapped", [627]], [[7600, 7600], "mapped", [628]], [[7601, 7601], "mapped", [629]], [[7602, 7602], "mapped", [632]], [[7603, 7603], "mapped", [642]], [[7604, 7604], "mapped", [643]], [[7605, 7605], "mapped", [427]], [[7606, 7606], "mapped", [649]], [[7607, 7607], "mapped", [650]], [[7608, 7608], "mapped", [7452]], [[7609, 7609], "mapped", [651]], [[7610, 7610], "mapped", [652]], [[7611, 7611], "mapped", [122]], [[7612, 7612], "mapped", [656]], [[7613, 7613], "mapped", [657]], [[7614, 7614], "mapped", [658]], [[7615, 7615], "mapped", [952]], [[7616, 7619], "valid"], [[7620, 7626], "valid"], [[7627, 7654], "valid"], [[7655, 7669], "valid"], [[7670, 7675], "disallowed"], [[7676, 7676], "valid"], [[7677, 7677], "valid"], [[7678, 7679], "valid"], [[7680, 7680], "mapped", [7681]], [[7681, 7681], "valid"], [[7682, 7682], "mapped", [7683]], [[7683, 7683], "valid"], [[7684, 7684], "mapped", [7685]], [[7685, 7685], "valid"], [[7686, 7686], "mapped", [7687]], [[7687, 7687], "valid"], [[7688, 7688], "mapped", [7689]], [[7689, 7689], "valid"], [[7690, 7690], "mapped", [7691]], [[7691, 7691], "valid"], [[7692, 7692], "mapped", [7693]], [[7693, 7693], "valid"], [[7694, 7694], "mapped", [7695]], [[7695, 7695], "valid"], [[7696, 7696], "mapped", [7697]], [[7697, 7697], "valid"], [[7698, 7698], "mapped", [7699]], [[7699, 7699], "valid"], [[7700, 7700], "mapped", [7701]], [[7701, 7701], "valid"], [[7702, 7702], "mapped", [7703]], [[7703, 7703], "valid"], [[7704, 7704], "mapped", [7705]], [[7705, 7705], "valid"], [[7706, 7706], "mapped", [7707]], [[7707, 7707], "valid"], [[7708, 7708], "mapped", [7709]], [[7709, 7709], "valid"], [[7710, 7710], "mapped", [7711]], [[7711, 7711], "valid"], [[7712, 7712], "mapped", [7713]], [[7713, 7713], "valid"], [[7714, 7714], "mapped", [7715]], [[7715, 7715], "valid"], [[7716, 7716], "mapped", [7717]], [[7717, 7717], "valid"], [[7718, 7718], "mapped", [7719]], [[7719, 7719], "valid"], [[7720, 7720], "mapped", [7721]], [[7721, 7721], "valid"], [[7722, 7722], "mapped", [7723]], [[7723, 7723], "valid"], [[7724, 7724], "mapped", [7725]], [[7725, 7725], "valid"], [[7726, 7726], "mapped", [7727]], [[7727, 7727], "valid"], [[7728, 7728], "mapped", [7729]], [[7729, 7729], "valid"], [[7730, 7730], "mapped", [7731]], [[7731, 7731], "valid"], [[7732, 7732], "mapped", [7733]], [[7733, 7733], "valid"], [[7734, 7734], "mapped", [7735]], [[7735, 7735], "valid"], [[7736, 7736], "mapped", [7737]], [[7737, 7737], "valid"], [[7738, 7738], "mapped", [7739]], [[7739, 7739], "valid"], [[7740, 7740], "mapped", [7741]], [[7741, 7741], "valid"], [[7742, 7742], "mapped", [7743]], [[7743, 7743], "valid"], [[7744, 7744], "mapped", [7745]], [[7745, 7745], "valid"], [[7746, 7746], "mapped", [7747]], [[7747, 7747], "valid"], [[7748, 7748], "mapped", [7749]], [[7749, 7749], "valid"], [[7750, 7750], "mapped", [7751]], [[7751, 7751], "valid"], [[7752, 7752], "mapped", [7753]], [[7753, 7753], "valid"], [[7754, 7754], "mapped", [7755]], [[7755, 7755], "valid"], [[7756, 7756], "mapped", [7757]], [[7757, 7757], "valid"], [[7758, 7758], "mapped", [7759]], [[7759, 7759], "valid"], [[7760, 7760], "mapped", [7761]], [[7761, 7761], "valid"], [[7762, 7762], "mapped", [7763]], [[7763, 7763], "valid"], [[7764, 7764], "mapped", [7765]], [[7765, 7765], "valid"], [[7766, 7766], "mapped", [7767]], [[7767, 7767], "valid"], [[7768, 7768], "mapped", [7769]], [[7769, 7769], "valid"], [[7770, 7770], "mapped", [7771]], [[7771, 7771], "valid"], [[7772, 7772], "mapped", [7773]], [[7773, 7773], "valid"], [[7774, 7774], "mapped", [7775]], [[7775, 7775], "valid"], [[7776, 7776], "mapped", [7777]], [[7777, 7777], "valid"], [[7778, 7778], "mapped", [7779]], [[7779, 7779], "valid"], [[7780, 7780], "mapped", [7781]], [[7781, 7781], "valid"], [[7782, 7782], "mapped", [7783]], [[7783, 7783], "valid"], [[7784, 7784], "mapped", [7785]], [[7785, 7785], "valid"], [[7786, 7786], "mapped", [7787]], [[7787, 7787], "valid"], [[7788, 7788], "mapped", [7789]], [[7789, 7789], "valid"], [[7790, 7790], "mapped", [7791]], [[7791, 7791], "valid"], [[7792, 7792], "mapped", [7793]], [[7793, 7793], "valid"], [[7794, 7794], "mapped", [7795]], [[7795, 7795], "valid"], [[7796, 7796], "mapped", [7797]], [[7797, 7797], "valid"], [[7798, 7798], "mapped", [7799]], [[7799, 7799], "valid"], [[7800, 7800], "mapped", [7801]], [[7801, 7801], "valid"], [[7802, 7802], "mapped", [7803]], [[7803, 7803], "valid"], [[7804, 7804], "mapped", [7805]], [[7805, 7805], "valid"], [[7806, 7806], "mapped", [7807]], [[7807, 7807], "valid"], [[7808, 7808], "mapped", [7809]], [[7809, 7809], "valid"], [[7810, 7810], "mapped", [7811]], [[7811, 7811], "valid"], [[7812, 7812], "mapped", [7813]], [[7813, 7813], "valid"], [[7814, 7814], "mapped", [7815]], [[7815, 7815], "valid"], [[7816, 7816], "mapped", [7817]], [[7817, 7817], "valid"], [[7818, 7818], "mapped", [7819]], [[7819, 7819], "valid"], [[7820, 7820], "mapped", [7821]], [[7821, 7821], "valid"], [[7822, 7822], "mapped", [7823]], [[7823, 7823], "valid"], [[7824, 7824], "mapped", [7825]], [[7825, 7825], "valid"], [[7826, 7826], "mapped", [7827]], [[7827, 7827], "valid"], [[7828, 7828], "mapped", [7829]], [[7829, 7833], "valid"], [[7834, 7834], "mapped", [97, 702]], [[7835, 7835], "mapped", [7777]], [[7836, 7837], "valid"], [[7838, 7838], "mapped", [115, 115]], [[7839, 7839], "valid"], [[7840, 7840], "mapped", [7841]], [[7841, 7841], "valid"], [[7842, 7842], "mapped", [7843]], [[7843, 7843], "valid"], [[7844, 7844], "mapped", [7845]], [[7845, 7845], "valid"], [[7846, 7846], "mapped", [7847]], [[7847, 7847], "valid"], [[7848, 7848], "mapped", [7849]], [[7849, 7849], "valid"], [[7850, 7850], "mapped", [7851]], [[7851, 7851], "valid"], [[7852, 7852], "mapped", [7853]], [[7853, 7853], "valid"], [[7854, 7854], "mapped", [7855]], [[7855, 7855], "valid"], [[7856, 7856], "mapped", [7857]], [[7857, 7857], "valid"], [[7858, 7858], "mapped", [7859]], [[7859, 7859], "valid"], [[7860, 7860], "mapped", [7861]], [[7861, 7861], "valid"], [[7862, 7862], "mapped", [7863]], [[7863, 7863], "valid"], [[7864, 7864], "mapped", [7865]], [[7865, 7865], "valid"], [[7866, 7866], "mapped", [7867]], [[7867, 7867], "valid"], [[7868, 7868], "mapped", [7869]], [[7869, 7869], "valid"], [[7870, 7870], "mapped", [7871]], [[7871, 7871], "valid"], [[7872, 7872], "mapped", [7873]], [[7873, 7873], "valid"], [[7874, 7874], "mapped", [7875]], [[7875, 7875], "valid"], [[7876, 7876], "mapped", [7877]], [[7877, 7877], "valid"], [[7878, 7878], "mapped", [7879]], [[7879, 7879], "valid"], [[7880, 7880], "mapped", [7881]], [[7881, 7881], "valid"], [[7882, 7882], "mapped", [7883]], [[7883, 7883], "valid"], [[7884, 7884], "mapped", [7885]], [[7885, 7885], "valid"], [[7886, 7886], "mapped", [7887]], [[7887, 7887], "valid"], [[7888, 7888], "mapped", [7889]], [[7889, 7889], "valid"], [[7890, 7890], "mapped", [7891]], [[7891, 7891], "valid"], [[7892, 7892], "mapped", [7893]], [[7893, 7893], "valid"], [[7894, 7894], "mapped", [7895]], [[7895, 7895], "valid"], [[7896, 7896], "mapped", [7897]], [[7897, 7897], "valid"], [[7898, 7898], "mapped", [7899]], [[7899, 7899], "valid"], [[7900, 7900], "mapped", [7901]], [[7901, 7901], "valid"], [[7902, 7902], "mapped", [7903]], [[7903, 7903], "valid"], [[7904, 7904], "mapped", [7905]], [[7905, 7905], "valid"], [[7906, 7906], "mapped", [7907]], [[7907, 7907], "valid"], [[7908, 7908], "mapped", [7909]], [[7909, 7909], "valid"], [[7910, 7910], "mapped", [7911]], [[7911, 7911], "valid"], [[7912, 7912], "mapped", [7913]], [[7913, 7913], "valid"], [[7914, 7914], "mapped", [7915]], [[7915, 7915], "valid"], [[7916, 7916], "mapped", [7917]], [[7917, 7917], "valid"], [[7918, 7918], "mapped", [7919]], [[7919, 7919], "valid"], [[7920, 7920], "mapped", [7921]], [[7921, 7921], "valid"], [[7922, 7922], "mapped", [7923]], [[7923, 7923], "valid"], [[7924, 7924], "mapped", [7925]], [[7925, 7925], "valid"], [[7926, 7926], "mapped", [7927]], [[7927, 7927], "valid"], [[7928, 7928], "mapped", [7929]], [[7929, 7929], "valid"], [[7930, 7930], "mapped", [7931]], [[7931, 7931], "valid"], [[7932, 7932], "mapped", [7933]], [[7933, 7933], "valid"], [[7934, 7934], "mapped", [7935]], [[7935, 7935], "valid"], [[7936, 7943], "valid"], [[7944, 7944], "mapped", [7936]], [[7945, 7945], "mapped", [7937]], [[7946, 7946], "mapped", [7938]], [[7947, 7947], "mapped", [7939]], [[7948, 7948], "mapped", [7940]], [[7949, 7949], "mapped", [7941]], [[7950, 7950], "mapped", [7942]], [[7951, 7951], "mapped", [7943]], [[7952, 7957], "valid"], [[7958, 7959], "disallowed"], [[7960, 7960], "mapped", [7952]], [[7961, 7961], "mapped", [7953]], [[7962, 7962], "mapped", [7954]], [[7963, 7963], "mapped", [7955]], [[7964, 7964], "mapped", [7956]], [[7965, 7965], "mapped", [7957]], [[7966, 7967], "disallowed"], [[7968, 7975], "valid"], [[7976, 7976], "mapped", [7968]], [[7977, 7977], "mapped", [7969]], [[7978, 7978], "mapped", [7970]], [[7979, 7979], "mapped", [7971]], [[7980, 7980], "mapped", [7972]], [[7981, 7981], "mapped", [7973]], [[7982, 7982], "mapped", [7974]], [[7983, 7983], "mapped", [7975]], [[7984, 7991], "valid"], [[7992, 7992], "mapped", [7984]], [[7993, 7993], "mapped", [7985]], [[7994, 7994], "mapped", [7986]], [[7995, 7995], "mapped", [7987]], [[7996, 7996], "mapped", [7988]], [[7997, 7997], "mapped", [7989]], [[7998, 7998], "mapped", [7990]], [[7999, 7999], "mapped", [7991]], [[8e3, 8005], "valid"], [[8006, 8007], "disallowed"], [[8008, 8008], "mapped", [8e3]], [[8009, 8009], "mapped", [8001]], [[8010, 8010], "mapped", [8002]], [[8011, 8011], "mapped", [8003]], [[8012, 8012], "mapped", [8004]], [[8013, 8013], "mapped", [8005]], [[8014, 8015], "disallowed"], [[8016, 8023], "valid"], [[8024, 8024], "disallowed"], [[8025, 8025], "mapped", [8017]], [[8026, 8026], "disallowed"], [[8027, 8027], "mapped", [8019]], [[8028, 8028], "disallowed"], [[8029, 8029], "mapped", [8021]], [[8030, 8030], "disallowed"], [[8031, 8031], "mapped", [8023]], [[8032, 8039], "valid"], [[8040, 8040], "mapped", [8032]], [[8041, 8041], "mapped", [8033]], [[8042, 8042], "mapped", [8034]], [[8043, 8043], "mapped", [8035]], [[8044, 8044], "mapped", [8036]], [[8045, 8045], "mapped", [8037]], [[8046, 8046], "mapped", [8038]], [[8047, 8047], "mapped", [8039]], [[8048, 8048], "valid"], [[8049, 8049], "mapped", [940]], [[8050, 8050], "valid"], [[8051, 8051], "mapped", [941]], [[8052, 8052], "valid"], [[8053, 8053], "mapped", [942]], [[8054, 8054], "valid"], [[8055, 8055], "mapped", [943]], [[8056, 8056], "valid"], [[8057, 8057], "mapped", [972]], [[8058, 8058], "valid"], [[8059, 8059], "mapped", [973]], [[8060, 8060], "valid"], [[8061, 8061], "mapped", [974]], [[8062, 8063], "disallowed"], [[8064, 8064], "mapped", [7936, 953]], [[8065, 8065], "mapped", [7937, 953]], [[8066, 8066], "mapped", [7938, 953]], [[8067, 8067], "mapped", [7939, 953]], [[8068, 8068], "mapped", [7940, 953]], [[8069, 8069], "mapped", [7941, 953]], [[8070, 8070], "mapped", [7942, 953]], [[8071, 8071], "mapped", [7943, 953]], [[8072, 8072], "mapped", [7936, 953]], [[8073, 8073], "mapped", [7937, 953]], [[8074, 8074], "mapped", [7938, 953]], [[8075, 8075], "mapped", [7939, 953]], [[8076, 8076], "mapped", [7940, 953]], [[8077, 8077], "mapped", [7941, 953]], [[8078, 8078], "mapped", [7942, 953]], [[8079, 8079], "mapped", [7943, 953]], [[8080, 8080], "mapped", [7968, 953]], [[8081, 8081], "mapped", [7969, 953]], [[8082, 8082], "mapped", [7970, 953]], [[8083, 8083], "mapped", [7971, 953]], [[8084, 8084], "mapped", [7972, 953]], [[8085, 8085], "mapped", [7973, 953]], [[8086, 8086], "mapped", [7974, 953]], [[8087, 8087], "mapped", [7975, 953]], [[8088, 8088], "mapped", [7968, 953]], [[8089, 8089], "mapped", [7969, 953]], [[8090, 8090], "mapped", [7970, 953]], [[8091, 8091], "mapped", [7971, 953]], [[8092, 8092], "mapped", [7972, 953]], [[8093, 8093], "mapped", [7973, 953]], [[8094, 8094], "mapped", [7974, 953]], [[8095, 8095], "mapped", [7975, 953]], [[8096, 8096], "mapped", [8032, 953]], [[8097, 8097], "mapped", [8033, 953]], [[8098, 8098], "mapped", [8034, 953]], [[8099, 8099], "mapped", [8035, 953]], [[8100, 8100], "mapped", [8036, 953]], [[8101, 8101], "mapped", [8037, 953]], [[8102, 8102], "mapped", [8038, 953]], [[8103, 8103], "mapped", [8039, 953]], [[8104, 8104], "mapped", [8032, 953]], [[8105, 8105], "mapped", [8033, 953]], [[8106, 8106], "mapped", [8034, 953]], [[8107, 8107], "mapped", [8035, 953]], [[8108, 8108], "mapped", [8036, 953]], [[8109, 8109], "mapped", [8037, 953]], [[8110, 8110], "mapped", [8038, 953]], [[8111, 8111], "mapped", [8039, 953]], [[8112, 8113], "valid"], [[8114, 8114], "mapped", [8048, 953]], [[8115, 8115], "mapped", [945, 953]], [[8116, 8116], "mapped", [940, 953]], [[8117, 8117], "disallowed"], [[8118, 8118], "valid"], [[8119, 8119], "mapped", [8118, 953]], [[8120, 8120], "mapped", [8112]], [[8121, 8121], "mapped", [8113]], [[8122, 8122], "mapped", [8048]], [[8123, 8123], "mapped", [940]], [[8124, 8124], "mapped", [945, 953]], [[8125, 8125], "disallowed_STD3_mapped", [32, 787]], [[8126, 8126], "mapped", [953]], [[8127, 8127], "disallowed_STD3_mapped", [32, 787]], [[8128, 8128], "disallowed_STD3_mapped", [32, 834]], [[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]], [[8130, 8130], "mapped", [8052, 953]], [[8131, 8131], "mapped", [951, 953]], [[8132, 8132], "mapped", [942, 953]], [[8133, 8133], "disallowed"], [[8134, 8134], "valid"], [[8135, 8135], "mapped", [8134, 953]], [[8136, 8136], "mapped", [8050]], [[8137, 8137], "mapped", [941]], [[8138, 8138], "mapped", [8052]], [[8139, 8139], "mapped", [942]], [[8140, 8140], "mapped", [951, 953]], [[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]], [[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]], [[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]], [[8144, 8146], "valid"], [[8147, 8147], "mapped", [912]], [[8148, 8149], "disallowed"], [[8150, 8151], "valid"], [[8152, 8152], "mapped", [8144]], [[8153, 8153], "mapped", [8145]], [[8154, 8154], "mapped", [8054]], [[8155, 8155], "mapped", [943]], [[8156, 8156], "disallowed"], [[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]], [[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]], [[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]], [[8160, 8162], "valid"], [[8163, 8163], "mapped", [944]], [[8164, 8167], "valid"], [[8168, 8168], "mapped", [8160]], [[8169, 8169], "mapped", [8161]], [[8170, 8170], "mapped", [8058]], [[8171, 8171], "mapped", [973]], [[8172, 8172], "mapped", [8165]], [[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]], [[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]], [[8175, 8175], "disallowed_STD3_mapped", [96]], [[8176, 8177], "disallowed"], [[8178, 8178], "mapped", [8060, 953]], [[8179, 8179], "mapped", [969, 953]], [[8180, 8180], "mapped", [974, 953]], [[8181, 8181], "disallowed"], [[8182, 8182], "valid"], [[8183, 8183], "mapped", [8182, 953]], [[8184, 8184], "mapped", [8056]], [[8185, 8185], "mapped", [972]], [[8186, 8186], "mapped", [8060]], [[8187, 8187], "mapped", [974]], [[8188, 8188], "mapped", [969, 953]], [[8189, 8189], "disallowed_STD3_mapped", [32, 769]], [[8190, 8190], "disallowed_STD3_mapped", [32, 788]], [[8191, 8191], "disallowed"], [[8192, 8202], "disallowed_STD3_mapped", [32]], [[8203, 8203], "ignored"], [[8204, 8205], "deviation", []], [[8206, 8207], "disallowed"], [[8208, 8208], "valid", [], "NV8"], [[8209, 8209], "mapped", [8208]], [[8210, 8214], "valid", [], "NV8"], [[8215, 8215], "disallowed_STD3_mapped", [32, 819]], [[8216, 8227], "valid", [], "NV8"], [[8228, 8230], "disallowed"], [[8231, 8231], "valid", [], "NV8"], [[8232, 8238], "disallowed"], [[8239, 8239], "disallowed_STD3_mapped", [32]], [[8240, 8242], "valid", [], "NV8"], [[8243, 8243], "mapped", [8242, 8242]], [[8244, 8244], "mapped", [8242, 8242, 8242]], [[8245, 8245], "valid", [], "NV8"], [[8246, 8246], "mapped", [8245, 8245]], [[8247, 8247], "mapped", [8245, 8245, 8245]], [[8248, 8251], "valid", [], "NV8"], [[8252, 8252], "disallowed_STD3_mapped", [33, 33]], [[8253, 8253], "valid", [], "NV8"], [[8254, 8254], "disallowed_STD3_mapped", [32, 773]], [[8255, 8262], "valid", [], "NV8"], [[8263, 8263], "disallowed_STD3_mapped", [63, 63]], [[8264, 8264], "disallowed_STD3_mapped", [63, 33]], [[8265, 8265], "disallowed_STD3_mapped", [33, 63]], [[8266, 8269], "valid", [], "NV8"], [[8270, 8274], "valid", [], "NV8"], [[8275, 8276], "valid", [], "NV8"], [[8277, 8278], "valid", [], "NV8"], [[8279, 8279], "mapped", [8242, 8242, 8242, 8242]], [[8280, 8286], "valid", [], "NV8"], [[8287, 8287], "disallowed_STD3_mapped", [32]], [[8288, 8288], "ignored"], [[8289, 8291], "disallowed"], [[8292, 8292], "ignored"], [[8293, 8293], "disallowed"], [[8294, 8297], "disallowed"], [[8298, 8303], "disallowed"], [[8304, 8304], "mapped", [48]], [[8305, 8305], "mapped", [105]], [[8306, 8307], "disallowed"], [[8308, 8308], "mapped", [52]], [[8309, 8309], "mapped", [53]], [[8310, 8310], "mapped", [54]], [[8311, 8311], "mapped", [55]], [[8312, 8312], "mapped", [56]], [[8313, 8313], "mapped", [57]], [[8314, 8314], "disallowed_STD3_mapped", [43]], [[8315, 8315], "mapped", [8722]], [[8316, 8316], "disallowed_STD3_mapped", [61]], [[8317, 8317], "disallowed_STD3_mapped", [40]], [[8318, 8318], "disallowed_STD3_mapped", [41]], [[8319, 8319], "mapped", [110]], [[8320, 8320], "mapped", [48]], [[8321, 8321], "mapped", [49]], [[8322, 8322], "mapped", [50]], [[8323, 8323], "mapped", [51]], [[8324, 8324], "mapped", [52]], [[8325, 8325], "mapped", [53]], [[8326, 8326], "mapped", [54]], [[8327, 8327], "mapped", [55]], [[8328, 8328], "mapped", [56]], [[8329, 8329], "mapped", [57]], [[8330, 8330], "disallowed_STD3_mapped", [43]], [[8331, 8331], "mapped", [8722]], [[8332, 8332], "disallowed_STD3_mapped", [61]], [[8333, 8333], "disallowed_STD3_mapped", [40]], [[8334, 8334], "disallowed_STD3_mapped", [41]], [[8335, 8335], "disallowed"], [[8336, 8336], "mapped", [97]], [[8337, 8337], "mapped", [101]], [[8338, 8338], "mapped", [111]], [[8339, 8339], "mapped", [120]], [[8340, 8340], "mapped", [601]], [[8341, 8341], "mapped", [104]], [[8342, 8342], "mapped", [107]], [[8343, 8343], "mapped", [108]], [[8344, 8344], "mapped", [109]], [[8345, 8345], "mapped", [110]], [[8346, 8346], "mapped", [112]], [[8347, 8347], "mapped", [115]], [[8348, 8348], "mapped", [116]], [[8349, 8351], "disallowed"], [[8352, 8359], "valid", [], "NV8"], [[8360, 8360], "mapped", [114, 115]], [[8361, 8362], "valid", [], "NV8"], [[8363, 8363], "valid", [], "NV8"], [[8364, 8364], "valid", [], "NV8"], [[8365, 8367], "valid", [], "NV8"], [[8368, 8369], "valid", [], "NV8"], [[8370, 8373], "valid", [], "NV8"], [[8374, 8376], "valid", [], "NV8"], [[8377, 8377], "valid", [], "NV8"], [[8378, 8378], "valid", [], "NV8"], [[8379, 8381], "valid", [], "NV8"], [[8382, 8382], "valid", [], "NV8"], [[8383, 8399], "disallowed"], [[8400, 8417], "valid", [], "NV8"], [[8418, 8419], "valid", [], "NV8"], [[8420, 8426], "valid", [], "NV8"], [[8427, 8427], "valid", [], "NV8"], [[8428, 8431], "valid", [], "NV8"], [[8432, 8432], "valid", [], "NV8"], [[8433, 8447], "disallowed"], [[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]], [[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]], [[8450, 8450], "mapped", [99]], [[8451, 8451], "mapped", [176, 99]], [[8452, 8452], "valid", [], "NV8"], [[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]], [[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]], [[8455, 8455], "mapped", [603]], [[8456, 8456], "valid", [], "NV8"], [[8457, 8457], "mapped", [176, 102]], [[8458, 8458], "mapped", [103]], [[8459, 8462], "mapped", [104]], [[8463, 8463], "mapped", [295]], [[8464, 8465], "mapped", [105]], [[8466, 8467], "mapped", [108]], [[8468, 8468], "valid", [], "NV8"], [[8469, 8469], "mapped", [110]], [[8470, 8470], "mapped", [110, 111]], [[8471, 8472], "valid", [], "NV8"], [[8473, 8473], "mapped", [112]], [[8474, 8474], "mapped", [113]], [[8475, 8477], "mapped", [114]], [[8478, 8479], "valid", [], "NV8"], [[8480, 8480], "mapped", [115, 109]], [[8481, 8481], "mapped", [116, 101, 108]], [[8482, 8482], "mapped", [116, 109]], [[8483, 8483], "valid", [], "NV8"], [[8484, 8484], "mapped", [122]], [[8485, 8485], "valid", [], "NV8"], [[8486, 8486], "mapped", [969]], [[8487, 8487], "valid", [], "NV8"], [[8488, 8488], "mapped", [122]], [[8489, 8489], "valid", [], "NV8"], [[8490, 8490], "mapped", [107]], [[8491, 8491], "mapped", [229]], [[8492, 8492], "mapped", [98]], [[8493, 8493], "mapped", [99]], [[8494, 8494], "valid", [], "NV8"], [[8495, 8496], "mapped", [101]], [[8497, 8497], "mapped", [102]], [[8498, 8498], "disallowed"], [[8499, 8499], "mapped", [109]], [[8500, 8500], "mapped", [111]], [[8501, 8501], "mapped", [1488]], [[8502, 8502], "mapped", [1489]], [[8503, 8503], "mapped", [1490]], [[8504, 8504], "mapped", [1491]], [[8505, 8505], "mapped", [105]], [[8506, 8506], "valid", [], "NV8"], [[8507, 8507], "mapped", [102, 97, 120]], [[8508, 8508], "mapped", [960]], [[8509, 8510], "mapped", [947]], [[8511, 8511], "mapped", [960]], [[8512, 8512], "mapped", [8721]], [[8513, 8516], "valid", [], "NV8"], [[8517, 8518], "mapped", [100]], [[8519, 8519], "mapped", [101]], [[8520, 8520], "mapped", [105]], [[8521, 8521], "mapped", [106]], [[8522, 8523], "valid", [], "NV8"], [[8524, 8524], "valid", [], "NV8"], [[8525, 8525], "valid", [], "NV8"], [[8526, 8526], "valid"], [[8527, 8527], "valid", [], "NV8"], [[8528, 8528], "mapped", [49, 8260, 55]], [[8529, 8529], "mapped", [49, 8260, 57]], [[8530, 8530], "mapped", [49, 8260, 49, 48]], [[8531, 8531], "mapped", [49, 8260, 51]], [[8532, 8532], "mapped", [50, 8260, 51]], [[8533, 8533], "mapped", [49, 8260, 53]], [[8534, 8534], "mapped", [50, 8260, 53]], [[8535, 8535], "mapped", [51, 8260, 53]], [[8536, 8536], "mapped", [52, 8260, 53]], [[8537, 8537], "mapped", [49, 8260, 54]], [[8538, 8538], "mapped", [53, 8260, 54]], [[8539, 8539], "mapped", [49, 8260, 56]], [[8540, 8540], "mapped", [51, 8260, 56]], [[8541, 8541], "mapped", [53, 8260, 56]], [[8542, 8542], "mapped", [55, 8260, 56]], [[8543, 8543], "mapped", [49, 8260]], [[8544, 8544], "mapped", [105]], [[8545, 8545], "mapped", [105, 105]], [[8546, 8546], "mapped", [105, 105, 105]], [[8547, 8547], "mapped", [105, 118]], [[8548, 8548], "mapped", [118]], [[8549, 8549], "mapped", [118, 105]], [[8550, 8550], "mapped", [118, 105, 105]], [[8551, 8551], "mapped", [118, 105, 105, 105]], [[8552, 8552], "mapped", [105, 120]], [[8553, 8553], "mapped", [120]], [[8554, 8554], "mapped", [120, 105]], [[8555, 8555], "mapped", [120, 105, 105]], [[8556, 8556], "mapped", [108]], [[8557, 8557], "mapped", [99]], [[8558, 8558], "mapped", [100]], [[8559, 8559], "mapped", [109]], [[8560, 8560], "mapped", [105]], [[8561, 8561], "mapped", [105, 105]], [[8562, 8562], "mapped", [105, 105, 105]], [[8563, 8563], "mapped", [105, 118]], [[8564, 8564], "mapped", [118]], [[8565, 8565], "mapped", [118, 105]], [[8566, 8566], "mapped", [118, 105, 105]], [[8567, 8567], "mapped", [118, 105, 105, 105]], [[8568, 8568], "mapped", [105, 120]], [[8569, 8569], "mapped", [120]], [[8570, 8570], "mapped", [120, 105]], [[8571, 8571], "mapped", [120, 105, 105]], [[8572, 8572], "mapped", [108]], [[8573, 8573], "mapped", [99]], [[8574, 8574], "mapped", [100]], [[8575, 8575], "mapped", [109]], [[8576, 8578], "valid", [], "NV8"], [[8579, 8579], "disallowed"], [[8580, 8580], "valid"], [[8581, 8584], "valid", [], "NV8"], [[8585, 8585], "mapped", [48, 8260, 51]], [[8586, 8587], "valid", [], "NV8"], [[8588, 8591], "disallowed"], [[8592, 8682], "valid", [], "NV8"], [[8683, 8691], "valid", [], "NV8"], [[8692, 8703], "valid", [], "NV8"], [[8704, 8747], "valid", [], "NV8"], [[8748, 8748], "mapped", [8747, 8747]], [[8749, 8749], "mapped", [8747, 8747, 8747]], [[8750, 8750], "valid", [], "NV8"], [[8751, 8751], "mapped", [8750, 8750]], [[8752, 8752], "mapped", [8750, 8750, 8750]], [[8753, 8799], "valid", [], "NV8"], [[8800, 8800], "disallowed_STD3_valid"], [[8801, 8813], "valid", [], "NV8"], [[8814, 8815], "disallowed_STD3_valid"], [[8816, 8945], "valid", [], "NV8"], [[8946, 8959], "valid", [], "NV8"], [[8960, 8960], "valid", [], "NV8"], [[8961, 8961], "valid", [], "NV8"], [[8962, 9e3], "valid", [], "NV8"], [[9001, 9001], "mapped", [12296]], [[9002, 9002], "mapped", [12297]], [[9003, 9082], "valid", [], "NV8"], [[9083, 9083], "valid", [], "NV8"], [[9084, 9084], "valid", [], "NV8"], [[9085, 9114], "valid", [], "NV8"], [[9115, 9166], "valid", [], "NV8"], [[9167, 9168], "valid", [], "NV8"], [[9169, 9179], "valid", [], "NV8"], [[9180, 9191], "valid", [], "NV8"], [[9192, 9192], "valid", [], "NV8"], [[9193, 9203], "valid", [], "NV8"], [[9204, 9210], "valid", [], "NV8"], [[9211, 9215], "disallowed"], [[9216, 9252], "valid", [], "NV8"], [[9253, 9254], "valid", [], "NV8"], [[9255, 9279], "disallowed"], [[9280, 9290], "valid", [], "NV8"], [[9291, 9311], "disallowed"], [[9312, 9312], "mapped", [49]], [[9313, 9313], "mapped", [50]], [[9314, 9314], "mapped", [51]], [[9315, 9315], "mapped", [52]], [[9316, 9316], "mapped", [53]], [[9317, 9317], "mapped", [54]], [[9318, 9318], "mapped", [55]], [[9319, 9319], "mapped", [56]], [[9320, 9320], "mapped", [57]], [[9321, 9321], "mapped", [49, 48]], [[9322, 9322], "mapped", [49, 49]], [[9323, 9323], "mapped", [49, 50]], [[9324, 9324], "mapped", [49, 51]], [[9325, 9325], "mapped", [49, 52]], [[9326, 9326], "mapped", [49, 53]], [[9327, 9327], "mapped", [49, 54]], [[9328, 9328], "mapped", [49, 55]], [[9329, 9329], "mapped", [49, 56]], [[9330, 9330], "mapped", [49, 57]], [[9331, 9331], "mapped", [50, 48]], [[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]], [[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]], [[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]], [[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]], [[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]], [[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]], [[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]], [[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]], [[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]], [[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]], [[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]], [[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]], [[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]], [[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]], [[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]], [[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]], [[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]], [[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]], [[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]], [[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]], [[9352, 9371], "disallowed"], [[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]], [[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]], [[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]], [[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]], [[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]], [[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]], [[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]], [[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]], [[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]], [[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]], [[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]], [[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]], [[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]], [[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]], [[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]], [[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]], [[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]], [[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]], [[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]], [[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]], [[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]], [[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]], [[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]], [[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]], [[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]], [[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]], [[9398, 9398], "mapped", [97]], [[9399, 9399], "mapped", [98]], [[9400, 9400], "mapped", [99]], [[9401, 9401], "mapped", [100]], [[9402, 9402], "mapped", [101]], [[9403, 9403], "mapped", [102]], [[9404, 9404], "mapped", [103]], [[9405, 9405], "mapped", [104]], [[9406, 9406], "mapped", [105]], [[9407, 9407], "mapped", [106]], [[9408, 9408], "mapped", [107]], [[9409, 9409], "mapped", [108]], [[9410, 9410], "mapped", [109]], [[9411, 9411], "mapped", [110]], [[9412, 9412], "mapped", [111]], [[9413, 9413], "mapped", [112]], [[9414, 9414], "mapped", [113]], [[9415, 9415], "mapped", [114]], [[9416, 9416], "mapped", [115]], [[9417, 9417], "mapped", [116]], [[9418, 9418], "mapped", [117]], [[9419, 9419], "mapped", [118]], [[9420, 9420], "mapped", [119]], [[9421, 9421], "mapped", [120]], [[9422, 9422], "mapped", [121]], [[9423, 9423], "mapped", [122]], [[9424, 9424], "mapped", [97]], [[9425, 9425], "mapped", [98]], [[9426, 9426], "mapped", [99]], [[9427, 9427], "mapped", [100]], [[9428, 9428], "mapped", [101]], [[9429, 9429], "mapped", [102]], [[9430, 9430], "mapped", [103]], [[9431, 9431], "mapped", [104]], [[9432, 9432], "mapped", [105]], [[9433, 9433], "mapped", [106]], [[9434, 9434], "mapped", [107]], [[9435, 9435], "mapped", [108]], [[9436, 9436], "mapped", [109]], [[9437, 9437], "mapped", [110]], [[9438, 9438], "mapped", [111]], [[9439, 9439], "mapped", [112]], [[9440, 9440], "mapped", [113]], [[9441, 9441], "mapped", [114]], [[9442, 9442], "mapped", [115]], [[9443, 9443], "mapped", [116]], [[9444, 9444], "mapped", [117]], [[9445, 9445], "mapped", [118]], [[9446, 9446], "mapped", [119]], [[9447, 9447], "mapped", [120]], [[9448, 9448], "mapped", [121]], [[9449, 9449], "mapped", [122]], [[9450, 9450], "mapped", [48]], [[9451, 9470], "valid", [], "NV8"], [[9471, 9471], "valid", [], "NV8"], [[9472, 9621], "valid", [], "NV8"], [[9622, 9631], "valid", [], "NV8"], [[9632, 9711], "valid", [], "NV8"], [[9712, 9719], "valid", [], "NV8"], [[9720, 9727], "valid", [], "NV8"], [[9728, 9747], "valid", [], "NV8"], [[9748, 9749], "valid", [], "NV8"], [[9750, 9751], "valid", [], "NV8"], [[9752, 9752], "valid", [], "NV8"], [[9753, 9753], "valid", [], "NV8"], [[9754, 9839], "valid", [], "NV8"], [[9840, 9841], "valid", [], "NV8"], [[9842, 9853], "valid", [], "NV8"], [[9854, 9855], "valid", [], "NV8"], [[9856, 9865], "valid", [], "NV8"], [[9866, 9873], "valid", [], "NV8"], [[9874, 9884], "valid", [], "NV8"], [[9885, 9885], "valid", [], "NV8"], [[9886, 9887], "valid", [], "NV8"], [[9888, 9889], "valid", [], "NV8"], [[9890, 9905], "valid", [], "NV8"], [[9906, 9906], "valid", [], "NV8"], [[9907, 9916], "valid", [], "NV8"], [[9917, 9919], "valid", [], "NV8"], [[9920, 9923], "valid", [], "NV8"], [[9924, 9933], "valid", [], "NV8"], [[9934, 9934], "valid", [], "NV8"], [[9935, 9953], "valid", [], "NV8"], [[9954, 9954], "valid", [], "NV8"], [[9955, 9955], "valid", [], "NV8"], [[9956, 9959], "valid", [], "NV8"], [[9960, 9983], "valid", [], "NV8"], [[9984, 9984], "valid", [], "NV8"], [[9985, 9988], "valid", [], "NV8"], [[9989, 9989], "valid", [], "NV8"], [[9990, 9993], "valid", [], "NV8"], [[9994, 9995], "valid", [], "NV8"], [[9996, 10023], "valid", [], "NV8"], [[10024, 10024], "valid", [], "NV8"], [[10025, 10059], "valid", [], "NV8"], [[10060, 10060], "valid", [], "NV8"], [[10061, 10061], "valid", [], "NV8"], [[10062, 10062], "valid", [], "NV8"], [[10063, 10066], "valid", [], "NV8"], [[10067, 10069], "valid", [], "NV8"], [[10070, 10070], "valid", [], "NV8"], [[10071, 10071], "valid", [], "NV8"], [[10072, 10078], "valid", [], "NV8"], [[10079, 10080], "valid", [], "NV8"], [[10081, 10087], "valid", [], "NV8"], [[10088, 10101], "valid", [], "NV8"], [[10102, 10132], "valid", [], "NV8"], [[10133, 10135], "valid", [], "NV8"], [[10136, 10159], "valid", [], "NV8"], [[10160, 10160], "valid", [], "NV8"], [[10161, 10174], "valid", [], "NV8"], [[10175, 10175], "valid", [], "NV8"], [[10176, 10182], "valid", [], "NV8"], [[10183, 10186], "valid", [], "NV8"], [[10187, 10187], "valid", [], "NV8"], [[10188, 10188], "valid", [], "NV8"], [[10189, 10189], "valid", [], "NV8"], [[10190, 10191], "valid", [], "NV8"], [[10192, 10219], "valid", [], "NV8"], [[10220, 10223], "valid", [], "NV8"], [[10224, 10239], "valid", [], "NV8"], [[10240, 10495], "valid", [], "NV8"], [[10496, 10763], "valid", [], "NV8"], [[10764, 10764], "mapped", [8747, 8747, 8747, 8747]], [[10765, 10867], "valid", [], "NV8"], [[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]], [[10869, 10869], "disallowed_STD3_mapped", [61, 61]], [[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]], [[10871, 10971], "valid", [], "NV8"], [[10972, 10972], "mapped", [10973, 824]], [[10973, 11007], "valid", [], "NV8"], [[11008, 11021], "valid", [], "NV8"], [[11022, 11027], "valid", [], "NV8"], [[11028, 11034], "valid", [], "NV8"], [[11035, 11039], "valid", [], "NV8"], [[11040, 11043], "valid", [], "NV8"], [[11044, 11084], "valid", [], "NV8"], [[11085, 11087], "valid", [], "NV8"], [[11088, 11092], "valid", [], "NV8"], [[11093, 11097], "valid", [], "NV8"], [[11098, 11123], "valid", [], "NV8"], [[11124, 11125], "disallowed"], [[11126, 11157], "valid", [], "NV8"], [[11158, 11159], "disallowed"], [[11160, 11193], "valid", [], "NV8"], [[11194, 11196], "disallowed"], [[11197, 11208], "valid", [], "NV8"], [[11209, 11209], "disallowed"], [[11210, 11217], "valid", [], "NV8"], [[11218, 11243], "disallowed"], [[11244, 11247], "valid", [], "NV8"], [[11248, 11263], "disallowed"], [[11264, 11264], "mapped", [11312]], [[11265, 11265], "mapped", [11313]], [[11266, 11266], "mapped", [11314]], [[11267, 11267], "mapped", [11315]], [[11268, 11268], "mapped", [11316]], [[11269, 11269], "mapped", [11317]], [[11270, 11270], "mapped", [11318]], [[11271, 11271], "mapped", [11319]], [[11272, 11272], "mapped", [11320]], [[11273, 11273], "mapped", [11321]], [[11274, 11274], "mapped", [11322]], [[11275, 11275], "mapped", [11323]], [[11276, 11276], "mapped", [11324]], [[11277, 11277], "mapped", [11325]], [[11278, 11278], "mapped", [11326]], [[11279, 11279], "mapped", [11327]], [[11280, 11280], "mapped", [11328]], [[11281, 11281], "mapped", [11329]], [[11282, 11282], "mapped", [11330]], [[11283, 11283], "mapped", [11331]], [[11284, 11284], "mapped", [11332]], [[11285, 11285], "mapped", [11333]], [[11286, 11286], "mapped", [11334]], [[11287, 11287], "mapped", [11335]], [[11288, 11288], "mapped", [11336]], [[11289, 11289], "mapped", [11337]], [[11290, 11290], "mapped", [11338]], [[11291, 11291], "mapped", [11339]], [[11292, 11292], "mapped", [11340]], [[11293, 11293], "mapped", [11341]], [[11294, 11294], "mapped", [11342]], [[11295, 11295], "mapped", [11343]], [[11296, 11296], "mapped", [11344]], [[11297, 11297], "mapped", [11345]], [[11298, 11298], "mapped", [11346]], [[11299, 11299], "mapped", [11347]], [[11300, 11300], "mapped", [11348]], [[11301, 11301], "mapped", [11349]], [[11302, 11302], "mapped", [11350]], [[11303, 11303], "mapped", [11351]], [[11304, 11304], "mapped", [11352]], [[11305, 11305], "mapped", [11353]], [[11306, 11306], "mapped", [11354]], [[11307, 11307], "mapped", [11355]], [[11308, 11308], "mapped", [11356]], [[11309, 11309], "mapped", [11357]], [[11310, 11310], "mapped", [11358]], [[11311, 11311], "disallowed"], [[11312, 11358], "valid"], [[11359, 11359], "disallowed"], [[11360, 11360], "mapped", [11361]], [[11361, 11361], "valid"], [[11362, 11362], "mapped", [619]], [[11363, 11363], "mapped", [7549]], [[11364, 11364], "mapped", [637]], [[11365, 11366], "valid"], [[11367, 11367], "mapped", [11368]], [[11368, 11368], "valid"], [[11369, 11369], "mapped", [11370]], [[11370, 11370], "valid"], [[11371, 11371], "mapped", [11372]], [[11372, 11372], "valid"], [[11373, 11373], "mapped", [593]], [[11374, 11374], "mapped", [625]], [[11375, 11375], "mapped", [592]], [[11376, 11376], "mapped", [594]], [[11377, 11377], "valid"], [[11378, 11378], "mapped", [11379]], [[11379, 11379], "valid"], [[11380, 11380], "valid"], [[11381, 11381], "mapped", [11382]], [[11382, 11383], "valid"], [[11384, 11387], "valid"], [[11388, 11388], "mapped", [106]], [[11389, 11389], "mapped", [118]], [[11390, 11390], "mapped", [575]], [[11391, 11391], "mapped", [576]], [[11392, 11392], "mapped", [11393]], [[11393, 11393], "valid"], [[11394, 11394], "mapped", [11395]], [[11395, 11395], "valid"], [[11396, 11396], "mapped", [11397]], [[11397, 11397], "valid"], [[11398, 11398], "mapped", [11399]], [[11399, 11399], "valid"], [[11400, 11400], "mapped", [11401]], [[11401, 11401], "valid"], [[11402, 11402], "mapped", [11403]], [[11403, 11403], "valid"], [[11404, 11404], "mapped", [11405]], [[11405, 11405], "valid"], [[11406, 11406], "mapped", [11407]], [[11407, 11407], "valid"], [[11408, 11408], "mapped", [11409]], [[11409, 11409], "valid"], [[11410, 11410], "mapped", [11411]], [[11411, 11411], "valid"], [[11412, 11412], "mapped", [11413]], [[11413, 11413], "valid"], [[11414, 11414], "mapped", [11415]], [[11415, 11415], "valid"], [[11416, 11416], "mapped", [11417]], [[11417, 11417], "valid"], [[11418, 11418], "mapped", [11419]], [[11419, 11419], "valid"], [[11420, 11420], "mapped", [11421]], [[11421, 11421], "valid"], [[11422, 11422], "mapped", [11423]], [[11423, 11423], "valid"], [[11424, 11424], "mapped", [11425]], [[11425, 11425], "valid"], [[11426, 11426], "mapped", [11427]], [[11427, 11427], "valid"], [[11428, 11428], "mapped", [11429]], [[11429, 11429], "valid"], [[11430, 11430], "mapped", [11431]], [[11431, 11431], "valid"], [[11432, 11432], "mapped", [11433]], [[11433, 11433], "valid"], [[11434, 11434], "mapped", [11435]], [[11435, 11435], "valid"], [[11436, 11436], "mapped", [11437]], [[11437, 11437], "valid"], [[11438, 11438], "mapped", [11439]], [[11439, 11439], "valid"], [[11440, 11440], "mapped", [11441]], [[11441, 11441], "valid"], [[11442, 11442], "mapped", [11443]], [[11443, 11443], "valid"], [[11444, 11444], "mapped", [11445]], [[11445, 11445], "valid"], [[11446, 11446], "mapped", [11447]], [[11447, 11447], "valid"], [[11448, 11448], "mapped", [11449]], [[11449, 11449], "valid"], [[11450, 11450], "mapped", [11451]], [[11451, 11451], "valid"], [[11452, 11452], "mapped", [11453]], [[11453, 11453], "valid"], [[11454, 11454], "mapped", [11455]], [[11455, 11455], "valid"], [[11456, 11456], "mapped", [11457]], [[11457, 11457], "valid"], [[11458, 11458], "mapped", [11459]], [[11459, 11459], "valid"], [[11460, 11460], "mapped", [11461]], [[11461, 11461], "valid"], [[11462, 11462], "mapped", [11463]], [[11463, 11463], "valid"], [[11464, 11464], "mapped", [11465]], [[11465, 11465], "valid"], [[11466, 11466], "mapped", [11467]], [[11467, 11467], "valid"], [[11468, 11468], "mapped", [11469]], [[11469, 11469], "valid"], [[11470, 11470], "mapped", [11471]], [[11471, 11471], "valid"], [[11472, 11472], "mapped", [11473]], [[11473, 11473], "valid"], [[11474, 11474], "mapped", [11475]], [[11475, 11475], "valid"], [[11476, 11476], "mapped", [11477]], [[11477, 11477], "valid"], [[11478, 11478], "mapped", [11479]], [[11479, 11479], "valid"], [[11480, 11480], "mapped", [11481]], [[11481, 11481], "valid"], [[11482, 11482], "mapped", [11483]], [[11483, 11483], "valid"], [[11484, 11484], "mapped", [11485]], [[11485, 11485], "valid"], [[11486, 11486], "mapped", [11487]], [[11487, 11487], "valid"], [[11488, 11488], "mapped", [11489]], [[11489, 11489], "valid"], [[11490, 11490], "mapped", [11491]], [[11491, 11492], "valid"], [[11493, 11498], "valid", [], "NV8"], [[11499, 11499], "mapped", [11500]], [[11500, 11500], "valid"], [[11501, 11501], "mapped", [11502]], [[11502, 11505], "valid"], [[11506, 11506], "mapped", [11507]], [[11507, 11507], "valid"], [[11508, 11512], "disallowed"], [[11513, 11519], "valid", [], "NV8"], [[11520, 11557], "valid"], [[11558, 11558], "disallowed"], [[11559, 11559], "valid"], [[11560, 11564], "disallowed"], [[11565, 11565], "valid"], [[11566, 11567], "disallowed"], [[11568, 11621], "valid"], [[11622, 11623], "valid"], [[11624, 11630], "disallowed"], [[11631, 11631], "mapped", [11617]], [[11632, 11632], "valid", [], "NV8"], [[11633, 11646], "disallowed"], [[11647, 11647], "valid"], [[11648, 11670], "valid"], [[11671, 11679], "disallowed"], [[11680, 11686], "valid"], [[11687, 11687], "disallowed"], [[11688, 11694], "valid"], [[11695, 11695], "disallowed"], [[11696, 11702], "valid"], [[11703, 11703], "disallowed"], [[11704, 11710], "valid"], [[11711, 11711], "disallowed"], [[11712, 11718], "valid"], [[11719, 11719], "disallowed"], [[11720, 11726], "valid"], [[11727, 11727], "disallowed"], [[11728, 11734], "valid"], [[11735, 11735], "disallowed"], [[11736, 11742], "valid"], [[11743, 11743], "disallowed"], [[11744, 11775], "valid"], [[11776, 11799], "valid", [], "NV8"], [[11800, 11803], "valid", [], "NV8"], [[11804, 11805], "valid", [], "NV8"], [[11806, 11822], "valid", [], "NV8"], [[11823, 11823], "valid"], [[11824, 11824], "valid", [], "NV8"], [[11825, 11825], "valid", [], "NV8"], [[11826, 11835], "valid", [], "NV8"], [[11836, 11842], "valid", [], "NV8"], [[11843, 11903], "disallowed"], [[11904, 11929], "valid", [], "NV8"], [[11930, 11930], "disallowed"], [[11931, 11934], "valid", [], "NV8"], [[11935, 11935], "mapped", [27597]], [[11936, 12018], "valid", [], "NV8"], [[12019, 12019], "mapped", [40863]], [[12020, 12031], "disallowed"], [[12032, 12032], "mapped", [19968]], [[12033, 12033], "mapped", [20008]], [[12034, 12034], "mapped", [20022]], [[12035, 12035], "mapped", [20031]], [[12036, 12036], "mapped", [20057]], [[12037, 12037], "mapped", [20101]], [[12038, 12038], "mapped", [20108]], [[12039, 12039], "mapped", [20128]], [[12040, 12040], "mapped", [20154]], [[12041, 12041], "mapped", [20799]], [[12042, 12042], "mapped", [20837]], [[12043, 12043], "mapped", [20843]], [[12044, 12044], "mapped", [20866]], [[12045, 12045], "mapped", [20886]], [[12046, 12046], "mapped", [20907]], [[12047, 12047], "mapped", [20960]], [[12048, 12048], "mapped", [20981]], [[12049, 12049], "mapped", [20992]], [[12050, 12050], "mapped", [21147]], [[12051, 12051], "mapped", [21241]], [[12052, 12052], "mapped", [21269]], [[12053, 12053], "mapped", [21274]], [[12054, 12054], "mapped", [21304]], [[12055, 12055], "mapped", [21313]], [[12056, 12056], "mapped", [21340]], [[12057, 12057], "mapped", [21353]], [[12058, 12058], "mapped", [21378]], [[12059, 12059], "mapped", [21430]], [[12060, 12060], "mapped", [21448]], [[12061, 12061], "mapped", [21475]], [[12062, 12062], "mapped", [22231]], [[12063, 12063], "mapped", [22303]], [[12064, 12064], "mapped", [22763]], [[12065, 12065], "mapped", [22786]], [[12066, 12066], "mapped", [22794]], [[12067, 12067], "mapped", [22805]], [[12068, 12068], "mapped", [22823]], [[12069, 12069], "mapped", [22899]], [[12070, 12070], "mapped", [23376]], [[12071, 12071], "mapped", [23424]], [[12072, 12072], "mapped", [23544]], [[12073, 12073], "mapped", [23567]], [[12074, 12074], "mapped", [23586]], [[12075, 12075], "mapped", [23608]], [[12076, 12076], "mapped", [23662]], [[12077, 12077], "mapped", [23665]], [[12078, 12078], "mapped", [24027]], [[12079, 12079], "mapped", [24037]], [[12080, 12080], "mapped", [24049]], [[12081, 12081], "mapped", [24062]], [[12082, 12082], "mapped", [24178]], [[12083, 12083], "mapped", [24186]], [[12084, 12084], "mapped", [24191]], [[12085, 12085], "mapped", [24308]], [[12086, 12086], "mapped", [24318]], [[12087, 12087], "mapped", [24331]], [[12088, 12088], "mapped", [24339]], [[12089, 12089], "mapped", [24400]], [[12090, 12090], "mapped", [24417]], [[12091, 12091], "mapped", [24435]], [[12092, 12092], "mapped", [24515]], [[12093, 12093], "mapped", [25096]], [[12094, 12094], "mapped", [25142]], [[12095, 12095], "mapped", [25163]], [[12096, 12096], "mapped", [25903]], [[12097, 12097], "mapped", [25908]], [[12098, 12098], "mapped", [25991]], [[12099, 12099], "mapped", [26007]], [[12100, 12100], "mapped", [26020]], [[12101, 12101], "mapped", [26041]], [[12102, 12102], "mapped", [26080]], [[12103, 12103], "mapped", [26085]], [[12104, 12104], "mapped", [26352]], [[12105, 12105], "mapped", [26376]], [[12106, 12106], "mapped", [26408]], [[12107, 12107], "mapped", [27424]], [[12108, 12108], "mapped", [27490]], [[12109, 12109], "mapped", [27513]], [[12110, 12110], "mapped", [27571]], [[12111, 12111], "mapped", [27595]], [[12112, 12112], "mapped", [27604]], [[12113, 12113], "mapped", [27611]], [[12114, 12114], "mapped", [27663]], [[12115, 12115], "mapped", [27668]], [[12116, 12116], "mapped", [27700]], [[12117, 12117], "mapped", [28779]], [[12118, 12118], "mapped", [29226]], [[12119, 12119], "mapped", [29238]], [[12120, 12120], "mapped", [29243]], [[12121, 12121], "mapped", [29247]], [[12122, 12122], "mapped", [29255]], [[12123, 12123], "mapped", [29273]], [[12124, 12124], "mapped", [29275]], [[12125, 12125], "mapped", [29356]], [[12126, 12126], "mapped", [29572]], [[12127, 12127], "mapped", [29577]], [[12128, 12128], "mapped", [29916]], [[12129, 12129], "mapped", [29926]], [[12130, 12130], "mapped", [29976]], [[12131, 12131], "mapped", [29983]], [[12132, 12132], "mapped", [29992]], [[12133, 12133], "mapped", [3e4]], [[12134, 12134], "mapped", [30091]], [[12135, 12135], "mapped", [30098]], [[12136, 12136], "mapped", [30326]], [[12137, 12137], "mapped", [30333]], [[12138, 12138], "mapped", [30382]], [[12139, 12139], "mapped", [30399]], [[12140, 12140], "mapped", [30446]], [[12141, 12141], "mapped", [30683]], [[12142, 12142], "mapped", [30690]], [[12143, 12143], "mapped", [30707]], [[12144, 12144], "mapped", [31034]], [[12145, 12145], "mapped", [31160]], [[12146, 12146], "mapped", [31166]], [[12147, 12147], "mapped", [31348]], [[12148, 12148], "mapped", [31435]], [[12149, 12149], "mapped", [31481]], [[12150, 12150], "mapped", [31859]], [[12151, 12151], "mapped", [31992]], [[12152, 12152], "mapped", [32566]], [[12153, 12153], "mapped", [32593]], [[12154, 12154], "mapped", [32650]], [[12155, 12155], "mapped", [32701]], [[12156, 12156], "mapped", [32769]], [[12157, 12157], "mapped", [32780]], [[12158, 12158], "mapped", [32786]], [[12159, 12159], "mapped", [32819]], [[12160, 12160], "mapped", [32895]], [[12161, 12161], "mapped", [32905]], [[12162, 12162], "mapped", [33251]], [[12163, 12163], "mapped", [33258]], [[12164, 12164], "mapped", [33267]], [[12165, 12165], "mapped", [33276]], [[12166, 12166], "mapped", [33292]], [[12167, 12167], "mapped", [33307]], [[12168, 12168], "mapped", [33311]], [[12169, 12169], "mapped", [33390]], [[12170, 12170], "mapped", [33394]], [[12171, 12171], "mapped", [33400]], [[12172, 12172], "mapped", [34381]], [[12173, 12173], "mapped", [34411]], [[12174, 12174], "mapped", [34880]], [[12175, 12175], "mapped", [34892]], [[12176, 12176], "mapped", [34915]], [[12177, 12177], "mapped", [35198]], [[12178, 12178], "mapped", [35211]], [[12179, 12179], "mapped", [35282]], [[12180, 12180], "mapped", [35328]], [[12181, 12181], "mapped", [35895]], [[12182, 12182], "mapped", [35910]], [[12183, 12183], "mapped", [35925]], [[12184, 12184], "mapped", [35960]], [[12185, 12185], "mapped", [35997]], [[12186, 12186], "mapped", [36196]], [[12187, 12187], "mapped", [36208]], [[12188, 12188], "mapped", [36275]], [[12189, 12189], "mapped", [36523]], [[12190, 12190], "mapped", [36554]], [[12191, 12191], "mapped", [36763]], [[12192, 12192], "mapped", [36784]], [[12193, 12193], "mapped", [36789]], [[12194, 12194], "mapped", [37009]], [[12195, 12195], "mapped", [37193]], [[12196, 12196], "mapped", [37318]], [[12197, 12197], "mapped", [37324]], [[12198, 12198], "mapped", [37329]], [[12199, 12199], "mapped", [38263]], [[12200, 12200], "mapped", [38272]], [[12201, 12201], "mapped", [38428]], [[12202, 12202], "mapped", [38582]], [[12203, 12203], "mapped", [38585]], [[12204, 12204], "mapped", [38632]], [[12205, 12205], "mapped", [38737]], [[12206, 12206], "mapped", [38750]], [[12207, 12207], "mapped", [38754]], [[12208, 12208], "mapped", [38761]], [[12209, 12209], "mapped", [38859]], [[12210, 12210], "mapped", [38893]], [[12211, 12211], "mapped", [38899]], [[12212, 12212], "mapped", [38913]], [[12213, 12213], "mapped", [39080]], [[12214, 12214], "mapped", [39131]], [[12215, 12215], "mapped", [39135]], [[12216, 12216], "mapped", [39318]], [[12217, 12217], "mapped", [39321]], [[12218, 12218], "mapped", [39340]], [[12219, 12219], "mapped", [39592]], [[12220, 12220], "mapped", [39640]], [[12221, 12221], "mapped", [39647]], [[12222, 12222], "mapped", [39717]], [[12223, 12223], "mapped", [39727]], [[12224, 12224], "mapped", [39730]], [[12225, 12225], "mapped", [39740]], [[12226, 12226], "mapped", [39770]], [[12227, 12227], "mapped", [40165]], [[12228, 12228], "mapped", [40565]], [[12229, 12229], "mapped", [40575]], [[12230, 12230], "mapped", [40613]], [[12231, 12231], "mapped", [40635]], [[12232, 12232], "mapped", [40643]], [[12233, 12233], "mapped", [40653]], [[12234, 12234], "mapped", [40657]], [[12235, 12235], "mapped", [40697]], [[12236, 12236], "mapped", [40701]], [[12237, 12237], "mapped", [40718]], [[12238, 12238], "mapped", [40723]], [[12239, 12239], "mapped", [40736]], [[12240, 12240], "mapped", [40763]], [[12241, 12241], "mapped", [40778]], [[12242, 12242], "mapped", [40786]], [[12243, 12243], "mapped", [40845]], [[12244, 12244], "mapped", [40860]], [[12245, 12245], "mapped", [40864]], [[12246, 12271], "disallowed"], [[12272, 12283], "disallowed"], [[12284, 12287], "disallowed"], [[12288, 12288], "disallowed_STD3_mapped", [32]], [[12289, 12289], "valid", [], "NV8"], [[12290, 12290], "mapped", [46]], [[12291, 12292], "valid", [], "NV8"], [[12293, 12295], "valid"], [[12296, 12329], "valid", [], "NV8"], [[12330, 12333], "valid"], [[12334, 12341], "valid", [], "NV8"], [[12342, 12342], "mapped", [12306]], [[12343, 12343], "valid", [], "NV8"], [[12344, 12344], "mapped", [21313]], [[12345, 12345], "mapped", [21316]], [[12346, 12346], "mapped", [21317]], [[12347, 12347], "valid", [], "NV8"], [[12348, 12348], "valid"], [[12349, 12349], "valid", [], "NV8"], [[12350, 12350], "valid", [], "NV8"], [[12351, 12351], "valid", [], "NV8"], [[12352, 12352], "disallowed"], [[12353, 12436], "valid"], [[12437, 12438], "valid"], [[12439, 12440], "disallowed"], [[12441, 12442], "valid"], [[12443, 12443], "disallowed_STD3_mapped", [32, 12441]], [[12444, 12444], "disallowed_STD3_mapped", [32, 12442]], [[12445, 12446], "valid"], [[12447, 12447], "mapped", [12424, 12426]], [[12448, 12448], "valid", [], "NV8"], [[12449, 12542], "valid"], [[12543, 12543], "mapped", [12467, 12488]], [[12544, 12548], "disallowed"], [[12549, 12588], "valid"], [[12589, 12589], "valid"], [[12590, 12592], "disallowed"], [[12593, 12593], "mapped", [4352]], [[12594, 12594], "mapped", [4353]], [[12595, 12595], "mapped", [4522]], [[12596, 12596], "mapped", [4354]], [[12597, 12597], "mapped", [4524]], [[12598, 12598], "mapped", [4525]], [[12599, 12599], "mapped", [4355]], [[12600, 12600], "mapped", [4356]], [[12601, 12601], "mapped", [4357]], [[12602, 12602], "mapped", [4528]], [[12603, 12603], "mapped", [4529]], [[12604, 12604], "mapped", [4530]], [[12605, 12605], "mapped", [4531]], [[12606, 12606], "mapped", [4532]], [[12607, 12607], "mapped", [4533]], [[12608, 12608], "mapped", [4378]], [[12609, 12609], "mapped", [4358]], [[12610, 12610], "mapped", [4359]], [[12611, 12611], "mapped", [4360]], [[12612, 12612], "mapped", [4385]], [[12613, 12613], "mapped", [4361]], [[12614, 12614], "mapped", [4362]], [[12615, 12615], "mapped", [4363]], [[12616, 12616], "mapped", [4364]], [[12617, 12617], "mapped", [4365]], [[12618, 12618], "mapped", [4366]], [[12619, 12619], "mapped", [4367]], [[12620, 12620], "mapped", [4368]], [[12621, 12621], "mapped", [4369]], [[12622, 12622], "mapped", [4370]], [[12623, 12623], "mapped", [4449]], [[12624, 12624], "mapped", [4450]], [[12625, 12625], "mapped", [4451]], [[12626, 12626], "mapped", [4452]], [[12627, 12627], "mapped", [4453]], [[12628, 12628], "mapped", [4454]], [[12629, 12629], "mapped", [4455]], [[12630, 12630], "mapped", [4456]], [[12631, 12631], "mapped", [4457]], [[12632, 12632], "mapped", [4458]], [[12633, 12633], "mapped", [4459]], [[12634, 12634], "mapped", [4460]], [[12635, 12635], "mapped", [4461]], [[12636, 12636], "mapped", [4462]], [[12637, 12637], "mapped", [4463]], [[12638, 12638], "mapped", [4464]], [[12639, 12639], "mapped", [4465]], [[12640, 12640], "mapped", [4466]], [[12641, 12641], "mapped", [4467]], [[12642, 12642], "mapped", [4468]], [[12643, 12643], "mapped", [4469]], [[12644, 12644], "disallowed"], [[12645, 12645], "mapped", [4372]], [[12646, 12646], "mapped", [4373]], [[12647, 12647], "mapped", [4551]], [[12648, 12648], "mapped", [4552]], [[12649, 12649], "mapped", [4556]], [[12650, 12650], "mapped", [4558]], [[12651, 12651], "mapped", [4563]], [[12652, 12652], "mapped", [4567]], [[12653, 12653], "mapped", [4569]], [[12654, 12654], "mapped", [4380]], [[12655, 12655], "mapped", [4573]], [[12656, 12656], "mapped", [4575]], [[12657, 12657], "mapped", [4381]], [[12658, 12658], "mapped", [4382]], [[12659, 12659], "mapped", [4384]], [[12660, 12660], "mapped", [4386]], [[12661, 12661], "mapped", [4387]], [[12662, 12662], "mapped", [4391]], [[12663, 12663], "mapped", [4393]], [[12664, 12664], "mapped", [4395]], [[12665, 12665], "mapped", [4396]], [[12666, 12666], "mapped", [4397]], [[12667, 12667], "mapped", [4398]], [[12668, 12668], "mapped", [4399]], [[12669, 12669], "mapped", [4402]], [[12670, 12670], "mapped", [4406]], [[12671, 12671], "mapped", [4416]], [[12672, 12672], "mapped", [4423]], [[12673, 12673], "mapped", [4428]], [[12674, 12674], "mapped", [4593]], [[12675, 12675], "mapped", [4594]], [[12676, 12676], "mapped", [4439]], [[12677, 12677], "mapped", [4440]], [[12678, 12678], "mapped", [4441]], [[12679, 12679], "mapped", [4484]], [[12680, 12680], "mapped", [4485]], [[12681, 12681], "mapped", [4488]], [[12682, 12682], "mapped", [4497]], [[12683, 12683], "mapped", [4498]], [[12684, 12684], "mapped", [4500]], [[12685, 12685], "mapped", [4510]], [[12686, 12686], "mapped", [4513]], [[12687, 12687], "disallowed"], [[12688, 12689], "valid", [], "NV8"], [[12690, 12690], "mapped", [19968]], [[12691, 12691], "mapped", [20108]], [[12692, 12692], "mapped", [19977]], [[12693, 12693], "mapped", [22235]], [[12694, 12694], "mapped", [19978]], [[12695, 12695], "mapped", [20013]], [[12696, 12696], "mapped", [19979]], [[12697, 12697], "mapped", [30002]], [[12698, 12698], "mapped", [20057]], [[12699, 12699], "mapped", [19993]], [[12700, 12700], "mapped", [19969]], [[12701, 12701], "mapped", [22825]], [[12702, 12702], "mapped", [22320]], [[12703, 12703], "mapped", [20154]], [[12704, 12727], "valid"], [[12728, 12730], "valid"], [[12731, 12735], "disallowed"], [[12736, 12751], "valid", [], "NV8"], [[12752, 12771], "valid", [], "NV8"], [[12772, 12783], "disallowed"], [[12784, 12799], "valid"], [[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]], [[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]], [[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]], [[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]], [[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]], [[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]], [[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]], [[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]], [[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]], [[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]], [[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]], [[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]], [[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]], [[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]], [[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]], [[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]], [[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]], [[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]], [[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]], [[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]], [[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]], [[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]], [[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]], [[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]], [[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]], [[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]], [[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]], [[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]], [[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]], [[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]], [[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]], [[12831, 12831], "disallowed"], [[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]], [[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]], [[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]], [[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]], [[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]], [[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]], [[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]], [[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]], [[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]], [[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]], [[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]], [[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]], [[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]], [[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]], [[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]], [[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]], [[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]], [[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]], [[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]], [[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]], [[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]], [[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]], [[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]], [[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]], [[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]], [[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]], [[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]], [[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]], [[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]], [[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]], [[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]], [[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]], [[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]], [[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]], [[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]], [[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]], [[12868, 12868], "mapped", [21839]], [[12869, 12869], "mapped", [24188]], [[12870, 12870], "mapped", [25991]], [[12871, 12871], "mapped", [31631]], [[12872, 12879], "valid", [], "NV8"], [[12880, 12880], "mapped", [112, 116, 101]], [[12881, 12881], "mapped", [50, 49]], [[12882, 12882], "mapped", [50, 50]], [[12883, 12883], "mapped", [50, 51]], [[12884, 12884], "mapped", [50, 52]], [[12885, 12885], "mapped", [50, 53]], [[12886, 12886], "mapped", [50, 54]], [[12887, 12887], "mapped", [50, 55]], [[12888, 12888], "mapped", [50, 56]], [[12889, 12889], "mapped", [50, 57]], [[12890, 12890], "mapped", [51, 48]], [[12891, 12891], "mapped", [51, 49]], [[12892, 12892], "mapped", [51, 50]], [[12893, 12893], "mapped", [51, 51]], [[12894, 12894], "mapped", [51, 52]], [[12895, 12895], "mapped", [51, 53]], [[12896, 12896], "mapped", [4352]], [[12897, 12897], "mapped", [4354]], [[12898, 12898], "mapped", [4355]], [[12899, 12899], "mapped", [4357]], [[12900, 12900], "mapped", [4358]], [[12901, 12901], "mapped", [4359]], [[12902, 12902], "mapped", [4361]], [[12903, 12903], "mapped", [4363]], [[12904, 12904], "mapped", [4364]], [[12905, 12905], "mapped", [4366]], [[12906, 12906], "mapped", [4367]], [[12907, 12907], "mapped", [4368]], [[12908, 12908], "mapped", [4369]], [[12909, 12909], "mapped", [4370]], [[12910, 12910], "mapped", [44032]], [[12911, 12911], "mapped", [45208]], [[12912, 12912], "mapped", [45796]], [[12913, 12913], "mapped", [46972]], [[12914, 12914], "mapped", [47560]], [[12915, 12915], "mapped", [48148]], [[12916, 12916], "mapped", [49324]], [[12917, 12917], "mapped", [50500]], [[12918, 12918], "mapped", [51088]], [[12919, 12919], "mapped", [52264]], [[12920, 12920], "mapped", [52852]], [[12921, 12921], "mapped", [53440]], [[12922, 12922], "mapped", [54028]], [[12923, 12923], "mapped", [54616]], [[12924, 12924], "mapped", [52280, 44256]], [[12925, 12925], "mapped", [51452, 51032]], [[12926, 12926], "mapped", [50864]], [[12927, 12927], "valid", [], "NV8"], [[12928, 12928], "mapped", [19968]], [[12929, 12929], "mapped", [20108]], [[12930, 12930], "mapped", [19977]], [[12931, 12931], "mapped", [22235]], [[12932, 12932], "mapped", [20116]], [[12933, 12933], "mapped", [20845]], [[12934, 12934], "mapped", [19971]], [[12935, 12935], "mapped", [20843]], [[12936, 12936], "mapped", [20061]], [[12937, 12937], "mapped", [21313]], [[12938, 12938], "mapped", [26376]], [[12939, 12939], "mapped", [28779]], [[12940, 12940], "mapped", [27700]], [[12941, 12941], "mapped", [26408]], [[12942, 12942], "mapped", [37329]], [[12943, 12943], "mapped", [22303]], [[12944, 12944], "mapped", [26085]], [[12945, 12945], "mapped", [26666]], [[12946, 12946], "mapped", [26377]], [[12947, 12947], "mapped", [31038]], [[12948, 12948], "mapped", [21517]], [[12949, 12949], "mapped", [29305]], [[12950, 12950], "mapped", [36001]], [[12951, 12951], "mapped", [31069]], [[12952, 12952], "mapped", [21172]], [[12953, 12953], "mapped", [31192]], [[12954, 12954], "mapped", [30007]], [[12955, 12955], "mapped", [22899]], [[12956, 12956], "mapped", [36969]], [[12957, 12957], "mapped", [20778]], [[12958, 12958], "mapped", [21360]], [[12959, 12959], "mapped", [27880]], [[12960, 12960], "mapped", [38917]], [[12961, 12961], "mapped", [20241]], [[12962, 12962], "mapped", [20889]], [[12963, 12963], "mapped", [27491]], [[12964, 12964], "mapped", [19978]], [[12965, 12965], "mapped", [20013]], [[12966, 12966], "mapped", [19979]], [[12967, 12967], "mapped", [24038]], [[12968, 12968], "mapped", [21491]], [[12969, 12969], "mapped", [21307]], [[12970, 12970], "mapped", [23447]], [[12971, 12971], "mapped", [23398]], [[12972, 12972], "mapped", [30435]], [[12973, 12973], "mapped", [20225]], [[12974, 12974], "mapped", [36039]], [[12975, 12975], "mapped", [21332]], [[12976, 12976], "mapped", [22812]], [[12977, 12977], "mapped", [51, 54]], [[12978, 12978], "mapped", [51, 55]], [[12979, 12979], "mapped", [51, 56]], [[12980, 12980], "mapped", [51, 57]], [[12981, 12981], "mapped", [52, 48]], [[12982, 12982], "mapped", [52, 49]], [[12983, 12983], "mapped", [52, 50]], [[12984, 12984], "mapped", [52, 51]], [[12985, 12985], "mapped", [52, 52]], [[12986, 12986], "mapped", [52, 53]], [[12987, 12987], "mapped", [52, 54]], [[12988, 12988], "mapped", [52, 55]], [[12989, 12989], "mapped", [52, 56]], [[12990, 12990], "mapped", [52, 57]], [[12991, 12991], "mapped", [53, 48]], [[12992, 12992], "mapped", [49, 26376]], [[12993, 12993], "mapped", [50, 26376]], [[12994, 12994], "mapped", [51, 26376]], [[12995, 12995], "mapped", [52, 26376]], [[12996, 12996], "mapped", [53, 26376]], [[12997, 12997], "mapped", [54, 26376]], [[12998, 12998], "mapped", [55, 26376]], [[12999, 12999], "mapped", [56, 26376]], [[13e3, 13e3], "mapped", [57, 26376]], [[13001, 13001], "mapped", [49, 48, 26376]], [[13002, 13002], "mapped", [49, 49, 26376]], [[13003, 13003], "mapped", [49, 50, 26376]], [[13004, 13004], "mapped", [104, 103]], [[13005, 13005], "mapped", [101, 114, 103]], [[13006, 13006], "mapped", [101, 118]], [[13007, 13007], "mapped", [108, 116, 100]], [[13008, 13008], "mapped", [12450]], [[13009, 13009], "mapped", [12452]], [[13010, 13010], "mapped", [12454]], [[13011, 13011], "mapped", [12456]], [[13012, 13012], "mapped", [12458]], [[13013, 13013], "mapped", [12459]], [[13014, 13014], "mapped", [12461]], [[13015, 13015], "mapped", [12463]], [[13016, 13016], "mapped", [12465]], [[13017, 13017], "mapped", [12467]], [[13018, 13018], "mapped", [12469]], [[13019, 13019], "mapped", [12471]], [[13020, 13020], "mapped", [12473]], [[13021, 13021], "mapped", [12475]], [[13022, 13022], "mapped", [12477]], [[13023, 13023], "mapped", [12479]], [[13024, 13024], "mapped", [12481]], [[13025, 13025], "mapped", [12484]], [[13026, 13026], "mapped", [12486]], [[13027, 13027], "mapped", [12488]], [[13028, 13028], "mapped", [12490]], [[13029, 13029], "mapped", [12491]], [[13030, 13030], "mapped", [12492]], [[13031, 13031], "mapped", [12493]], [[13032, 13032], "mapped", [12494]], [[13033, 13033], "mapped", [12495]], [[13034, 13034], "mapped", [12498]], [[13035, 13035], "mapped", [12501]], [[13036, 13036], "mapped", [12504]], [[13037, 13037], "mapped", [12507]], [[13038, 13038], "mapped", [12510]], [[13039, 13039], "mapped", [12511]], [[13040, 13040], "mapped", [12512]], [[13041, 13041], "mapped", [12513]], [[13042, 13042], "mapped", [12514]], [[13043, 13043], "mapped", [12516]], [[13044, 13044], "mapped", [12518]], [[13045, 13045], "mapped", [12520]], [[13046, 13046], "mapped", [12521]], [[13047, 13047], "mapped", [12522]], [[13048, 13048], "mapped", [12523]], [[13049, 13049], "mapped", [12524]], [[13050, 13050], "mapped", [12525]], [[13051, 13051], "mapped", [12527]], [[13052, 13052], "mapped", [12528]], [[13053, 13053], "mapped", [12529]], [[13054, 13054], "mapped", [12530]], [[13055, 13055], "disallowed"], [[13056, 13056], "mapped", [12450, 12497, 12540, 12488]], [[13057, 13057], "mapped", [12450, 12523, 12501, 12449]], [[13058, 13058], "mapped", [12450, 12531, 12506, 12450]], [[13059, 13059], "mapped", [12450, 12540, 12523]], [[13060, 13060], "mapped", [12452, 12491, 12531, 12464]], [[13061, 13061], "mapped", [12452, 12531, 12481]], [[13062, 13062], "mapped", [12454, 12457, 12531]], [[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]], [[13064, 13064], "mapped", [12456, 12540, 12459, 12540]], [[13065, 13065], "mapped", [12458, 12531, 12473]], [[13066, 13066], "mapped", [12458, 12540, 12512]], [[13067, 13067], "mapped", [12459, 12452, 12522]], [[13068, 13068], "mapped", [12459, 12521, 12483, 12488]], [[13069, 13069], "mapped", [12459, 12525, 12522, 12540]], [[13070, 13070], "mapped", [12460, 12525, 12531]], [[13071, 13071], "mapped", [12460, 12531, 12510]], [[13072, 13072], "mapped", [12462, 12460]], [[13073, 13073], "mapped", [12462, 12491, 12540]], [[13074, 13074], "mapped", [12461, 12517, 12522, 12540]], [[13075, 13075], "mapped", [12462, 12523, 12480, 12540]], [[13076, 13076], "mapped", [12461, 12525]], [[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]], [[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]], [[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]], [[13080, 13080], "mapped", [12464, 12521, 12512]], [[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]], [[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]], [[13083, 13083], "mapped", [12463, 12525, 12540, 12493]], [[13084, 13084], "mapped", [12465, 12540, 12473]], [[13085, 13085], "mapped", [12467, 12523, 12490]], [[13086, 13086], "mapped", [12467, 12540, 12509]], [[13087, 13087], "mapped", [12469, 12452, 12463, 12523]], [[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]], [[13089, 13089], "mapped", [12471, 12522, 12531, 12464]], [[13090, 13090], "mapped", [12475, 12531, 12481]], [[13091, 13091], "mapped", [12475, 12531, 12488]], [[13092, 13092], "mapped", [12480, 12540, 12473]], [[13093, 13093], "mapped", [12487, 12471]], [[13094, 13094], "mapped", [12489, 12523]], [[13095, 13095], "mapped", [12488, 12531]], [[13096, 13096], "mapped", [12490, 12494]], [[13097, 13097], "mapped", [12494, 12483, 12488]], [[13098, 13098], "mapped", [12495, 12452, 12484]], [[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]], [[13100, 13100], "mapped", [12497, 12540, 12484]], [[13101, 13101], "mapped", [12496, 12540, 12524, 12523]], [[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]], [[13103, 13103], "mapped", [12500, 12463, 12523]], [[13104, 13104], "mapped", [12500, 12467]], [[13105, 13105], "mapped", [12499, 12523]], [[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]], [[13107, 13107], "mapped", [12501, 12451, 12540, 12488]], [[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]], [[13109, 13109], "mapped", [12501, 12521, 12531]], [[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]], [[13111, 13111], "mapped", [12506, 12477]], [[13112, 13112], "mapped", [12506, 12491, 12498]], [[13113, 13113], "mapped", [12504, 12523, 12484]], [[13114, 13114], "mapped", [12506, 12531, 12473]], [[13115, 13115], "mapped", [12506, 12540, 12472]], [[13116, 13116], "mapped", [12505, 12540, 12479]], [[13117, 13117], "mapped", [12509, 12452, 12531, 12488]], [[13118, 13118], "mapped", [12508, 12523, 12488]], [[13119, 13119], "mapped", [12507, 12531]], [[13120, 13120], "mapped", [12509, 12531, 12489]], [[13121, 13121], "mapped", [12507, 12540, 12523]], [[13122, 13122], "mapped", [12507, 12540, 12531]], [[13123, 13123], "mapped", [12510, 12452, 12463, 12525]], [[13124, 13124], "mapped", [12510, 12452, 12523]], [[13125, 13125], "mapped", [12510, 12483, 12495]], [[13126, 13126], "mapped", [12510, 12523, 12463]], [[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]], [[13128, 13128], "mapped", [12511, 12463, 12525, 12531]], [[13129, 13129], "mapped", [12511, 12522]], [[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]], [[13131, 13131], "mapped", [12513, 12460]], [[13132, 13132], "mapped", [12513, 12460, 12488, 12531]], [[13133, 13133], "mapped", [12513, 12540, 12488, 12523]], [[13134, 13134], "mapped", [12516, 12540, 12489]], [[13135, 13135], "mapped", [12516, 12540, 12523]], [[13136, 13136], "mapped", [12518, 12450, 12531]], [[13137, 13137], "mapped", [12522, 12483, 12488, 12523]], [[13138, 13138], "mapped", [12522, 12521]], [[13139, 13139], "mapped", [12523, 12500, 12540]], [[13140, 13140], "mapped", [12523, 12540, 12502, 12523]], [[13141, 13141], "mapped", [12524, 12512]], [[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]], [[13143, 13143], "mapped", [12527, 12483, 12488]], [[13144, 13144], "mapped", [48, 28857]], [[13145, 13145], "mapped", [49, 28857]], [[13146, 13146], "mapped", [50, 28857]], [[13147, 13147], "mapped", [51, 28857]], [[13148, 13148], "mapped", [52, 28857]], [[13149, 13149], "mapped", [53, 28857]], [[13150, 13150], "mapped", [54, 28857]], [[13151, 13151], "mapped", [55, 28857]], [[13152, 13152], "mapped", [56, 28857]], [[13153, 13153], "mapped", [57, 28857]], [[13154, 13154], "mapped", [49, 48, 28857]], [[13155, 13155], "mapped", [49, 49, 28857]], [[13156, 13156], "mapped", [49, 50, 28857]], [[13157, 13157], "mapped", [49, 51, 28857]], [[13158, 13158], "mapped", [49, 52, 28857]], [[13159, 13159], "mapped", [49, 53, 28857]], [[13160, 13160], "mapped", [49, 54, 28857]], [[13161, 13161], "mapped", [49, 55, 28857]], [[13162, 13162], "mapped", [49, 56, 28857]], [[13163, 13163], "mapped", [49, 57, 28857]], [[13164, 13164], "mapped", [50, 48, 28857]], [[13165, 13165], "mapped", [50, 49, 28857]], [[13166, 13166], "mapped", [50, 50, 28857]], [[13167, 13167], "mapped", [50, 51, 28857]], [[13168, 13168], "mapped", [50, 52, 28857]], [[13169, 13169], "mapped", [104, 112, 97]], [[13170, 13170], "mapped", [100, 97]], [[13171, 13171], "mapped", [97, 117]], [[13172, 13172], "mapped", [98, 97, 114]], [[13173, 13173], "mapped", [111, 118]], [[13174, 13174], "mapped", [112, 99]], [[13175, 13175], "mapped", [100, 109]], [[13176, 13176], "mapped", [100, 109, 50]], [[13177, 13177], "mapped", [100, 109, 51]], [[13178, 13178], "mapped", [105, 117]], [[13179, 13179], "mapped", [24179, 25104]], [[13180, 13180], "mapped", [26157, 21644]], [[13181, 13181], "mapped", [22823, 27491]], [[13182, 13182], "mapped", [26126, 27835]], [[13183, 13183], "mapped", [26666, 24335, 20250, 31038]], [[13184, 13184], "mapped", [112, 97]], [[13185, 13185], "mapped", [110, 97]], [[13186, 13186], "mapped", [956, 97]], [[13187, 13187], "mapped", [109, 97]], [[13188, 13188], "mapped", [107, 97]], [[13189, 13189], "mapped", [107, 98]], [[13190, 13190], "mapped", [109, 98]], [[13191, 13191], "mapped", [103, 98]], [[13192, 13192], "mapped", [99, 97, 108]], [[13193, 13193], "mapped", [107, 99, 97, 108]], [[13194, 13194], "mapped", [112, 102]], [[13195, 13195], "mapped", [110, 102]], [[13196, 13196], "mapped", [956, 102]], [[13197, 13197], "mapped", [956, 103]], [[13198, 13198], "mapped", [109, 103]], [[13199, 13199], "mapped", [107, 103]], [[13200, 13200], "mapped", [104, 122]], [[13201, 13201], "mapped", [107, 104, 122]], [[13202, 13202], "mapped", [109, 104, 122]], [[13203, 13203], "mapped", [103, 104, 122]], [[13204, 13204], "mapped", [116, 104, 122]], [[13205, 13205], "mapped", [956, 108]], [[13206, 13206], "mapped", [109, 108]], [[13207, 13207], "mapped", [100, 108]], [[13208, 13208], "mapped", [107, 108]], [[13209, 13209], "mapped", [102, 109]], [[13210, 13210], "mapped", [110, 109]], [[13211, 13211], "mapped", [956, 109]], [[13212, 13212], "mapped", [109, 109]], [[13213, 13213], "mapped", [99, 109]], [[13214, 13214], "mapped", [107, 109]], [[13215, 13215], "mapped", [109, 109, 50]], [[13216, 13216], "mapped", [99, 109, 50]], [[13217, 13217], "mapped", [109, 50]], [[13218, 13218], "mapped", [107, 109, 50]], [[13219, 13219], "mapped", [109, 109, 51]], [[13220, 13220], "mapped", [99, 109, 51]], [[13221, 13221], "mapped", [109, 51]], [[13222, 13222], "mapped", [107, 109, 51]], [[13223, 13223], "mapped", [109, 8725, 115]], [[13224, 13224], "mapped", [109, 8725, 115, 50]], [[13225, 13225], "mapped", [112, 97]], [[13226, 13226], "mapped", [107, 112, 97]], [[13227, 13227], "mapped", [109, 112, 97]], [[13228, 13228], "mapped", [103, 112, 97]], [[13229, 13229], "mapped", [114, 97, 100]], [[13230, 13230], "mapped", [114, 97, 100, 8725, 115]], [[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]], [[13232, 13232], "mapped", [112, 115]], [[13233, 13233], "mapped", [110, 115]], [[13234, 13234], "mapped", [956, 115]], [[13235, 13235], "mapped", [109, 115]], [[13236, 13236], "mapped", [112, 118]], [[13237, 13237], "mapped", [110, 118]], [[13238, 13238], "mapped", [956, 118]], [[13239, 13239], "mapped", [109, 118]], [[13240, 13240], "mapped", [107, 118]], [[13241, 13241], "mapped", [109, 118]], [[13242, 13242], "mapped", [112, 119]], [[13243, 13243], "mapped", [110, 119]], [[13244, 13244], "mapped", [956, 119]], [[13245, 13245], "mapped", [109, 119]], [[13246, 13246], "mapped", [107, 119]], [[13247, 13247], "mapped", [109, 119]], [[13248, 13248], "mapped", [107, 969]], [[13249, 13249], "mapped", [109, 969]], [[13250, 13250], "disallowed"], [[13251, 13251], "mapped", [98, 113]], [[13252, 13252], "mapped", [99, 99]], [[13253, 13253], "mapped", [99, 100]], [[13254, 13254], "mapped", [99, 8725, 107, 103]], [[13255, 13255], "disallowed"], [[13256, 13256], "mapped", [100, 98]], [[13257, 13257], "mapped", [103, 121]], [[13258, 13258], "mapped", [104, 97]], [[13259, 13259], "mapped", [104, 112]], [[13260, 13260], "mapped", [105, 110]], [[13261, 13261], "mapped", [107, 107]], [[13262, 13262], "mapped", [107, 109]], [[13263, 13263], "mapped", [107, 116]], [[13264, 13264], "mapped", [108, 109]], [[13265, 13265], "mapped", [108, 110]], [[13266, 13266], "mapped", [108, 111, 103]], [[13267, 13267], "mapped", [108, 120]], [[13268, 13268], "mapped", [109, 98]], [[13269, 13269], "mapped", [109, 105, 108]], [[13270, 13270], "mapped", [109, 111, 108]], [[13271, 13271], "mapped", [112, 104]], [[13272, 13272], "disallowed"], [[13273, 13273], "mapped", [112, 112, 109]], [[13274, 13274], "mapped", [112, 114]], [[13275, 13275], "mapped", [115, 114]], [[13276, 13276], "mapped", [115, 118]], [[13277, 13277], "mapped", [119, 98]], [[13278, 13278], "mapped", [118, 8725, 109]], [[13279, 13279], "mapped", [97, 8725, 109]], [[13280, 13280], "mapped", [49, 26085]], [[13281, 13281], "mapped", [50, 26085]], [[13282, 13282], "mapped", [51, 26085]], [[13283, 13283], "mapped", [52, 26085]], [[13284, 13284], "mapped", [53, 26085]], [[13285, 13285], "mapped", [54, 26085]], [[13286, 13286], "mapped", [55, 26085]], [[13287, 13287], "mapped", [56, 26085]], [[13288, 13288], "mapped", [57, 26085]], [[13289, 13289], "mapped", [49, 48, 26085]], [[13290, 13290], "mapped", [49, 49, 26085]], [[13291, 13291], "mapped", [49, 50, 26085]], [[13292, 13292], "mapped", [49, 51, 26085]], [[13293, 13293], "mapped", [49, 52, 26085]], [[13294, 13294], "mapped", [49, 53, 26085]], [[13295, 13295], "mapped", [49, 54, 26085]], [[13296, 13296], "mapped", [49, 55, 26085]], [[13297, 13297], "mapped", [49, 56, 26085]], [[13298, 13298], "mapped", [49, 57, 26085]], [[13299, 13299], "mapped", [50, 48, 26085]], [[13300, 13300], "mapped", [50, 49, 26085]], [[13301, 13301], "mapped", [50, 50, 26085]], [[13302, 13302], "mapped", [50, 51, 26085]], [[13303, 13303], "mapped", [50, 52, 26085]], [[13304, 13304], "mapped", [50, 53, 26085]], [[13305, 13305], "mapped", [50, 54, 26085]], [[13306, 13306], "mapped", [50, 55, 26085]], [[13307, 13307], "mapped", [50, 56, 26085]], [[13308, 13308], "mapped", [50, 57, 26085]], [[13309, 13309], "mapped", [51, 48, 26085]], [[13310, 13310], "mapped", [51, 49, 26085]], [[13311, 13311], "mapped", [103, 97, 108]], [[13312, 19893], "valid"], [[19894, 19903], "disallowed"], [[19904, 19967], "valid", [], "NV8"], [[19968, 40869], "valid"], [[40870, 40891], "valid"], [[40892, 40899], "valid"], [[40900, 40907], "valid"], [[40908, 40908], "valid"], [[40909, 40917], "valid"], [[40918, 40959], "disallowed"], [[40960, 42124], "valid"], [[42125, 42127], "disallowed"], [[42128, 42145], "valid", [], "NV8"], [[42146, 42147], "valid", [], "NV8"], [[42148, 42163], "valid", [], "NV8"], [[42164, 42164], "valid", [], "NV8"], [[42165, 42176], "valid", [], "NV8"], [[42177, 42177], "valid", [], "NV8"], [[42178, 42180], "valid", [], "NV8"], [[42181, 42181], "valid", [], "NV8"], [[42182, 42182], "valid", [], "NV8"], [[42183, 42191], "disallowed"], [[42192, 42237], "valid"], [[42238, 42239], "valid", [], "NV8"], [[42240, 42508], "valid"], [[42509, 42511], "valid", [], "NV8"], [[42512, 42539], "valid"], [[42540, 42559], "disallowed"], [[42560, 42560], "mapped", [42561]], [[42561, 42561], "valid"], [[42562, 42562], "mapped", [42563]], [[42563, 42563], "valid"], [[42564, 42564], "mapped", [42565]], [[42565, 42565], "valid"], [[42566, 42566], "mapped", [42567]], [[42567, 42567], "valid"], [[42568, 42568], "mapped", [42569]], [[42569, 42569], "valid"], [[42570, 42570], "mapped", [42571]], [[42571, 42571], "valid"], [[42572, 42572], "mapped", [42573]], [[42573, 42573], "valid"], [[42574, 42574], "mapped", [42575]], [[42575, 42575], "valid"], [[42576, 42576], "mapped", [42577]], [[42577, 42577], "valid"], [[42578, 42578], "mapped", [42579]], [[42579, 42579], "valid"], [[42580, 42580], "mapped", [42581]], [[42581, 42581], "valid"], [[42582, 42582], "mapped", [42583]], [[42583, 42583], "valid"], [[42584, 42584], "mapped", [42585]], [[42585, 42585], "valid"], [[42586, 42586], "mapped", [42587]], [[42587, 42587], "valid"], [[42588, 42588], "mapped", [42589]], [[42589, 42589], "valid"], [[42590, 42590], "mapped", [42591]], [[42591, 42591], "valid"], [[42592, 42592], "mapped", [42593]], [[42593, 42593], "valid"], [[42594, 42594], "mapped", [42595]], [[42595, 42595], "valid"], [[42596, 42596], "mapped", [42597]], [[42597, 42597], "valid"], [[42598, 42598], "mapped", [42599]], [[42599, 42599], "valid"], [[42600, 42600], "mapped", [42601]], [[42601, 42601], "valid"], [[42602, 42602], "mapped", [42603]], [[42603, 42603], "valid"], [[42604, 42604], "mapped", [42605]], [[42605, 42607], "valid"], [[42608, 42611], "valid", [], "NV8"], [[42612, 42619], "valid"], [[42620, 42621], "valid"], [[42622, 42622], "valid", [], "NV8"], [[42623, 42623], "valid"], [[42624, 42624], "mapped", [42625]], [[42625, 42625], "valid"], [[42626, 42626], "mapped", [42627]], [[42627, 42627], "valid"], [[42628, 42628], "mapped", [42629]], [[42629, 42629], "valid"], [[42630, 42630], "mapped", [42631]], [[42631, 42631], "valid"], [[42632, 42632], "mapped", [42633]], [[42633, 42633], "valid"], [[42634, 42634], "mapped", [42635]], [[42635, 42635], "valid"], [[42636, 42636], "mapped", [42637]], [[42637, 42637], "valid"], [[42638, 42638], "mapped", [42639]], [[42639, 42639], "valid"], [[42640, 42640], "mapped", [42641]], [[42641, 42641], "valid"], [[42642, 42642], "mapped", [42643]], [[42643, 42643], "valid"], [[42644, 42644], "mapped", [42645]], [[42645, 42645], "valid"], [[42646, 42646], "mapped", [42647]], [[42647, 42647], "valid"], [[42648, 42648], "mapped", [42649]], [[42649, 42649], "valid"], [[42650, 42650], "mapped", [42651]], [[42651, 42651], "valid"], [[42652, 42652], "mapped", [1098]], [[42653, 42653], "mapped", [1100]], [[42654, 42654], "valid"], [[42655, 42655], "valid"], [[42656, 42725], "valid"], [[42726, 42735], "valid", [], "NV8"], [[42736, 42737], "valid"], [[42738, 42743], "valid", [], "NV8"], [[42744, 42751], "disallowed"], [[42752, 42774], "valid", [], "NV8"], [[42775, 42778], "valid"], [[42779, 42783], "valid"], [[42784, 42785], "valid", [], "NV8"], [[42786, 42786], "mapped", [42787]], [[42787, 42787], "valid"], [[42788, 42788], "mapped", [42789]], [[42789, 42789], "valid"], [[42790, 42790], "mapped", [42791]], [[42791, 42791], "valid"], [[42792, 42792], "mapped", [42793]], [[42793, 42793], "valid"], [[42794, 42794], "mapped", [42795]], [[42795, 42795], "valid"], [[42796, 42796], "mapped", [42797]], [[42797, 42797], "valid"], [[42798, 42798], "mapped", [42799]], [[42799, 42801], "valid"], [[42802, 42802], "mapped", [42803]], [[42803, 42803], "valid"], [[42804, 42804], "mapped", [42805]], [[42805, 42805], "valid"], [[42806, 42806], "mapped", [42807]], [[42807, 42807], "valid"], [[42808, 42808], "mapped", [42809]], [[42809, 42809], "valid"], [[42810, 42810], "mapped", [42811]], [[42811, 42811], "valid"], [[42812, 42812], "mapped", [42813]], [[42813, 42813], "valid"], [[42814, 42814], "mapped", [42815]], [[42815, 42815], "valid"], [[42816, 42816], "mapped", [42817]], [[42817, 42817], "valid"], [[42818, 42818], "mapped", [42819]], [[42819, 42819], "valid"], [[42820, 42820], "mapped", [42821]], [[42821, 42821], "valid"], [[42822, 42822], "mapped", [42823]], [[42823, 42823], "valid"], [[42824, 42824], "mapped", [42825]], [[42825, 42825], "valid"], [[42826, 42826], "mapped", [42827]], [[42827, 42827], "valid"], [[42828, 42828], "mapped", [42829]], [[42829, 42829], "valid"], [[42830, 42830], "mapped", [42831]], [[42831, 42831], "valid"], [[42832, 42832], "mapped", [42833]], [[42833, 42833], "valid"], [[42834, 42834], "mapped", [42835]], [[42835, 42835], "valid"], [[42836, 42836], "mapped", [42837]], [[42837, 42837], "valid"], [[42838, 42838], "mapped", [42839]], [[42839, 42839], "valid"], [[42840, 42840], "mapped", [42841]], [[42841, 42841], "valid"], [[42842, 42842], "mapped", [42843]], [[42843, 42843], "valid"], [[42844, 42844], "mapped", [42845]], [[42845, 42845], "valid"], [[42846, 42846], "mapped", [42847]], [[42847, 42847], "valid"], [[42848, 42848], "mapped", [42849]], [[42849, 42849], "valid"], [[42850, 42850], "mapped", [42851]], [[42851, 42851], "valid"], [[42852, 42852], "mapped", [42853]], [[42853, 42853], "valid"], [[42854, 42854], "mapped", [42855]], [[42855, 42855], "valid"], [[42856, 42856], "mapped", [42857]], [[42857, 42857], "valid"], [[42858, 42858], "mapped", [42859]], [[42859, 42859], "valid"], [[42860, 42860], "mapped", [42861]], [[42861, 42861], "valid"], [[42862, 42862], "mapped", [42863]], [[42863, 42863], "valid"], [[42864, 42864], "mapped", [42863]], [[42865, 42872], "valid"], [[42873, 42873], "mapped", [42874]], [[42874, 42874], "valid"], [[42875, 42875], "mapped", [42876]], [[42876, 42876], "valid"], [[42877, 42877], "mapped", [7545]], [[42878, 42878], "mapped", [42879]], [[42879, 42879], "valid"], [[42880, 42880], "mapped", [42881]], [[42881, 42881], "valid"], [[42882, 42882], "mapped", [42883]], [[42883, 42883], "valid"], [[42884, 42884], "mapped", [42885]], [[42885, 42885], "valid"], [[42886, 42886], "mapped", [42887]], [[42887, 42888], "valid"], [[42889, 42890], "valid", [], "NV8"], [[42891, 42891], "mapped", [42892]], [[42892, 42892], "valid"], [[42893, 42893], "mapped", [613]], [[42894, 42894], "valid"], [[42895, 42895], "valid"], [[42896, 42896], "mapped", [42897]], [[42897, 42897], "valid"], [[42898, 42898], "mapped", [42899]], [[42899, 42899], "valid"], [[42900, 42901], "valid"], [[42902, 42902], "mapped", [42903]], [[42903, 42903], "valid"], [[42904, 42904], "mapped", [42905]], [[42905, 42905], "valid"], [[42906, 42906], "mapped", [42907]], [[42907, 42907], "valid"], [[42908, 42908], "mapped", [42909]], [[42909, 42909], "valid"], [[42910, 42910], "mapped", [42911]], [[42911, 42911], "valid"], [[42912, 42912], "mapped", [42913]], [[42913, 42913], "valid"], [[42914, 42914], "mapped", [42915]], [[42915, 42915], "valid"], [[42916, 42916], "mapped", [42917]], [[42917, 42917], "valid"], [[42918, 42918], "mapped", [42919]], [[42919, 42919], "valid"], [[42920, 42920], "mapped", [42921]], [[42921, 42921], "valid"], [[42922, 42922], "mapped", [614]], [[42923, 42923], "mapped", [604]], [[42924, 42924], "mapped", [609]], [[42925, 42925], "mapped", [620]], [[42926, 42927], "disallowed"], [[42928, 42928], "mapped", [670]], [[42929, 42929], "mapped", [647]], [[42930, 42930], "mapped", [669]], [[42931, 42931], "mapped", [43859]], [[42932, 42932], "mapped", [42933]], [[42933, 42933], "valid"], [[42934, 42934], "mapped", [42935]], [[42935, 42935], "valid"], [[42936, 42998], "disallowed"], [[42999, 42999], "valid"], [[43e3, 43e3], "mapped", [295]], [[43001, 43001], "mapped", [339]], [[43002, 43002], "valid"], [[43003, 43007], "valid"], [[43008, 43047], "valid"], [[43048, 43051], "valid", [], "NV8"], [[43052, 43055], "disallowed"], [[43056, 43065], "valid", [], "NV8"], [[43066, 43071], "disallowed"], [[43072, 43123], "valid"], [[43124, 43127], "valid", [], "NV8"], [[43128, 43135], "disallowed"], [[43136, 43204], "valid"], [[43205, 43213], "disallowed"], [[43214, 43215], "valid", [], "NV8"], [[43216, 43225], "valid"], [[43226, 43231], "disallowed"], [[43232, 43255], "valid"], [[43256, 43258], "valid", [], "NV8"], [[43259, 43259], "valid"], [[43260, 43260], "valid", [], "NV8"], [[43261, 43261], "valid"], [[43262, 43263], "disallowed"], [[43264, 43309], "valid"], [[43310, 43311], "valid", [], "NV8"], [[43312, 43347], "valid"], [[43348, 43358], "disallowed"], [[43359, 43359], "valid", [], "NV8"], [[43360, 43388], "valid", [], "NV8"], [[43389, 43391], "disallowed"], [[43392, 43456], "valid"], [[43457, 43469], "valid", [], "NV8"], [[43470, 43470], "disallowed"], [[43471, 43481], "valid"], [[43482, 43485], "disallowed"], [[43486, 43487], "valid", [], "NV8"], [[43488, 43518], "valid"], [[43519, 43519], "disallowed"], [[43520, 43574], "valid"], [[43575, 43583], "disallowed"], [[43584, 43597], "valid"], [[43598, 43599], "disallowed"], [[43600, 43609], "valid"], [[43610, 43611], "disallowed"], [[43612, 43615], "valid", [], "NV8"], [[43616, 43638], "valid"], [[43639, 43641], "valid", [], "NV8"], [[43642, 43643], "valid"], [[43644, 43647], "valid"], [[43648, 43714], "valid"], [[43715, 43738], "disallowed"], [[43739, 43741], "valid"], [[43742, 43743], "valid", [], "NV8"], [[43744, 43759], "valid"], [[43760, 43761], "valid", [], "NV8"], [[43762, 43766], "valid"], [[43767, 43776], "disallowed"], [[43777, 43782], "valid"], [[43783, 43784], "disallowed"], [[43785, 43790], "valid"], [[43791, 43792], "disallowed"], [[43793, 43798], "valid"], [[43799, 43807], "disallowed"], [[43808, 43814], "valid"], [[43815, 43815], "disallowed"], [[43816, 43822], "valid"], [[43823, 43823], "disallowed"], [[43824, 43866], "valid"], [[43867, 43867], "valid", [], "NV8"], [[43868, 43868], "mapped", [42791]], [[43869, 43869], "mapped", [43831]], [[43870, 43870], "mapped", [619]], [[43871, 43871], "mapped", [43858]], [[43872, 43875], "valid"], [[43876, 43877], "valid"], [[43878, 43887], "disallowed"], [[43888, 43888], "mapped", [5024]], [[43889, 43889], "mapped", [5025]], [[43890, 43890], "mapped", [5026]], [[43891, 43891], "mapped", [5027]], [[43892, 43892], "mapped", [5028]], [[43893, 43893], "mapped", [5029]], [[43894, 43894], "mapped", [5030]], [[43895, 43895], "mapped", [5031]], [[43896, 43896], "mapped", [5032]], [[43897, 43897], "mapped", [5033]], [[43898, 43898], "mapped", [5034]], [[43899, 43899], "mapped", [5035]], [[43900, 43900], "mapped", [5036]], [[43901, 43901], "mapped", [5037]], [[43902, 43902], "mapped", [5038]], [[43903, 43903], "mapped", [5039]], [[43904, 43904], "mapped", [5040]], [[43905, 43905], "mapped", [5041]], [[43906, 43906], "mapped", [5042]], [[43907, 43907], "mapped", [5043]], [[43908, 43908], "mapped", [5044]], [[43909, 43909], "mapped", [5045]], [[43910, 43910], "mapped", [5046]], [[43911, 43911], "mapped", [5047]], [[43912, 43912], "mapped", [5048]], [[43913, 43913], "mapped", [5049]], [[43914, 43914], "mapped", [5050]], [[43915, 43915], "mapped", [5051]], [[43916, 43916], "mapped", [5052]], [[43917, 43917], "mapped", [5053]], [[43918, 43918], "mapped", [5054]], [[43919, 43919], "mapped", [5055]], [[43920, 43920], "mapped", [5056]], [[43921, 43921], "mapped", [5057]], [[43922, 43922], "mapped", [5058]], [[43923, 43923], "mapped", [5059]], [[43924, 43924], "mapped", [5060]], [[43925, 43925], "mapped", [5061]], [[43926, 43926], "mapped", [5062]], [[43927, 43927], "mapped", [5063]], [[43928, 43928], "mapped", [5064]], [[43929, 43929], "mapped", [5065]], [[43930, 43930], "mapped", [5066]], [[43931, 43931], "mapped", [5067]], [[43932, 43932], "mapped", [5068]], [[43933, 43933], "mapped", [5069]], [[43934, 43934], "mapped", [5070]], [[43935, 43935], "mapped", [5071]], [[43936, 43936], "mapped", [5072]], [[43937, 43937], "mapped", [5073]], [[43938, 43938], "mapped", [5074]], [[43939, 43939], "mapped", [5075]], [[43940, 43940], "mapped", [5076]], [[43941, 43941], "mapped", [5077]], [[43942, 43942], "mapped", [5078]], [[43943, 43943], "mapped", [5079]], [[43944, 43944], "mapped", [5080]], [[43945, 43945], "mapped", [5081]], [[43946, 43946], "mapped", [5082]], [[43947, 43947], "mapped", [5083]], [[43948, 43948], "mapped", [5084]], [[43949, 43949], "mapped", [5085]], [[43950, 43950], "mapped", [5086]], [[43951, 43951], "mapped", [5087]], [[43952, 43952], "mapped", [5088]], [[43953, 43953], "mapped", [5089]], [[43954, 43954], "mapped", [5090]], [[43955, 43955], "mapped", [5091]], [[43956, 43956], "mapped", [5092]], [[43957, 43957], "mapped", [5093]], [[43958, 43958], "mapped", [5094]], [[43959, 43959], "mapped", [5095]], [[43960, 43960], "mapped", [5096]], [[43961, 43961], "mapped", [5097]], [[43962, 43962], "mapped", [5098]], [[43963, 43963], "mapped", [5099]], [[43964, 43964], "mapped", [5100]], [[43965, 43965], "mapped", [5101]], [[43966, 43966], "mapped", [5102]], [[43967, 43967], "mapped", [5103]], [[43968, 44010], "valid"], [[44011, 44011], "valid", [], "NV8"], [[44012, 44013], "valid"], [[44014, 44015], "disallowed"], [[44016, 44025], "valid"], [[44026, 44031], "disallowed"], [[44032, 55203], "valid"], [[55204, 55215], "disallowed"], [[55216, 55238], "valid", [], "NV8"], [[55239, 55242], "disallowed"], [[55243, 55291], "valid", [], "NV8"], [[55292, 55295], "disallowed"], [[55296, 57343], "disallowed"], [[57344, 63743], "disallowed"], [[63744, 63744], "mapped", [35912]], [[63745, 63745], "mapped", [26356]], [[63746, 63746], "mapped", [36554]], [[63747, 63747], "mapped", [36040]], [[63748, 63748], "mapped", [28369]], [[63749, 63749], "mapped", [20018]], [[63750, 63750], "mapped", [21477]], [[63751, 63752], "mapped", [40860]], [[63753, 63753], "mapped", [22865]], [[63754, 63754], "mapped", [37329]], [[63755, 63755], "mapped", [21895]], [[63756, 63756], "mapped", [22856]], [[63757, 63757], "mapped", [25078]], [[63758, 63758], "mapped", [30313]], [[63759, 63759], "mapped", [32645]], [[63760, 63760], "mapped", [34367]], [[63761, 63761], "mapped", [34746]], [[63762, 63762], "mapped", [35064]], [[63763, 63763], "mapped", [37007]], [[63764, 63764], "mapped", [27138]], [[63765, 63765], "mapped", [27931]], [[63766, 63766], "mapped", [28889]], [[63767, 63767], "mapped", [29662]], [[63768, 63768], "mapped", [33853]], [[63769, 63769], "mapped", [37226]], [[63770, 63770], "mapped", [39409]], [[63771, 63771], "mapped", [20098]], [[63772, 63772], "mapped", [21365]], [[63773, 63773], "mapped", [27396]], [[63774, 63774], "mapped", [29211]], [[63775, 63775], "mapped", [34349]], [[63776, 63776], "mapped", [40478]], [[63777, 63777], "mapped", [23888]], [[63778, 63778], "mapped", [28651]], [[63779, 63779], "mapped", [34253]], [[63780, 63780], "mapped", [35172]], [[63781, 63781], "mapped", [25289]], [[63782, 63782], "mapped", [33240]], [[63783, 63783], "mapped", [34847]], [[63784, 63784], "mapped", [24266]], [[63785, 63785], "mapped", [26391]], [[63786, 63786], "mapped", [28010]], [[63787, 63787], "mapped", [29436]], [[63788, 63788], "mapped", [37070]], [[63789, 63789], "mapped", [20358]], [[63790, 63790], "mapped", [20919]], [[63791, 63791], "mapped", [21214]], [[63792, 63792], "mapped", [25796]], [[63793, 63793], "mapped", [27347]], [[63794, 63794], "mapped", [29200]], [[63795, 63795], "mapped", [30439]], [[63796, 63796], "mapped", [32769]], [[63797, 63797], "mapped", [34310]], [[63798, 63798], "mapped", [34396]], [[63799, 63799], "mapped", [36335]], [[63800, 63800], "mapped", [38706]], [[63801, 63801], "mapped", [39791]], [[63802, 63802], "mapped", [40442]], [[63803, 63803], "mapped", [30860]], [[63804, 63804], "mapped", [31103]], [[63805, 63805], "mapped", [32160]], [[63806, 63806], "mapped", [33737]], [[63807, 63807], "mapped", [37636]], [[63808, 63808], "mapped", [40575]], [[63809, 63809], "mapped", [35542]], [[63810, 63810], "mapped", [22751]], [[63811, 63811], "mapped", [24324]], [[63812, 63812], "mapped", [31840]], [[63813, 63813], "mapped", [32894]], [[63814, 63814], "mapped", [29282]], [[63815, 63815], "mapped", [30922]], [[63816, 63816], "mapped", [36034]], [[63817, 63817], "mapped", [38647]], [[63818, 63818], "mapped", [22744]], [[63819, 63819], "mapped", [23650]], [[63820, 63820], "mapped", [27155]], [[63821, 63821], "mapped", [28122]], [[63822, 63822], "mapped", [28431]], [[63823, 63823], "mapped", [32047]], [[63824, 63824], "mapped", [32311]], [[63825, 63825], "mapped", [38475]], [[63826, 63826], "mapped", [21202]], [[63827, 63827], "mapped", [32907]], [[63828, 63828], "mapped", [20956]], [[63829, 63829], "mapped", [20940]], [[63830, 63830], "mapped", [31260]], [[63831, 63831], "mapped", [32190]], [[63832, 63832], "mapped", [33777]], [[63833, 63833], "mapped", [38517]], [[63834, 63834], "mapped", [35712]], [[63835, 63835], "mapped", [25295]], [[63836, 63836], "mapped", [27138]], [[63837, 63837], "mapped", [35582]], [[63838, 63838], "mapped", [20025]], [[63839, 63839], "mapped", [23527]], [[63840, 63840], "mapped", [24594]], [[63841, 63841], "mapped", [29575]], [[63842, 63842], "mapped", [30064]], [[63843, 63843], "mapped", [21271]], [[63844, 63844], "mapped", [30971]], [[63845, 63845], "mapped", [20415]], [[63846, 63846], "mapped", [24489]], [[63847, 63847], "mapped", [19981]], [[63848, 63848], "mapped", [27852]], [[63849, 63849], "mapped", [25976]], [[63850, 63850], "mapped", [32034]], [[63851, 63851], "mapped", [21443]], [[63852, 63852], "mapped", [22622]], [[63853, 63853], "mapped", [30465]], [[63854, 63854], "mapped", [33865]], [[63855, 63855], "mapped", [35498]], [[63856, 63856], "mapped", [27578]], [[63857, 63857], "mapped", [36784]], [[63858, 63858], "mapped", [27784]], [[63859, 63859], "mapped", [25342]], [[63860, 63860], "mapped", [33509]], [[63861, 63861], "mapped", [25504]], [[63862, 63862], "mapped", [30053]], [[63863, 63863], "mapped", [20142]], [[63864, 63864], "mapped", [20841]], [[63865, 63865], "mapped", [20937]], [[63866, 63866], "mapped", [26753]], [[63867, 63867], "mapped", [31975]], [[63868, 63868], "mapped", [33391]], [[63869, 63869], "mapped", [35538]], [[63870, 63870], "mapped", [37327]], [[63871, 63871], "mapped", [21237]], [[63872, 63872], "mapped", [21570]], [[63873, 63873], "mapped", [22899]], [[63874, 63874], "mapped", [24300]], [[63875, 63875], "mapped", [26053]], [[63876, 63876], "mapped", [28670]], [[63877, 63877], "mapped", [31018]], [[63878, 63878], "mapped", [38317]], [[63879, 63879], "mapped", [39530]], [[63880, 63880], "mapped", [40599]], [[63881, 63881], "mapped", [40654]], [[63882, 63882], "mapped", [21147]], [[63883, 63883], "mapped", [26310]], [[63884, 63884], "mapped", [27511]], [[63885, 63885], "mapped", [36706]], [[63886, 63886], "mapped", [24180]], [[63887, 63887], "mapped", [24976]], [[63888, 63888], "mapped", [25088]], [[63889, 63889], "mapped", [25754]], [[63890, 63890], "mapped", [28451]], [[63891, 63891], "mapped", [29001]], [[63892, 63892], "mapped", [29833]], [[63893, 63893], "mapped", [31178]], [[63894, 63894], "mapped", [32244]], [[63895, 63895], "mapped", [32879]], [[63896, 63896], "mapped", [36646]], [[63897, 63897], "mapped", [34030]], [[63898, 63898], "mapped", [36899]], [[63899, 63899], "mapped", [37706]], [[63900, 63900], "mapped", [21015]], [[63901, 63901], "mapped", [21155]], [[63902, 63902], "mapped", [21693]], [[63903, 63903], "mapped", [28872]], [[63904, 63904], "mapped", [35010]], [[63905, 63905], "mapped", [35498]], [[63906, 63906], "mapped", [24265]], [[63907, 63907], "mapped", [24565]], [[63908, 63908], "mapped", [25467]], [[63909, 63909], "mapped", [27566]], [[63910, 63910], "mapped", [31806]], [[63911, 63911], "mapped", [29557]], [[63912, 63912], "mapped", [20196]], [[63913, 63913], "mapped", [22265]], [[63914, 63914], "mapped", [23527]], [[63915, 63915], "mapped", [23994]], [[63916, 63916], "mapped", [24604]], [[63917, 63917], "mapped", [29618]], [[63918, 63918], "mapped", [29801]], [[63919, 63919], "mapped", [32666]], [[63920, 63920], "mapped", [32838]], [[63921, 63921], "mapped", [37428]], [[63922, 63922], "mapped", [38646]], [[63923, 63923], "mapped", [38728]], [[63924, 63924], "mapped", [38936]], [[63925, 63925], "mapped", [20363]], [[63926, 63926], "mapped", [31150]], [[63927, 63927], "mapped", [37300]], [[63928, 63928], "mapped", [38584]], [[63929, 63929], "mapped", [24801]], [[63930, 63930], "mapped", [20102]], [[63931, 63931], "mapped", [20698]], [[63932, 63932], "mapped", [23534]], [[63933, 63933], "mapped", [23615]], [[63934, 63934], "mapped", [26009]], [[63935, 63935], "mapped", [27138]], [[63936, 63936], "mapped", [29134]], [[63937, 63937], "mapped", [30274]], [[63938, 63938], "mapped", [34044]], [[63939, 63939], "mapped", [36988]], [[63940, 63940], "mapped", [40845]], [[63941, 63941], "mapped", [26248]], [[63942, 63942], "mapped", [38446]], [[63943, 63943], "mapped", [21129]], [[63944, 63944], "mapped", [26491]], [[63945, 63945], "mapped", [26611]], [[63946, 63946], "mapped", [27969]], [[63947, 63947], "mapped", [28316]], [[63948, 63948], "mapped", [29705]], [[63949, 63949], "mapped", [30041]], [[63950, 63950], "mapped", [30827]], [[63951, 63951], "mapped", [32016]], [[63952, 63952], "mapped", [39006]], [[63953, 63953], "mapped", [20845]], [[63954, 63954], "mapped", [25134]], [[63955, 63955], "mapped", [38520]], [[63956, 63956], "mapped", [20523]], [[63957, 63957], "mapped", [23833]], [[63958, 63958], "mapped", [28138]], [[63959, 63959], "mapped", [36650]], [[63960, 63960], "mapped", [24459]], [[63961, 63961], "mapped", [24900]], [[63962, 63962], "mapped", [26647]], [[63963, 63963], "mapped", [29575]], [[63964, 63964], "mapped", [38534]], [[63965, 63965], "mapped", [21033]], [[63966, 63966], "mapped", [21519]], [[63967, 63967], "mapped", [23653]], [[63968, 63968], "mapped", [26131]], [[63969, 63969], "mapped", [26446]], [[63970, 63970], "mapped", [26792]], [[63971, 63971], "mapped", [27877]], [[63972, 63972], "mapped", [29702]], [[63973, 63973], "mapped", [30178]], [[63974, 63974], "mapped", [32633]], [[63975, 63975], "mapped", [35023]], [[63976, 63976], "mapped", [35041]], [[63977, 63977], "mapped", [37324]], [[63978, 63978], "mapped", [38626]], [[63979, 63979], "mapped", [21311]], [[63980, 63980], "mapped", [28346]], [[63981, 63981], "mapped", [21533]], [[63982, 63982], "mapped", [29136]], [[63983, 63983], "mapped", [29848]], [[63984, 63984], "mapped", [34298]], [[63985, 63985], "mapped", [38563]], [[63986, 63986], "mapped", [40023]], [[63987, 63987], "mapped", [40607]], [[63988, 63988], "mapped", [26519]], [[63989, 63989], "mapped", [28107]], [[63990, 63990], "mapped", [33256]], [[63991, 63991], "mapped", [31435]], [[63992, 63992], "mapped", [31520]], [[63993, 63993], "mapped", [31890]], [[63994, 63994], "mapped", [29376]], [[63995, 63995], "mapped", [28825]], [[63996, 63996], "mapped", [35672]], [[63997, 63997], "mapped", [20160]], [[63998, 63998], "mapped", [33590]], [[63999, 63999], "mapped", [21050]], [[64e3, 64e3], "mapped", [20999]], [[64001, 64001], "mapped", [24230]], [[64002, 64002], "mapped", [25299]], [[64003, 64003], "mapped", [31958]], [[64004, 64004], "mapped", [23429]], [[64005, 64005], "mapped", [27934]], [[64006, 64006], "mapped", [26292]], [[64007, 64007], "mapped", [36667]], [[64008, 64008], "mapped", [34892]], [[64009, 64009], "mapped", [38477]], [[64010, 64010], "mapped", [35211]], [[64011, 64011], "mapped", [24275]], [[64012, 64012], "mapped", [20800]], [[64013, 64013], "mapped", [21952]], [[64014, 64015], "valid"], [[64016, 64016], "mapped", [22618]], [[64017, 64017], "valid"], [[64018, 64018], "mapped", [26228]], [[64019, 64020], "valid"], [[64021, 64021], "mapped", [20958]], [[64022, 64022], "mapped", [29482]], [[64023, 64023], "mapped", [30410]], [[64024, 64024], "mapped", [31036]], [[64025, 64025], "mapped", [31070]], [[64026, 64026], "mapped", [31077]], [[64027, 64027], "mapped", [31119]], [[64028, 64028], "mapped", [38742]], [[64029, 64029], "mapped", [31934]], [[64030, 64030], "mapped", [32701]], [[64031, 64031], "valid"], [[64032, 64032], "mapped", [34322]], [[64033, 64033], "valid"], [[64034, 64034], "mapped", [35576]], [[64035, 64036], "valid"], [[64037, 64037], "mapped", [36920]], [[64038, 64038], "mapped", [37117]], [[64039, 64041], "valid"], [[64042, 64042], "mapped", [39151]], [[64043, 64043], "mapped", [39164]], [[64044, 64044], "mapped", [39208]], [[64045, 64045], "mapped", [40372]], [[64046, 64046], "mapped", [37086]], [[64047, 64047], "mapped", [38583]], [[64048, 64048], "mapped", [20398]], [[64049, 64049], "mapped", [20711]], [[64050, 64050], "mapped", [20813]], [[64051, 64051], "mapped", [21193]], [[64052, 64052], "mapped", [21220]], [[64053, 64053], "mapped", [21329]], [[64054, 64054], "mapped", [21917]], [[64055, 64055], "mapped", [22022]], [[64056, 64056], "mapped", [22120]], [[64057, 64057], "mapped", [22592]], [[64058, 64058], "mapped", [22696]], [[64059, 64059], "mapped", [23652]], [[64060, 64060], "mapped", [23662]], [[64061, 64061], "mapped", [24724]], [[64062, 64062], "mapped", [24936]], [[64063, 64063], "mapped", [24974]], [[64064, 64064], "mapped", [25074]], [[64065, 64065], "mapped", [25935]], [[64066, 64066], "mapped", [26082]], [[64067, 64067], "mapped", [26257]], [[64068, 64068], "mapped", [26757]], [[64069, 64069], "mapped", [28023]], [[64070, 64070], "mapped", [28186]], [[64071, 64071], "mapped", [28450]], [[64072, 64072], "mapped", [29038]], [[64073, 64073], "mapped", [29227]], [[64074, 64074], "mapped", [29730]], [[64075, 64075], "mapped", [30865]], [[64076, 64076], "mapped", [31038]], [[64077, 64077], "mapped", [31049]], [[64078, 64078], "mapped", [31048]], [[64079, 64079], "mapped", [31056]], [[64080, 64080], "mapped", [31062]], [[64081, 64081], "mapped", [31069]], [[64082, 64082], "mapped", [31117]], [[64083, 64083], "mapped", [31118]], [[64084, 64084], "mapped", [31296]], [[64085, 64085], "mapped", [31361]], [[64086, 64086], "mapped", [31680]], [[64087, 64087], "mapped", [32244]], [[64088, 64088], "mapped", [32265]], [[64089, 64089], "mapped", [32321]], [[64090, 64090], "mapped", [32626]], [[64091, 64091], "mapped", [32773]], [[64092, 64092], "mapped", [33261]], [[64093, 64094], "mapped", [33401]], [[64095, 64095], "mapped", [33879]], [[64096, 64096], "mapped", [35088]], [[64097, 64097], "mapped", [35222]], [[64098, 64098], "mapped", [35585]], [[64099, 64099], "mapped", [35641]], [[64100, 64100], "mapped", [36051]], [[64101, 64101], "mapped", [36104]], [[64102, 64102], "mapped", [36790]], [[64103, 64103], "mapped", [36920]], [[64104, 64104], "mapped", [38627]], [[64105, 64105], "mapped", [38911]], [[64106, 64106], "mapped", [38971]], [[64107, 64107], "mapped", [24693]], [[64108, 64108], "mapped", [148206]], [[64109, 64109], "mapped", [33304]], [[64110, 64111], "disallowed"], [[64112, 64112], "mapped", [20006]], [[64113, 64113], "mapped", [20917]], [[64114, 64114], "mapped", [20840]], [[64115, 64115], "mapped", [20352]], [[64116, 64116], "mapped", [20805]], [[64117, 64117], "mapped", [20864]], [[64118, 64118], "mapped", [21191]], [[64119, 64119], "mapped", [21242]], [[64120, 64120], "mapped", [21917]], [[64121, 64121], "mapped", [21845]], [[64122, 64122], "mapped", [21913]], [[64123, 64123], "mapped", [21986]], [[64124, 64124], "mapped", [22618]], [[64125, 64125], "mapped", [22707]], [[64126, 64126], "mapped", [22852]], [[64127, 64127], "mapped", [22868]], [[64128, 64128], "mapped", [23138]], [[64129, 64129], "mapped", [23336]], [[64130, 64130], "mapped", [24274]], [[64131, 64131], "mapped", [24281]], [[64132, 64132], "mapped", [24425]], [[64133, 64133], "mapped", [24493]], [[64134, 64134], "mapped", [24792]], [[64135, 64135], "mapped", [24910]], [[64136, 64136], "mapped", [24840]], [[64137, 64137], "mapped", [24974]], [[64138, 64138], "mapped", [24928]], [[64139, 64139], "mapped", [25074]], [[64140, 64140], "mapped", [25140]], [[64141, 64141], "mapped", [25540]], [[64142, 64142], "mapped", [25628]], [[64143, 64143], "mapped", [25682]], [[64144, 64144], "mapped", [25942]], [[64145, 64145], "mapped", [26228]], [[64146, 64146], "mapped", [26391]], [[64147, 64147], "mapped", [26395]], [[64148, 64148], "mapped", [26454]], [[64149, 64149], "mapped", [27513]], [[64150, 64150], "mapped", [27578]], [[64151, 64151], "mapped", [27969]], [[64152, 64152], "mapped", [28379]], [[64153, 64153], "mapped", [28363]], [[64154, 64154], "mapped", [28450]], [[64155, 64155], "mapped", [28702]], [[64156, 64156], "mapped", [29038]], [[64157, 64157], "mapped", [30631]], [[64158, 64158], "mapped", [29237]], [[64159, 64159], "mapped", [29359]], [[64160, 64160], "mapped", [29482]], [[64161, 64161], "mapped", [29809]], [[64162, 64162], "mapped", [29958]], [[64163, 64163], "mapped", [30011]], [[64164, 64164], "mapped", [30237]], [[64165, 64165], "mapped", [30239]], [[64166, 64166], "mapped", [30410]], [[64167, 64167], "mapped", [30427]], [[64168, 64168], "mapped", [30452]], [[64169, 64169], "mapped", [30538]], [[64170, 64170], "mapped", [30528]], [[64171, 64171], "mapped", [30924]], [[64172, 64172], "mapped", [31409]], [[64173, 64173], "mapped", [31680]], [[64174, 64174], "mapped", [31867]], [[64175, 64175], "mapped", [32091]], [[64176, 64176], "mapped", [32244]], [[64177, 64177], "mapped", [32574]], [[64178, 64178], "mapped", [32773]], [[64179, 64179], "mapped", [33618]], [[64180, 64180], "mapped", [33775]], [[64181, 64181], "mapped", [34681]], [[64182, 64182], "mapped", [35137]], [[64183, 64183], "mapped", [35206]], [[64184, 64184], "mapped", [35222]], [[64185, 64185], "mapped", [35519]], [[64186, 64186], "mapped", [35576]], [[64187, 64187], "mapped", [35531]], [[64188, 64188], "mapped", [35585]], [[64189, 64189], "mapped", [35582]], [[64190, 64190], "mapped", [35565]], [[64191, 64191], "mapped", [35641]], [[64192, 64192], "mapped", [35722]], [[64193, 64193], "mapped", [36104]], [[64194, 64194], "mapped", [36664]], [[64195, 64195], "mapped", [36978]], [[64196, 64196], "mapped", [37273]], [[64197, 64197], "mapped", [37494]], [[64198, 64198], "mapped", [38524]], [[64199, 64199], "mapped", [38627]], [[64200, 64200], "mapped", [38742]], [[64201, 64201], "mapped", [38875]], [[64202, 64202], "mapped", [38911]], [[64203, 64203], "mapped", [38923]], [[64204, 64204], "mapped", [38971]], [[64205, 64205], "mapped", [39698]], [[64206, 64206], "mapped", [40860]], [[64207, 64207], "mapped", [141386]], [[64208, 64208], "mapped", [141380]], [[64209, 64209], "mapped", [144341]], [[64210, 64210], "mapped", [15261]], [[64211, 64211], "mapped", [16408]], [[64212, 64212], "mapped", [16441]], [[64213, 64213], "mapped", [152137]], [[64214, 64214], "mapped", [154832]], [[64215, 64215], "mapped", [163539]], [[64216, 64216], "mapped", [40771]], [[64217, 64217], "mapped", [40846]], [[64218, 64255], "disallowed"], [[64256, 64256], "mapped", [102, 102]], [[64257, 64257], "mapped", [102, 105]], [[64258, 64258], "mapped", [102, 108]], [[64259, 64259], "mapped", [102, 102, 105]], [[64260, 64260], "mapped", [102, 102, 108]], [[64261, 64262], "mapped", [115, 116]], [[64263, 64274], "disallowed"], [[64275, 64275], "mapped", [1396, 1398]], [[64276, 64276], "mapped", [1396, 1381]], [[64277, 64277], "mapped", [1396, 1387]], [[64278, 64278], "mapped", [1406, 1398]], [[64279, 64279], "mapped", [1396, 1389]], [[64280, 64284], "disallowed"], [[64285, 64285], "mapped", [1497, 1460]], [[64286, 64286], "valid"], [[64287, 64287], "mapped", [1522, 1463]], [[64288, 64288], "mapped", [1506]], [[64289, 64289], "mapped", [1488]], [[64290, 64290], "mapped", [1491]], [[64291, 64291], "mapped", [1492]], [[64292, 64292], "mapped", [1499]], [[64293, 64293], "mapped", [1500]], [[64294, 64294], "mapped", [1501]], [[64295, 64295], "mapped", [1512]], [[64296, 64296], "mapped", [1514]], [[64297, 64297], "disallowed_STD3_mapped", [43]], [[64298, 64298], "mapped", [1513, 1473]], [[64299, 64299], "mapped", [1513, 1474]], [[64300, 64300], "mapped", [1513, 1468, 1473]], [[64301, 64301], "mapped", [1513, 1468, 1474]], [[64302, 64302], "mapped", [1488, 1463]], [[64303, 64303], "mapped", [1488, 1464]], [[64304, 64304], "mapped", [1488, 1468]], [[64305, 64305], "mapped", [1489, 1468]], [[64306, 64306], "mapped", [1490, 1468]], [[64307, 64307], "mapped", [1491, 1468]], [[64308, 64308], "mapped", [1492, 1468]], [[64309, 64309], "mapped", [1493, 1468]], [[64310, 64310], "mapped", [1494, 1468]], [[64311, 64311], "disallowed"], [[64312, 64312], "mapped", [1496, 1468]], [[64313, 64313], "mapped", [1497, 1468]], [[64314, 64314], "mapped", [1498, 1468]], [[64315, 64315], "mapped", [1499, 1468]], [[64316, 64316], "mapped", [1500, 1468]], [[64317, 64317], "disallowed"], [[64318, 64318], "mapped", [1502, 1468]], [[64319, 64319], "disallowed"], [[64320, 64320], "mapped", [1504, 1468]], [[64321, 64321], "mapped", [1505, 1468]], [[64322, 64322], "disallowed"], [[64323, 64323], "mapped", [1507, 1468]], [[64324, 64324], "mapped", [1508, 1468]], [[64325, 64325], "disallowed"], [[64326, 64326], "mapped", [1510, 1468]], [[64327, 64327], "mapped", [1511, 1468]], [[64328, 64328], "mapped", [1512, 1468]], [[64329, 64329], "mapped", [1513, 1468]], [[64330, 64330], "mapped", [1514, 1468]], [[64331, 64331], "mapped", [1493, 1465]], [[64332, 64332], "mapped", [1489, 1471]], [[64333, 64333], "mapped", [1499, 1471]], [[64334, 64334], "mapped", [1508, 1471]], [[64335, 64335], "mapped", [1488, 1500]], [[64336, 64337], "mapped", [1649]], [[64338, 64341], "mapped", [1659]], [[64342, 64345], "mapped", [1662]], [[64346, 64349], "mapped", [1664]], [[64350, 64353], "mapped", [1658]], [[64354, 64357], "mapped", [1663]], [[64358, 64361], "mapped", [1657]], [[64362, 64365], "mapped", [1700]], [[64366, 64369], "mapped", [1702]], [[64370, 64373], "mapped", [1668]], [[64374, 64377], "mapped", [1667]], [[64378, 64381], "mapped", [1670]], [[64382, 64385], "mapped", [1671]], [[64386, 64387], "mapped", [1677]], [[64388, 64389], "mapped", [1676]], [[64390, 64391], "mapped", [1678]], [[64392, 64393], "mapped", [1672]], [[64394, 64395], "mapped", [1688]], [[64396, 64397], "mapped", [1681]], [[64398, 64401], "mapped", [1705]], [[64402, 64405], "mapped", [1711]], [[64406, 64409], "mapped", [1715]], [[64410, 64413], "mapped", [1713]], [[64414, 64415], "mapped", [1722]], [[64416, 64419], "mapped", [1723]], [[64420, 64421], "mapped", [1728]], [[64422, 64425], "mapped", [1729]], [[64426, 64429], "mapped", [1726]], [[64430, 64431], "mapped", [1746]], [[64432, 64433], "mapped", [1747]], [[64434, 64449], "valid", [], "NV8"], [[64450, 64466], "disallowed"], [[64467, 64470], "mapped", [1709]], [[64471, 64472], "mapped", [1735]], [[64473, 64474], "mapped", [1734]], [[64475, 64476], "mapped", [1736]], [[64477, 64477], "mapped", [1735, 1652]], [[64478, 64479], "mapped", [1739]], [[64480, 64481], "mapped", [1733]], [[64482, 64483], "mapped", [1737]], [[64484, 64487], "mapped", [1744]], [[64488, 64489], "mapped", [1609]], [[64490, 64491], "mapped", [1574, 1575]], [[64492, 64493], "mapped", [1574, 1749]], [[64494, 64495], "mapped", [1574, 1608]], [[64496, 64497], "mapped", [1574, 1735]], [[64498, 64499], "mapped", [1574, 1734]], [[64500, 64501], "mapped", [1574, 1736]], [[64502, 64504], "mapped", [1574, 1744]], [[64505, 64507], "mapped", [1574, 1609]], [[64508, 64511], "mapped", [1740]], [[64512, 64512], "mapped", [1574, 1580]], [[64513, 64513], "mapped", [1574, 1581]], [[64514, 64514], "mapped", [1574, 1605]], [[64515, 64515], "mapped", [1574, 1609]], [[64516, 64516], "mapped", [1574, 1610]], [[64517, 64517], "mapped", [1576, 1580]], [[64518, 64518], "mapped", [1576, 1581]], [[64519, 64519], "mapped", [1576, 1582]], [[64520, 64520], "mapped", [1576, 1605]], [[64521, 64521], "mapped", [1576, 1609]], [[64522, 64522], "mapped", [1576, 1610]], [[64523, 64523], "mapped", [1578, 1580]], [[64524, 64524], "mapped", [1578, 1581]], [[64525, 64525], "mapped", [1578, 1582]], [[64526, 64526], "mapped", [1578, 1605]], [[64527, 64527], "mapped", [1578, 1609]], [[64528, 64528], "mapped", [1578, 1610]], [[64529, 64529], "mapped", [1579, 1580]], [[64530, 64530], "mapped", [1579, 1605]], [[64531, 64531], "mapped", [1579, 1609]], [[64532, 64532], "mapped", [1579, 1610]], [[64533, 64533], "mapped", [1580, 1581]], [[64534, 64534], "mapped", [1580, 1605]], [[64535, 64535], "mapped", [1581, 1580]], [[64536, 64536], "mapped", [1581, 1605]], [[64537, 64537], "mapped", [1582, 1580]], [[64538, 64538], "mapped", [1582, 1581]], [[64539, 64539], "mapped", [1582, 1605]], [[64540, 64540], "mapped", [1587, 1580]], [[64541, 64541], "mapped", [1587, 1581]], [[64542, 64542], "mapped", [1587, 1582]], [[64543, 64543], "mapped", [1587, 1605]], [[64544, 64544], "mapped", [1589, 1581]], [[64545, 64545], "mapped", [1589, 1605]], [[64546, 64546], "mapped", [1590, 1580]], [[64547, 64547], "mapped", [1590, 1581]], [[64548, 64548], "mapped", [1590, 1582]], [[64549, 64549], "mapped", [1590, 1605]], [[64550, 64550], "mapped", [1591, 1581]], [[64551, 64551], "mapped", [1591, 1605]], [[64552, 64552], "mapped", [1592, 1605]], [[64553, 64553], "mapped", [1593, 1580]], [[64554, 64554], "mapped", [1593, 1605]], [[64555, 64555], "mapped", [1594, 1580]], [[64556, 64556], "mapped", [1594, 1605]], [[64557, 64557], "mapped", [1601, 1580]], [[64558, 64558], "mapped", [1601, 1581]], [[64559, 64559], "mapped", [1601, 1582]], [[64560, 64560], "mapped", [1601, 1605]], [[64561, 64561], "mapped", [1601, 1609]], [[64562, 64562], "mapped", [1601, 1610]], [[64563, 64563], "mapped", [1602, 1581]], [[64564, 64564], "mapped", [1602, 1605]], [[64565, 64565], "mapped", [1602, 1609]], [[64566, 64566], "mapped", [1602, 1610]], [[64567, 64567], "mapped", [1603, 1575]], [[64568, 64568], "mapped", [1603, 1580]], [[64569, 64569], "mapped", [1603, 1581]], [[64570, 64570], "mapped", [1603, 1582]], [[64571, 64571], "mapped", [1603, 1604]], [[64572, 64572], "mapped", [1603, 1605]], [[64573, 64573], "mapped", [1603, 1609]], [[64574, 64574], "mapped", [1603, 1610]], [[64575, 64575], "mapped", [1604, 1580]], [[64576, 64576], "mapped", [1604, 1581]], [[64577, 64577], "mapped", [1604, 1582]], [[64578, 64578], "mapped", [1604, 1605]], [[64579, 64579], "mapped", [1604, 1609]], [[64580, 64580], "mapped", [1604, 1610]], [[64581, 64581], "mapped", [1605, 1580]], [[64582, 64582], "mapped", [1605, 1581]], [[64583, 64583], "mapped", [1605, 1582]], [[64584, 64584], "mapped", [1605, 1605]], [[64585, 64585], "mapped", [1605, 1609]], [[64586, 64586], "mapped", [1605, 1610]], [[64587, 64587], "mapped", [1606, 1580]], [[64588, 64588], "mapped", [1606, 1581]], [[64589, 64589], "mapped", [1606, 1582]], [[64590, 64590], "mapped", [1606, 1605]], [[64591, 64591], "mapped", [1606, 1609]], [[64592, 64592], "mapped", [1606, 1610]], [[64593, 64593], "mapped", [1607, 1580]], [[64594, 64594], "mapped", [1607, 1605]], [[64595, 64595], "mapped", [1607, 1609]], [[64596, 64596], "mapped", [1607, 1610]], [[64597, 64597], "mapped", [1610, 1580]], [[64598, 64598], "mapped", [1610, 1581]], [[64599, 64599], "mapped", [1610, 1582]], [[64600, 64600], "mapped", [1610, 1605]], [[64601, 64601], "mapped", [1610, 1609]], [[64602, 64602], "mapped", [1610, 1610]], [[64603, 64603], "mapped", [1584, 1648]], [[64604, 64604], "mapped", [1585, 1648]], [[64605, 64605], "mapped", [1609, 1648]], [[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]], [[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]], [[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]], [[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]], [[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]], [[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]], [[64612, 64612], "mapped", [1574, 1585]], [[64613, 64613], "mapped", [1574, 1586]], [[64614, 64614], "mapped", [1574, 1605]], [[64615, 64615], "mapped", [1574, 1606]], [[64616, 64616], "mapped", [1574, 1609]], [[64617, 64617], "mapped", [1574, 1610]], [[64618, 64618], "mapped", [1576, 1585]], [[64619, 64619], "mapped", [1576, 1586]], [[64620, 64620], "mapped", [1576, 1605]], [[64621, 64621], "mapped", [1576, 1606]], [[64622, 64622], "mapped", [1576, 1609]], [[64623, 64623], "mapped", [1576, 1610]], [[64624, 64624], "mapped", [1578, 1585]], [[64625, 64625], "mapped", [1578, 1586]], [[64626, 64626], "mapped", [1578, 1605]], [[64627, 64627], "mapped", [1578, 1606]], [[64628, 64628], "mapped", [1578, 1609]], [[64629, 64629], "mapped", [1578, 1610]], [[64630, 64630], "mapped", [1579, 1585]], [[64631, 64631], "mapped", [1579, 1586]], [[64632, 64632], "mapped", [1579, 1605]], [[64633, 64633], "mapped", [1579, 1606]], [[64634, 64634], "mapped", [1579, 1609]], [[64635, 64635], "mapped", [1579, 1610]], [[64636, 64636], "mapped", [1601, 1609]], [[64637, 64637], "mapped", [1601, 1610]], [[64638, 64638], "mapped", [1602, 1609]], [[64639, 64639], "mapped", [1602, 1610]], [[64640, 64640], "mapped", [1603, 1575]], [[64641, 64641], "mapped", [1603, 1604]], [[64642, 64642], "mapped", [1603, 1605]], [[64643, 64643], "mapped", [1603, 1609]], [[64644, 64644], "mapped", [1603, 1610]], [[64645, 64645], "mapped", [1604, 1605]], [[64646, 64646], "mapped", [1604, 1609]], [[64647, 64647], "mapped", [1604, 1610]], [[64648, 64648], "mapped", [1605, 1575]], [[64649, 64649], "mapped", [1605, 1605]], [[64650, 64650], "mapped", [1606, 1585]], [[64651, 64651], "mapped", [1606, 1586]], [[64652, 64652], "mapped", [1606, 1605]], [[64653, 64653], "mapped", [1606, 1606]], [[64654, 64654], "mapped", [1606, 1609]], [[64655, 64655], "mapped", [1606, 1610]], [[64656, 64656], "mapped", [1609, 1648]], [[64657, 64657], "mapped", [1610, 1585]], [[64658, 64658], "mapped", [1610, 1586]], [[64659, 64659], "mapped", [1610, 1605]], [[64660, 64660], "mapped", [1610, 1606]], [[64661, 64661], "mapped", [1610, 1609]], [[64662, 64662], "mapped", [1610, 1610]], [[64663, 64663], "mapped", [1574, 1580]], [[64664, 64664], "mapped", [1574, 1581]], [[64665, 64665], "mapped", [1574, 1582]], [[64666, 64666], "mapped", [1574, 1605]], [[64667, 64667], "mapped", [1574, 1607]], [[64668, 64668], "mapped", [1576, 1580]], [[64669, 64669], "mapped", [1576, 1581]], [[64670, 64670], "mapped", [1576, 1582]], [[64671, 64671], "mapped", [1576, 1605]], [[64672, 64672], "mapped", [1576, 1607]], [[64673, 64673], "mapped", [1578, 1580]], [[64674, 64674], "mapped", [1578, 1581]], [[64675, 64675], "mapped", [1578, 1582]], [[64676, 64676], "mapped", [1578, 1605]], [[64677, 64677], "mapped", [1578, 1607]], [[64678, 64678], "mapped", [1579, 1605]], [[64679, 64679], "mapped", [1580, 1581]], [[64680, 64680], "mapped", [1580, 1605]], [[64681, 64681], "mapped", [1581, 1580]], [[64682, 64682], "mapped", [1581, 1605]], [[64683, 64683], "mapped", [1582, 1580]], [[64684, 64684], "mapped", [1582, 1605]], [[64685, 64685], "mapped", [1587, 1580]], [[64686, 64686], "mapped", [1587, 1581]], [[64687, 64687], "mapped", [1587, 1582]], [[64688, 64688], "mapped", [1587, 1605]], [[64689, 64689], "mapped", [1589, 1581]], [[64690, 64690], "mapped", [1589, 1582]], [[64691, 64691], "mapped", [1589, 1605]], [[64692, 64692], "mapped", [1590, 1580]], [[64693, 64693], "mapped", [1590, 1581]], [[64694, 64694], "mapped", [1590, 1582]], [[64695, 64695], "mapped", [1590, 1605]], [[64696, 64696], "mapped", [1591, 1581]], [[64697, 64697], "mapped", [1592, 1605]], [[64698, 64698], "mapped", [1593, 1580]], [[64699, 64699], "mapped", [1593, 1605]], [[64700, 64700], "mapped", [1594, 1580]], [[64701, 64701], "mapped", [1594, 1605]], [[64702, 64702], "mapped", [1601, 1580]], [[64703, 64703], "mapped", [1601, 1581]], [[64704, 64704], "mapped", [1601, 1582]], [[64705, 64705], "mapped", [1601, 1605]], [[64706, 64706], "mapped", [1602, 1581]], [[64707, 64707], "mapped", [1602, 1605]], [[64708, 64708], "mapped", [1603, 1580]], [[64709, 64709], "mapped", [1603, 1581]], [[64710, 64710], "mapped", [1603, 1582]], [[64711, 64711], "mapped", [1603, 1604]], [[64712, 64712], "mapped", [1603, 1605]], [[64713, 64713], "mapped", [1604, 1580]], [[64714, 64714], "mapped", [1604, 1581]], [[64715, 64715], "mapped", [1604, 1582]], [[64716, 64716], "mapped", [1604, 1605]], [[64717, 64717], "mapped", [1604, 1607]], [[64718, 64718], "mapped", [1605, 1580]], [[64719, 64719], "mapped", [1605, 1581]], [[64720, 64720], "mapped", [1605, 1582]], [[64721, 64721], "mapped", [1605, 1605]], [[64722, 64722], "mapped", [1606, 1580]], [[64723, 64723], "mapped", [1606, 1581]], [[64724, 64724], "mapped", [1606, 1582]], [[64725, 64725], "mapped", [1606, 1605]], [[64726, 64726], "mapped", [1606, 1607]], [[64727, 64727], "mapped", [1607, 1580]], [[64728, 64728], "mapped", [1607, 1605]], [[64729, 64729], "mapped", [1607, 1648]], [[64730, 64730], "mapped", [1610, 1580]], [[64731, 64731], "mapped", [1610, 1581]], [[64732, 64732], "mapped", [1610, 1582]], [[64733, 64733], "mapped", [1610, 1605]], [[64734, 64734], "mapped", [1610, 1607]], [[64735, 64735], "mapped", [1574, 1605]], [[64736, 64736], "mapped", [1574, 1607]], [[64737, 64737], "mapped", [1576, 1605]], [[64738, 64738], "mapped", [1576, 1607]], [[64739, 64739], "mapped", [1578, 1605]], [[64740, 64740], "mapped", [1578, 1607]], [[64741, 64741], "mapped", [1579, 1605]], [[64742, 64742], "mapped", [1579, 1607]], [[64743, 64743], "mapped", [1587, 1605]], [[64744, 64744], "mapped", [1587, 1607]], [[64745, 64745], "mapped", [1588, 1605]], [[64746, 64746], "mapped", [1588, 1607]], [[64747, 64747], "mapped", [1603, 1604]], [[64748, 64748], "mapped", [1603, 1605]], [[64749, 64749], "mapped", [1604, 1605]], [[64750, 64750], "mapped", [1606, 1605]], [[64751, 64751], "mapped", [1606, 1607]], [[64752, 64752], "mapped", [1610, 1605]], [[64753, 64753], "mapped", [1610, 1607]], [[64754, 64754], "mapped", [1600, 1614, 1617]], [[64755, 64755], "mapped", [1600, 1615, 1617]], [[64756, 64756], "mapped", [1600, 1616, 1617]], [[64757, 64757], "mapped", [1591, 1609]], [[64758, 64758], "mapped", [1591, 1610]], [[64759, 64759], "mapped", [1593, 1609]], [[64760, 64760], "mapped", [1593, 1610]], [[64761, 64761], "mapped", [1594, 1609]], [[64762, 64762], "mapped", [1594, 1610]], [[64763, 64763], "mapped", [1587, 1609]], [[64764, 64764], "mapped", [1587, 1610]], [[64765, 64765], "mapped", [1588, 1609]], [[64766, 64766], "mapped", [1588, 1610]], [[64767, 64767], "mapped", [1581, 1609]], [[64768, 64768], "mapped", [1581, 1610]], [[64769, 64769], "mapped", [1580, 1609]], [[64770, 64770], "mapped", [1580, 1610]], [[64771, 64771], "mapped", [1582, 1609]], [[64772, 64772], "mapped", [1582, 1610]], [[64773, 64773], "mapped", [1589, 1609]], [[64774, 64774], "mapped", [1589, 1610]], [[64775, 64775], "mapped", [1590, 1609]], [[64776, 64776], "mapped", [1590, 1610]], [[64777, 64777], "mapped", [1588, 1580]], [[64778, 64778], "mapped", [1588, 1581]], [[64779, 64779], "mapped", [1588, 1582]], [[64780, 64780], "mapped", [1588, 1605]], [[64781, 64781], "mapped", [1588, 1585]], [[64782, 64782], "mapped", [1587, 1585]], [[64783, 64783], "mapped", [1589, 1585]], [[64784, 64784], "mapped", [1590, 1585]], [[64785, 64785], "mapped", [1591, 1609]], [[64786, 64786], "mapped", [1591, 1610]], [[64787, 64787], "mapped", [1593, 1609]], [[64788, 64788], "mapped", [1593, 1610]], [[64789, 64789], "mapped", [1594, 1609]], [[64790, 64790], "mapped", [1594, 1610]], [[64791, 64791], "mapped", [1587, 1609]], [[64792, 64792], "mapped", [1587, 1610]], [[64793, 64793], "mapped", [1588, 1609]], [[64794, 64794], "mapped", [1588, 1610]], [[64795, 64795], "mapped", [1581, 1609]], [[64796, 64796], "mapped", [1581, 1610]], [[64797, 64797], "mapped", [1580, 1609]], [[64798, 64798], "mapped", [1580, 1610]], [[64799, 64799], "mapped", [1582, 1609]], [[64800, 64800], "mapped", [1582, 1610]], [[64801, 64801], "mapped", [1589, 1609]], [[64802, 64802], "mapped", [1589, 1610]], [[64803, 64803], "mapped", [1590, 1609]], [[64804, 64804], "mapped", [1590, 1610]], [[64805, 64805], "mapped", [1588, 1580]], [[64806, 64806], "mapped", [1588, 1581]], [[64807, 64807], "mapped", [1588, 1582]], [[64808, 64808], "mapped", [1588, 1605]], [[64809, 64809], "mapped", [1588, 1585]], [[64810, 64810], "mapped", [1587, 1585]], [[64811, 64811], "mapped", [1589, 1585]], [[64812, 64812], "mapped", [1590, 1585]], [[64813, 64813], "mapped", [1588, 1580]], [[64814, 64814], "mapped", [1588, 1581]], [[64815, 64815], "mapped", [1588, 1582]], [[64816, 64816], "mapped", [1588, 1605]], [[64817, 64817], "mapped", [1587, 1607]], [[64818, 64818], "mapped", [1588, 1607]], [[64819, 64819], "mapped", [1591, 1605]], [[64820, 64820], "mapped", [1587, 1580]], [[64821, 64821], "mapped", [1587, 1581]], [[64822, 64822], "mapped", [1587, 1582]], [[64823, 64823], "mapped", [1588, 1580]], [[64824, 64824], "mapped", [1588, 1581]], [[64825, 64825], "mapped", [1588, 1582]], [[64826, 64826], "mapped", [1591, 1605]], [[64827, 64827], "mapped", [1592, 1605]], [[64828, 64829], "mapped", [1575, 1611]], [[64830, 64831], "valid", [], "NV8"], [[64832, 64847], "disallowed"], [[64848, 64848], "mapped", [1578, 1580, 1605]], [[64849, 64850], "mapped", [1578, 1581, 1580]], [[64851, 64851], "mapped", [1578, 1581, 1605]], [[64852, 64852], "mapped", [1578, 1582, 1605]], [[64853, 64853], "mapped", [1578, 1605, 1580]], [[64854, 64854], "mapped", [1578, 1605, 1581]], [[64855, 64855], "mapped", [1578, 1605, 1582]], [[64856, 64857], "mapped", [1580, 1605, 1581]], [[64858, 64858], "mapped", [1581, 1605, 1610]], [[64859, 64859], "mapped", [1581, 1605, 1609]], [[64860, 64860], "mapped", [1587, 1581, 1580]], [[64861, 64861], "mapped", [1587, 1580, 1581]], [[64862, 64862], "mapped", [1587, 1580, 1609]], [[64863, 64864], "mapped", [1587, 1605, 1581]], [[64865, 64865], "mapped", [1587, 1605, 1580]], [[64866, 64867], "mapped", [1587, 1605, 1605]], [[64868, 64869], "mapped", [1589, 1581, 1581]], [[64870, 64870], "mapped", [1589, 1605, 1605]], [[64871, 64872], "mapped", [1588, 1581, 1605]], [[64873, 64873], "mapped", [1588, 1580, 1610]], [[64874, 64875], "mapped", [1588, 1605, 1582]], [[64876, 64877], "mapped", [1588, 1605, 1605]], [[64878, 64878], "mapped", [1590, 1581, 1609]], [[64879, 64880], "mapped", [1590, 1582, 1605]], [[64881, 64882], "mapped", [1591, 1605, 1581]], [[64883, 64883], "mapped", [1591, 1605, 1605]], [[64884, 64884], "mapped", [1591, 1605, 1610]], [[64885, 64885], "mapped", [1593, 1580, 1605]], [[64886, 64887], "mapped", [1593, 1605, 1605]], [[64888, 64888], "mapped", [1593, 1605, 1609]], [[64889, 64889], "mapped", [1594, 1605, 1605]], [[64890, 64890], "mapped", [1594, 1605, 1610]], [[64891, 64891], "mapped", [1594, 1605, 1609]], [[64892, 64893], "mapped", [1601, 1582, 1605]], [[64894, 64894], "mapped", [1602, 1605, 1581]], [[64895, 64895], "mapped", [1602, 1605, 1605]], [[64896, 64896], "mapped", [1604, 1581, 1605]], [[64897, 64897], "mapped", [1604, 1581, 1610]], [[64898, 64898], "mapped", [1604, 1581, 1609]], [[64899, 64900], "mapped", [1604, 1580, 1580]], [[64901, 64902], "mapped", [1604, 1582, 1605]], [[64903, 64904], "mapped", [1604, 1605, 1581]], [[64905, 64905], "mapped", [1605, 1581, 1580]], [[64906, 64906], "mapped", [1605, 1581, 1605]], [[64907, 64907], "mapped", [1605, 1581, 1610]], [[64908, 64908], "mapped", [1605, 1580, 1581]], [[64909, 64909], "mapped", [1605, 1580, 1605]], [[64910, 64910], "mapped", [1605, 1582, 1580]], [[64911, 64911], "mapped", [1605, 1582, 1605]], [[64912, 64913], "disallowed"], [[64914, 64914], "mapped", [1605, 1580, 1582]], [[64915, 64915], "mapped", [1607, 1605, 1580]], [[64916, 64916], "mapped", [1607, 1605, 1605]], [[64917, 64917], "mapped", [1606, 1581, 1605]], [[64918, 64918], "mapped", [1606, 1581, 1609]], [[64919, 64920], "mapped", [1606, 1580, 1605]], [[64921, 64921], "mapped", [1606, 1580, 1609]], [[64922, 64922], "mapped", [1606, 1605, 1610]], [[64923, 64923], "mapped", [1606, 1605, 1609]], [[64924, 64925], "mapped", [1610, 1605, 1605]], [[64926, 64926], "mapped", [1576, 1582, 1610]], [[64927, 64927], "mapped", [1578, 1580, 1610]], [[64928, 64928], "mapped", [1578, 1580, 1609]], [[64929, 64929], "mapped", [1578, 1582, 1610]], [[64930, 64930], "mapped", [1578, 1582, 1609]], [[64931, 64931], "mapped", [1578, 1605, 1610]], [[64932, 64932], "mapped", [1578, 1605, 1609]], [[64933, 64933], "mapped", [1580, 1605, 1610]], [[64934, 64934], "mapped", [1580, 1581, 1609]], [[64935, 64935], "mapped", [1580, 1605, 1609]], [[64936, 64936], "mapped", [1587, 1582, 1609]], [[64937, 64937], "mapped", [1589, 1581, 1610]], [[64938, 64938], "mapped", [1588, 1581, 1610]], [[64939, 64939], "mapped", [1590, 1581, 1610]], [[64940, 64940], "mapped", [1604, 1580, 1610]], [[64941, 64941], "mapped", [1604, 1605, 1610]], [[64942, 64942], "mapped", [1610, 1581, 1610]], [[64943, 64943], "mapped", [1610, 1580, 1610]], [[64944, 64944], "mapped", [1610, 1605, 1610]], [[64945, 64945], "mapped", [1605, 1605, 1610]], [[64946, 64946], "mapped", [1602, 1605, 1610]], [[64947, 64947], "mapped", [1606, 1581, 1610]], [[64948, 64948], "mapped", [1602, 1605, 1581]], [[64949, 64949], "mapped", [1604, 1581, 1605]], [[64950, 64950], "mapped", [1593, 1605, 1610]], [[64951, 64951], "mapped", [1603, 1605, 1610]], [[64952, 64952], "mapped", [1606, 1580, 1581]], [[64953, 64953], "mapped", [1605, 1582, 1610]], [[64954, 64954], "mapped", [1604, 1580, 1605]], [[64955, 64955], "mapped", [1603, 1605, 1605]], [[64956, 64956], "mapped", [1604, 1580, 1605]], [[64957, 64957], "mapped", [1606, 1580, 1581]], [[64958, 64958], "mapped", [1580, 1581, 1610]], [[64959, 64959], "mapped", [1581, 1580, 1610]], [[64960, 64960], "mapped", [1605, 1580, 1610]], [[64961, 64961], "mapped", [1601, 1605, 1610]], [[64962, 64962], "mapped", [1576, 1581, 1610]], [[64963, 64963], "mapped", [1603, 1605, 1605]], [[64964, 64964], "mapped", [1593, 1580, 1605]], [[64965, 64965], "mapped", [1589, 1605, 1605]], [[64966, 64966], "mapped", [1587, 1582, 1610]], [[64967, 64967], "mapped", [1606, 1580, 1610]], [[64968, 64975], "disallowed"], [[64976, 65007], "disallowed"], [[65008, 65008], "mapped", [1589, 1604, 1746]], [[65009, 65009], "mapped", [1602, 1604, 1746]], [[65010, 65010], "mapped", [1575, 1604, 1604, 1607]], [[65011, 65011], "mapped", [1575, 1603, 1576, 1585]], [[65012, 65012], "mapped", [1605, 1581, 1605, 1583]], [[65013, 65013], "mapped", [1589, 1604, 1593, 1605]], [[65014, 65014], "mapped", [1585, 1587, 1608, 1604]], [[65015, 65015], "mapped", [1593, 1604, 1610, 1607]], [[65016, 65016], "mapped", [1608, 1587, 1604, 1605]], [[65017, 65017], "mapped", [1589, 1604, 1609]], [[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]], [[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]], [[65020, 65020], "mapped", [1585, 1740, 1575, 1604]], [[65021, 65021], "valid", [], "NV8"], [[65022, 65023], "disallowed"], [[65024, 65039], "ignored"], [[65040, 65040], "disallowed_STD3_mapped", [44]], [[65041, 65041], "mapped", [12289]], [[65042, 65042], "disallowed"], [[65043, 65043], "disallowed_STD3_mapped", [58]], [[65044, 65044], "disallowed_STD3_mapped", [59]], [[65045, 65045], "disallowed_STD3_mapped", [33]], [[65046, 65046], "disallowed_STD3_mapped", [63]], [[65047, 65047], "mapped", [12310]], [[65048, 65048], "mapped", [12311]], [[65049, 65049], "disallowed"], [[65050, 65055], "disallowed"], [[65056, 65059], "valid"], [[65060, 65062], "valid"], [[65063, 65069], "valid"], [[65070, 65071], "valid"], [[65072, 65072], "disallowed"], [[65073, 65073], "mapped", [8212]], [[65074, 65074], "mapped", [8211]], [[65075, 65076], "disallowed_STD3_mapped", [95]], [[65077, 65077], "disallowed_STD3_mapped", [40]], [[65078, 65078], "disallowed_STD3_mapped", [41]], [[65079, 65079], "disallowed_STD3_mapped", [123]], [[65080, 65080], "disallowed_STD3_mapped", [125]], [[65081, 65081], "mapped", [12308]], [[65082, 65082], "mapped", [12309]], [[65083, 65083], "mapped", [12304]], [[65084, 65084], "mapped", [12305]], [[65085, 65085], "mapped", [12298]], [[65086, 65086], "mapped", [12299]], [[65087, 65087], "mapped", [12296]], [[65088, 65088], "mapped", [12297]], [[65089, 65089], "mapped", [12300]], [[65090, 65090], "mapped", [12301]], [[65091, 65091], "mapped", [12302]], [[65092, 65092], "mapped", [12303]], [[65093, 65094], "valid", [], "NV8"], [[65095, 65095], "disallowed_STD3_mapped", [91]], [[65096, 65096], "disallowed_STD3_mapped", [93]], [[65097, 65100], "disallowed_STD3_mapped", [32, 773]], [[65101, 65103], "disallowed_STD3_mapped", [95]], [[65104, 65104], "disallowed_STD3_mapped", [44]], [[65105, 65105], "mapped", [12289]], [[65106, 65106], "disallowed"], [[65107, 65107], "disallowed"], [[65108, 65108], "disallowed_STD3_mapped", [59]], [[65109, 65109], "disallowed_STD3_mapped", [58]], [[65110, 65110], "disallowed_STD3_mapped", [63]], [[65111, 65111], "disallowed_STD3_mapped", [33]], [[65112, 65112], "mapped", [8212]], [[65113, 65113], "disallowed_STD3_mapped", [40]], [[65114, 65114], "disallowed_STD3_mapped", [41]], [[65115, 65115], "disallowed_STD3_mapped", [123]], [[65116, 65116], "disallowed_STD3_mapped", [125]], [[65117, 65117], "mapped", [12308]], [[65118, 65118], "mapped", [12309]], [[65119, 65119], "disallowed_STD3_mapped", [35]], [[65120, 65120], "disallowed_STD3_mapped", [38]], [[65121, 65121], "disallowed_STD3_mapped", [42]], [[65122, 65122], "disallowed_STD3_mapped", [43]], [[65123, 65123], "mapped", [45]], [[65124, 65124], "disallowed_STD3_mapped", [60]], [[65125, 65125], "disallowed_STD3_mapped", [62]], [[65126, 65126], "disallowed_STD3_mapped", [61]], [[65127, 65127], "disallowed"], [[65128, 65128], "disallowed_STD3_mapped", [92]], [[65129, 65129], "disallowed_STD3_mapped", [36]], [[65130, 65130], "disallowed_STD3_mapped", [37]], [[65131, 65131], "disallowed_STD3_mapped", [64]], [[65132, 65135], "disallowed"], [[65136, 65136], "disallowed_STD3_mapped", [32, 1611]], [[65137, 65137], "mapped", [1600, 1611]], [[65138, 65138], "disallowed_STD3_mapped", [32, 1612]], [[65139, 65139], "valid"], [[65140, 65140], "disallowed_STD3_mapped", [32, 1613]], [[65141, 65141], "disallowed"], [[65142, 65142], "disallowed_STD3_mapped", [32, 1614]], [[65143, 65143], "mapped", [1600, 1614]], [[65144, 65144], "disallowed_STD3_mapped", [32, 1615]], [[65145, 65145], "mapped", [1600, 1615]], [[65146, 65146], "disallowed_STD3_mapped", [32, 1616]], [[65147, 65147], "mapped", [1600, 1616]], [[65148, 65148], "disallowed_STD3_mapped", [32, 1617]], [[65149, 65149], "mapped", [1600, 1617]], [[65150, 65150], "disallowed_STD3_mapped", [32, 1618]], [[65151, 65151], "mapped", [1600, 1618]], [[65152, 65152], "mapped", [1569]], [[65153, 65154], "mapped", [1570]], [[65155, 65156], "mapped", [1571]], [[65157, 65158], "mapped", [1572]], [[65159, 65160], "mapped", [1573]], [[65161, 65164], "mapped", [1574]], [[65165, 65166], "mapped", [1575]], [[65167, 65170], "mapped", [1576]], [[65171, 65172], "mapped", [1577]], [[65173, 65176], "mapped", [1578]], [[65177, 65180], "mapped", [1579]], [[65181, 65184], "mapped", [1580]], [[65185, 65188], "mapped", [1581]], [[65189, 65192], "mapped", [1582]], [[65193, 65194], "mapped", [1583]], [[65195, 65196], "mapped", [1584]], [[65197, 65198], "mapped", [1585]], [[65199, 65200], "mapped", [1586]], [[65201, 65204], "mapped", [1587]], [[65205, 65208], "mapped", [1588]], [[65209, 65212], "mapped", [1589]], [[65213, 65216], "mapped", [1590]], [[65217, 65220], "mapped", [1591]], [[65221, 65224], "mapped", [1592]], [[65225, 65228], "mapped", [1593]], [[65229, 65232], "mapped", [1594]], [[65233, 65236], "mapped", [1601]], [[65237, 65240], "mapped", [1602]], [[65241, 65244], "mapped", [1603]], [[65245, 65248], "mapped", [1604]], [[65249, 65252], "mapped", [1605]], [[65253, 65256], "mapped", [1606]], [[65257, 65260], "mapped", [1607]], [[65261, 65262], "mapped", [1608]], [[65263, 65264], "mapped", [1609]], [[65265, 65268], "mapped", [1610]], [[65269, 65270], "mapped", [1604, 1570]], [[65271, 65272], "mapped", [1604, 1571]], [[65273, 65274], "mapped", [1604, 1573]], [[65275, 65276], "mapped", [1604, 1575]], [[65277, 65278], "disallowed"], [[65279, 65279], "ignored"], [[65280, 65280], "disallowed"], [[65281, 65281], "disallowed_STD3_mapped", [33]], [[65282, 65282], "disallowed_STD3_mapped", [34]], [[65283, 65283], "disallowed_STD3_mapped", [35]], [[65284, 65284], "disallowed_STD3_mapped", [36]], [[65285, 65285], "disallowed_STD3_mapped", [37]], [[65286, 65286], "disallowed_STD3_mapped", [38]], [[65287, 65287], "disallowed_STD3_mapped", [39]], [[65288, 65288], "disallowed_STD3_mapped", [40]], [[65289, 65289], "disallowed_STD3_mapped", [41]], [[65290, 65290], "disallowed_STD3_mapped", [42]], [[65291, 65291], "disallowed_STD3_mapped", [43]], [[65292, 65292], "disallowed_STD3_mapped", [44]], [[65293, 65293], "mapped", [45]], [[65294, 65294], "mapped", [46]], [[65295, 65295], "disallowed_STD3_mapped", [47]], [[65296, 65296], "mapped", [48]], [[65297, 65297], "mapped", [49]], [[65298, 65298], "mapped", [50]], [[65299, 65299], "mapped", [51]], [[65300, 65300], "mapped", [52]], [[65301, 65301], "mapped", [53]], [[65302, 65302], "mapped", [54]], [[65303, 65303], "mapped", [55]], [[65304, 65304], "mapped", [56]], [[65305, 65305], "mapped", [57]], [[65306, 65306], "disallowed_STD3_mapped", [58]], [[65307, 65307], "disallowed_STD3_mapped", [59]], [[65308, 65308], "disallowed_STD3_mapped", [60]], [[65309, 65309], "disallowed_STD3_mapped", [61]], [[65310, 65310], "disallowed_STD3_mapped", [62]], [[65311, 65311], "disallowed_STD3_mapped", [63]], [[65312, 65312], "disallowed_STD3_mapped", [64]], [[65313, 65313], "mapped", [97]], [[65314, 65314], "mapped", [98]], [[65315, 65315], "mapped", [99]], [[65316, 65316], "mapped", [100]], [[65317, 65317], "mapped", [101]], [[65318, 65318], "mapped", [102]], [[65319, 65319], "mapped", [103]], [[65320, 65320], "mapped", [104]], [[65321, 65321], "mapped", [105]], [[65322, 65322], "mapped", [106]], [[65323, 65323], "mapped", [107]], [[65324, 65324], "mapped", [108]], [[65325, 65325], "mapped", [109]], [[65326, 65326], "mapped", [110]], [[65327, 65327], "mapped", [111]], [[65328, 65328], "mapped", [112]], [[65329, 65329], "mapped", [113]], [[65330, 65330], "mapped", [114]], [[65331, 65331], "mapped", [115]], [[65332, 65332], "mapped", [116]], [[65333, 65333], "mapped", [117]], [[65334, 65334], "mapped", [118]], [[65335, 65335], "mapped", [119]], [[65336, 65336], "mapped", [120]], [[65337, 65337], "mapped", [121]], [[65338, 65338], "mapped", [122]], [[65339, 65339], "disallowed_STD3_mapped", [91]], [[65340, 65340], "disallowed_STD3_mapped", [92]], [[65341, 65341], "disallowed_STD3_mapped", [93]], [[65342, 65342], "disallowed_STD3_mapped", [94]], [[65343, 65343], "disallowed_STD3_mapped", [95]], [[65344, 65344], "disallowed_STD3_mapped", [96]], [[65345, 65345], "mapped", [97]], [[65346, 65346], "mapped", [98]], [[65347, 65347], "mapped", [99]], [[65348, 65348], "mapped", [100]], [[65349, 65349], "mapped", [101]], [[65350, 65350], "mapped", [102]], [[65351, 65351], "mapped", [103]], [[65352, 65352], "mapped", [104]], [[65353, 65353], "mapped", [105]], [[65354, 65354], "mapped", [106]], [[65355, 65355], "mapped", [107]], [[65356, 65356], "mapped", [108]], [[65357, 65357], "mapped", [109]], [[65358, 65358], "mapped", [110]], [[65359, 65359], "mapped", [111]], [[65360, 65360], "mapped", [112]], [[65361, 65361], "mapped", [113]], [[65362, 65362], "mapped", [114]], [[65363, 65363], "mapped", [115]], [[65364, 65364], "mapped", [116]], [[65365, 65365], "mapped", [117]], [[65366, 65366], "mapped", [118]], [[65367, 65367], "mapped", [119]], [[65368, 65368], "mapped", [120]], [[65369, 65369], "mapped", [121]], [[65370, 65370], "mapped", [122]], [[65371, 65371], "disallowed_STD3_mapped", [123]], [[65372, 65372], "disallowed_STD3_mapped", [124]], [[65373, 65373], "disallowed_STD3_mapped", [125]], [[65374, 65374], "disallowed_STD3_mapped", [126]], [[65375, 65375], "mapped", [10629]], [[65376, 65376], "mapped", [10630]], [[65377, 65377], "mapped", [46]], [[65378, 65378], "mapped", [12300]], [[65379, 65379], "mapped", [12301]], [[65380, 65380], "mapped", [12289]], [[65381, 65381], "mapped", [12539]], [[65382, 65382], "mapped", [12530]], [[65383, 65383], "mapped", [12449]], [[65384, 65384], "mapped", [12451]], [[65385, 65385], "mapped", [12453]], [[65386, 65386], "mapped", [12455]], [[65387, 65387], "mapped", [12457]], [[65388, 65388], "mapped", [12515]], [[65389, 65389], "mapped", [12517]], [[65390, 65390], "mapped", [12519]], [[65391, 65391], "mapped", [12483]], [[65392, 65392], "mapped", [12540]], [[65393, 65393], "mapped", [12450]], [[65394, 65394], "mapped", [12452]], [[65395, 65395], "mapped", [12454]], [[65396, 65396], "mapped", [12456]], [[65397, 65397], "mapped", [12458]], [[65398, 65398], "mapped", [12459]], [[65399, 65399], "mapped", [12461]], [[65400, 65400], "mapped", [12463]], [[65401, 65401], "mapped", [12465]], [[65402, 65402], "mapped", [12467]], [[65403, 65403], "mapped", [12469]], [[65404, 65404], "mapped", [12471]], [[65405, 65405], "mapped", [12473]], [[65406, 65406], "mapped", [12475]], [[65407, 65407], "mapped", [12477]], [[65408, 65408], "mapped", [12479]], [[65409, 65409], "mapped", [12481]], [[65410, 65410], "mapped", [12484]], [[65411, 65411], "mapped", [12486]], [[65412, 65412], "mapped", [12488]], [[65413, 65413], "mapped", [12490]], [[65414, 65414], "mapped", [12491]], [[65415, 65415], "mapped", [12492]], [[65416, 65416], "mapped", [12493]], [[65417, 65417], "mapped", [12494]], [[65418, 65418], "mapped", [12495]], [[65419, 65419], "mapped", [12498]], [[65420, 65420], "mapped", [12501]], [[65421, 65421], "mapped", [12504]], [[65422, 65422], "mapped", [12507]], [[65423, 65423], "mapped", [12510]], [[65424, 65424], "mapped", [12511]], [[65425, 65425], "mapped", [12512]], [[65426, 65426], "mapped", [12513]], [[65427, 65427], "mapped", [12514]], [[65428, 65428], "mapped", [12516]], [[65429, 65429], "mapped", [12518]], [[65430, 65430], "mapped", [12520]], [[65431, 65431], "mapped", [12521]], [[65432, 65432], "mapped", [12522]], [[65433, 65433], "mapped", [12523]], [[65434, 65434], "mapped", [12524]], [[65435, 65435], "mapped", [12525]], [[65436, 65436], "mapped", [12527]], [[65437, 65437], "mapped", [12531]], [[65438, 65438], "mapped", [12441]], [[65439, 65439], "mapped", [12442]], [[65440, 65440], "disallowed"], [[65441, 65441], "mapped", [4352]], [[65442, 65442], "mapped", [4353]], [[65443, 65443], "mapped", [4522]], [[65444, 65444], "mapped", [4354]], [[65445, 65445], "mapped", [4524]], [[65446, 65446], "mapped", [4525]], [[65447, 65447], "mapped", [4355]], [[65448, 65448], "mapped", [4356]], [[65449, 65449], "mapped", [4357]], [[65450, 65450], "mapped", [4528]], [[65451, 65451], "mapped", [4529]], [[65452, 65452], "mapped", [4530]], [[65453, 65453], "mapped", [4531]], [[65454, 65454], "mapped", [4532]], [[65455, 65455], "mapped", [4533]], [[65456, 65456], "mapped", [4378]], [[65457, 65457], "mapped", [4358]], [[65458, 65458], "mapped", [4359]], [[65459, 65459], "mapped", [4360]], [[65460, 65460], "mapped", [4385]], [[65461, 65461], "mapped", [4361]], [[65462, 65462], "mapped", [4362]], [[65463, 65463], "mapped", [4363]], [[65464, 65464], "mapped", [4364]], [[65465, 65465], "mapped", [4365]], [[65466, 65466], "mapped", [4366]], [[65467, 65467], "mapped", [4367]], [[65468, 65468], "mapped", [4368]], [[65469, 65469], "mapped", [4369]], [[65470, 65470], "mapped", [4370]], [[65471, 65473], "disallowed"], [[65474, 65474], "mapped", [4449]], [[65475, 65475], "mapped", [4450]], [[65476, 65476], "mapped", [4451]], [[65477, 65477], "mapped", [4452]], [[65478, 65478], "mapped", [4453]], [[65479, 65479], "mapped", [4454]], [[65480, 65481], "disallowed"], [[65482, 65482], "mapped", [4455]], [[65483, 65483], "mapped", [4456]], [[65484, 65484], "mapped", [4457]], [[65485, 65485], "mapped", [4458]], [[65486, 65486], "mapped", [4459]], [[65487, 65487], "mapped", [4460]], [[65488, 65489], "disallowed"], [[65490, 65490], "mapped", [4461]], [[65491, 65491], "mapped", [4462]], [[65492, 65492], "mapped", [4463]], [[65493, 65493], "mapped", [4464]], [[65494, 65494], "mapped", [4465]], [[65495, 65495], "mapped", [4466]], [[65496, 65497], "disallowed"], [[65498, 65498], "mapped", [4467]], [[65499, 65499], "mapped", [4468]], [[65500, 65500], "mapped", [4469]], [[65501, 65503], "disallowed"], [[65504, 65504], "mapped", [162]], [[65505, 65505], "mapped", [163]], [[65506, 65506], "mapped", [172]], [[65507, 65507], "disallowed_STD3_mapped", [32, 772]], [[65508, 65508], "mapped", [166]], [[65509, 65509], "mapped", [165]], [[65510, 65510], "mapped", [8361]], [[65511, 65511], "disallowed"], [[65512, 65512], "mapped", [9474]], [[65513, 65513], "mapped", [8592]], [[65514, 65514], "mapped", [8593]], [[65515, 65515], "mapped", [8594]], [[65516, 65516], "mapped", [8595]], [[65517, 65517], "mapped", [9632]], [[65518, 65518], "mapped", [9675]], [[65519, 65528], "disallowed"], [[65529, 65531], "disallowed"], [[65532, 65532], "disallowed"], [[65533, 65533], "disallowed"], [[65534, 65535], "disallowed"], [[65536, 65547], "valid"], [[65548, 65548], "disallowed"], [[65549, 65574], "valid"], [[65575, 65575], "disallowed"], [[65576, 65594], "valid"], [[65595, 65595], "disallowed"], [[65596, 65597], "valid"], [[65598, 65598], "disallowed"], [[65599, 65613], "valid"], [[65614, 65615], "disallowed"], [[65616, 65629], "valid"], [[65630, 65663], "disallowed"], [[65664, 65786], "valid"], [[65787, 65791], "disallowed"], [[65792, 65794], "valid", [], "NV8"], [[65795, 65798], "disallowed"], [[65799, 65843], "valid", [], "NV8"], [[65844, 65846], "disallowed"], [[65847, 65855], "valid", [], "NV8"], [[65856, 65930], "valid", [], "NV8"], [[65931, 65932], "valid", [], "NV8"], [[65933, 65935], "disallowed"], [[65936, 65947], "valid", [], "NV8"], [[65948, 65951], "disallowed"], [[65952, 65952], "valid", [], "NV8"], [[65953, 65999], "disallowed"], [[66e3, 66044], "valid", [], "NV8"], [[66045, 66045], "valid"], [[66046, 66175], "disallowed"], [[66176, 66204], "valid"], [[66205, 66207], "disallowed"], [[66208, 66256], "valid"], [[66257, 66271], "disallowed"], [[66272, 66272], "valid"], [[66273, 66299], "valid", [], "NV8"], [[66300, 66303], "disallowed"], [[66304, 66334], "valid"], [[66335, 66335], "valid"], [[66336, 66339], "valid", [], "NV8"], [[66340, 66351], "disallowed"], [[66352, 66368], "valid"], [[66369, 66369], "valid", [], "NV8"], [[66370, 66377], "valid"], [[66378, 66378], "valid", [], "NV8"], [[66379, 66383], "disallowed"], [[66384, 66426], "valid"], [[66427, 66431], "disallowed"], [[66432, 66461], "valid"], [[66462, 66462], "disallowed"], [[66463, 66463], "valid", [], "NV8"], [[66464, 66499], "valid"], [[66500, 66503], "disallowed"], [[66504, 66511], "valid"], [[66512, 66517], "valid", [], "NV8"], [[66518, 66559], "disallowed"], [[66560, 66560], "mapped", [66600]], [[66561, 66561], "mapped", [66601]], [[66562, 66562], "mapped", [66602]], [[66563, 66563], "mapped", [66603]], [[66564, 66564], "mapped", [66604]], [[66565, 66565], "mapped", [66605]], [[66566, 66566], "mapped", [66606]], [[66567, 66567], "mapped", [66607]], [[66568, 66568], "mapped", [66608]], [[66569, 66569], "mapped", [66609]], [[66570, 66570], "mapped", [66610]], [[66571, 66571], "mapped", [66611]], [[66572, 66572], "mapped", [66612]], [[66573, 66573], "mapped", [66613]], [[66574, 66574], "mapped", [66614]], [[66575, 66575], "mapped", [66615]], [[66576, 66576], "mapped", [66616]], [[66577, 66577], "mapped", [66617]], [[66578, 66578], "mapped", [66618]], [[66579, 66579], "mapped", [66619]], [[66580, 66580], "mapped", [66620]], [[66581, 66581], "mapped", [66621]], [[66582, 66582], "mapped", [66622]], [[66583, 66583], "mapped", [66623]], [[66584, 66584], "mapped", [66624]], [[66585, 66585], "mapped", [66625]], [[66586, 66586], "mapped", [66626]], [[66587, 66587], "mapped", [66627]], [[66588, 66588], "mapped", [66628]], [[66589, 66589], "mapped", [66629]], [[66590, 66590], "mapped", [66630]], [[66591, 66591], "mapped", [66631]], [[66592, 66592], "mapped", [66632]], [[66593, 66593], "mapped", [66633]], [[66594, 66594], "mapped", [66634]], [[66595, 66595], "mapped", [66635]], [[66596, 66596], "mapped", [66636]], [[66597, 66597], "mapped", [66637]], [[66598, 66598], "mapped", [66638]], [[66599, 66599], "mapped", [66639]], [[66600, 66637], "valid"], [[66638, 66717], "valid"], [[66718, 66719], "disallowed"], [[66720, 66729], "valid"], [[66730, 66815], "disallowed"], [[66816, 66855], "valid"], [[66856, 66863], "disallowed"], [[66864, 66915], "valid"], [[66916, 66926], "disallowed"], [[66927, 66927], "valid", [], "NV8"], [[66928, 67071], "disallowed"], [[67072, 67382], "valid"], [[67383, 67391], "disallowed"], [[67392, 67413], "valid"], [[67414, 67423], "disallowed"], [[67424, 67431], "valid"], [[67432, 67583], "disallowed"], [[67584, 67589], "valid"], [[67590, 67591], "disallowed"], [[67592, 67592], "valid"], [[67593, 67593], "disallowed"], [[67594, 67637], "valid"], [[67638, 67638], "disallowed"], [[67639, 67640], "valid"], [[67641, 67643], "disallowed"], [[67644, 67644], "valid"], [[67645, 67646], "disallowed"], [[67647, 67647], "valid"], [[67648, 67669], "valid"], [[67670, 67670], "disallowed"], [[67671, 67679], "valid", [], "NV8"], [[67680, 67702], "valid"], [[67703, 67711], "valid", [], "NV8"], [[67712, 67742], "valid"], [[67743, 67750], "disallowed"], [[67751, 67759], "valid", [], "NV8"], [[67760, 67807], "disallowed"], [[67808, 67826], "valid"], [[67827, 67827], "disallowed"], [[67828, 67829], "valid"], [[67830, 67834], "disallowed"], [[67835, 67839], "valid", [], "NV8"], [[67840, 67861], "valid"], [[67862, 67865], "valid", [], "NV8"], [[67866, 67867], "valid", [], "NV8"], [[67868, 67870], "disallowed"], [[67871, 67871], "valid", [], "NV8"], [[67872, 67897], "valid"], [[67898, 67902], "disallowed"], [[67903, 67903], "valid", [], "NV8"], [[67904, 67967], "disallowed"], [[67968, 68023], "valid"], [[68024, 68027], "disallowed"], [[68028, 68029], "valid", [], "NV8"], [[68030, 68031], "valid"], [[68032, 68047], "valid", [], "NV8"], [[68048, 68049], "disallowed"], [[68050, 68095], "valid", [], "NV8"], [[68096, 68099], "valid"], [[68100, 68100], "disallowed"], [[68101, 68102], "valid"], [[68103, 68107], "disallowed"], [[68108, 68115], "valid"], [[68116, 68116], "disallowed"], [[68117, 68119], "valid"], [[68120, 68120], "disallowed"], [[68121, 68147], "valid"], [[68148, 68151], "disallowed"], [[68152, 68154], "valid"], [[68155, 68158], "disallowed"], [[68159, 68159], "valid"], [[68160, 68167], "valid", [], "NV8"], [[68168, 68175], "disallowed"], [[68176, 68184], "valid", [], "NV8"], [[68185, 68191], "disallowed"], [[68192, 68220], "valid"], [[68221, 68223], "valid", [], "NV8"], [[68224, 68252], "valid"], [[68253, 68255], "valid", [], "NV8"], [[68256, 68287], "disallowed"], [[68288, 68295], "valid"], [[68296, 68296], "valid", [], "NV8"], [[68297, 68326], "valid"], [[68327, 68330], "disallowed"], [[68331, 68342], "valid", [], "NV8"], [[68343, 68351], "disallowed"], [[68352, 68405], "valid"], [[68406, 68408], "disallowed"], [[68409, 68415], "valid", [], "NV8"], [[68416, 68437], "valid"], [[68438, 68439], "disallowed"], [[68440, 68447], "valid", [], "NV8"], [[68448, 68466], "valid"], [[68467, 68471], "disallowed"], [[68472, 68479], "valid", [], "NV8"], [[68480, 68497], "valid"], [[68498, 68504], "disallowed"], [[68505, 68508], "valid", [], "NV8"], [[68509, 68520], "disallowed"], [[68521, 68527], "valid", [], "NV8"], [[68528, 68607], "disallowed"], [[68608, 68680], "valid"], [[68681, 68735], "disallowed"], [[68736, 68736], "mapped", [68800]], [[68737, 68737], "mapped", [68801]], [[68738, 68738], "mapped", [68802]], [[68739, 68739], "mapped", [68803]], [[68740, 68740], "mapped", [68804]], [[68741, 68741], "mapped", [68805]], [[68742, 68742], "mapped", [68806]], [[68743, 68743], "mapped", [68807]], [[68744, 68744], "mapped", [68808]], [[68745, 68745], "mapped", [68809]], [[68746, 68746], "mapped", [68810]], [[68747, 68747], "mapped", [68811]], [[68748, 68748], "mapped", [68812]], [[68749, 68749], "mapped", [68813]], [[68750, 68750], "mapped", [68814]], [[68751, 68751], "mapped", [68815]], [[68752, 68752], "mapped", [68816]], [[68753, 68753], "mapped", [68817]], [[68754, 68754], "mapped", [68818]], [[68755, 68755], "mapped", [68819]], [[68756, 68756], "mapped", [68820]], [[68757, 68757], "mapped", [68821]], [[68758, 68758], "mapped", [68822]], [[68759, 68759], "mapped", [68823]], [[68760, 68760], "mapped", [68824]], [[68761, 68761], "mapped", [68825]], [[68762, 68762], "mapped", [68826]], [[68763, 68763], "mapped", [68827]], [[68764, 68764], "mapped", [68828]], [[68765, 68765], "mapped", [68829]], [[68766, 68766], "mapped", [68830]], [[68767, 68767], "mapped", [68831]], [[68768, 68768], "mapped", [68832]], [[68769, 68769], "mapped", [68833]], [[68770, 68770], "mapped", [68834]], [[68771, 68771], "mapped", [68835]], [[68772, 68772], "mapped", [68836]], [[68773, 68773], "mapped", [68837]], [[68774, 68774], "mapped", [68838]], [[68775, 68775], "mapped", [68839]], [[68776, 68776], "mapped", [68840]], [[68777, 68777], "mapped", [68841]], [[68778, 68778], "mapped", [68842]], [[68779, 68779], "mapped", [68843]], [[68780, 68780], "mapped", [68844]], [[68781, 68781], "mapped", [68845]], [[68782, 68782], "mapped", [68846]], [[68783, 68783], "mapped", [68847]], [[68784, 68784], "mapped", [68848]], [[68785, 68785], "mapped", [68849]], [[68786, 68786], "mapped", [68850]], [[68787, 68799], "disallowed"], [[68800, 68850], "valid"], [[68851, 68857], "disallowed"], [[68858, 68863], "valid", [], "NV8"], [[68864, 69215], "disallowed"], [[69216, 69246], "valid", [], "NV8"], [[69247, 69631], "disallowed"], [[69632, 69702], "valid"], [[69703, 69709], "valid", [], "NV8"], [[69710, 69713], "disallowed"], [[69714, 69733], "valid", [], "NV8"], [[69734, 69743], "valid"], [[69744, 69758], "disallowed"], [[69759, 69759], "valid"], [[69760, 69818], "valid"], [[69819, 69820], "valid", [], "NV8"], [[69821, 69821], "disallowed"], [[69822, 69825], "valid", [], "NV8"], [[69826, 69839], "disallowed"], [[69840, 69864], "valid"], [[69865, 69871], "disallowed"], [[69872, 69881], "valid"], [[69882, 69887], "disallowed"], [[69888, 69940], "valid"], [[69941, 69941], "disallowed"], [[69942, 69951], "valid"], [[69952, 69955], "valid", [], "NV8"], [[69956, 69967], "disallowed"], [[69968, 70003], "valid"], [[70004, 70005], "valid", [], "NV8"], [[70006, 70006], "valid"], [[70007, 70015], "disallowed"], [[70016, 70084], "valid"], [[70085, 70088], "valid", [], "NV8"], [[70089, 70089], "valid", [], "NV8"], [[70090, 70092], "valid"], [[70093, 70093], "valid", [], "NV8"], [[70094, 70095], "disallowed"], [[70096, 70105], "valid"], [[70106, 70106], "valid"], [[70107, 70107], "valid", [], "NV8"], [[70108, 70108], "valid"], [[70109, 70111], "valid", [], "NV8"], [[70112, 70112], "disallowed"], [[70113, 70132], "valid", [], "NV8"], [[70133, 70143], "disallowed"], [[70144, 70161], "valid"], [[70162, 70162], "disallowed"], [[70163, 70199], "valid"], [[70200, 70205], "valid", [], "NV8"], [[70206, 70271], "disallowed"], [[70272, 70278], "valid"], [[70279, 70279], "disallowed"], [[70280, 70280], "valid"], [[70281, 70281], "disallowed"], [[70282, 70285], "valid"], [[70286, 70286], "disallowed"], [[70287, 70301], "valid"], [[70302, 70302], "disallowed"], [[70303, 70312], "valid"], [[70313, 70313], "valid", [], "NV8"], [[70314, 70319], "disallowed"], [[70320, 70378], "valid"], [[70379, 70383], "disallowed"], [[70384, 70393], "valid"], [[70394, 70399], "disallowed"], [[70400, 70400], "valid"], [[70401, 70403], "valid"], [[70404, 70404], "disallowed"], [[70405, 70412], "valid"], [[70413, 70414], "disallowed"], [[70415, 70416], "valid"], [[70417, 70418], "disallowed"], [[70419, 70440], "valid"], [[70441, 70441], "disallowed"], [[70442, 70448], "valid"], [[70449, 70449], "disallowed"], [[70450, 70451], "valid"], [[70452, 70452], "disallowed"], [[70453, 70457], "valid"], [[70458, 70459], "disallowed"], [[70460, 70468], "valid"], [[70469, 70470], "disallowed"], [[70471, 70472], "valid"], [[70473, 70474], "disallowed"], [[70475, 70477], "valid"], [[70478, 70479], "disallowed"], [[70480, 70480], "valid"], [[70481, 70486], "disallowed"], [[70487, 70487], "valid"], [[70488, 70492], "disallowed"], [[70493, 70499], "valid"], [[70500, 70501], "disallowed"], [[70502, 70508], "valid"], [[70509, 70511], "disallowed"], [[70512, 70516], "valid"], [[70517, 70783], "disallowed"], [[70784, 70853], "valid"], [[70854, 70854], "valid", [], "NV8"], [[70855, 70855], "valid"], [[70856, 70863], "disallowed"], [[70864, 70873], "valid"], [[70874, 71039], "disallowed"], [[71040, 71093], "valid"], [[71094, 71095], "disallowed"], [[71096, 71104], "valid"], [[71105, 71113], "valid", [], "NV8"], [[71114, 71127], "valid", [], "NV8"], [[71128, 71133], "valid"], [[71134, 71167], "disallowed"], [[71168, 71232], "valid"], [[71233, 71235], "valid", [], "NV8"], [[71236, 71236], "valid"], [[71237, 71247], "disallowed"], [[71248, 71257], "valid"], [[71258, 71295], "disallowed"], [[71296, 71351], "valid"], [[71352, 71359], "disallowed"], [[71360, 71369], "valid"], [[71370, 71423], "disallowed"], [[71424, 71449], "valid"], [[71450, 71452], "disallowed"], [[71453, 71467], "valid"], [[71468, 71471], "disallowed"], [[71472, 71481], "valid"], [[71482, 71487], "valid", [], "NV8"], [[71488, 71839], "disallowed"], [[71840, 71840], "mapped", [71872]], [[71841, 71841], "mapped", [71873]], [[71842, 71842], "mapped", [71874]], [[71843, 71843], "mapped", [71875]], [[71844, 71844], "mapped", [71876]], [[71845, 71845], "mapped", [71877]], [[71846, 71846], "mapped", [71878]], [[71847, 71847], "mapped", [71879]], [[71848, 71848], "mapped", [71880]], [[71849, 71849], "mapped", [71881]], [[71850, 71850], "mapped", [71882]], [[71851, 71851], "mapped", [71883]], [[71852, 71852], "mapped", [71884]], [[71853, 71853], "mapped", [71885]], [[71854, 71854], "mapped", [71886]], [[71855, 71855], "mapped", [71887]], [[71856, 71856], "mapped", [71888]], [[71857, 71857], "mapped", [71889]], [[71858, 71858], "mapped", [71890]], [[71859, 71859], "mapped", [71891]], [[71860, 71860], "mapped", [71892]], [[71861, 71861], "mapped", [71893]], [[71862, 71862], "mapped", [71894]], [[71863, 71863], "mapped", [71895]], [[71864, 71864], "mapped", [71896]], [[71865, 71865], "mapped", [71897]], [[71866, 71866], "mapped", [71898]], [[71867, 71867], "mapped", [71899]], [[71868, 71868], "mapped", [71900]], [[71869, 71869], "mapped", [71901]], [[71870, 71870], "mapped", [71902]], [[71871, 71871], "mapped", [71903]], [[71872, 71913], "valid"], [[71914, 71922], "valid", [], "NV8"], [[71923, 71934], "disallowed"], [[71935, 71935], "valid"], [[71936, 72383], "disallowed"], [[72384, 72440], "valid"], [[72441, 73727], "disallowed"], [[73728, 74606], "valid"], [[74607, 74648], "valid"], [[74649, 74649], "valid"], [[74650, 74751], "disallowed"], [[74752, 74850], "valid", [], "NV8"], [[74851, 74862], "valid", [], "NV8"], [[74863, 74863], "disallowed"], [[74864, 74867], "valid", [], "NV8"], [[74868, 74868], "valid", [], "NV8"], [[74869, 74879], "disallowed"], [[74880, 75075], "valid"], [[75076, 77823], "disallowed"], [[77824, 78894], "valid"], [[78895, 82943], "disallowed"], [[82944, 83526], "valid"], [[83527, 92159], "disallowed"], [[92160, 92728], "valid"], [[92729, 92735], "disallowed"], [[92736, 92766], "valid"], [[92767, 92767], "disallowed"], [[92768, 92777], "valid"], [[92778, 92781], "disallowed"], [[92782, 92783], "valid", [], "NV8"], [[92784, 92879], "disallowed"], [[92880, 92909], "valid"], [[92910, 92911], "disallowed"], [[92912, 92916], "valid"], [[92917, 92917], "valid", [], "NV8"], [[92918, 92927], "disallowed"], [[92928, 92982], "valid"], [[92983, 92991], "valid", [], "NV8"], [[92992, 92995], "valid"], [[92996, 92997], "valid", [], "NV8"], [[92998, 93007], "disallowed"], [[93008, 93017], "valid"], [[93018, 93018], "disallowed"], [[93019, 93025], "valid", [], "NV8"], [[93026, 93026], "disallowed"], [[93027, 93047], "valid"], [[93048, 93052], "disallowed"], [[93053, 93071], "valid"], [[93072, 93951], "disallowed"], [[93952, 94020], "valid"], [[94021, 94031], "disallowed"], [[94032, 94078], "valid"], [[94079, 94094], "disallowed"], [[94095, 94111], "valid"], [[94112, 110591], "disallowed"], [[110592, 110593], "valid"], [[110594, 113663], "disallowed"], [[113664, 113770], "valid"], [[113771, 113775], "disallowed"], [[113776, 113788], "valid"], [[113789, 113791], "disallowed"], [[113792, 113800], "valid"], [[113801, 113807], "disallowed"], [[113808, 113817], "valid"], [[113818, 113819], "disallowed"], [[113820, 113820], "valid", [], "NV8"], [[113821, 113822], "valid"], [[113823, 113823], "valid", [], "NV8"], [[113824, 113827], "ignored"], [[113828, 118783], "disallowed"], [[118784, 119029], "valid", [], "NV8"], [[119030, 119039], "disallowed"], [[119040, 119078], "valid", [], "NV8"], [[119079, 119080], "disallowed"], [[119081, 119081], "valid", [], "NV8"], [[119082, 119133], "valid", [], "NV8"], [[119134, 119134], "mapped", [119127, 119141]], [[119135, 119135], "mapped", [119128, 119141]], [[119136, 119136], "mapped", [119128, 119141, 119150]], [[119137, 119137], "mapped", [119128, 119141, 119151]], [[119138, 119138], "mapped", [119128, 119141, 119152]], [[119139, 119139], "mapped", [119128, 119141, 119153]], [[119140, 119140], "mapped", [119128, 119141, 119154]], [[119141, 119154], "valid", [], "NV8"], [[119155, 119162], "disallowed"], [[119163, 119226], "valid", [], "NV8"], [[119227, 119227], "mapped", [119225, 119141]], [[119228, 119228], "mapped", [119226, 119141]], [[119229, 119229], "mapped", [119225, 119141, 119150]], [[119230, 119230], "mapped", [119226, 119141, 119150]], [[119231, 119231], "mapped", [119225, 119141, 119151]], [[119232, 119232], "mapped", [119226, 119141, 119151]], [[119233, 119261], "valid", [], "NV8"], [[119262, 119272], "valid", [], "NV8"], [[119273, 119295], "disallowed"], [[119296, 119365], "valid", [], "NV8"], [[119366, 119551], "disallowed"], [[119552, 119638], "valid", [], "NV8"], [[119639, 119647], "disallowed"], [[119648, 119665], "valid", [], "NV8"], [[119666, 119807], "disallowed"], [[119808, 119808], "mapped", [97]], [[119809, 119809], "mapped", [98]], [[119810, 119810], "mapped", [99]], [[119811, 119811], "mapped", [100]], [[119812, 119812], "mapped", [101]], [[119813, 119813], "mapped", [102]], [[119814, 119814], "mapped", [103]], [[119815, 119815], "mapped", [104]], [[119816, 119816], "mapped", [105]], [[119817, 119817], "mapped", [106]], [[119818, 119818], "mapped", [107]], [[119819, 119819], "mapped", [108]], [[119820, 119820], "mapped", [109]], [[119821, 119821], "mapped", [110]], [[119822, 119822], "mapped", [111]], [[119823, 119823], "mapped", [112]], [[119824, 119824], "mapped", [113]], [[119825, 119825], "mapped", [114]], [[119826, 119826], "mapped", [115]], [[119827, 119827], "mapped", [116]], [[119828, 119828], "mapped", [117]], [[119829, 119829], "mapped", [118]], [[119830, 119830], "mapped", [119]], [[119831, 119831], "mapped", [120]], [[119832, 119832], "mapped", [121]], [[119833, 119833], "mapped", [122]], [[119834, 119834], "mapped", [97]], [[119835, 119835], "mapped", [98]], [[119836, 119836], "mapped", [99]], [[119837, 119837], "mapped", [100]], [[119838, 119838], "mapped", [101]], [[119839, 119839], "mapped", [102]], [[119840, 119840], "mapped", [103]], [[119841, 119841], "mapped", [104]], [[119842, 119842], "mapped", [105]], [[119843, 119843], "mapped", [106]], [[119844, 119844], "mapped", [107]], [[119845, 119845], "mapped", [108]], [[119846, 119846], "mapped", [109]], [[119847, 119847], "mapped", [110]], [[119848, 119848], "mapped", [111]], [[119849, 119849], "mapped", [112]], [[119850, 119850], "mapped", [113]], [[119851, 119851], "mapped", [114]], [[119852, 119852], "mapped", [115]], [[119853, 119853], "mapped", [116]], [[119854, 119854], "mapped", [117]], [[119855, 119855], "mapped", [118]], [[119856, 119856], "mapped", [119]], [[119857, 119857], "mapped", [120]], [[119858, 119858], "mapped", [121]], [[119859, 119859], "mapped", [122]], [[119860, 119860], "mapped", [97]], [[119861, 119861], "mapped", [98]], [[119862, 119862], "mapped", [99]], [[119863, 119863], "mapped", [100]], [[119864, 119864], "mapped", [101]], [[119865, 119865], "mapped", [102]], [[119866, 119866], "mapped", [103]], [[119867, 119867], "mapped", [104]], [[119868, 119868], "mapped", [105]], [[119869, 119869], "mapped", [106]], [[119870, 119870], "mapped", [107]], [[119871, 119871], "mapped", [108]], [[119872, 119872], "mapped", [109]], [[119873, 119873], "mapped", [110]], [[119874, 119874], "mapped", [111]], [[119875, 119875], "mapped", [112]], [[119876, 119876], "mapped", [113]], [[119877, 119877], "mapped", [114]], [[119878, 119878], "mapped", [115]], [[119879, 119879], "mapped", [116]], [[119880, 119880], "mapped", [117]], [[119881, 119881], "mapped", [118]], [[119882, 119882], "mapped", [119]], [[119883, 119883], "mapped", [120]], [[119884, 119884], "mapped", [121]], [[119885, 119885], "mapped", [122]], [[119886, 119886], "mapped", [97]], [[119887, 119887], "mapped", [98]], [[119888, 119888], "mapped", [99]], [[119889, 119889], "mapped", [100]], [[119890, 119890], "mapped", [101]], [[119891, 119891], "mapped", [102]], [[119892, 119892], "mapped", [103]], [[119893, 119893], "disallowed"], [[119894, 119894], "mapped", [105]], [[119895, 119895], "mapped", [106]], [[119896, 119896], "mapped", [107]], [[119897, 119897], "mapped", [108]], [[119898, 119898], "mapped", [109]], [[119899, 119899], "mapped", [110]], [[119900, 119900], "mapped", [111]], [[119901, 119901], "mapped", [112]], [[119902, 119902], "mapped", [113]], [[119903, 119903], "mapped", [114]], [[119904, 119904], "mapped", [115]], [[119905, 119905], "mapped", [116]], [[119906, 119906], "mapped", [117]], [[119907, 119907], "mapped", [118]], [[119908, 119908], "mapped", [119]], [[119909, 119909], "mapped", [120]], [[119910, 119910], "mapped", [121]], [[119911, 119911], "mapped", [122]], [[119912, 119912], "mapped", [97]], [[119913, 119913], "mapped", [98]], [[119914, 119914], "mapped", [99]], [[119915, 119915], "mapped", [100]], [[119916, 119916], "mapped", [101]], [[119917, 119917], "mapped", [102]], [[119918, 119918], "mapped", [103]], [[119919, 119919], "mapped", [104]], [[119920, 119920], "mapped", [105]], [[119921, 119921], "mapped", [106]], [[119922, 119922], "mapped", [107]], [[119923, 119923], "mapped", [108]], [[119924, 119924], "mapped", [109]], [[119925, 119925], "mapped", [110]], [[119926, 119926], "mapped", [111]], [[119927, 119927], "mapped", [112]], [[119928, 119928], "mapped", [113]], [[119929, 119929], "mapped", [114]], [[119930, 119930], "mapped", [115]], [[119931, 119931], "mapped", [116]], [[119932, 119932], "mapped", [117]], [[119933, 119933], "mapped", [118]], [[119934, 119934], "mapped", [119]], [[119935, 119935], "mapped", [120]], [[119936, 119936], "mapped", [121]], [[119937, 119937], "mapped", [122]], [[119938, 119938], "mapped", [97]], [[119939, 119939], "mapped", [98]], [[119940, 119940], "mapped", [99]], [[119941, 119941], "mapped", [100]], [[119942, 119942], "mapped", [101]], [[119943, 119943], "mapped", [102]], [[119944, 119944], "mapped", [103]], [[119945, 119945], "mapped", [104]], [[119946, 119946], "mapped", [105]], [[119947, 119947], "mapped", [106]], [[119948, 119948], "mapped", [107]], [[119949, 119949], "mapped", [108]], [[119950, 119950], "mapped", [109]], [[119951, 119951], "mapped", [110]], [[119952, 119952], "mapped", [111]], [[119953, 119953], "mapped", [112]], [[119954, 119954], "mapped", [113]], [[119955, 119955], "mapped", [114]], [[119956, 119956], "mapped", [115]], [[119957, 119957], "mapped", [116]], [[119958, 119958], "mapped", [117]], [[119959, 119959], "mapped", [118]], [[119960, 119960], "mapped", [119]], [[119961, 119961], "mapped", [120]], [[119962, 119962], "mapped", [121]], [[119963, 119963], "mapped", [122]], [[119964, 119964], "mapped", [97]], [[119965, 119965], "disallowed"], [[119966, 119966], "mapped", [99]], [[119967, 119967], "mapped", [100]], [[119968, 119969], "disallowed"], [[119970, 119970], "mapped", [103]], [[119971, 119972], "disallowed"], [[119973, 119973], "mapped", [106]], [[119974, 119974], "mapped", [107]], [[119975, 119976], "disallowed"], [[119977, 119977], "mapped", [110]], [[119978, 119978], "mapped", [111]], [[119979, 119979], "mapped", [112]], [[119980, 119980], "mapped", [113]], [[119981, 119981], "disallowed"], [[119982, 119982], "mapped", [115]], [[119983, 119983], "mapped", [116]], [[119984, 119984], "mapped", [117]], [[119985, 119985], "mapped", [118]], [[119986, 119986], "mapped", [119]], [[119987, 119987], "mapped", [120]], [[119988, 119988], "mapped", [121]], [[119989, 119989], "mapped", [122]], [[119990, 119990], "mapped", [97]], [[119991, 119991], "mapped", [98]], [[119992, 119992], "mapped", [99]], [[119993, 119993], "mapped", [100]], [[119994, 119994], "disallowed"], [[119995, 119995], "mapped", [102]], [[119996, 119996], "disallowed"], [[119997, 119997], "mapped", [104]], [[119998, 119998], "mapped", [105]], [[119999, 119999], "mapped", [106]], [[12e4, 12e4], "mapped", [107]], [[120001, 120001], "mapped", [108]], [[120002, 120002], "mapped", [109]], [[120003, 120003], "mapped", [110]], [[120004, 120004], "disallowed"], [[120005, 120005], "mapped", [112]], [[120006, 120006], "mapped", [113]], [[120007, 120007], "mapped", [114]], [[120008, 120008], "mapped", [115]], [[120009, 120009], "mapped", [116]], [[120010, 120010], "mapped", [117]], [[120011, 120011], "mapped", [118]], [[120012, 120012], "mapped", [119]], [[120013, 120013], "mapped", [120]], [[120014, 120014], "mapped", [121]], [[120015, 120015], "mapped", [122]], [[120016, 120016], "mapped", [97]], [[120017, 120017], "mapped", [98]], [[120018, 120018], "mapped", [99]], [[120019, 120019], "mapped", [100]], [[120020, 120020], "mapped", [101]], [[120021, 120021], "mapped", [102]], [[120022, 120022], "mapped", [103]], [[120023, 120023], "mapped", [104]], [[120024, 120024], "mapped", [105]], [[120025, 120025], "mapped", [106]], [[120026, 120026], "mapped", [107]], [[120027, 120027], "mapped", [108]], [[120028, 120028], "mapped", [109]], [[120029, 120029], "mapped", [110]], [[120030, 120030], "mapped", [111]], [[120031, 120031], "mapped", [112]], [[120032, 120032], "mapped", [113]], [[120033, 120033], "mapped", [114]], [[120034, 120034], "mapped", [115]], [[120035, 120035], "mapped", [116]], [[120036, 120036], "mapped", [117]], [[120037, 120037], "mapped", [118]], [[120038, 120038], "mapped", [119]], [[120039, 120039], "mapped", [120]], [[120040, 120040], "mapped", [121]], [[120041, 120041], "mapped", [122]], [[120042, 120042], "mapped", [97]], [[120043, 120043], "mapped", [98]], [[120044, 120044], "mapped", [99]], [[120045, 120045], "mapped", [100]], [[120046, 120046], "mapped", [101]], [[120047, 120047], "mapped", [102]], [[120048, 120048], "mapped", [103]], [[120049, 120049], "mapped", [104]], [[120050, 120050], "mapped", [105]], [[120051, 120051], "mapped", [106]], [[120052, 120052], "mapped", [107]], [[120053, 120053], "mapped", [108]], [[120054, 120054], "mapped", [109]], [[120055, 120055], "mapped", [110]], [[120056, 120056], "mapped", [111]], [[120057, 120057], "mapped", [112]], [[120058, 120058], "mapped", [113]], [[120059, 120059], "mapped", [114]], [[120060, 120060], "mapped", [115]], [[120061, 120061], "mapped", [116]], [[120062, 120062], "mapped", [117]], [[120063, 120063], "mapped", [118]], [[120064, 120064], "mapped", [119]], [[120065, 120065], "mapped", [120]], [[120066, 120066], "mapped", [121]], [[120067, 120067], "mapped", [122]], [[120068, 120068], "mapped", [97]], [[120069, 120069], "mapped", [98]], [[120070, 120070], "disallowed"], [[120071, 120071], "mapped", [100]], [[120072, 120072], "mapped", [101]], [[120073, 120073], "mapped", [102]], [[120074, 120074], "mapped", [103]], [[120075, 120076], "disallowed"], [[120077, 120077], "mapped", [106]], [[120078, 120078], "mapped", [107]], [[120079, 120079], "mapped", [108]], [[120080, 120080], "mapped", [109]], [[120081, 120081], "mapped", [110]], [[120082, 120082], "mapped", [111]], [[120083, 120083], "mapped", [112]], [[120084, 120084], "mapped", [113]], [[120085, 120085], "disallowed"], [[120086, 120086], "mapped", [115]], [[120087, 120087], "mapped", [116]], [[120088, 120088], "mapped", [117]], [[120089, 120089], "mapped", [118]], [[120090, 120090], "mapped", [119]], [[120091, 120091], "mapped", [120]], [[120092, 120092], "mapped", [121]], [[120093, 120093], "disallowed"], [[120094, 120094], "mapped", [97]], [[120095, 120095], "mapped", [98]], [[120096, 120096], "mapped", [99]], [[120097, 120097], "mapped", [100]], [[120098, 120098], "mapped", [101]], [[120099, 120099], "mapped", [102]], [[120100, 120100], "mapped", [103]], [[120101, 120101], "mapped", [104]], [[120102, 120102], "mapped", [105]], [[120103, 120103], "mapped", [106]], [[120104, 120104], "mapped", [107]], [[120105, 120105], "mapped", [108]], [[120106, 120106], "mapped", [109]], [[120107, 120107], "mapped", [110]], [[120108, 120108], "mapped", [111]], [[120109, 120109], "mapped", [112]], [[120110, 120110], "mapped", [113]], [[120111, 120111], "mapped", [114]], [[120112, 120112], "mapped", [115]], [[120113, 120113], "mapped", [116]], [[120114, 120114], "mapped", [117]], [[120115, 120115], "mapped", [118]], [[120116, 120116], "mapped", [119]], [[120117, 120117], "mapped", [120]], [[120118, 120118], "mapped", [121]], [[120119, 120119], "mapped", [122]], [[120120, 120120], "mapped", [97]], [[120121, 120121], "mapped", [98]], [[120122, 120122], "disallowed"], [[120123, 120123], "mapped", [100]], [[120124, 120124], "mapped", [101]], [[120125, 120125], "mapped", [102]], [[120126, 120126], "mapped", [103]], [[120127, 120127], "disallowed"], [[120128, 120128], "mapped", [105]], [[120129, 120129], "mapped", [106]], [[120130, 120130], "mapped", [107]], [[120131, 120131], "mapped", [108]], [[120132, 120132], "mapped", [109]], [[120133, 120133], "disallowed"], [[120134, 120134], "mapped", [111]], [[120135, 120137], "disallowed"], [[120138, 120138], "mapped", [115]], [[120139, 120139], "mapped", [116]], [[120140, 120140], "mapped", [117]], [[120141, 120141], "mapped", [118]], [[120142, 120142], "mapped", [119]], [[120143, 120143], "mapped", [120]], [[120144, 120144], "mapped", [121]], [[120145, 120145], "disallowed"], [[120146, 120146], "mapped", [97]], [[120147, 120147], "mapped", [98]], [[120148, 120148], "mapped", [99]], [[120149, 120149], "mapped", [100]], [[120150, 120150], "mapped", [101]], [[120151, 120151], "mapped", [102]], [[120152, 120152], "mapped", [103]], [[120153, 120153], "mapped", [104]], [[120154, 120154], "mapped", [105]], [[120155, 120155], "mapped", [106]], [[120156, 120156], "mapped", [107]], [[120157, 120157], "mapped", [108]], [[120158, 120158], "mapped", [109]], [[120159, 120159], "mapped", [110]], [[120160, 120160], "mapped", [111]], [[120161, 120161], "mapped", [112]], [[120162, 120162], "mapped", [113]], [[120163, 120163], "mapped", [114]], [[120164, 120164], "mapped", [115]], [[120165, 120165], "mapped", [116]], [[120166, 120166], "mapped", [117]], [[120167, 120167], "mapped", [118]], [[120168, 120168], "mapped", [119]], [[120169, 120169], "mapped", [120]], [[120170, 120170], "mapped", [121]], [[120171, 120171], "mapped", [122]], [[120172, 120172], "mapped", [97]], [[120173, 120173], "mapped", [98]], [[120174, 120174], "mapped", [99]], [[120175, 120175], "mapped", [100]], [[120176, 120176], "mapped", [101]], [[120177, 120177], "mapped", [102]], [[120178, 120178], "mapped", [103]], [[120179, 120179], "mapped", [104]], [[120180, 120180], "mapped", [105]], [[120181, 120181], "mapped", [106]], [[120182, 120182], "mapped", [107]], [[120183, 120183], "mapped", [108]], [[120184, 120184], "mapped", [109]], [[120185, 120185], "mapped", [110]], [[120186, 120186], "mapped", [111]], [[120187, 120187], "mapped", [112]], [[120188, 120188], "mapped", [113]], [[120189, 120189], "mapped", [114]], [[120190, 120190], "mapped", [115]], [[120191, 120191], "mapped", [116]], [[120192, 120192], "mapped", [117]], [[120193, 120193], "mapped", [118]], [[120194, 120194], "mapped", [119]], [[120195, 120195], "mapped", [120]], [[120196, 120196], "mapped", [121]], [[120197, 120197], "mapped", [122]], [[120198, 120198], "mapped", [97]], [[120199, 120199], "mapped", [98]], [[120200, 120200], "mapped", [99]], [[120201, 120201], "mapped", [100]], [[120202, 120202], "mapped", [101]], [[120203, 120203], "mapped", [102]], [[120204, 120204], "mapped", [103]], [[120205, 120205], "mapped", [104]], [[120206, 120206], "mapped", [105]], [[120207, 120207], "mapped", [106]], [[120208, 120208], "mapped", [107]], [[120209, 120209], "mapped", [108]], [[120210, 120210], "mapped", [109]], [[120211, 120211], "mapped", [110]], [[120212, 120212], "mapped", [111]], [[120213, 120213], "mapped", [112]], [[120214, 120214], "mapped", [113]], [[120215, 120215], "mapped", [114]], [[120216, 120216], "mapped", [115]], [[120217, 120217], "mapped", [116]], [[120218, 120218], "mapped", [117]], [[120219, 120219], "mapped", [118]], [[120220, 120220], "mapped", [119]], [[120221, 120221], "mapped", [120]], [[120222, 120222], "mapped", [121]], [[120223, 120223], "mapped", [122]], [[120224, 120224], "mapped", [97]], [[120225, 120225], "mapped", [98]], [[120226, 120226], "mapped", [99]], [[120227, 120227], "mapped", [100]], [[120228, 120228], "mapped", [101]], [[120229, 120229], "mapped", [102]], [[120230, 120230], "mapped", [103]], [[120231, 120231], "mapped", [104]], [[120232, 120232], "mapped", [105]], [[120233, 120233], "mapped", [106]], [[120234, 120234], "mapped", [107]], [[120235, 120235], "mapped", [108]], [[120236, 120236], "mapped", [109]], [[120237, 120237], "mapped", [110]], [[120238, 120238], "mapped", [111]], [[120239, 120239], "mapped", [112]], [[120240, 120240], "mapped", [113]], [[120241, 120241], "mapped", [114]], [[120242, 120242], "mapped", [115]], [[120243, 120243], "mapped", [116]], [[120244, 120244], "mapped", [117]], [[120245, 120245], "mapped", [118]], [[120246, 120246], "mapped", [119]], [[120247, 120247], "mapped", [120]], [[120248, 120248], "mapped", [121]], [[120249, 120249], "mapped", [122]], [[120250, 120250], "mapped", [97]], [[120251, 120251], "mapped", [98]], [[120252, 120252], "mapped", [99]], [[120253, 120253], "mapped", [100]], [[120254, 120254], "mapped", [101]], [[120255, 120255], "mapped", [102]], [[120256, 120256], "mapped", [103]], [[120257, 120257], "mapped", [104]], [[120258, 120258], "mapped", [105]], [[120259, 120259], "mapped", [106]], [[120260, 120260], "mapped", [107]], [[120261, 120261], "mapped", [108]], [[120262, 120262], "mapped", [109]], [[120263, 120263], "mapped", [110]], [[120264, 120264], "mapped", [111]], [[120265, 120265], "mapped", [112]], [[120266, 120266], "mapped", [113]], [[120267, 120267], "mapped", [114]], [[120268, 120268], "mapped", [115]], [[120269, 120269], "mapped", [116]], [[120270, 120270], "mapped", [117]], [[120271, 120271], "mapped", [118]], [[120272, 120272], "mapped", [119]], [[120273, 120273], "mapped", [120]], [[120274, 120274], "mapped", [121]], [[120275, 120275], "mapped", [122]], [[120276, 120276], "mapped", [97]], [[120277, 120277], "mapped", [98]], [[120278, 120278], "mapped", [99]], [[120279, 120279], "mapped", [100]], [[120280, 120280], "mapped", [101]], [[120281, 120281], "mapped", [102]], [[120282, 120282], "mapped", [103]], [[120283, 120283], "mapped", [104]], [[120284, 120284], "mapped", [105]], [[120285, 120285], "mapped", [106]], [[120286, 120286], "mapped", [107]], [[120287, 120287], "mapped", [108]], [[120288, 120288], "mapped", [109]], [[120289, 120289], "mapped", [110]], [[120290, 120290], "mapped", [111]], [[120291, 120291], "mapped", [112]], [[120292, 120292], "mapped", [113]], [[120293, 120293], "mapped", [114]], [[120294, 120294], "mapped", [115]], [[120295, 120295], "mapped", [116]], [[120296, 120296], "mapped", [117]], [[120297, 120297], "mapped", [118]], [[120298, 120298], "mapped", [119]], [[120299, 120299], "mapped", [120]], [[120300, 120300], "mapped", [121]], [[120301, 120301], "mapped", [122]], [[120302, 120302], "mapped", [97]], [[120303, 120303], "mapped", [98]], [[120304, 120304], "mapped", [99]], [[120305, 120305], "mapped", [100]], [[120306, 120306], "mapped", [101]], [[120307, 120307], "mapped", [102]], [[120308, 120308], "mapped", [103]], [[120309, 120309], "mapped", [104]], [[120310, 120310], "mapped", [105]], [[120311, 120311], "mapped", [106]], [[120312, 120312], "mapped", [107]], [[120313, 120313], "mapped", [108]], [[120314, 120314], "mapped", [109]], [[120315, 120315], "mapped", [110]], [[120316, 120316], "mapped", [111]], [[120317, 120317], "mapped", [112]], [[120318, 120318], "mapped", [113]], [[120319, 120319], "mapped", [114]], [[120320, 120320], "mapped", [115]], [[120321, 120321], "mapped", [116]], [[120322, 120322], "mapped", [117]], [[120323, 120323], "mapped", [118]], [[120324, 120324], "mapped", [119]], [[120325, 120325], "mapped", [120]], [[120326, 120326], "mapped", [121]], [[120327, 120327], "mapped", [122]], [[120328, 120328], "mapped", [97]], [[120329, 120329], "mapped", [98]], [[120330, 120330], "mapped", [99]], [[120331, 120331], "mapped", [100]], [[120332, 120332], "mapped", [101]], [[120333, 120333], "mapped", [102]], [[120334, 120334], "mapped", [103]], [[120335, 120335], "mapped", [104]], [[120336, 120336], "mapped", [105]], [[120337, 120337], "mapped", [106]], [[120338, 120338], "mapped", [107]], [[120339, 120339], "mapped", [108]], [[120340, 120340], "mapped", [109]], [[120341, 120341], "mapped", [110]], [[120342, 120342], "mapped", [111]], [[120343, 120343], "mapped", [112]], [[120344, 120344], "mapped", [113]], [[120345, 120345], "mapped", [114]], [[120346, 120346], "mapped", [115]], [[120347, 120347], "mapped", [116]], [[120348, 120348], "mapped", [117]], [[120349, 120349], "mapped", [118]], [[120350, 120350], "mapped", [119]], [[120351, 120351], "mapped", [120]], [[120352, 120352], "mapped", [121]], [[120353, 120353], "mapped", [122]], [[120354, 120354], "mapped", [97]], [[120355, 120355], "mapped", [98]], [[120356, 120356], "mapped", [99]], [[120357, 120357], "mapped", [100]], [[120358, 120358], "mapped", [101]], [[120359, 120359], "mapped", [102]], [[120360, 120360], "mapped", [103]], [[120361, 120361], "mapped", [104]], [[120362, 120362], "mapped", [105]], [[120363, 120363], "mapped", [106]], [[120364, 120364], "mapped", [107]], [[120365, 120365], "mapped", [108]], [[120366, 120366], "mapped", [109]], [[120367, 120367], "mapped", [110]], [[120368, 120368], "mapped", [111]], [[120369, 120369], "mapped", [112]], [[120370, 120370], "mapped", [113]], [[120371, 120371], "mapped", [114]], [[120372, 120372], "mapped", [115]], [[120373, 120373], "mapped", [116]], [[120374, 120374], "mapped", [117]], [[120375, 120375], "mapped", [118]], [[120376, 120376], "mapped", [119]], [[120377, 120377], "mapped", [120]], [[120378, 120378], "mapped", [121]], [[120379, 120379], "mapped", [122]], [[120380, 120380], "mapped", [97]], [[120381, 120381], "mapped", [98]], [[120382, 120382], "mapped", [99]], [[120383, 120383], "mapped", [100]], [[120384, 120384], "mapped", [101]], [[120385, 120385], "mapped", [102]], [[120386, 120386], "mapped", [103]], [[120387, 120387], "mapped", [104]], [[120388, 120388], "mapped", [105]], [[120389, 120389], "mapped", [106]], [[120390, 120390], "mapped", [107]], [[120391, 120391], "mapped", [108]], [[120392, 120392], "mapped", [109]], [[120393, 120393], "mapped", [110]], [[120394, 120394], "mapped", [111]], [[120395, 120395], "mapped", [112]], [[120396, 120396], "mapped", [113]], [[120397, 120397], "mapped", [114]], [[120398, 120398], "mapped", [115]], [[120399, 120399], "mapped", [116]], [[120400, 120400], "mapped", [117]], [[120401, 120401], "mapped", [118]], [[120402, 120402], "mapped", [119]], [[120403, 120403], "mapped", [120]], [[120404, 120404], "mapped", [121]], [[120405, 120405], "mapped", [122]], [[120406, 120406], "mapped", [97]], [[120407, 120407], "mapped", [98]], [[120408, 120408], "mapped", [99]], [[120409, 120409], "mapped", [100]], [[120410, 120410], "mapped", [101]], [[120411, 120411], "mapped", [102]], [[120412, 120412], "mapped", [103]], [[120413, 120413], "mapped", [104]], [[120414, 120414], "mapped", [105]], [[120415, 120415], "mapped", [106]], [[120416, 120416], "mapped", [107]], [[120417, 120417], "mapped", [108]], [[120418, 120418], "mapped", [109]], [[120419, 120419], "mapped", [110]], [[120420, 120420], "mapped", [111]], [[120421, 120421], "mapped", [112]], [[120422, 120422], "mapped", [113]], [[120423, 120423], "mapped", [114]], [[120424, 120424], "mapped", [115]], [[120425, 120425], "mapped", [116]], [[120426, 120426], "mapped", [117]], [[120427, 120427], "mapped", [118]], [[120428, 120428], "mapped", [119]], [[120429, 120429], "mapped", [120]], [[120430, 120430], "mapped", [121]], [[120431, 120431], "mapped", [122]], [[120432, 120432], "mapped", [97]], [[120433, 120433], "mapped", [98]], [[120434, 120434], "mapped", [99]], [[120435, 120435], "mapped", [100]], [[120436, 120436], "mapped", [101]], [[120437, 120437], "mapped", [102]], [[120438, 120438], "mapped", [103]], [[120439, 120439], "mapped", [104]], [[120440, 120440], "mapped", [105]], [[120441, 120441], "mapped", [106]], [[120442, 120442], "mapped", [107]], [[120443, 120443], "mapped", [108]], [[120444, 120444], "mapped", [109]], [[120445, 120445], "mapped", [110]], [[120446, 120446], "mapped", [111]], [[120447, 120447], "mapped", [112]], [[120448, 120448], "mapped", [113]], [[120449, 120449], "mapped", [114]], [[120450, 120450], "mapped", [115]], [[120451, 120451], "mapped", [116]], [[120452, 120452], "mapped", [117]], [[120453, 120453], "mapped", [118]], [[120454, 120454], "mapped", [119]], [[120455, 120455], "mapped", [120]], [[120456, 120456], "mapped", [121]], [[120457, 120457], "mapped", [122]], [[120458, 120458], "mapped", [97]], [[120459, 120459], "mapped", [98]], [[120460, 120460], "mapped", [99]], [[120461, 120461], "mapped", [100]], [[120462, 120462], "mapped", [101]], [[120463, 120463], "mapped", [102]], [[120464, 120464], "mapped", [103]], [[120465, 120465], "mapped", [104]], [[120466, 120466], "mapped", [105]], [[120467, 120467], "mapped", [106]], [[120468, 120468], "mapped", [107]], [[120469, 120469], "mapped", [108]], [[120470, 120470], "mapped", [109]], [[120471, 120471], "mapped", [110]], [[120472, 120472], "mapped", [111]], [[120473, 120473], "mapped", [112]], [[120474, 120474], "mapped", [113]], [[120475, 120475], "mapped", [114]], [[120476, 120476], "mapped", [115]], [[120477, 120477], "mapped", [116]], [[120478, 120478], "mapped", [117]], [[120479, 120479], "mapped", [118]], [[120480, 120480], "mapped", [119]], [[120481, 120481], "mapped", [120]], [[120482, 120482], "mapped", [121]], [[120483, 120483], "mapped", [122]], [[120484, 120484], "mapped", [305]], [[120485, 120485], "mapped", [567]], [[120486, 120487], "disallowed"], [[120488, 120488], "mapped", [945]], [[120489, 120489], "mapped", [946]], [[120490, 120490], "mapped", [947]], [[120491, 120491], "mapped", [948]], [[120492, 120492], "mapped", [949]], [[120493, 120493], "mapped", [950]], [[120494, 120494], "mapped", [951]], [[120495, 120495], "mapped", [952]], [[120496, 120496], "mapped", [953]], [[120497, 120497], "mapped", [954]], [[120498, 120498], "mapped", [955]], [[120499, 120499], "mapped", [956]], [[120500, 120500], "mapped", [957]], [[120501, 120501], "mapped", [958]], [[120502, 120502], "mapped", [959]], [[120503, 120503], "mapped", [960]], [[120504, 120504], "mapped", [961]], [[120505, 120505], "mapped", [952]], [[120506, 120506], "mapped", [963]], [[120507, 120507], "mapped", [964]], [[120508, 120508], "mapped", [965]], [[120509, 120509], "mapped", [966]], [[120510, 120510], "mapped", [967]], [[120511, 120511], "mapped", [968]], [[120512, 120512], "mapped", [969]], [[120513, 120513], "mapped", [8711]], [[120514, 120514], "mapped", [945]], [[120515, 120515], "mapped", [946]], [[120516, 120516], "mapped", [947]], [[120517, 120517], "mapped", [948]], [[120518, 120518], "mapped", [949]], [[120519, 120519], "mapped", [950]], [[120520, 120520], "mapped", [951]], [[120521, 120521], "mapped", [952]], [[120522, 120522], "mapped", [953]], [[120523, 120523], "mapped", [954]], [[120524, 120524], "mapped", [955]], [[120525, 120525], "mapped", [956]], [[120526, 120526], "mapped", [957]], [[120527, 120527], "mapped", [958]], [[120528, 120528], "mapped", [959]], [[120529, 120529], "mapped", [960]], [[120530, 120530], "mapped", [961]], [[120531, 120532], "mapped", [963]], [[120533, 120533], "mapped", [964]], [[120534, 120534], "mapped", [965]], [[120535, 120535], "mapped", [966]], [[120536, 120536], "mapped", [967]], [[120537, 120537], "mapped", [968]], [[120538, 120538], "mapped", [969]], [[120539, 120539], "mapped", [8706]], [[120540, 120540], "mapped", [949]], [[120541, 120541], "mapped", [952]], [[120542, 120542], "mapped", [954]], [[120543, 120543], "mapped", [966]], [[120544, 120544], "mapped", [961]], [[120545, 120545], "mapped", [960]], [[120546, 120546], "mapped", [945]], [[120547, 120547], "mapped", [946]], [[120548, 120548], "mapped", [947]], [[120549, 120549], "mapped", [948]], [[120550, 120550], "mapped", [949]], [[120551, 120551], "mapped", [950]], [[120552, 120552], "mapped", [951]], [[120553, 120553], "mapped", [952]], [[120554, 120554], "mapped", [953]], [[120555, 120555], "mapped", [954]], [[120556, 120556], "mapped", [955]], [[120557, 120557], "mapped", [956]], [[120558, 120558], "mapped", [957]], [[120559, 120559], "mapped", [958]], [[120560, 120560], "mapped", [959]], [[120561, 120561], "mapped", [960]], [[120562, 120562], "mapped", [961]], [[120563, 120563], "mapped", [952]], [[120564, 120564], "mapped", [963]], [[120565, 120565], "mapped", [964]], [[120566, 120566], "mapped", [965]], [[120567, 120567], "mapped", [966]], [[120568, 120568], "mapped", [967]], [[120569, 120569], "mapped", [968]], [[120570, 120570], "mapped", [969]], [[120571, 120571], "mapped", [8711]], [[120572, 120572], "mapped", [945]], [[120573, 120573], "mapped", [946]], [[120574, 120574], "mapped", [947]], [[120575, 120575], "mapped", [948]], [[120576, 120576], "mapped", [949]], [[120577, 120577], "mapped", [950]], [[120578, 120578], "mapped", [951]], [[120579, 120579], "mapped", [952]], [[120580, 120580], "mapped", [953]], [[120581, 120581], "mapped", [954]], [[120582, 120582], "mapped", [955]], [[120583, 120583], "mapped", [956]], [[120584, 120584], "mapped", [957]], [[120585, 120585], "mapped", [958]], [[120586, 120586], "mapped", [959]], [[120587, 120587], "mapped", [960]], [[120588, 120588], "mapped", [961]], [[120589, 120590], "mapped", [963]], [[120591, 120591], "mapped", [964]], [[120592, 120592], "mapped", [965]], [[120593, 120593], "mapped", [966]], [[120594, 120594], "mapped", [967]], [[120595, 120595], "mapped", [968]], [[120596, 120596], "mapped", [969]], [[120597, 120597], "mapped", [8706]], [[120598, 120598], "mapped", [949]], [[120599, 120599], "mapped", [952]], [[120600, 120600], "mapped", [954]], [[120601, 120601], "mapped", [966]], [[120602, 120602], "mapped", [961]], [[120603, 120603], "mapped", [960]], [[120604, 120604], "mapped", [945]], [[120605, 120605], "mapped", [946]], [[120606, 120606], "mapped", [947]], [[120607, 120607], "mapped", [948]], [[120608, 120608], "mapped", [949]], [[120609, 120609], "mapped", [950]], [[120610, 120610], "mapped", [951]], [[120611, 120611], "mapped", [952]], [[120612, 120612], "mapped", [953]], [[120613, 120613], "mapped", [954]], [[120614, 120614], "mapped", [955]], [[120615, 120615], "mapped", [956]], [[120616, 120616], "mapped", [957]], [[120617, 120617], "mapped", [958]], [[120618, 120618], "mapped", [959]], [[120619, 120619], "mapped", [960]], [[120620, 120620], "mapped", [961]], [[120621, 120621], "mapped", [952]], [[120622, 120622], "mapped", [963]], [[120623, 120623], "mapped", [964]], [[120624, 120624], "mapped", [965]], [[120625, 120625], "mapped", [966]], [[120626, 120626], "mapped", [967]], [[120627, 120627], "mapped", [968]], [[120628, 120628], "mapped", [969]], [[120629, 120629], "mapped", [8711]], [[120630, 120630], "mapped", [945]], [[120631, 120631], "mapped", [946]], [[120632, 120632], "mapped", [947]], [[120633, 120633], "mapped", [948]], [[120634, 120634], "mapped", [949]], [[120635, 120635], "mapped", [950]], [[120636, 120636], "mapped", [951]], [[120637, 120637], "mapped", [952]], [[120638, 120638], "mapped", [953]], [[120639, 120639], "mapped", [954]], [[120640, 120640], "mapped", [955]], [[120641, 120641], "mapped", [956]], [[120642, 120642], "mapped", [957]], [[120643, 120643], "mapped", [958]], [[120644, 120644], "mapped", [959]], [[120645, 120645], "mapped", [960]], [[120646, 120646], "mapped", [961]], [[120647, 120648], "mapped", [963]], [[120649, 120649], "mapped", [964]], [[120650, 120650], "mapped", [965]], [[120651, 120651], "mapped", [966]], [[120652, 120652], "mapped", [967]], [[120653, 120653], "mapped", [968]], [[120654, 120654], "mapped", [969]], [[120655, 120655], "mapped", [8706]], [[120656, 120656], "mapped", [949]], [[120657, 120657], "mapped", [952]], [[120658, 120658], "mapped", [954]], [[120659, 120659], "mapped", [966]], [[120660, 120660], "mapped", [961]], [[120661, 120661], "mapped", [960]], [[120662, 120662], "mapped", [945]], [[120663, 120663], "mapped", [946]], [[120664, 120664], "mapped", [947]], [[120665, 120665], "mapped", [948]], [[120666, 120666], "mapped", [949]], [[120667, 120667], "mapped", [950]], [[120668, 120668], "mapped", [951]], [[120669, 120669], "mapped", [952]], [[120670, 120670], "mapped", [953]], [[120671, 120671], "mapped", [954]], [[120672, 120672], "mapped", [955]], [[120673, 120673], "mapped", [956]], [[120674, 120674], "mapped", [957]], [[120675, 120675], "mapped", [958]], [[120676, 120676], "mapped", [959]], [[120677, 120677], "mapped", [960]], [[120678, 120678], "mapped", [961]], [[120679, 120679], "mapped", [952]], [[120680, 120680], "mapped", [963]], [[120681, 120681], "mapped", [964]], [[120682, 120682], "mapped", [965]], [[120683, 120683], "mapped", [966]], [[120684, 120684], "mapped", [967]], [[120685, 120685], "mapped", [968]], [[120686, 120686], "mapped", [969]], [[120687, 120687], "mapped", [8711]], [[120688, 120688], "mapped", [945]], [[120689, 120689], "mapped", [946]], [[120690, 120690], "mapped", [947]], [[120691, 120691], "mapped", [948]], [[120692, 120692], "mapped", [949]], [[120693, 120693], "mapped", [950]], [[120694, 120694], "mapped", [951]], [[120695, 120695], "mapped", [952]], [[120696, 120696], "mapped", [953]], [[120697, 120697], "mapped", [954]], [[120698, 120698], "mapped", [955]], [[120699, 120699], "mapped", [956]], [[120700, 120700], "mapped", [957]], [[120701, 120701], "mapped", [958]], [[120702, 120702], "mapped", [959]], [[120703, 120703], "mapped", [960]], [[120704, 120704], "mapped", [961]], [[120705, 120706], "mapped", [963]], [[120707, 120707], "mapped", [964]], [[120708, 120708], "mapped", [965]], [[120709, 120709], "mapped", [966]], [[120710, 120710], "mapped", [967]], [[120711, 120711], "mapped", [968]], [[120712, 120712], "mapped", [969]], [[120713, 120713], "mapped", [8706]], [[120714, 120714], "mapped", [949]], [[120715, 120715], "mapped", [952]], [[120716, 120716], "mapped", [954]], [[120717, 120717], "mapped", [966]], [[120718, 120718], "mapped", [961]], [[120719, 120719], "mapped", [960]], [[120720, 120720], "mapped", [945]], [[120721, 120721], "mapped", [946]], [[120722, 120722], "mapped", [947]], [[120723, 120723], "mapped", [948]], [[120724, 120724], "mapped", [949]], [[120725, 120725], "mapped", [950]], [[120726, 120726], "mapped", [951]], [[120727, 120727], "mapped", [952]], [[120728, 120728], "mapped", [953]], [[120729, 120729], "mapped", [954]], [[120730, 120730], "mapped", [955]], [[120731, 120731], "mapped", [956]], [[120732, 120732], "mapped", [957]], [[120733, 120733], "mapped", [958]], [[120734, 120734], "mapped", [959]], [[120735, 120735], "mapped", [960]], [[120736, 120736], "mapped", [961]], [[120737, 120737], "mapped", [952]], [[120738, 120738], "mapped", [963]], [[120739, 120739], "mapped", [964]], [[120740, 120740], "mapped", [965]], [[120741, 120741], "mapped", [966]], [[120742, 120742], "mapped", [967]], [[120743, 120743], "mapped", [968]], [[120744, 120744], "mapped", [969]], [[120745, 120745], "mapped", [8711]], [[120746, 120746], "mapped", [945]], [[120747, 120747], "mapped", [946]], [[120748, 120748], "mapped", [947]], [[120749, 120749], "mapped", [948]], [[120750, 120750], "mapped", [949]], [[120751, 120751], "mapped", [950]], [[120752, 120752], "mapped", [951]], [[120753, 120753], "mapped", [952]], [[120754, 120754], "mapped", [953]], [[120755, 120755], "mapped", [954]], [[120756, 120756], "mapped", [955]], [[120757, 120757], "mapped", [956]], [[120758, 120758], "mapped", [957]], [[120759, 120759], "mapped", [958]], [[120760, 120760], "mapped", [959]], [[120761, 120761], "mapped", [960]], [[120762, 120762], "mapped", [961]], [[120763, 120764], "mapped", [963]], [[120765, 120765], "mapped", [964]], [[120766, 120766], "mapped", [965]], [[120767, 120767], "mapped", [966]], [[120768, 120768], "mapped", [967]], [[120769, 120769], "mapped", [968]], [[120770, 120770], "mapped", [969]], [[120771, 120771], "mapped", [8706]], [[120772, 120772], "mapped", [949]], [[120773, 120773], "mapped", [952]], [[120774, 120774], "mapped", [954]], [[120775, 120775], "mapped", [966]], [[120776, 120776], "mapped", [961]], [[120777, 120777], "mapped", [960]], [[120778, 120779], "mapped", [989]], [[120780, 120781], "disallowed"], [[120782, 120782], "mapped", [48]], [[120783, 120783], "mapped", [49]], [[120784, 120784], "mapped", [50]], [[120785, 120785], "mapped", [51]], [[120786, 120786], "mapped", [52]], [[120787, 120787], "mapped", [53]], [[120788, 120788], "mapped", [54]], [[120789, 120789], "mapped", [55]], [[120790, 120790], "mapped", [56]], [[120791, 120791], "mapped", [57]], [[120792, 120792], "mapped", [48]], [[120793, 120793], "mapped", [49]], [[120794, 120794], "mapped", [50]], [[120795, 120795], "mapped", [51]], [[120796, 120796], "mapped", [52]], [[120797, 120797], "mapped", [53]], [[120798, 120798], "mapped", [54]], [[120799, 120799], "mapped", [55]], [[120800, 120800], "mapped", [56]], [[120801, 120801], "mapped", [57]], [[120802, 120802], "mapped", [48]], [[120803, 120803], "mapped", [49]], [[120804, 120804], "mapped", [50]], [[120805, 120805], "mapped", [51]], [[120806, 120806], "mapped", [52]], [[120807, 120807], "mapped", [53]], [[120808, 120808], "mapped", [54]], [[120809, 120809], "mapped", [55]], [[120810, 120810], "mapped", [56]], [[120811, 120811], "mapped", [57]], [[120812, 120812], "mapped", [48]], [[120813, 120813], "mapped", [49]], [[120814, 120814], "mapped", [50]], [[120815, 120815], "mapped", [51]], [[120816, 120816], "mapped", [52]], [[120817, 120817], "mapped", [53]], [[120818, 120818], "mapped", [54]], [[120819, 120819], "mapped", [55]], [[120820, 120820], "mapped", [56]], [[120821, 120821], "mapped", [57]], [[120822, 120822], "mapped", [48]], [[120823, 120823], "mapped", [49]], [[120824, 120824], "mapped", [50]], [[120825, 120825], "mapped", [51]], [[120826, 120826], "mapped", [52]], [[120827, 120827], "mapped", [53]], [[120828, 120828], "mapped", [54]], [[120829, 120829], "mapped", [55]], [[120830, 120830], "mapped", [56]], [[120831, 120831], "mapped", [57]], [[120832, 121343], "valid", [], "NV8"], [[121344, 121398], "valid"], [[121399, 121402], "valid", [], "NV8"], [[121403, 121452], "valid"], [[121453, 121460], "valid", [], "NV8"], [[121461, 121461], "valid"], [[121462, 121475], "valid", [], "NV8"], [[121476, 121476], "valid"], [[121477, 121483], "valid", [], "NV8"], [[121484, 121498], "disallowed"], [[121499, 121503], "valid"], [[121504, 121504], "disallowed"], [[121505, 121519], "valid"], [[121520, 124927], "disallowed"], [[124928, 125124], "valid"], [[125125, 125126], "disallowed"], [[125127, 125135], "valid", [], "NV8"], [[125136, 125142], "valid"], [[125143, 126463], "disallowed"], [[126464, 126464], "mapped", [1575]], [[126465, 126465], "mapped", [1576]], [[126466, 126466], "mapped", [1580]], [[126467, 126467], "mapped", [1583]], [[126468, 126468], "disallowed"], [[126469, 126469], "mapped", [1608]], [[126470, 126470], "mapped", [1586]], [[126471, 126471], "mapped", [1581]], [[126472, 126472], "mapped", [1591]], [[126473, 126473], "mapped", [1610]], [[126474, 126474], "mapped", [1603]], [[126475, 126475], "mapped", [1604]], [[126476, 126476], "mapped", [1605]], [[126477, 126477], "mapped", [1606]], [[126478, 126478], "mapped", [1587]], [[126479, 126479], "mapped", [1593]], [[126480, 126480], "mapped", [1601]], [[126481, 126481], "mapped", [1589]], [[126482, 126482], "mapped", [1602]], [[126483, 126483], "mapped", [1585]], [[126484, 126484], "mapped", [1588]], [[126485, 126485], "mapped", [1578]], [[126486, 126486], "mapped", [1579]], [[126487, 126487], "mapped", [1582]], [[126488, 126488], "mapped", [1584]], [[126489, 126489], "mapped", [1590]], [[126490, 126490], "mapped", [1592]], [[126491, 126491], "mapped", [1594]], [[126492, 126492], "mapped", [1646]], [[126493, 126493], "mapped", [1722]], [[126494, 126494], "mapped", [1697]], [[126495, 126495], "mapped", [1647]], [[126496, 126496], "disallowed"], [[126497, 126497], "mapped", [1576]], [[126498, 126498], "mapped", [1580]], [[126499, 126499], "disallowed"], [[126500, 126500], "mapped", [1607]], [[126501, 126502], "disallowed"], [[126503, 126503], "mapped", [1581]], [[126504, 126504], "disallowed"], [[126505, 126505], "mapped", [1610]], [[126506, 126506], "mapped", [1603]], [[126507, 126507], "mapped", [1604]], [[126508, 126508], "mapped", [1605]], [[126509, 126509], "mapped", [1606]], [[126510, 126510], "mapped", [1587]], [[126511, 126511], "mapped", [1593]], [[126512, 126512], "mapped", [1601]], [[126513, 126513], "mapped", [1589]], [[126514, 126514], "mapped", [1602]], [[126515, 126515], "disallowed"], [[126516, 126516], "mapped", [1588]], [[126517, 126517], "mapped", [1578]], [[126518, 126518], "mapped", [1579]], [[126519, 126519], "mapped", [1582]], [[126520, 126520], "disallowed"], [[126521, 126521], "mapped", [1590]], [[126522, 126522], "disallowed"], [[126523, 126523], "mapped", [1594]], [[126524, 126529], "disallowed"], [[126530, 126530], "mapped", [1580]], [[126531, 126534], "disallowed"], [[126535, 126535], "mapped", [1581]], [[126536, 126536], "disallowed"], [[126537, 126537], "mapped", [1610]], [[126538, 126538], "disallowed"], [[126539, 126539], "mapped", [1604]], [[126540, 126540], "disallowed"], [[126541, 126541], "mapped", [1606]], [[126542, 126542], "mapped", [1587]], [[126543, 126543], "mapped", [1593]], [[126544, 126544], "disallowed"], [[126545, 126545], "mapped", [1589]], [[126546, 126546], "mapped", [1602]], [[126547, 126547], "disallowed"], [[126548, 126548], "mapped", [1588]], [[126549, 126550], "disallowed"], [[126551, 126551], "mapped", [1582]], [[126552, 126552], "disallowed"], [[126553, 126553], "mapped", [1590]], [[126554, 126554], "disallowed"], [[126555, 126555], "mapped", [1594]], [[126556, 126556], "disallowed"], [[126557, 126557], "mapped", [1722]], [[126558, 126558], "disallowed"], [[126559, 126559], "mapped", [1647]], [[126560, 126560], "disallowed"], [[126561, 126561], "mapped", [1576]], [[126562, 126562], "mapped", [1580]], [[126563, 126563], "disallowed"], [[126564, 126564], "mapped", [1607]], [[126565, 126566], "disallowed"], [[126567, 126567], "mapped", [1581]], [[126568, 126568], "mapped", [1591]], [[126569, 126569], "mapped", [1610]], [[126570, 126570], "mapped", [1603]], [[126571, 126571], "disallowed"], [[126572, 126572], "mapped", [1605]], [[126573, 126573], "mapped", [1606]], [[126574, 126574], "mapped", [1587]], [[126575, 126575], "mapped", [1593]], [[126576, 126576], "mapped", [1601]], [[126577, 126577], "mapped", [1589]], [[126578, 126578], "mapped", [1602]], [[126579, 126579], "disallowed"], [[126580, 126580], "mapped", [1588]], [[126581, 126581], "mapped", [1578]], [[126582, 126582], "mapped", [1579]], [[126583, 126583], "mapped", [1582]], [[126584, 126584], "disallowed"], [[126585, 126585], "mapped", [1590]], [[126586, 126586], "mapped", [1592]], [[126587, 126587], "mapped", [1594]], [[126588, 126588], "mapped", [1646]], [[126589, 126589], "disallowed"], [[126590, 126590], "mapped", [1697]], [[126591, 126591], "disallowed"], [[126592, 126592], "mapped", [1575]], [[126593, 126593], "mapped", [1576]], [[126594, 126594], "mapped", [1580]], [[126595, 126595], "mapped", [1583]], [[126596, 126596], "mapped", [1607]], [[126597, 126597], "mapped", [1608]], [[126598, 126598], "mapped", [1586]], [[126599, 126599], "mapped", [1581]], [[126600, 126600], "mapped", [1591]], [[126601, 126601], "mapped", [1610]], [[126602, 126602], "disallowed"], [[126603, 126603], "mapped", [1604]], [[126604, 126604], "mapped", [1605]], [[126605, 126605], "mapped", [1606]], [[126606, 126606], "mapped", [1587]], [[126607, 126607], "mapped", [1593]], [[126608, 126608], "mapped", [1601]], [[126609, 126609], "mapped", [1589]], [[126610, 126610], "mapped", [1602]], [[126611, 126611], "mapped", [1585]], [[126612, 126612], "mapped", [1588]], [[126613, 126613], "mapped", [1578]], [[126614, 126614], "mapped", [1579]], [[126615, 126615], "mapped", [1582]], [[126616, 126616], "mapped", [1584]], [[126617, 126617], "mapped", [1590]], [[126618, 126618], "mapped", [1592]], [[126619, 126619], "mapped", [1594]], [[126620, 126624], "disallowed"], [[126625, 126625], "mapped", [1576]], [[126626, 126626], "mapped", [1580]], [[126627, 126627], "mapped", [1583]], [[126628, 126628], "disallowed"], [[126629, 126629], "mapped", [1608]], [[126630, 126630], "mapped", [1586]], [[126631, 126631], "mapped", [1581]], [[126632, 126632], "mapped", [1591]], [[126633, 126633], "mapped", [1610]], [[126634, 126634], "disallowed"], [[126635, 126635], "mapped", [1604]], [[126636, 126636], "mapped", [1605]], [[126637, 126637], "mapped", [1606]], [[126638, 126638], "mapped", [1587]], [[126639, 126639], "mapped", [1593]], [[126640, 126640], "mapped", [1601]], [[126641, 126641], "mapped", [1589]], [[126642, 126642], "mapped", [1602]], [[126643, 126643], "mapped", [1585]], [[126644, 126644], "mapped", [1588]], [[126645, 126645], "mapped", [1578]], [[126646, 126646], "mapped", [1579]], [[126647, 126647], "mapped", [1582]], [[126648, 126648], "mapped", [1584]], [[126649, 126649], "mapped", [1590]], [[126650, 126650], "mapped", [1592]], [[126651, 126651], "mapped", [1594]], [[126652, 126703], "disallowed"], [[126704, 126705], "valid", [], "NV8"], [[126706, 126975], "disallowed"], [[126976, 127019], "valid", [], "NV8"], [[127020, 127023], "disallowed"], [[127024, 127123], "valid", [], "NV8"], [[127124, 127135], "disallowed"], [[127136, 127150], "valid", [], "NV8"], [[127151, 127152], "disallowed"], [[127153, 127166], "valid", [], "NV8"], [[127167, 127167], "valid", [], "NV8"], [[127168, 127168], "disallowed"], [[127169, 127183], "valid", [], "NV8"], [[127184, 127184], "disallowed"], [[127185, 127199], "valid", [], "NV8"], [[127200, 127221], "valid", [], "NV8"], [[127222, 127231], "disallowed"], [[127232, 127232], "disallowed"], [[127233, 127233], "disallowed_STD3_mapped", [48, 44]], [[127234, 127234], "disallowed_STD3_mapped", [49, 44]], [[127235, 127235], "disallowed_STD3_mapped", [50, 44]], [[127236, 127236], "disallowed_STD3_mapped", [51, 44]], [[127237, 127237], "disallowed_STD3_mapped", [52, 44]], [[127238, 127238], "disallowed_STD3_mapped", [53, 44]], [[127239, 127239], "disallowed_STD3_mapped", [54, 44]], [[127240, 127240], "disallowed_STD3_mapped", [55, 44]], [[127241, 127241], "disallowed_STD3_mapped", [56, 44]], [[127242, 127242], "disallowed_STD3_mapped", [57, 44]], [[127243, 127244], "valid", [], "NV8"], [[127245, 127247], "disallowed"], [[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]], [[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]], [[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]], [[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]], [[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]], [[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]], [[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]], [[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]], [[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]], [[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]], [[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]], [[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]], [[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]], [[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]], [[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]], [[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]], [[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]], [[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]], [[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]], [[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]], [[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]], [[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]], [[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]], [[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]], [[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]], [[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]], [[127274, 127274], "mapped", [12308, 115, 12309]], [[127275, 127275], "mapped", [99]], [[127276, 127276], "mapped", [114]], [[127277, 127277], "mapped", [99, 100]], [[127278, 127278], "mapped", [119, 122]], [[127279, 127279], "disallowed"], [[127280, 127280], "mapped", [97]], [[127281, 127281], "mapped", [98]], [[127282, 127282], "mapped", [99]], [[127283, 127283], "mapped", [100]], [[127284, 127284], "mapped", [101]], [[127285, 127285], "mapped", [102]], [[127286, 127286], "mapped", [103]], [[127287, 127287], "mapped", [104]], [[127288, 127288], "mapped", [105]], [[127289, 127289], "mapped", [106]], [[127290, 127290], "mapped", [107]], [[127291, 127291], "mapped", [108]], [[127292, 127292], "mapped", [109]], [[127293, 127293], "mapped", [110]], [[127294, 127294], "mapped", [111]], [[127295, 127295], "mapped", [112]], [[127296, 127296], "mapped", [113]], [[127297, 127297], "mapped", [114]], [[127298, 127298], "mapped", [115]], [[127299, 127299], "mapped", [116]], [[127300, 127300], "mapped", [117]], [[127301, 127301], "mapped", [118]], [[127302, 127302], "mapped", [119]], [[127303, 127303], "mapped", [120]], [[127304, 127304], "mapped", [121]], [[127305, 127305], "mapped", [122]], [[127306, 127306], "mapped", [104, 118]], [[127307, 127307], "mapped", [109, 118]], [[127308, 127308], "mapped", [115, 100]], [[127309, 127309], "mapped", [115, 115]], [[127310, 127310], "mapped", [112, 112, 118]], [[127311, 127311], "mapped", [119, 99]], [[127312, 127318], "valid", [], "NV8"], [[127319, 127319], "valid", [], "NV8"], [[127320, 127326], "valid", [], "NV8"], [[127327, 127327], "valid", [], "NV8"], [[127328, 127337], "valid", [], "NV8"], [[127338, 127338], "mapped", [109, 99]], [[127339, 127339], "mapped", [109, 100]], [[127340, 127343], "disallowed"], [[127344, 127352], "valid", [], "NV8"], [[127353, 127353], "valid", [], "NV8"], [[127354, 127354], "valid", [], "NV8"], [[127355, 127356], "valid", [], "NV8"], [[127357, 127358], "valid", [], "NV8"], [[127359, 127359], "valid", [], "NV8"], [[127360, 127369], "valid", [], "NV8"], [[127370, 127373], "valid", [], "NV8"], [[127374, 127375], "valid", [], "NV8"], [[127376, 127376], "mapped", [100, 106]], [[127377, 127386], "valid", [], "NV8"], [[127387, 127461], "disallowed"], [[127462, 127487], "valid", [], "NV8"], [[127488, 127488], "mapped", [12411, 12363]], [[127489, 127489], "mapped", [12467, 12467]], [[127490, 127490], "mapped", [12469]], [[127491, 127503], "disallowed"], [[127504, 127504], "mapped", [25163]], [[127505, 127505], "mapped", [23383]], [[127506, 127506], "mapped", [21452]], [[127507, 127507], "mapped", [12487]], [[127508, 127508], "mapped", [20108]], [[127509, 127509], "mapped", [22810]], [[127510, 127510], "mapped", [35299]], [[127511, 127511], "mapped", [22825]], [[127512, 127512], "mapped", [20132]], [[127513, 127513], "mapped", [26144]], [[127514, 127514], "mapped", [28961]], [[127515, 127515], "mapped", [26009]], [[127516, 127516], "mapped", [21069]], [[127517, 127517], "mapped", [24460]], [[127518, 127518], "mapped", [20877]], [[127519, 127519], "mapped", [26032]], [[127520, 127520], "mapped", [21021]], [[127521, 127521], "mapped", [32066]], [[127522, 127522], "mapped", [29983]], [[127523, 127523], "mapped", [36009]], [[127524, 127524], "mapped", [22768]], [[127525, 127525], "mapped", [21561]], [[127526, 127526], "mapped", [28436]], [[127527, 127527], "mapped", [25237]], [[127528, 127528], "mapped", [25429]], [[127529, 127529], "mapped", [19968]], [[127530, 127530], "mapped", [19977]], [[127531, 127531], "mapped", [36938]], [[127532, 127532], "mapped", [24038]], [[127533, 127533], "mapped", [20013]], [[127534, 127534], "mapped", [21491]], [[127535, 127535], "mapped", [25351]], [[127536, 127536], "mapped", [36208]], [[127537, 127537], "mapped", [25171]], [[127538, 127538], "mapped", [31105]], [[127539, 127539], "mapped", [31354]], [[127540, 127540], "mapped", [21512]], [[127541, 127541], "mapped", [28288]], [[127542, 127542], "mapped", [26377]], [[127543, 127543], "mapped", [26376]], [[127544, 127544], "mapped", [30003]], [[127545, 127545], "mapped", [21106]], [[127546, 127546], "mapped", [21942]], [[127547, 127551], "disallowed"], [[127552, 127552], "mapped", [12308, 26412, 12309]], [[127553, 127553], "mapped", [12308, 19977, 12309]], [[127554, 127554], "mapped", [12308, 20108, 12309]], [[127555, 127555], "mapped", [12308, 23433, 12309]], [[127556, 127556], "mapped", [12308, 28857, 12309]], [[127557, 127557], "mapped", [12308, 25171, 12309]], [[127558, 127558], "mapped", [12308, 30423, 12309]], [[127559, 127559], "mapped", [12308, 21213, 12309]], [[127560, 127560], "mapped", [12308, 25943, 12309]], [[127561, 127567], "disallowed"], [[127568, 127568], "mapped", [24471]], [[127569, 127569], "mapped", [21487]], [[127570, 127743], "disallowed"], [[127744, 127776], "valid", [], "NV8"], [[127777, 127788], "valid", [], "NV8"], [[127789, 127791], "valid", [], "NV8"], [[127792, 127797], "valid", [], "NV8"], [[127798, 127798], "valid", [], "NV8"], [[127799, 127868], "valid", [], "NV8"], [[127869, 127869], "valid", [], "NV8"], [[127870, 127871], "valid", [], "NV8"], [[127872, 127891], "valid", [], "NV8"], [[127892, 127903], "valid", [], "NV8"], [[127904, 127940], "valid", [], "NV8"], [[127941, 127941], "valid", [], "NV8"], [[127942, 127946], "valid", [], "NV8"], [[127947, 127950], "valid", [], "NV8"], [[127951, 127955], "valid", [], "NV8"], [[127956, 127967], "valid", [], "NV8"], [[127968, 127984], "valid", [], "NV8"], [[127985, 127991], "valid", [], "NV8"], [[127992, 127999], "valid", [], "NV8"], [[128e3, 128062], "valid", [], "NV8"], [[128063, 128063], "valid", [], "NV8"], [[128064, 128064], "valid", [], "NV8"], [[128065, 128065], "valid", [], "NV8"], [[128066, 128247], "valid", [], "NV8"], [[128248, 128248], "valid", [], "NV8"], [[128249, 128252], "valid", [], "NV8"], [[128253, 128254], "valid", [], "NV8"], [[128255, 128255], "valid", [], "NV8"], [[128256, 128317], "valid", [], "NV8"], [[128318, 128319], "valid", [], "NV8"], [[128320, 128323], "valid", [], "NV8"], [[128324, 128330], "valid", [], "NV8"], [[128331, 128335], "valid", [], "NV8"], [[128336, 128359], "valid", [], "NV8"], [[128360, 128377], "valid", [], "NV8"], [[128378, 128378], "disallowed"], [[128379, 128419], "valid", [], "NV8"], [[128420, 128420], "disallowed"], [[128421, 128506], "valid", [], "NV8"], [[128507, 128511], "valid", [], "NV8"], [[128512, 128512], "valid", [], "NV8"], [[128513, 128528], "valid", [], "NV8"], [[128529, 128529], "valid", [], "NV8"], [[128530, 128532], "valid", [], "NV8"], [[128533, 128533], "valid", [], "NV8"], [[128534, 128534], "valid", [], "NV8"], [[128535, 128535], "valid", [], "NV8"], [[128536, 128536], "valid", [], "NV8"], [[128537, 128537], "valid", [], "NV8"], [[128538, 128538], "valid", [], "NV8"], [[128539, 128539], "valid", [], "NV8"], [[128540, 128542], "valid", [], "NV8"], [[128543, 128543], "valid", [], "NV8"], [[128544, 128549], "valid", [], "NV8"], [[128550, 128551], "valid", [], "NV8"], [[128552, 128555], "valid", [], "NV8"], [[128556, 128556], "valid", [], "NV8"], [[128557, 128557], "valid", [], "NV8"], [[128558, 128559], "valid", [], "NV8"], [[128560, 128563], "valid", [], "NV8"], [[128564, 128564], "valid", [], "NV8"], [[128565, 128576], "valid", [], "NV8"], [[128577, 128578], "valid", [], "NV8"], [[128579, 128580], "valid", [], "NV8"], [[128581, 128591], "valid", [], "NV8"], [[128592, 128639], "valid", [], "NV8"], [[128640, 128709], "valid", [], "NV8"], [[128710, 128719], "valid", [], "NV8"], [[128720, 128720], "valid", [], "NV8"], [[128721, 128735], "disallowed"], [[128736, 128748], "valid", [], "NV8"], [[128749, 128751], "disallowed"], [[128752, 128755], "valid", [], "NV8"], [[128756, 128767], "disallowed"], [[128768, 128883], "valid", [], "NV8"], [[128884, 128895], "disallowed"], [[128896, 128980], "valid", [], "NV8"], [[128981, 129023], "disallowed"], [[129024, 129035], "valid", [], "NV8"], [[129036, 129039], "disallowed"], [[129040, 129095], "valid", [], "NV8"], [[129096, 129103], "disallowed"], [[129104, 129113], "valid", [], "NV8"], [[129114, 129119], "disallowed"], [[129120, 129159], "valid", [], "NV8"], [[129160, 129167], "disallowed"], [[129168, 129197], "valid", [], "NV8"], [[129198, 129295], "disallowed"], [[129296, 129304], "valid", [], "NV8"], [[129305, 129407], "disallowed"], [[129408, 129412], "valid", [], "NV8"], [[129413, 129471], "disallowed"], [[129472, 129472], "valid", [], "NV8"], [[129473, 131069], "disallowed"], [[131070, 131071], "disallowed"], [[131072, 173782], "valid"], [[173783, 173823], "disallowed"], [[173824, 177972], "valid"], [[177973, 177983], "disallowed"], [[177984, 178205], "valid"], [[178206, 178207], "disallowed"], [[178208, 183969], "valid"], [[183970, 194559], "disallowed"], [[194560, 194560], "mapped", [20029]], [[194561, 194561], "mapped", [20024]], [[194562, 194562], "mapped", [20033]], [[194563, 194563], "mapped", [131362]], [[194564, 194564], "mapped", [20320]], [[194565, 194565], "mapped", [20398]], [[194566, 194566], "mapped", [20411]], [[194567, 194567], "mapped", [20482]], [[194568, 194568], "mapped", [20602]], [[194569, 194569], "mapped", [20633]], [[194570, 194570], "mapped", [20711]], [[194571, 194571], "mapped", [20687]], [[194572, 194572], "mapped", [13470]], [[194573, 194573], "mapped", [132666]], [[194574, 194574], "mapped", [20813]], [[194575, 194575], "mapped", [20820]], [[194576, 194576], "mapped", [20836]], [[194577, 194577], "mapped", [20855]], [[194578, 194578], "mapped", [132380]], [[194579, 194579], "mapped", [13497]], [[194580, 194580], "mapped", [20839]], [[194581, 194581], "mapped", [20877]], [[194582, 194582], "mapped", [132427]], [[194583, 194583], "mapped", [20887]], [[194584, 194584], "mapped", [20900]], [[194585, 194585], "mapped", [20172]], [[194586, 194586], "mapped", [20908]], [[194587, 194587], "mapped", [20917]], [[194588, 194588], "mapped", [168415]], [[194589, 194589], "mapped", [20981]], [[194590, 194590], "mapped", [20995]], [[194591, 194591], "mapped", [13535]], [[194592, 194592], "mapped", [21051]], [[194593, 194593], "mapped", [21062]], [[194594, 194594], "mapped", [21106]], [[194595, 194595], "mapped", [21111]], [[194596, 194596], "mapped", [13589]], [[194597, 194597], "mapped", [21191]], [[194598, 194598], "mapped", [21193]], [[194599, 194599], "mapped", [21220]], [[194600, 194600], "mapped", [21242]], [[194601, 194601], "mapped", [21253]], [[194602, 194602], "mapped", [21254]], [[194603, 194603], "mapped", [21271]], [[194604, 194604], "mapped", [21321]], [[194605, 194605], "mapped", [21329]], [[194606, 194606], "mapped", [21338]], [[194607, 194607], "mapped", [21363]], [[194608, 194608], "mapped", [21373]], [[194609, 194611], "mapped", [21375]], [[194612, 194612], "mapped", [133676]], [[194613, 194613], "mapped", [28784]], [[194614, 194614], "mapped", [21450]], [[194615, 194615], "mapped", [21471]], [[194616, 194616], "mapped", [133987]], [[194617, 194617], "mapped", [21483]], [[194618, 194618], "mapped", [21489]], [[194619, 194619], "mapped", [21510]], [[194620, 194620], "mapped", [21662]], [[194621, 194621], "mapped", [21560]], [[194622, 194622], "mapped", [21576]], [[194623, 194623], "mapped", [21608]], [[194624, 194624], "mapped", [21666]], [[194625, 194625], "mapped", [21750]], [[194626, 194626], "mapped", [21776]], [[194627, 194627], "mapped", [21843]], [[194628, 194628], "mapped", [21859]], [[194629, 194630], "mapped", [21892]], [[194631, 194631], "mapped", [21913]], [[194632, 194632], "mapped", [21931]], [[194633, 194633], "mapped", [21939]], [[194634, 194634], "mapped", [21954]], [[194635, 194635], "mapped", [22294]], [[194636, 194636], "mapped", [22022]], [[194637, 194637], "mapped", [22295]], [[194638, 194638], "mapped", [22097]], [[194639, 194639], "mapped", [22132]], [[194640, 194640], "mapped", [20999]], [[194641, 194641], "mapped", [22766]], [[194642, 194642], "mapped", [22478]], [[194643, 194643], "mapped", [22516]], [[194644, 194644], "mapped", [22541]], [[194645, 194645], "mapped", [22411]], [[194646, 194646], "mapped", [22578]], [[194647, 194647], "mapped", [22577]], [[194648, 194648], "mapped", [22700]], [[194649, 194649], "mapped", [136420]], [[194650, 194650], "mapped", [22770]], [[194651, 194651], "mapped", [22775]], [[194652, 194652], "mapped", [22790]], [[194653, 194653], "mapped", [22810]], [[194654, 194654], "mapped", [22818]], [[194655, 194655], "mapped", [22882]], [[194656, 194656], "mapped", [136872]], [[194657, 194657], "mapped", [136938]], [[194658, 194658], "mapped", [23020]], [[194659, 194659], "mapped", [23067]], [[194660, 194660], "mapped", [23079]], [[194661, 194661], "mapped", [23e3]], [[194662, 194662], "mapped", [23142]], [[194663, 194663], "mapped", [14062]], [[194664, 194664], "disallowed"], [[194665, 194665], "mapped", [23304]], [[194666, 194667], "mapped", [23358]], [[194668, 194668], "mapped", [137672]], [[194669, 194669], "mapped", [23491]], [[194670, 194670], "mapped", [23512]], [[194671, 194671], "mapped", [23527]], [[194672, 194672], "mapped", [23539]], [[194673, 194673], "mapped", [138008]], [[194674, 194674], "mapped", [23551]], [[194675, 194675], "mapped", [23558]], [[194676, 194676], "disallowed"], [[194677, 194677], "mapped", [23586]], [[194678, 194678], "mapped", [14209]], [[194679, 194679], "mapped", [23648]], [[194680, 194680], "mapped", [23662]], [[194681, 194681], "mapped", [23744]], [[194682, 194682], "mapped", [23693]], [[194683, 194683], "mapped", [138724]], [[194684, 194684], "mapped", [23875]], [[194685, 194685], "mapped", [138726]], [[194686, 194686], "mapped", [23918]], [[194687, 194687], "mapped", [23915]], [[194688, 194688], "mapped", [23932]], [[194689, 194689], "mapped", [24033]], [[194690, 194690], "mapped", [24034]], [[194691, 194691], "mapped", [14383]], [[194692, 194692], "mapped", [24061]], [[194693, 194693], "mapped", [24104]], [[194694, 194694], "mapped", [24125]], [[194695, 194695], "mapped", [24169]], [[194696, 194696], "mapped", [14434]], [[194697, 194697], "mapped", [139651]], [[194698, 194698], "mapped", [14460]], [[194699, 194699], "mapped", [24240]], [[194700, 194700], "mapped", [24243]], [[194701, 194701], "mapped", [24246]], [[194702, 194702], "mapped", [24266]], [[194703, 194703], "mapped", [172946]], [[194704, 194704], "mapped", [24318]], [[194705, 194706], "mapped", [140081]], [[194707, 194707], "mapped", [33281]], [[194708, 194709], "mapped", [24354]], [[194710, 194710], "mapped", [14535]], [[194711, 194711], "mapped", [144056]], [[194712, 194712], "mapped", [156122]], [[194713, 194713], "mapped", [24418]], [[194714, 194714], "mapped", [24427]], [[194715, 194715], "mapped", [14563]], [[194716, 194716], "mapped", [24474]], [[194717, 194717], "mapped", [24525]], [[194718, 194718], "mapped", [24535]], [[194719, 194719], "mapped", [24569]], [[194720, 194720], "mapped", [24705]], [[194721, 194721], "mapped", [14650]], [[194722, 194722], "mapped", [14620]], [[194723, 194723], "mapped", [24724]], [[194724, 194724], "mapped", [141012]], [[194725, 194725], "mapped", [24775]], [[194726, 194726], "mapped", [24904]], [[194727, 194727], "mapped", [24908]], [[194728, 194728], "mapped", [24910]], [[194729, 194729], "mapped", [24908]], [[194730, 194730], "mapped", [24954]], [[194731, 194731], "mapped", [24974]], [[194732, 194732], "mapped", [25010]], [[194733, 194733], "mapped", [24996]], [[194734, 194734], "mapped", [25007]], [[194735, 194735], "mapped", [25054]], [[194736, 194736], "mapped", [25074]], [[194737, 194737], "mapped", [25078]], [[194738, 194738], "mapped", [25104]], [[194739, 194739], "mapped", [25115]], [[194740, 194740], "mapped", [25181]], [[194741, 194741], "mapped", [25265]], [[194742, 194742], "mapped", [25300]], [[194743, 194743], "mapped", [25424]], [[194744, 194744], "mapped", [142092]], [[194745, 194745], "mapped", [25405]], [[194746, 194746], "mapped", [25340]], [[194747, 194747], "mapped", [25448]], [[194748, 194748], "mapped", [25475]], [[194749, 194749], "mapped", [25572]], [[194750, 194750], "mapped", [142321]], [[194751, 194751], "mapped", [25634]], [[194752, 194752], "mapped", [25541]], [[194753, 194753], "mapped", [25513]], [[194754, 194754], "mapped", [14894]], [[194755, 194755], "mapped", [25705]], [[194756, 194756], "mapped", [25726]], [[194757, 194757], "mapped", [25757]], [[194758, 194758], "mapped", [25719]], [[194759, 194759], "mapped", [14956]], [[194760, 194760], "mapped", [25935]], [[194761, 194761], "mapped", [25964]], [[194762, 194762], "mapped", [143370]], [[194763, 194763], "mapped", [26083]], [[194764, 194764], "mapped", [26360]], [[194765, 194765], "mapped", [26185]], [[194766, 194766], "mapped", [15129]], [[194767, 194767], "mapped", [26257]], [[194768, 194768], "mapped", [15112]], [[194769, 194769], "mapped", [15076]], [[194770, 194770], "mapped", [20882]], [[194771, 194771], "mapped", [20885]], [[194772, 194772], "mapped", [26368]], [[194773, 194773], "mapped", [26268]], [[194774, 194774], "mapped", [32941]], [[194775, 194775], "mapped", [17369]], [[194776, 194776], "mapped", [26391]], [[194777, 194777], "mapped", [26395]], [[194778, 194778], "mapped", [26401]], [[194779, 194779], "mapped", [26462]], [[194780, 194780], "mapped", [26451]], [[194781, 194781], "mapped", [144323]], [[194782, 194782], "mapped", [15177]], [[194783, 194783], "mapped", [26618]], [[194784, 194784], "mapped", [26501]], [[194785, 194785], "mapped", [26706]], [[194786, 194786], "mapped", [26757]], [[194787, 194787], "mapped", [144493]], [[194788, 194788], "mapped", [26766]], [[194789, 194789], "mapped", [26655]], [[194790, 194790], "mapped", [26900]], [[194791, 194791], "mapped", [15261]], [[194792, 194792], "mapped", [26946]], [[194793, 194793], "mapped", [27043]], [[194794, 194794], "mapped", [27114]], [[194795, 194795], "mapped", [27304]], [[194796, 194796], "mapped", [145059]], [[194797, 194797], "mapped", [27355]], [[194798, 194798], "mapped", [15384]], [[194799, 194799], "mapped", [27425]], [[194800, 194800], "mapped", [145575]], [[194801, 194801], "mapped", [27476]], [[194802, 194802], "mapped", [15438]], [[194803, 194803], "mapped", [27506]], [[194804, 194804], "mapped", [27551]], [[194805, 194805], "mapped", [27578]], [[194806, 194806], "mapped", [27579]], [[194807, 194807], "mapped", [146061]], [[194808, 194808], "mapped", [138507]], [[194809, 194809], "mapped", [146170]], [[194810, 194810], "mapped", [27726]], [[194811, 194811], "mapped", [146620]], [[194812, 194812], "mapped", [27839]], [[194813, 194813], "mapped", [27853]], [[194814, 194814], "mapped", [27751]], [[194815, 194815], "mapped", [27926]], [[194816, 194816], "mapped", [27966]], [[194817, 194817], "mapped", [28023]], [[194818, 194818], "mapped", [27969]], [[194819, 194819], "mapped", [28009]], [[194820, 194820], "mapped", [28024]], [[194821, 194821], "mapped", [28037]], [[194822, 194822], "mapped", [146718]], [[194823, 194823], "mapped", [27956]], [[194824, 194824], "mapped", [28207]], [[194825, 194825], "mapped", [28270]], [[194826, 194826], "mapped", [15667]], [[194827, 194827], "mapped", [28363]], [[194828, 194828], "mapped", [28359]], [[194829, 194829], "mapped", [147153]], [[194830, 194830], "mapped", [28153]], [[194831, 194831], "mapped", [28526]], [[194832, 194832], "mapped", [147294]], [[194833, 194833], "mapped", [147342]], [[194834, 194834], "mapped", [28614]], [[194835, 194835], "mapped", [28729]], [[194836, 194836], "mapped", [28702]], [[194837, 194837], "mapped", [28699]], [[194838, 194838], "mapped", [15766]], [[194839, 194839], "mapped", [28746]], [[194840, 194840], "mapped", [28797]], [[194841, 194841], "mapped", [28791]], [[194842, 194842], "mapped", [28845]], [[194843, 194843], "mapped", [132389]], [[194844, 194844], "mapped", [28997]], [[194845, 194845], "mapped", [148067]], [[194846, 194846], "mapped", [29084]], [[194847, 194847], "disallowed"], [[194848, 194848], "mapped", [29224]], [[194849, 194849], "mapped", [29237]], [[194850, 194850], "mapped", [29264]], [[194851, 194851], "mapped", [149e3]], [[194852, 194852], "mapped", [29312]], [[194853, 194853], "mapped", [29333]], [[194854, 194854], "mapped", [149301]], [[194855, 194855], "mapped", [149524]], [[194856, 194856], "mapped", [29562]], [[194857, 194857], "mapped", [29579]], [[194858, 194858], "mapped", [16044]], [[194859, 194859], "mapped", [29605]], [[194860, 194861], "mapped", [16056]], [[194862, 194862], "mapped", [29767]], [[194863, 194863], "mapped", [29788]], [[194864, 194864], "mapped", [29809]], [[194865, 194865], "mapped", [29829]], [[194866, 194866], "mapped", [29898]], [[194867, 194867], "mapped", [16155]], [[194868, 194868], "mapped", [29988]], [[194869, 194869], "mapped", [150582]], [[194870, 194870], "mapped", [30014]], [[194871, 194871], "mapped", [150674]], [[194872, 194872], "mapped", [30064]], [[194873, 194873], "mapped", [139679]], [[194874, 194874], "mapped", [30224]], [[194875, 194875], "mapped", [151457]], [[194876, 194876], "mapped", [151480]], [[194877, 194877], "mapped", [151620]], [[194878, 194878], "mapped", [16380]], [[194879, 194879], "mapped", [16392]], [[194880, 194880], "mapped", [30452]], [[194881, 194881], "mapped", [151795]], [[194882, 194882], "mapped", [151794]], [[194883, 194883], "mapped", [151833]], [[194884, 194884], "mapped", [151859]], [[194885, 194885], "mapped", [30494]], [[194886, 194887], "mapped", [30495]], [[194888, 194888], "mapped", [30538]], [[194889, 194889], "mapped", [16441]], [[194890, 194890], "mapped", [30603]], [[194891, 194891], "mapped", [16454]], [[194892, 194892], "mapped", [16534]], [[194893, 194893], "mapped", [152605]], [[194894, 194894], "mapped", [30798]], [[194895, 194895], "mapped", [30860]], [[194896, 194896], "mapped", [30924]], [[194897, 194897], "mapped", [16611]], [[194898, 194898], "mapped", [153126]], [[194899, 194899], "mapped", [31062]], [[194900, 194900], "mapped", [153242]], [[194901, 194901], "mapped", [153285]], [[194902, 194902], "mapped", [31119]], [[194903, 194903], "mapped", [31211]], [[194904, 194904], "mapped", [16687]], [[194905, 194905], "mapped", [31296]], [[194906, 194906], "mapped", [31306]], [[194907, 194907], "mapped", [31311]], [[194908, 194908], "mapped", [153980]], [[194909, 194910], "mapped", [154279]], [[194911, 194911], "disallowed"], [[194912, 194912], "mapped", [16898]], [[194913, 194913], "mapped", [154539]], [[194914, 194914], "mapped", [31686]], [[194915, 194915], "mapped", [31689]], [[194916, 194916], "mapped", [16935]], [[194917, 194917], "mapped", [154752]], [[194918, 194918], "mapped", [31954]], [[194919, 194919], "mapped", [17056]], [[194920, 194920], "mapped", [31976]], [[194921, 194921], "mapped", [31971]], [[194922, 194922], "mapped", [32e3]], [[194923, 194923], "mapped", [155526]], [[194924, 194924], "mapped", [32099]], [[194925, 194925], "mapped", [17153]], [[194926, 194926], "mapped", [32199]], [[194927, 194927], "mapped", [32258]], [[194928, 194928], "mapped", [32325]], [[194929, 194929], "mapped", [17204]], [[194930, 194930], "mapped", [156200]], [[194931, 194931], "mapped", [156231]], [[194932, 194932], "mapped", [17241]], [[194933, 194933], "mapped", [156377]], [[194934, 194934], "mapped", [32634]], [[194935, 194935], "mapped", [156478]], [[194936, 194936], "mapped", [32661]], [[194937, 194937], "mapped", [32762]], [[194938, 194938], "mapped", [32773]], [[194939, 194939], "mapped", [156890]], [[194940, 194940], "mapped", [156963]], [[194941, 194941], "mapped", [32864]], [[194942, 194942], "mapped", [157096]], [[194943, 194943], "mapped", [32880]], [[194944, 194944], "mapped", [144223]], [[194945, 194945], "mapped", [17365]], [[194946, 194946], "mapped", [32946]], [[194947, 194947], "mapped", [33027]], [[194948, 194948], "mapped", [17419]], [[194949, 194949], "mapped", [33086]], [[194950, 194950], "mapped", [23221]], [[194951, 194951], "mapped", [157607]], [[194952, 194952], "mapped", [157621]], [[194953, 194953], "mapped", [144275]], [[194954, 194954], "mapped", [144284]], [[194955, 194955], "mapped", [33281]], [[194956, 194956], "mapped", [33284]], [[194957, 194957], "mapped", [36766]], [[194958, 194958], "mapped", [17515]], [[194959, 194959], "mapped", [33425]], [[194960, 194960], "mapped", [33419]], [[194961, 194961], "mapped", [33437]], [[194962, 194962], "mapped", [21171]], [[194963, 194963], "mapped", [33457]], [[194964, 194964], "mapped", [33459]], [[194965, 194965], "mapped", [33469]], [[194966, 194966], "mapped", [33510]], [[194967, 194967], "mapped", [158524]], [[194968, 194968], "mapped", [33509]], [[194969, 194969], "mapped", [33565]], [[194970, 194970], "mapped", [33635]], [[194971, 194971], "mapped", [33709]], [[194972, 194972], "mapped", [33571]], [[194973, 194973], "mapped", [33725]], [[194974, 194974], "mapped", [33767]], [[194975, 194975], "mapped", [33879]], [[194976, 194976], "mapped", [33619]], [[194977, 194977], "mapped", [33738]], [[194978, 194978], "mapped", [33740]], [[194979, 194979], "mapped", [33756]], [[194980, 194980], "mapped", [158774]], [[194981, 194981], "mapped", [159083]], [[194982, 194982], "mapped", [158933]], [[194983, 194983], "mapped", [17707]], [[194984, 194984], "mapped", [34033]], [[194985, 194985], "mapped", [34035]], [[194986, 194986], "mapped", [34070]], [[194987, 194987], "mapped", [160714]], [[194988, 194988], "mapped", [34148]], [[194989, 194989], "mapped", [159532]], [[194990, 194990], "mapped", [17757]], [[194991, 194991], "mapped", [17761]], [[194992, 194992], "mapped", [159665]], [[194993, 194993], "mapped", [159954]], [[194994, 194994], "mapped", [17771]], [[194995, 194995], "mapped", [34384]], [[194996, 194996], "mapped", [34396]], [[194997, 194997], "mapped", [34407]], [[194998, 194998], "mapped", [34409]], [[194999, 194999], "mapped", [34473]], [[195e3, 195e3], "mapped", [34440]], [[195001, 195001], "mapped", [34574]], [[195002, 195002], "mapped", [34530]], [[195003, 195003], "mapped", [34681]], [[195004, 195004], "mapped", [34600]], [[195005, 195005], "mapped", [34667]], [[195006, 195006], "mapped", [34694]], [[195007, 195007], "disallowed"], [[195008, 195008], "mapped", [34785]], [[195009, 195009], "mapped", [34817]], [[195010, 195010], "mapped", [17913]], [[195011, 195011], "mapped", [34912]], [[195012, 195012], "mapped", [34915]], [[195013, 195013], "mapped", [161383]], [[195014, 195014], "mapped", [35031]], [[195015, 195015], "mapped", [35038]], [[195016, 195016], "mapped", [17973]], [[195017, 195017], "mapped", [35066]], [[195018, 195018], "mapped", [13499]], [[195019, 195019], "mapped", [161966]], [[195020, 195020], "mapped", [162150]], [[195021, 195021], "mapped", [18110]], [[195022, 195022], "mapped", [18119]], [[195023, 195023], "mapped", [35488]], [[195024, 195024], "mapped", [35565]], [[195025, 195025], "mapped", [35722]], [[195026, 195026], "mapped", [35925]], [[195027, 195027], "mapped", [162984]], [[195028, 195028], "mapped", [36011]], [[195029, 195029], "mapped", [36033]], [[195030, 195030], "mapped", [36123]], [[195031, 195031], "mapped", [36215]], [[195032, 195032], "mapped", [163631]], [[195033, 195033], "mapped", [133124]], [[195034, 195034], "mapped", [36299]], [[195035, 195035], "mapped", [36284]], [[195036, 195036], "mapped", [36336]], [[195037, 195037], "mapped", [133342]], [[195038, 195038], "mapped", [36564]], [[195039, 195039], "mapped", [36664]], [[195040, 195040], "mapped", [165330]], [[195041, 195041], "mapped", [165357]], [[195042, 195042], "mapped", [37012]], [[195043, 195043], "mapped", [37105]], [[195044, 195044], "mapped", [37137]], [[195045, 195045], "mapped", [165678]], [[195046, 195046], "mapped", [37147]], [[195047, 195047], "mapped", [37432]], [[195048, 195048], "mapped", [37591]], [[195049, 195049], "mapped", [37592]], [[195050, 195050], "mapped", [37500]], [[195051, 195051], "mapped", [37881]], [[195052, 195052], "mapped", [37909]], [[195053, 195053], "mapped", [166906]], [[195054, 195054], "mapped", [38283]], [[195055, 195055], "mapped", [18837]], [[195056, 195056], "mapped", [38327]], [[195057, 195057], "mapped", [167287]], [[195058, 195058], "mapped", [18918]], [[195059, 195059], "mapped", [38595]], [[195060, 195060], "mapped", [23986]], [[195061, 195061], "mapped", [38691]], [[195062, 195062], "mapped", [168261]], [[195063, 195063], "mapped", [168474]], [[195064, 195064], "mapped", [19054]], [[195065, 195065], "mapped", [19062]], [[195066, 195066], "mapped", [38880]], [[195067, 195067], "mapped", [168970]], [[195068, 195068], "mapped", [19122]], [[195069, 195069], "mapped", [169110]], [[195070, 195071], "mapped", [38923]], [[195072, 195072], "mapped", [38953]], [[195073, 195073], "mapped", [169398]], [[195074, 195074], "mapped", [39138]], [[195075, 195075], "mapped", [19251]], [[195076, 195076], "mapped", [39209]], [[195077, 195077], "mapped", [39335]], [[195078, 195078], "mapped", [39362]], [[195079, 195079], "mapped", [39422]], [[195080, 195080], "mapped", [19406]], [[195081, 195081], "mapped", [170800]], [[195082, 195082], "mapped", [39698]], [[195083, 195083], "mapped", [4e4]], [[195084, 195084], "mapped", [40189]], [[195085, 195085], "mapped", [19662]], [[195086, 195086], "mapped", [19693]], [[195087, 195087], "mapped", [40295]], [[195088, 195088], "mapped", [172238]], [[195089, 195089], "mapped", [19704]], [[195090, 195090], "mapped", [172293]], [[195091, 195091], "mapped", [172558]], [[195092, 195092], "mapped", [172689]], [[195093, 195093], "mapped", [40635]], [[195094, 195094], "mapped", [19798]], [[195095, 195095], "mapped", [40697]], [[195096, 195096], "mapped", [40702]], [[195097, 195097], "mapped", [40709]], [[195098, 195098], "mapped", [40719]], [[195099, 195099], "mapped", [40726]], [[195100, 195100], "mapped", [40763]], [[195101, 195101], "mapped", [173568]], [[195102, 196605], "disallowed"], [[196606, 196607], "disallowed"], [[196608, 262141], "disallowed"], [[262142, 262143], "disallowed"], [[262144, 327677], "disallowed"], [[327678, 327679], "disallowed"], [[327680, 393213], "disallowed"], [[393214, 393215], "disallowed"], [[393216, 458749], "disallowed"], [[458750, 458751], "disallowed"], [[458752, 524285], "disallowed"], [[524286, 524287], "disallowed"], [[524288, 589821], "disallowed"], [[589822, 589823], "disallowed"], [[589824, 655357], "disallowed"], [[655358, 655359], "disallowed"], [[655360, 720893], "disallowed"], [[720894, 720895], "disallowed"], [[720896, 786429], "disallowed"], [[786430, 786431], "disallowed"], [[786432, 851965], "disallowed"], [[851966, 851967], "disallowed"], [[851968, 917501], "disallowed"], [[917502, 917503], "disallowed"], [[917504, 917504], "disallowed"], [[917505, 917505], "disallowed"], [[917506, 917535], "disallowed"], [[917536, 917631], "disallowed"], [[917632, 917759], "disallowed"], [[917760, 917999], "ignored"], [[918e3, 983037], "disallowed"], [[983038, 983039], "disallowed"], [[983040, 1048573], "disallowed"], [[1048574, 1048575], "disallowed"], [[1048576, 1114109], "disallowed"], [[1114110, 1114111], "disallowed"]];
  }
});

// node_modules/tr46/index.js
var require_tr46 = __commonJS({
  "node_modules/tr46/index.js"(exports2, module2) {
    "use strict";
    var punycode = require("punycode");
    var mappingTable = require_mappingTable();
    var PROCESSING_OPTIONS = {
      TRANSITIONAL: 0,
      NONTRANSITIONAL: 1
    };
    function normalize(str) {
      return str.split("\0").map(function(s) {
        return s.normalize("NFC");
      }).join("\0");
    }
    function findStatus(val) {
      var start = 0;
      var end = mappingTable.length - 1;
      while (start <= end) {
        var mid = Math.floor((start + end) / 2);
        var target = mappingTable[mid];
        if (target[0][0] <= val && target[0][1] >= val) {
          return target;
        } else if (target[0][0] > val) {
          end = mid - 1;
        } else {
          start = mid + 1;
        }
      }
      return null;
    }
    var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    function countSymbols(string) {
      return string.replace(regexAstralSymbols, "_").length;
    }
    function mapChars(domain_name, useSTD3, processing_option) {
      var hasError = false;
      var processed = "";
      var len = countSymbols(domain_name);
      for (var i = 0; i < len; ++i) {
        var codePoint = domain_name.codePointAt(i);
        var status = findStatus(codePoint);
        switch (status[1]) {
          case "disallowed":
            hasError = true;
            processed += String.fromCodePoint(codePoint);
            break;
          case "ignored":
            break;
          case "mapped":
            processed += String.fromCodePoint.apply(String, status[2]);
            break;
          case "deviation":
            if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
              processed += String.fromCodePoint.apply(String, status[2]);
            } else {
              processed += String.fromCodePoint(codePoint);
            }
            break;
          case "valid":
            processed += String.fromCodePoint(codePoint);
            break;
          case "disallowed_STD3_mapped":
            if (useSTD3) {
              hasError = true;
              processed += String.fromCodePoint(codePoint);
            } else {
              processed += String.fromCodePoint.apply(String, status[2]);
            }
            break;
          case "disallowed_STD3_valid":
            if (useSTD3) {
              hasError = true;
            }
            processed += String.fromCodePoint(codePoint);
            break;
        }
      }
      return {
        string: processed,
        error: hasError
      };
    }
    var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
    function validateLabel(label, processing_option) {
      if (label.substr(0, 4) === "xn--") {
        label = punycode.toUnicode(label);
        processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
      }
      var error = false;
      if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
        error = true;
      }
      var len = countSymbols(label);
      for (var i = 0; i < len; ++i) {
        var status = findStatus(label.codePointAt(i));
        if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
          error = true;
          break;
        }
      }
      return {
        label,
        error
      };
    }
    function processing(domain_name, useSTD3, processing_option) {
      var result = mapChars(domain_name, useSTD3, processing_option);
      result.string = normalize(result.string);
      var labels = result.string.split(".");
      for (var i = 0; i < labels.length; ++i) {
        try {
          var validation = validateLabel(labels[i]);
          labels[i] = validation.label;
          result.error = result.error || validation.error;
        } catch (e) {
          result.error = true;
        }
      }
      return {
        string: labels.join("."),
        error: result.error
      };
    }
    module2.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
      var result = processing(domain_name, useSTD3, processing_option);
      var labels = result.string.split(".");
      labels = labels.map(function(l) {
        try {
          return punycode.toASCII(l);
        } catch (e) {
          result.error = true;
          return l;
        }
      });
      if (verifyDnsLength) {
        var total = labels.slice(0, labels.length - 1).join(".").length;
        if (total.length > 253 || total.length === 0) {
          result.error = true;
        }
        for (var i = 0; i < labels.length; ++i) {
          if (labels.length > 63 || labels.length === 0) {
            result.error = true;
            break;
          }
        }
      }
      if (result.error)
        return null;
      return labels.join(".");
    };
    module2.exports.toUnicode = function(domain_name, useSTD3) {
      var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
      return {
        domain: result.string,
        error: result.error
      };
    };
    module2.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;
  }
});

// node_modules/whatwg-url/lib/url-state-machine.js
var require_url_state_machine = __commonJS({
  "node_modules/whatwg-url/lib/url-state-machine.js"(exports2, module2) {
    "use strict";
    var punycode = require("punycode");
    var tr46 = require_tr46();
    var specialSchemes = {
      ftp: 21,
      file: null,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var failure = Symbol("failure");
    function countSymbols(str) {
      return punycode.ucs2.decode(str).length;
    }
    function at(input, idx) {
      const c = input[idx];
      return isNaN(c) ? void 0 : String.fromCodePoint(c);
    }
    function isASCIIDigit(c) {
      return c >= 48 && c <= 57;
    }
    function isASCIIAlpha(c) {
      return c >= 65 && c <= 90 || c >= 97 && c <= 122;
    }
    function isASCIIAlphanumeric(c) {
      return isASCIIAlpha(c) || isASCIIDigit(c);
    }
    function isASCIIHex(c) {
      return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
    }
    function isSingleDot(buffer) {
      return buffer === "." || buffer.toLowerCase() === "%2e";
    }
    function isDoubleDot(buffer) {
      buffer = buffer.toLowerCase();
      return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
    }
    function isWindowsDriveLetterCodePoints(cp1, cp2) {
      return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
    }
    function isWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
    }
    function isNormalizedWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
    }
    function containsForbiddenHostCodePoint(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function containsForbiddenHostCodePointExcludingPercent(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function isSpecialScheme(scheme) {
      return specialSchemes[scheme] !== void 0;
    }
    function isSpecial(url) {
      return isSpecialScheme(url.scheme);
    }
    function defaultPort(scheme) {
      return specialSchemes[scheme];
    }
    function percentEncode(c) {
      let hex = c.toString(16).toUpperCase();
      if (hex.length === 1) {
        hex = "0" + hex;
      }
      return "%" + hex;
    }
    function utf8PercentEncode(c) {
      const buf = new Buffer(c);
      let str = "";
      for (let i = 0; i < buf.length; ++i) {
        str += percentEncode(buf[i]);
      }
      return str;
    }
    function utf8PercentDecode(str) {
      const input = new Buffer(str);
      const output = [];
      for (let i = 0; i < input.length; ++i) {
        if (input[i] !== 37) {
          output.push(input[i]);
        } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
          output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
          i += 2;
        } else {
          output.push(input[i]);
        }
      }
      return new Buffer(output).toString();
    }
    function isC0ControlPercentEncode(c) {
      return c <= 31 || c > 126;
    }
    var extraPathPercentEncodeSet = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
    function isPathPercentEncode(c) {
      return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
    }
    var extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
    function isUserinfoPercentEncode(c) {
      return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
    }
    function percentEncodeChar(c, encodeSetPredicate) {
      const cStr = String.fromCodePoint(c);
      if (encodeSetPredicate(c)) {
        return utf8PercentEncode(cStr);
      }
      return cStr;
    }
    function parseIPv4Number(input) {
      let R = 10;
      if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
        input = input.substring(2);
        R = 16;
      } else if (input.length >= 2 && input.charAt(0) === "0") {
        input = input.substring(1);
        R = 8;
      }
      if (input === "") {
        return 0;
      }
      const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
      if (regex.test(input)) {
        return failure;
      }
      return parseInt(input, R);
    }
    function parseIPv4(input) {
      const parts = input.split(".");
      if (parts[parts.length - 1] === "") {
        if (parts.length > 1) {
          parts.pop();
        }
      }
      if (parts.length > 4) {
        return input;
      }
      const numbers = [];
      for (const part of parts) {
        if (part === "") {
          return input;
        }
        const n = parseIPv4Number(part);
        if (n === failure) {
          return input;
        }
        numbers.push(n);
      }
      for (let i = 0; i < numbers.length - 1; ++i) {
        if (numbers[i] > 255) {
          return failure;
        }
      }
      if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
        return failure;
      }
      let ipv4 = numbers.pop();
      let counter = 0;
      for (const n of numbers) {
        ipv4 += n * Math.pow(256, 3 - counter);
        ++counter;
      }
      return ipv4;
    }
    function serializeIPv4(address) {
      let output = "";
      let n = address;
      for (let i = 1; i <= 4; ++i) {
        output = String(n % 256) + output;
        if (i !== 4) {
          output = "." + output;
        }
        n = Math.floor(n / 256);
      }
      return output;
    }
    function parseIPv6(input) {
      const address = [0, 0, 0, 0, 0, 0, 0, 0];
      let pieceIndex = 0;
      let compress = null;
      let pointer = 0;
      input = punycode.ucs2.decode(input);
      if (input[pointer] === 58) {
        if (input[pointer + 1] !== 58) {
          return failure;
        }
        pointer += 2;
        ++pieceIndex;
        compress = pieceIndex;
      }
      while (pointer < input.length) {
        if (pieceIndex === 8) {
          return failure;
        }
        if (input[pointer] === 58) {
          if (compress !== null) {
            return failure;
          }
          ++pointer;
          ++pieceIndex;
          compress = pieceIndex;
          continue;
        }
        let value = 0;
        let length = 0;
        while (length < 4 && isASCIIHex(input[pointer])) {
          value = value * 16 + parseInt(at(input, pointer), 16);
          ++pointer;
          ++length;
        }
        if (input[pointer] === 46) {
          if (length === 0) {
            return failure;
          }
          pointer -= length;
          if (pieceIndex > 6) {
            return failure;
          }
          let numbersSeen = 0;
          while (input[pointer] !== void 0) {
            let ipv4Piece = null;
            if (numbersSeen > 0) {
              if (input[pointer] === 46 && numbersSeen < 4) {
                ++pointer;
              } else {
                return failure;
              }
            }
            if (!isASCIIDigit(input[pointer])) {
              return failure;
            }
            while (isASCIIDigit(input[pointer])) {
              const number = parseInt(at(input, pointer));
              if (ipv4Piece === null) {
                ipv4Piece = number;
              } else if (ipv4Piece === 0) {
                return failure;
              } else {
                ipv4Piece = ipv4Piece * 10 + number;
              }
              if (ipv4Piece > 255) {
                return failure;
              }
              ++pointer;
            }
            address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
            ++numbersSeen;
            if (numbersSeen === 2 || numbersSeen === 4) {
              ++pieceIndex;
            }
          }
          if (numbersSeen !== 4) {
            return failure;
          }
          break;
        } else if (input[pointer] === 58) {
          ++pointer;
          if (input[pointer] === void 0) {
            return failure;
          }
        } else if (input[pointer] !== void 0) {
          return failure;
        }
        address[pieceIndex] = value;
        ++pieceIndex;
      }
      if (compress !== null) {
        let swaps = pieceIndex - compress;
        pieceIndex = 7;
        while (pieceIndex !== 0 && swaps > 0) {
          const temp = address[compress + swaps - 1];
          address[compress + swaps - 1] = address[pieceIndex];
          address[pieceIndex] = temp;
          --pieceIndex;
          --swaps;
        }
      } else if (compress === null && pieceIndex !== 8) {
        return failure;
      }
      return address;
    }
    function serializeIPv6(address) {
      let output = "";
      const seqResult = findLongestZeroSequence(address);
      const compress = seqResult.idx;
      let ignore0 = false;
      for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
        if (ignore0 && address[pieceIndex] === 0) {
          continue;
        } else if (ignore0) {
          ignore0 = false;
        }
        if (compress === pieceIndex) {
          const separator = pieceIndex === 0 ? "::" : ":";
          output += separator;
          ignore0 = true;
          continue;
        }
        output += address[pieceIndex].toString(16);
        if (pieceIndex !== 7) {
          output += ":";
        }
      }
      return output;
    }
    function parseHost(input, isSpecialArg) {
      if (input[0] === "[") {
        if (input[input.length - 1] !== "]") {
          return failure;
        }
        return parseIPv6(input.substring(1, input.length - 1));
      }
      if (!isSpecialArg) {
        return parseOpaqueHost(input);
      }
      const domain = utf8PercentDecode(input);
      const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
      if (asciiDomain === null) {
        return failure;
      }
      if (containsForbiddenHostCodePoint(asciiDomain)) {
        return failure;
      }
      const ipv4Host = parseIPv4(asciiDomain);
      if (typeof ipv4Host === "number" || ipv4Host === failure) {
        return ipv4Host;
      }
      return asciiDomain;
    }
    function parseOpaqueHost(input) {
      if (containsForbiddenHostCodePointExcludingPercent(input)) {
        return failure;
      }
      let output = "";
      const decoded = punycode.ucs2.decode(input);
      for (let i = 0; i < decoded.length; ++i) {
        output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
      }
      return output;
    }
    function findLongestZeroSequence(arr) {
      let maxIdx = null;
      let maxLen = 1;
      let currStart = null;
      let currLen = 0;
      for (let i = 0; i < arr.length; ++i) {
        if (arr[i] !== 0) {
          if (currLen > maxLen) {
            maxIdx = currStart;
            maxLen = currLen;
          }
          currStart = null;
          currLen = 0;
        } else {
          if (currStart === null) {
            currStart = i;
          }
          ++currLen;
        }
      }
      if (currLen > maxLen) {
        maxIdx = currStart;
        maxLen = currLen;
      }
      return {
        idx: maxIdx,
        len: maxLen
      };
    }
    function serializeHost(host) {
      if (typeof host === "number") {
        return serializeIPv4(host);
      }
      if (host instanceof Array) {
        return "[" + serializeIPv6(host) + "]";
      }
      return host;
    }
    function trimControlChars(url) {
      return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
    }
    function trimTabAndNewline(url) {
      return url.replace(/\u0009|\u000A|\u000D/g, "");
    }
    function shortenPath(url) {
      const path = url.path;
      if (path.length === 0) {
        return;
      }
      if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
        return;
      }
      path.pop();
    }
    function includesCredentials(url) {
      return url.username !== "" || url.password !== "";
    }
    function cannotHaveAUsernamePasswordPort(url) {
      return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
    }
    function isNormalizedWindowsDriveLetter(string) {
      return /^[A-Za-z]:$/.test(string);
    }
    function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
      this.pointer = 0;
      this.input = input;
      this.base = base || null;
      this.encodingOverride = encodingOverride || "utf-8";
      this.stateOverride = stateOverride;
      this.url = url;
      this.failure = false;
      this.parseError = false;
      if (!this.url) {
        this.url = {
          scheme: "",
          username: "",
          password: "",
          host: null,
          port: null,
          path: [],
          query: null,
          fragment: null,
          cannotBeABaseURL: false
        };
        const res2 = trimControlChars(this.input);
        if (res2 !== this.input) {
          this.parseError = true;
        }
        this.input = res2;
      }
      const res = trimTabAndNewline(this.input);
      if (res !== this.input) {
        this.parseError = true;
      }
      this.input = res;
      this.state = stateOverride || "scheme start";
      this.buffer = "";
      this.atFlag = false;
      this.arrFlag = false;
      this.passwordTokenSeenFlag = false;
      this.input = punycode.ucs2.decode(this.input);
      for (; this.pointer <= this.input.length; ++this.pointer) {
        const c = this.input[this.pointer];
        const cStr = isNaN(c) ? void 0 : String.fromCodePoint(c);
        const ret = this["parse " + this.state](c, cStr);
        if (!ret) {
          break;
        } else if (ret === failure) {
          this.failure = true;
          break;
        }
      }
    }
    URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
      if (isASCIIAlpha(c)) {
        this.buffer += cStr.toLowerCase();
        this.state = "scheme";
      } else if (!this.stateOverride) {
        this.state = "no scheme";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
      if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
        this.buffer += cStr.toLowerCase();
      } else if (c === 58) {
        if (this.stateOverride) {
          if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
            return false;
          }
          if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
            return false;
          }
          if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
            return false;
          }
          if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
            return false;
          }
        }
        this.url.scheme = this.buffer;
        this.buffer = "";
        if (this.stateOverride) {
          return false;
        }
        if (this.url.scheme === "file") {
          if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
            this.parseError = true;
          }
          this.state = "file";
        } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
          this.state = "special relative or authority";
        } else if (isSpecial(this.url)) {
          this.state = "special authority slashes";
        } else if (this.input[this.pointer + 1] === 47) {
          this.state = "path or authority";
          ++this.pointer;
        } else {
          this.url.cannotBeABaseURL = true;
          this.url.path.push("");
          this.state = "cannot-be-a-base-URL path";
        }
      } else if (!this.stateOverride) {
        this.buffer = "";
        this.state = "no scheme";
        this.pointer = -1;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
      if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
        return failure;
      } else if (this.base.cannotBeABaseURL && c === 35) {
        this.url.scheme = this.base.scheme;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.url.cannotBeABaseURL = true;
        this.state = "fragment";
      } else if (this.base.scheme === "file") {
        this.state = "file";
        --this.pointer;
      } else {
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
      if (c === 47) {
        this.state = "authority";
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
      this.url.scheme = this.base.scheme;
      if (isNaN(c)) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 47) {
        this.state = "relative slash";
      } else if (c === 63) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
        this.state = "relative slash";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice(0, this.base.path.length - 1);
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
      if (isSpecial(this.url) && (c === 47 || c === 92)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "special authority ignore slashes";
      } else if (c === 47) {
        this.state = "authority";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "special authority ignore slashes";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
      if (c !== 47 && c !== 92) {
        this.state = "authority";
        --this.pointer;
      } else {
        this.parseError = true;
      }
      return true;
    };
    URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
      if (c === 64) {
        this.parseError = true;
        if (this.atFlag) {
          this.buffer = "%40" + this.buffer;
        }
        this.atFlag = true;
        const len = countSymbols(this.buffer);
        for (let pointer = 0; pointer < len; ++pointer) {
          const codePoint = this.buffer.codePointAt(pointer);
          if (codePoint === 58 && !this.passwordTokenSeenFlag) {
            this.passwordTokenSeenFlag = true;
            continue;
          }
          const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
          if (this.passwordTokenSeenFlag) {
            this.url.password += encodedCodePoints;
          } else {
            this.url.username += encodedCodePoints;
          }
        }
        this.buffer = "";
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        if (this.atFlag && this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        this.pointer -= countSymbols(this.buffer) + 1;
        this.buffer = "";
        this.state = "host";
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
      if (this.stateOverride && this.url.scheme === "file") {
        --this.pointer;
        this.state = "file host";
      } else if (c === 58 && !this.arrFlag) {
        if (this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "port";
        if (this.stateOverride === "hostname") {
          return false;
        }
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        --this.pointer;
        if (isSpecial(this.url) && this.buffer === "") {
          this.parseError = true;
          return failure;
        } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
          this.parseError = true;
          return false;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "path start";
        if (this.stateOverride) {
          return false;
        }
      } else {
        if (c === 91) {
          this.arrFlag = true;
        } else if (c === 93) {
          this.arrFlag = false;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
      if (isASCIIDigit(c)) {
        this.buffer += cStr;
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
        if (this.buffer !== "") {
          const port = parseInt(this.buffer);
          if (port > Math.pow(2, 16) - 1) {
            this.parseError = true;
            return failure;
          }
          this.url.port = port === defaultPort(this.url.scheme) ? null : port;
          this.buffer = "";
        }
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    var fileOtherwiseCodePoints = /* @__PURE__ */ new Set([47, 92, 63, 35]);
    URLStateMachine.prototype["parse file"] = function parseFile(c) {
      this.url.scheme = "file";
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file slash";
      } else if (this.base !== null && this.base.scheme === "file") {
        if (isNaN(c)) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
        } else if (c === 63) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = "";
          this.state = "query";
        } else if (c === 35) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          this.url.fragment = "";
          this.state = "fragment";
        } else {
          if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points
          !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points
          !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            shortenPath(this.url);
          } else {
            this.parseError = true;
          }
          this.state = "path";
          --this.pointer;
        }
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file host";
      } else {
        if (this.base !== null && this.base.scheme === "file") {
          if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
            this.url.path.push(this.base.path[0]);
          } else {
            this.url.host = this.base.host;
          }
        }
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
      if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
        --this.pointer;
        if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
          this.parseError = true;
          this.state = "path";
        } else if (this.buffer === "") {
          this.url.host = "";
          if (this.stateOverride) {
            return false;
          }
          this.state = "path start";
        } else {
          let host = parseHost(this.buffer, isSpecial(this.url));
          if (host === failure) {
            return failure;
          }
          if (host === "localhost") {
            host = "";
          }
          this.url.host = host;
          if (this.stateOverride) {
            return false;
          }
          this.buffer = "";
          this.state = "path start";
        }
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
      if (isSpecial(this.url)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "path";
        if (c !== 47 && c !== 92) {
          --this.pointer;
        }
      } else if (!this.stateOverride && c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (!this.stateOverride && c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else if (c !== void 0) {
        this.state = "path";
        if (c !== 47) {
          --this.pointer;
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse path"] = function parsePath(c) {
      if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
        if (isSpecial(this.url) && c === 92) {
          this.parseError = true;
        }
        if (isDoubleDot(this.buffer)) {
          shortenPath(this.url);
          if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
            this.url.path.push("");
          }
        } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        } else if (!isSingleDot(this.buffer)) {
          if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
            if (this.url.host !== "" && this.url.host !== null) {
              this.parseError = true;
              this.url.host = "";
            }
            this.buffer = this.buffer[0] + ":";
          }
          this.url.path.push(this.buffer);
        }
        this.buffer = "";
        if (this.url.scheme === "file" && (c === void 0 || c === 63 || c === 35)) {
          while (this.url.path.length > 1 && this.url.path[0] === "") {
            this.parseError = true;
            this.url.path.shift();
          }
        }
        if (c === 63) {
          this.url.query = "";
          this.state = "query";
        }
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += percentEncodeChar(c, isPathPercentEncode);
      }
      return true;
    };
    URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (!isNaN(c) && c !== 37) {
          this.parseError = true;
        }
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        if (!isNaN(c)) {
          this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
      if (isNaN(c) || !this.stateOverride && c === 35) {
        if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
          this.encodingOverride = "utf-8";
        }
        const buffer = new Buffer(this.buffer);
        for (let i = 0; i < buffer.length; ++i) {
          if (buffer[i] < 33 || buffer[i] > 126 || buffer[i] === 34 || buffer[i] === 35 || buffer[i] === 60 || buffer[i] === 62) {
            this.url.query += percentEncode(buffer[i]);
          } else {
            this.url.query += String.fromCodePoint(buffer[i]);
          }
        }
        this.buffer = "";
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
      if (isNaN(c)) {
      } else if (c === 0) {
        this.parseError = true;
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
      }
      return true;
    };
    function serializeURL(url, excludeFragment) {
      let output = url.scheme + ":";
      if (url.host !== null) {
        output += "//";
        if (url.username !== "" || url.password !== "") {
          output += url.username;
          if (url.password !== "") {
            output += ":" + url.password;
          }
          output += "@";
        }
        output += serializeHost(url.host);
        if (url.port !== null) {
          output += ":" + url.port;
        }
      } else if (url.host === null && url.scheme === "file") {
        output += "//";
      }
      if (url.cannotBeABaseURL) {
        output += url.path[0];
      } else {
        for (const string of url.path) {
          output += "/" + string;
        }
      }
      if (url.query !== null) {
        output += "?" + url.query;
      }
      if (!excludeFragment && url.fragment !== null) {
        output += "#" + url.fragment;
      }
      return output;
    }
    function serializeOrigin(tuple) {
      let result = tuple.scheme + "://";
      result += serializeHost(tuple.host);
      if (tuple.port !== null) {
        result += ":" + tuple.port;
      }
      return result;
    }
    module2.exports.serializeURL = serializeURL;
    module2.exports.serializeURLOrigin = function(url) {
      switch (url.scheme) {
        case "blob":
          try {
            return module2.exports.serializeURLOrigin(module2.exports.parseURL(url.path[0]));
          } catch (e) {
            return "null";
          }
        case "ftp":
        case "gopher":
        case "http":
        case "https":
        case "ws":
        case "wss":
          return serializeOrigin({
            scheme: url.scheme,
            host: url.host,
            port: url.port
          });
        case "file":
          return "file://";
        default:
          return "null";
      }
    };
    module2.exports.basicURLParse = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
      if (usm.failure) {
        return "failure";
      }
      return usm.url;
    };
    module2.exports.setTheUsername = function(url, username) {
      url.username = "";
      const decoded = punycode.ucs2.decode(username);
      for (let i = 0; i < decoded.length; ++i) {
        url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.setThePassword = function(url, password) {
      url.password = "";
      const decoded = punycode.ucs2.decode(password);
      for (let i = 0; i < decoded.length; ++i) {
        url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.serializeHost = serializeHost;
    module2.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
    module2.exports.serializeInteger = function(integer) {
      return String(integer);
    };
    module2.exports.parseURL = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      return module2.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
    };
  }
});

// node_modules/whatwg-url/lib/URL-impl.js
var require_URL_impl = __commonJS({
  "node_modules/whatwg-url/lib/URL-impl.js"(exports2) {
    "use strict";
    var usm = require_url_state_machine();
    exports2.implementation = class URLImpl {
      constructor(constructorArgs) {
        const url = constructorArgs[0];
        const base = constructorArgs[1];
        let parsedBase = null;
        if (base !== void 0) {
          parsedBase = usm.basicURLParse(base);
          if (parsedBase === "failure") {
            throw new TypeError("Invalid base URL");
          }
        }
        const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get href() {
        return usm.serializeURL(this._url);
      }
      set href(v) {
        const parsedURL = usm.basicURLParse(v);
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get origin() {
        return usm.serializeURLOrigin(this._url);
      }
      get protocol() {
        return this._url.scheme + ":";
      }
      set protocol(v) {
        usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
      }
      get username() {
        return this._url.username;
      }
      set username(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setTheUsername(this._url, v);
      }
      get password() {
        return this._url.password;
      }
      set password(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setThePassword(this._url, v);
      }
      get host() {
        const url = this._url;
        if (url.host === null) {
          return "";
        }
        if (url.port === null) {
          return usm.serializeHost(url.host);
        }
        return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
      }
      set host(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
      }
      get hostname() {
        if (this._url.host === null) {
          return "";
        }
        return usm.serializeHost(this._url.host);
      }
      set hostname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
      }
      get port() {
        if (this._url.port === null) {
          return "";
        }
        return usm.serializeInteger(this._url.port);
      }
      set port(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        if (v === "") {
          this._url.port = null;
        } else {
          usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
        }
      }
      get pathname() {
        if (this._url.cannotBeABaseURL) {
          return this._url.path[0];
        }
        if (this._url.path.length === 0) {
          return "";
        }
        return "/" + this._url.path.join("/");
      }
      set pathname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        this._url.path = [];
        usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
      }
      get search() {
        if (this._url.query === null || this._url.query === "") {
          return "";
        }
        return "?" + this._url.query;
      }
      set search(v) {
        const url = this._url;
        if (v === "") {
          url.query = null;
          return;
        }
        const input = v[0] === "?" ? v.substring(1) : v;
        url.query = "";
        usm.basicURLParse(input, { url, stateOverride: "query" });
      }
      get hash() {
        if (this._url.fragment === null || this._url.fragment === "") {
          return "";
        }
        return "#" + this._url.fragment;
      }
      set hash(v) {
        if (v === "") {
          this._url.fragment = null;
          return;
        }
        const input = v[0] === "#" ? v.substring(1) : v;
        this._url.fragment = "";
        usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
      }
      toJSON() {
        return this.href;
      }
    };
  }
});

// node_modules/whatwg-url/lib/URL.js
var require_URL = __commonJS({
  "node_modules/whatwg-url/lib/URL.js"(exports2, module2) {
    "use strict";
    var conversions = require_lib();
    var utils = require_utils();
    var Impl = require_URL_impl();
    var impl = utils.implSymbol;
    function URL2(url) {
      if (!this || this[impl] || !(this instanceof URL2)) {
        throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
      }
      if (arguments.length < 1) {
        throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 2; ++i) {
        args[i] = arguments[i];
      }
      args[0] = conversions["USVString"](args[0]);
      if (args[1] !== void 0) {
        args[1] = conversions["USVString"](args[1]);
      }
      module2.exports.setup(this, args);
    }
    URL2.prototype.toJSON = function toJSON() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 0; ++i) {
        args[i] = arguments[i];
      }
      return this[impl].toJSON.apply(this[impl], args);
    };
    Object.defineProperty(URL2.prototype, "href", {
      get() {
        return this[impl].href;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].href = V;
      },
      enumerable: true,
      configurable: true
    });
    URL2.prototype.toString = function() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      return this.href;
    };
    Object.defineProperty(URL2.prototype, "origin", {
      get() {
        return this[impl].origin;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "protocol", {
      get() {
        return this[impl].protocol;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].protocol = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "username", {
      get() {
        return this[impl].username;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].username = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "password", {
      get() {
        return this[impl].password;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].password = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "host", {
      get() {
        return this[impl].host;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].host = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "hostname", {
      get() {
        return this[impl].hostname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hostname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "port", {
      get() {
        return this[impl].port;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].port = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "pathname", {
      get() {
        return this[impl].pathname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].pathname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "search", {
      get() {
        return this[impl].search;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].search = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "hash", {
      get() {
        return this[impl].hash;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hash = V;
      },
      enumerable: true,
      configurable: true
    });
    module2.exports = {
      is(obj) {
        return !!obj && obj[impl] instanceof Impl.implementation;
      },
      create(constructorArgs, privateData) {
        let obj = Object.create(URL2.prototype);
        this.setup(obj, constructorArgs, privateData);
        return obj;
      },
      setup(obj, constructorArgs, privateData) {
        if (!privateData)
          privateData = {};
        privateData.wrapper = obj;
        obj[impl] = new Impl.implementation(constructorArgs, privateData);
        obj[impl][utils.wrapperSymbol] = obj;
      },
      interface: URL2,
      expose: {
        Window: { URL: URL2 },
        Worker: { URL: URL2 }
      }
    };
  }
});

// node_modules/whatwg-url/lib/public-api.js
var require_public_api = __commonJS({
  "node_modules/whatwg-url/lib/public-api.js"(exports2) {
    "use strict";
    exports2.URL = require_URL().interface;
    exports2.serializeURL = require_url_state_machine().serializeURL;
    exports2.serializeURLOrigin = require_url_state_machine().serializeURLOrigin;
    exports2.basicURLParse = require_url_state_machine().basicURLParse;
    exports2.setTheUsername = require_url_state_machine().setTheUsername;
    exports2.setThePassword = require_url_state_machine().setThePassword;
    exports2.serializeHost = require_url_state_machine().serializeHost;
    exports2.serializeInteger = require_url_state_machine().serializeInteger;
    exports2.parseURL = require_url_state_machine().parseURL;
  }
});

// node_modules/gaxios/node_modules/node-fetch/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/gaxios/node_modules/node-fetch/lib/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var Stream = _interopDefault(require("stream"));
    var http = _interopDefault(require("http"));
    var Url = _interopDefault(require("url"));
    var whatwgUrl = _interopDefault(require_public_api());
    var https = _interopDefault(require("https"));
    var zlib = _interopDefault(require("zlib"));
    var Readable = Stream.Readable;
    var BUFFER = Symbol("buffer");
    var TYPE = Symbol("type");
    var Blob = class _Blob {
      constructor() {
        this[TYPE] = "";
        const blobParts = arguments[0];
        const options = arguments[1];
        const buffers = [];
        let size = 0;
        if (blobParts) {
          const a = blobParts;
          const length = Number(a.length);
          for (let i = 0; i < length; i++) {
            const element = a[i];
            let buffer;
            if (element instanceof Buffer) {
              buffer = element;
            } else if (ArrayBuffer.isView(element)) {
              buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
            } else if (element instanceof ArrayBuffer) {
              buffer = Buffer.from(element);
            } else if (element instanceof _Blob) {
              buffer = element[BUFFER];
            } else {
              buffer = Buffer.from(typeof element === "string" ? element : String(element));
            }
            size += buffer.length;
            buffers.push(buffer);
          }
        }
        this[BUFFER] = Buffer.concat(buffers);
        let type = options && options.type !== void 0 && String(options.type).toLowerCase();
        if (type && !/[^\u0020-\u007E]/.test(type)) {
          this[TYPE] = type;
        }
      }
      get size() {
        return this[BUFFER].length;
      }
      get type() {
        return this[TYPE];
      }
      text() {
        return Promise.resolve(this[BUFFER].toString());
      }
      arrayBuffer() {
        const buf = this[BUFFER];
        const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        return Promise.resolve(ab);
      }
      stream() {
        const readable = new Readable();
        readable._read = function() {
        };
        readable.push(this[BUFFER]);
        readable.push(null);
        return readable;
      }
      toString() {
        return "[object Blob]";
      }
      slice() {
        const size = this.size;
        const start = arguments[0];
        const end = arguments[1];
        let relativeStart, relativeEnd;
        if (start === void 0) {
          relativeStart = 0;
        } else if (start < 0) {
          relativeStart = Math.max(size + start, 0);
        } else {
          relativeStart = Math.min(start, size);
        }
        if (end === void 0) {
          relativeEnd = size;
        } else if (end < 0) {
          relativeEnd = Math.max(size + end, 0);
        } else {
          relativeEnd = Math.min(end, size);
        }
        const span = Math.max(relativeEnd - relativeStart, 0);
        const buffer = this[BUFFER];
        const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
        const blob = new _Blob([], { type: arguments[2] });
        blob[BUFFER] = slicedBuffer;
        return blob;
      }
    };
    Object.defineProperties(Blob.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    });
    Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
      value: "Blob",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function FetchError(message, type, systemError) {
      Error.call(this, message);
      this.message = message;
      this.type = type;
      if (systemError) {
        this.code = this.errno = systemError.code;
      }
      Error.captureStackTrace(this, this.constructor);
    }
    FetchError.prototype = Object.create(Error.prototype);
    FetchError.prototype.constructor = FetchError;
    FetchError.prototype.name = "FetchError";
    var convert;
    try {
      convert = require("encoding").convert;
    } catch (e) {
    }
    var INTERNALS = Symbol("Body internals");
    var PassThrough = Stream.PassThrough;
    function Body(body) {
      var _this = this;
      var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
      let size = _ref$size === void 0 ? 0 : _ref$size;
      var _ref$timeout = _ref.timeout;
      let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
      if (body == null) {
        body = null;
      } else if (isURLSearchParams(body)) {
        body = Buffer.from(body.toString());
      } else if (isBlob(body))
        ;
      else if (Buffer.isBuffer(body))
        ;
      else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        body = Buffer.from(body);
      } else if (ArrayBuffer.isView(body)) {
        body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
      } else if (body instanceof Stream)
        ;
      else {
        body = Buffer.from(String(body));
      }
      this[INTERNALS] = {
        body,
        disturbed: false,
        error: null
      };
      this.size = size;
      this.timeout = timeout;
      if (body instanceof Stream) {
        body.on("error", function(err) {
          const error = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
          _this[INTERNALS].error = error;
        });
      }
    }
    Body.prototype = {
      get body() {
        return this[INTERNALS].body;
      },
      get bodyUsed() {
        return this[INTERNALS].disturbed;
      },
      /**
       * Decode response as ArrayBuffer
       *
       * @return  Promise
       */
      arrayBuffer() {
        return consumeBody.call(this).then(function(buf) {
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        });
      },
      /**
       * Return raw response as Blob
       *
       * @return Promise
       */
      blob() {
        let ct = this.headers && this.headers.get("content-type") || "";
        return consumeBody.call(this).then(function(buf) {
          return Object.assign(
            // Prevent copying
            new Blob([], {
              type: ct.toLowerCase()
            }),
            {
              [BUFFER]: buf
            }
          );
        });
      },
      /**
       * Decode response as json
       *
       * @return  Promise
       */
      json() {
        var _this2 = this;
        return consumeBody.call(this).then(function(buffer) {
          try {
            return JSON.parse(buffer.toString());
          } catch (err) {
            return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
          }
        });
      },
      /**
       * Decode response as text
       *
       * @return  Promise
       */
      text() {
        return consumeBody.call(this).then(function(buffer) {
          return buffer.toString();
        });
      },
      /**
       * Decode response as buffer (non-spec api)
       *
       * @return  Promise
       */
      buffer() {
        return consumeBody.call(this);
      },
      /**
       * Decode response as text, while automatically detecting the encoding and
       * trying to decode to UTF-8 (non-spec api)
       *
       * @return  Promise
       */
      textConverted() {
        var _this3 = this;
        return consumeBody.call(this).then(function(buffer) {
          return convertBody(buffer, _this3.headers);
        });
      }
    };
    Object.defineProperties(Body.prototype, {
      body: { enumerable: true },
      bodyUsed: { enumerable: true },
      arrayBuffer: { enumerable: true },
      blob: { enumerable: true },
      json: { enumerable: true },
      text: { enumerable: true }
    });
    Body.mixIn = function(proto) {
      for (const name of Object.getOwnPropertyNames(Body.prototype)) {
        if (!(name in proto)) {
          const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
          Object.defineProperty(proto, name, desc);
        }
      }
    };
    function consumeBody() {
      var _this4 = this;
      if (this[INTERNALS].disturbed) {
        return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
      }
      this[INTERNALS].disturbed = true;
      if (this[INTERNALS].error) {
        return Body.Promise.reject(this[INTERNALS].error);
      }
      let body = this.body;
      if (body === null) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      if (isBlob(body)) {
        body = body.stream();
      }
      if (Buffer.isBuffer(body)) {
        return Body.Promise.resolve(body);
      }
      if (!(body instanceof Stream)) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      let accum = [];
      let accumBytes = 0;
      let abort = false;
      return new Body.Promise(function(resolve, reject) {
        let resTimeout;
        if (_this4.timeout) {
          resTimeout = setTimeout(function() {
            abort = true;
            reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
          }, _this4.timeout);
        }
        body.on("error", function(err) {
          if (err.name === "AbortError") {
            abort = true;
            reject(err);
          } else {
            reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
          }
        });
        body.on("data", function(chunk) {
          if (abort || chunk === null) {
            return;
          }
          if (_this4.size && accumBytes + chunk.length > _this4.size) {
            abort = true;
            reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
            return;
          }
          accumBytes += chunk.length;
          accum.push(chunk);
        });
        body.on("end", function() {
          if (abort) {
            return;
          }
          clearTimeout(resTimeout);
          try {
            resolve(Buffer.concat(accum, accumBytes));
          } catch (err) {
            reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
          }
        });
      });
    }
    function convertBody(buffer, headers) {
      if (typeof convert !== "function") {
        throw new Error("The package `encoding` must be installed to use the textConverted() function");
      }
      const ct = headers.get("content-type");
      let charset = "utf-8";
      let res, str;
      if (ct) {
        res = /charset=([^;]*)/i.exec(ct);
      }
      str = buffer.slice(0, 1024).toString();
      if (!res && str) {
        res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
      }
      if (!res && str) {
        res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
        if (!res) {
          res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
          if (res) {
            res.pop();
          }
        }
        if (res) {
          res = /charset=(.*)/i.exec(res.pop());
        }
      }
      if (!res && str) {
        res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
      }
      if (res) {
        charset = res.pop();
        if (charset === "gb2312" || charset === "gbk") {
          charset = "gb18030";
        }
      }
      return convert(buffer, "UTF-8", charset).toString();
    }
    function isURLSearchParams(obj) {
      if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
        return false;
      }
      return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
    }
    function isBlob(obj) {
      return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
    }
    function clone(instance) {
      let p1, p2;
      let body = instance.body;
      if (instance.bodyUsed) {
        throw new Error("cannot clone body after it is used");
      }
      if (body instanceof Stream && typeof body.getBoundary !== "function") {
        p1 = new PassThrough();
        p2 = new PassThrough();
        body.pipe(p1);
        body.pipe(p2);
        instance[INTERNALS].body = p1;
        body = p2;
      }
      return body;
    }
    function extractContentType(body) {
      if (body === null) {
        return null;
      } else if (typeof body === "string") {
        return "text/plain;charset=UTF-8";
      } else if (isURLSearchParams(body)) {
        return "application/x-www-form-urlencoded;charset=UTF-8";
      } else if (isBlob(body)) {
        return body.type || null;
      } else if (Buffer.isBuffer(body)) {
        return null;
      } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        return null;
      } else if (ArrayBuffer.isView(body)) {
        return null;
      } else if (typeof body.getBoundary === "function") {
        return `multipart/form-data;boundary=${body.getBoundary()}`;
      } else if (body instanceof Stream) {
        return null;
      } else {
        return "text/plain;charset=UTF-8";
      }
    }
    function getTotalBytes(instance) {
      const body = instance.body;
      if (body === null) {
        return 0;
      } else if (isBlob(body)) {
        return body.size;
      } else if (Buffer.isBuffer(body)) {
        return body.length;
      } else if (body && typeof body.getLengthSync === "function") {
        if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
        body.hasKnownLength && body.hasKnownLength()) {
          return body.getLengthSync();
        }
        return null;
      } else {
        return null;
      }
    }
    function writeToStream(dest, instance) {
      const body = instance.body;
      if (body === null) {
        dest.end();
      } else if (isBlob(body)) {
        body.stream().pipe(dest);
      } else if (Buffer.isBuffer(body)) {
        dest.write(body);
        dest.end();
      } else {
        body.pipe(dest);
      }
    }
    Body.Promise = global.Promise;
    var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
    var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    function validateName(name) {
      name = `${name}`;
      if (invalidTokenRegex.test(name) || name === "") {
        throw new TypeError(`${name} is not a legal HTTP header name`);
      }
    }
    function validateValue(value) {
      value = `${value}`;
      if (invalidHeaderCharRegex.test(value)) {
        throw new TypeError(`${value} is not a legal HTTP header value`);
      }
    }
    function find(map, name) {
      name = name.toLowerCase();
      for (const key in map) {
        if (key.toLowerCase() === name) {
          return key;
        }
      }
      return void 0;
    }
    var MAP = Symbol("map");
    var Headers = class _Headers {
      /**
       * Headers class
       *
       * @param   Object  headers  Response headers
       * @return  Void
       */
      constructor() {
        let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
        this[MAP] = /* @__PURE__ */ Object.create(null);
        if (init instanceof _Headers) {
          const rawHeaders = init.raw();
          const headerNames = Object.keys(rawHeaders);
          for (const headerName of headerNames) {
            for (const value of rawHeaders[headerName]) {
              this.append(headerName, value);
            }
          }
          return;
        }
        if (init == null)
          ;
        else if (typeof init === "object") {
          const method = init[Symbol.iterator];
          if (method != null) {
            if (typeof method !== "function") {
              throw new TypeError("Header pairs must be iterable");
            }
            const pairs = [];
            for (const pair of init) {
              if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
                throw new TypeError("Each header pair must be iterable");
              }
              pairs.push(Array.from(pair));
            }
            for (const pair of pairs) {
              if (pair.length !== 2) {
                throw new TypeError("Each header pair must be a name/value tuple");
              }
              this.append(pair[0], pair[1]);
            }
          } else {
            for (const key of Object.keys(init)) {
              const value = init[key];
              this.append(key, value);
            }
          }
        } else {
          throw new TypeError("Provided initializer must be an object");
        }
      }
      /**
       * Return combined header value given name
       *
       * @param   String  name  Header name
       * @return  Mixed
       */
      get(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key === void 0) {
          return null;
        }
        return this[MAP][key].join(", ");
      }
      /**
       * Iterate over all headers
       *
       * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
       * @param   Boolean   thisArg   `this` context for callback function
       * @return  Void
       */
      forEach(callback) {
        let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
        let pairs = getHeaders(this);
        let i = 0;
        while (i < pairs.length) {
          var _pairs$i = pairs[i];
          const name = _pairs$i[0], value = _pairs$i[1];
          callback.call(thisArg, value, name, this);
          pairs = getHeaders(this);
          i++;
        }
      }
      /**
       * Overwrite header values given name
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */
      set(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        this[MAP][key !== void 0 ? key : name] = [value];
      }
      /**
       * Append a value onto existing header
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */
      append(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          this[MAP][key].push(value);
        } else {
          this[MAP][name] = [value];
        }
      }
      /**
       * Check for header name existence
       *
       * @param   String   name  Header name
       * @return  Boolean
       */
      has(name) {
        name = `${name}`;
        validateName(name);
        return find(this[MAP], name) !== void 0;
      }
      /**
       * Delete all header values given name
       *
       * @param   String  name  Header name
       * @return  Void
       */
      delete(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          delete this[MAP][key];
        }
      }
      /**
       * Return raw headers (non-spec api)
       *
       * @return  Object
       */
      raw() {
        return this[MAP];
      }
      /**
       * Get an iterator on keys.
       *
       * @return  Iterator
       */
      keys() {
        return createHeadersIterator(this, "key");
      }
      /**
       * Get an iterator on values.
       *
       * @return  Iterator
       */
      values() {
        return createHeadersIterator(this, "value");
      }
      /**
       * Get an iterator on entries.
       *
       * This is the default iterator of the Headers object.
       *
       * @return  Iterator
       */
      [Symbol.iterator]() {
        return createHeadersIterator(this, "key+value");
      }
    };
    Headers.prototype.entries = Headers.prototype[Symbol.iterator];
    Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
      value: "Headers",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Headers.prototype, {
      get: { enumerable: true },
      forEach: { enumerable: true },
      set: { enumerable: true },
      append: { enumerable: true },
      has: { enumerable: true },
      delete: { enumerable: true },
      keys: { enumerable: true },
      values: { enumerable: true },
      entries: { enumerable: true }
    });
    function getHeaders(headers) {
      let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
      const keys = Object.keys(headers[MAP]).sort();
      return keys.map(kind === "key" ? function(k) {
        return k.toLowerCase();
      } : kind === "value" ? function(k) {
        return headers[MAP][k].join(", ");
      } : function(k) {
        return [k.toLowerCase(), headers[MAP][k].join(", ")];
      });
    }
    var INTERNAL = Symbol("internal");
    function createHeadersIterator(target, kind) {
      const iterator = Object.create(HeadersIteratorPrototype);
      iterator[INTERNAL] = {
        target,
        kind,
        index: 0
      };
      return iterator;
    }
    var HeadersIteratorPrototype = Object.setPrototypeOf({
      next() {
        if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
          throw new TypeError("Value of `this` is not a HeadersIterator");
        }
        var _INTERNAL = this[INTERNAL];
        const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
        const values = getHeaders(target, kind);
        const len = values.length;
        if (index >= len) {
          return {
            value: void 0,
            done: true
          };
        }
        this[INTERNAL].index = index + 1;
        return {
          value: values[index],
          done: false
        };
      }
    }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
    Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
      value: "HeadersIterator",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function exportNodeCompatibleHeaders(headers) {
      const obj = Object.assign({ __proto__: null }, headers[MAP]);
      const hostHeaderKey = find(headers[MAP], "Host");
      if (hostHeaderKey !== void 0) {
        obj[hostHeaderKey] = obj[hostHeaderKey][0];
      }
      return obj;
    }
    function createHeadersLenient(obj) {
      const headers = new Headers();
      for (const name of Object.keys(obj)) {
        if (invalidTokenRegex.test(name)) {
          continue;
        }
        if (Array.isArray(obj[name])) {
          for (const val of obj[name]) {
            if (invalidHeaderCharRegex.test(val)) {
              continue;
            }
            if (headers[MAP][name] === void 0) {
              headers[MAP][name] = [val];
            } else {
              headers[MAP][name].push(val);
            }
          }
        } else if (!invalidHeaderCharRegex.test(obj[name])) {
          headers[MAP][name] = [obj[name]];
        }
      }
      return headers;
    }
    var INTERNALS$1 = Symbol("Response internals");
    var STATUS_CODES = http.STATUS_CODES;
    var Response = class _Response {
      constructor() {
        let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Body.call(this, body, opts);
        const status = opts.status || 200;
        const headers = new Headers(opts.headers);
        if (body != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(body);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        this[INTERNALS$1] = {
          url: opts.url,
          status,
          statusText: opts.statusText || STATUS_CODES[status],
          headers,
          counter: opts.counter
        };
      }
      get url() {
        return this[INTERNALS$1].url || "";
      }
      get status() {
        return this[INTERNALS$1].status;
      }
      /**
       * Convenience property representing if the request ended normally
       */
      get ok() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
      get redirected() {
        return this[INTERNALS$1].counter > 0;
      }
      get statusText() {
        return this[INTERNALS$1].statusText;
      }
      get headers() {
        return this[INTERNALS$1].headers;
      }
      /**
       * Clone this response
       *
       * @return  Response
       */
      clone() {
        return new _Response(clone(this), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected
        });
      }
    };
    Body.mixIn(Response.prototype);
    Object.defineProperties(Response.prototype, {
      url: { enumerable: true },
      status: { enumerable: true },
      ok: { enumerable: true },
      redirected: { enumerable: true },
      statusText: { enumerable: true },
      headers: { enumerable: true },
      clone: { enumerable: true }
    });
    Object.defineProperty(Response.prototype, Symbol.toStringTag, {
      value: "Response",
      writable: false,
      enumerable: false,
      configurable: true
    });
    var INTERNALS$2 = Symbol("Request internals");
    var URL2 = Url.URL || whatwgUrl.URL;
    var parse_url = Url.parse;
    var format_url = Url.format;
    function parseURL(urlStr) {
      if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
        urlStr = new URL2(urlStr).toString();
      }
      return parse_url(urlStr);
    }
    var streamDestructionSupported = "destroy" in Stream.Readable.prototype;
    function isRequest(input) {
      return typeof input === "object" && typeof input[INTERNALS$2] === "object";
    }
    function isAbortSignal(signal) {
      const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
      return !!(proto && proto.constructor.name === "AbortSignal");
    }
    var Request = class _Request {
      constructor(input) {
        let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        let parsedURL;
        if (!isRequest(input)) {
          if (input && input.href) {
            parsedURL = parseURL(input.href);
          } else {
            parsedURL = parseURL(`${input}`);
          }
          input = {};
        } else {
          parsedURL = parseURL(input.url);
        }
        let method = init.method || input.method || "GET";
        method = method.toUpperCase();
        if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body");
        }
        let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
        Body.call(this, inputBody, {
          timeout: init.timeout || input.timeout || 0,
          size: init.size || input.size || 0
        });
        const headers = new Headers(init.headers || input.headers || {});
        if (inputBody != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(inputBody);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ("signal" in init)
          signal = init.signal;
        if (signal != null && !isAbortSignal(signal)) {
          throw new TypeError("Expected signal to be an instanceof AbortSignal");
        }
        this[INTERNALS$2] = {
          method,
          redirect: init.redirect || input.redirect || "follow",
          headers,
          parsedURL,
          signal
        };
        this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
        this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
        this.counter = init.counter || input.counter || 0;
        this.agent = init.agent || input.agent;
      }
      get method() {
        return this[INTERNALS$2].method;
      }
      get url() {
        return format_url(this[INTERNALS$2].parsedURL);
      }
      get headers() {
        return this[INTERNALS$2].headers;
      }
      get redirect() {
        return this[INTERNALS$2].redirect;
      }
      get signal() {
        return this[INTERNALS$2].signal;
      }
      /**
       * Clone this request
       *
       * @return  Request
       */
      clone() {
        return new _Request(this);
      }
    };
    Body.mixIn(Request.prototype);
    Object.defineProperty(Request.prototype, Symbol.toStringTag, {
      value: "Request",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Request.prototype, {
      method: { enumerable: true },
      url: { enumerable: true },
      headers: { enumerable: true },
      redirect: { enumerable: true },
      clone: { enumerable: true },
      signal: { enumerable: true }
    });
    function getNodeRequestOptions(request) {
      const parsedURL = request[INTERNALS$2].parsedURL;
      const headers = new Headers(request[INTERNALS$2].headers);
      if (!headers.has("Accept")) {
        headers.set("Accept", "*/*");
      }
      if (!parsedURL.protocol || !parsedURL.hostname) {
        throw new TypeError("Only absolute URLs are supported");
      }
      if (!/^https?:$/.test(parsedURL.protocol)) {
        throw new TypeError("Only HTTP(S) protocols are supported");
      }
      if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
        throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
      }
      let contentLengthValue = null;
      if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
        contentLengthValue = "0";
      }
      if (request.body != null) {
        const totalBytes = getTotalBytes(request);
        if (typeof totalBytes === "number") {
          contentLengthValue = String(totalBytes);
        }
      }
      if (contentLengthValue) {
        headers.set("Content-Length", contentLengthValue);
      }
      if (!headers.has("User-Agent")) {
        headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
      }
      if (request.compress && !headers.has("Accept-Encoding")) {
        headers.set("Accept-Encoding", "gzip,deflate");
      }
      let agent = request.agent;
      if (typeof agent === "function") {
        agent = agent(parsedURL);
      }
      return Object.assign({}, parsedURL, {
        method: request.method,
        headers: exportNodeCompatibleHeaders(headers),
        agent
      });
    }
    function AbortError(message) {
      Error.call(this, message);
      this.type = "aborted";
      this.message = message;
      Error.captureStackTrace(this, this.constructor);
    }
    AbortError.prototype = Object.create(Error.prototype);
    AbortError.prototype.constructor = AbortError;
    AbortError.prototype.name = "AbortError";
    var URL$1 = Url.URL || whatwgUrl.URL;
    var PassThrough$1 = Stream.PassThrough;
    var isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
      const orig = new URL$1(original).hostname;
      const dest = new URL$1(destination).hostname;
      return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
    };
    var isSameProtocol = function isSameProtocol2(destination, original) {
      const orig = new URL$1(original).protocol;
      const dest = new URL$1(destination).protocol;
      return orig === dest;
    };
    function fetch(url, opts) {
      if (!fetch.Promise) {
        throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
      }
      Body.Promise = fetch.Promise;
      return new fetch.Promise(function(resolve, reject) {
        const request = new Request(url, opts);
        const options = getNodeRequestOptions(request);
        const send = (options.protocol === "https:" ? https : http).request;
        const signal = request.signal;
        let response = null;
        const abort = function abort2() {
          let error = new AbortError("The user aborted a request.");
          reject(error);
          if (request.body && request.body instanceof Stream.Readable) {
            destroyStream(request.body, error);
          }
          if (!response || !response.body)
            return;
          response.body.emit("error", error);
        };
        if (signal && signal.aborted) {
          abort();
          return;
        }
        const abortAndFinalize = function abortAndFinalize2() {
          abort();
          finalize();
        };
        const req = send(options);
        let reqTimeout;
        if (signal) {
          signal.addEventListener("abort", abortAndFinalize);
        }
        function finalize() {
          req.abort();
          if (signal)
            signal.removeEventListener("abort", abortAndFinalize);
          clearTimeout(reqTimeout);
        }
        if (request.timeout) {
          req.once("socket", function(socket) {
            reqTimeout = setTimeout(function() {
              reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
              finalize();
            }, request.timeout);
          });
        }
        req.on("error", function(err) {
          reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
          if (response && response.body) {
            destroyStream(response.body, err);
          }
          finalize();
        });
        fixResponseChunkedTransferBadEnding(req, function(err) {
          if (signal && signal.aborted) {
            return;
          }
          if (response && response.body) {
            destroyStream(response.body, err);
          }
        });
        if (parseInt(process.version.substring(1)) < 14) {
          req.on("socket", function(s) {
            s.addListener("close", function(hadError) {
              const hasDataListener = s.listenerCount("data") > 0;
              if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {
                const err = new Error("Premature close");
                err.code = "ERR_STREAM_PREMATURE_CLOSE";
                response.body.emit("error", err);
              }
            });
          });
        }
        req.on("response", function(res) {
          clearTimeout(reqTimeout);
          const headers = createHeadersLenient(res.headers);
          if (fetch.isRedirect(res.statusCode)) {
            const location = headers.get("Location");
            let locationURL = null;
            try {
              locationURL = location === null ? null : new URL$1(location, request.url).toString();
            } catch (err) {
              if (request.redirect !== "manual") {
                reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
                finalize();
                return;
              }
            }
            switch (request.redirect) {
              case "error":
                reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
                finalize();
                return;
              case "manual":
                if (locationURL !== null) {
                  try {
                    headers.set("Location", locationURL);
                  } catch (err) {
                    reject(err);
                  }
                }
                break;
              case "follow":
                if (locationURL === null) {
                  break;
                }
                if (request.counter >= request.follow) {
                  reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
                  finalize();
                  return;
                }
                const requestOpts = {
                  headers: new Headers(request.headers),
                  follow: request.follow,
                  counter: request.counter + 1,
                  agent: request.agent,
                  compress: request.compress,
                  method: request.method,
                  body: request.body,
                  signal: request.signal,
                  timeout: request.timeout,
                  size: request.size
                };
                if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
                  for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                    requestOpts.headers.delete(name);
                  }
                }
                if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                  reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                  finalize();
                  return;
                }
                if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
                  requestOpts.method = "GET";
                  requestOpts.body = void 0;
                  requestOpts.headers.delete("content-length");
                }
                resolve(fetch(new Request(locationURL, requestOpts)));
                finalize();
                return;
            }
          }
          res.once("end", function() {
            if (signal)
              signal.removeEventListener("abort", abortAndFinalize);
          });
          let body = res.pipe(new PassThrough$1());
          const response_options = {
            url: request.url,
            status: res.statusCode,
            statusText: res.statusMessage,
            headers,
            size: request.size,
            timeout: request.timeout,
            counter: request.counter
          };
          const codings = headers.get("Content-Encoding");
          if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          const zlibOptions = {
            flush: zlib.Z_SYNC_FLUSH,
            finishFlush: zlib.Z_SYNC_FLUSH
          };
          if (codings == "gzip" || codings == "x-gzip") {
            body = body.pipe(zlib.createGunzip(zlibOptions));
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          if (codings == "deflate" || codings == "x-deflate") {
            const raw = res.pipe(new PassThrough$1());
            raw.once("data", function(chunk) {
              if ((chunk[0] & 15) === 8) {
                body = body.pipe(zlib.createInflate());
              } else {
                body = body.pipe(zlib.createInflateRaw());
              }
              response = new Response(body, response_options);
              resolve(response);
            });
            raw.on("end", function() {
              if (!response) {
                response = new Response(body, response_options);
                resolve(response);
              }
            });
            return;
          }
          if (codings == "br" && typeof zlib.createBrotliDecompress === "function") {
            body = body.pipe(zlib.createBrotliDecompress());
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          response = new Response(body, response_options);
          resolve(response);
        });
        writeToStream(req, request);
      });
    }
    function fixResponseChunkedTransferBadEnding(request, errorCallback) {
      let socket;
      request.on("socket", function(s) {
        socket = s;
      });
      request.on("response", function(response) {
        const headers = response.headers;
        if (headers["transfer-encoding"] === "chunked" && !headers["content-length"]) {
          response.once("close", function(hadError) {
            const hasDataListener = socket && socket.listenerCount("data") > 0;
            if (hasDataListener && !hadError) {
              const err = new Error("Premature close");
              err.code = "ERR_STREAM_PREMATURE_CLOSE";
              errorCallback(err);
            }
          });
        }
      });
    }
    function destroyStream(stream, err) {
      if (stream.destroy) {
        stream.destroy(err);
      } else {
        stream.emit("error", err);
        stream.end();
      }
    }
    fetch.isRedirect = function(code) {
      return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
    };
    fetch.Promise = global.Promise;
    module2.exports = exports2 = fetch;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.default = exports2;
    exports2.Headers = Headers;
    exports2.Request = Request;
    exports2.Response = Response;
    exports2.FetchError = FetchError;
    exports2.AbortError = AbortError;
  }
});

// node_modules/is-stream/index.js
var require_is_stream = __commonJS({
  "node_modules/is-stream/index.js"(exports2, module2) {
    "use strict";
    var isStream = (stream) => stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
    isStream.writable = (stream) => isStream(stream) && stream.writable !== false && typeof stream._write === "function" && typeof stream._writableState === "object";
    isStream.readable = (stream) => isStream(stream) && stream.readable !== false && typeof stream._read === "function" && typeof stream._readableState === "object";
    isStream.duplex = (stream) => isStream.writable(stream) && isStream.readable(stream);
    isStream.transform = (stream) => isStream.duplex(stream) && typeof stream._transform === "function";
    module2.exports = isStream;
  }
});

// node_modules/gaxios/build/src/common.js
var require_common2 = __commonJS({
  "node_modules/gaxios/build/src/common.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultErrorRedactor = exports2.GaxiosError = void 0;
    var url_1 = require("url");
    var GaxiosError = class extends Error {
      constructor(message, config, response, error) {
        super(message);
        this.config = config;
        this.response = response;
        this.error = error;
        if (this.response) {
          try {
            this.response.data = translateData(config.responseType, response === null || response === void 0 ? void 0 : response.data);
          } catch (_a) {
          }
          this.status = this.response.status;
        }
        if (error && "code" in error && error.code) {
          this.code = error.code;
        }
        if (config.errorRedactor) {
          const errorRedactor = config.errorRedactor;
          this.config = { ...config };
          if (this.response) {
            this.response = { ...this.response, config: { ...this.response.config } };
          }
          const results = errorRedactor({ config, response });
          this.config = { ...config, ...results.config };
          if (this.response) {
            this.response = { ...this.response, ...results.response, config };
          }
        }
      }
    };
    exports2.GaxiosError = GaxiosError;
    function translateData(responseType, data) {
      switch (responseType) {
        case "stream":
          return data;
        case "json":
          return JSON.parse(JSON.stringify(data));
        case "arraybuffer":
          return JSON.parse(Buffer.from(data).toString("utf8"));
        case "blob":
          return JSON.parse(data.text());
        default:
          return data;
      }
    }
    function defaultErrorRedactor(data) {
      const REDACT = "<<REDACTED> - See `errorRedactor` option in `gaxios` for configuration>.";
      function redactHeaders(headers) {
        if (!headers)
          return;
        for (const key of Object.keys(headers)) {
          if (/^authentication$/.test(key)) {
            headers[key] = REDACT;
          }
        }
      }
      function redactString(obj, key) {
        if (typeof obj === "object" && obj !== null && typeof obj[key] === "string") {
          const text = obj[key];
          if (/grant_type=/.test(text) || /assertion=/.test(text)) {
            obj[key] = REDACT;
          }
        }
      }
      function redactObject(obj) {
        if (typeof obj === "object" && obj !== null) {
          if ("grant_type" in obj) {
            obj["grant_type"] = REDACT;
          }
          if ("assertion" in obj) {
            obj["assertion"] = REDACT;
          }
        }
      }
      if (data.config) {
        redactHeaders(data.config.headers);
        redactString(data.config, "data");
        redactObject(data.config.data);
        redactString(data.config, "body");
        redactObject(data.config.body);
        try {
          const url = new url_1.URL(data.config.url || "");
          if (url.searchParams.has("token")) {
            url.searchParams.set("token", REDACT);
          }
          data.config.url = url.toString();
        } catch (_a) {
        }
      }
      if (data.response) {
        defaultErrorRedactor({ config: data.response.config });
        redactHeaders(data.response.headers);
        redactString(data.response, "data");
        redactObject(data.response.data);
      }
      return data;
    }
    exports2.defaultErrorRedactor = defaultErrorRedactor;
  }
});

// node_modules/gaxios/build/src/retry.js
var require_retry = __commonJS({
  "node_modules/gaxios/build/src/retry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRetryConfig = void 0;
    async function getRetryConfig(err) {
      var _a;
      let config = getConfig(err);
      if (!err || !err.config || !config && !err.config.retry) {
        return { shouldRetry: false };
      }
      config = config || {};
      config.currentRetryAttempt = config.currentRetryAttempt || 0;
      config.retry = config.retry === void 0 || config.retry === null ? 3 : config.retry;
      config.httpMethodsToRetry = config.httpMethodsToRetry || [
        "GET",
        "HEAD",
        "PUT",
        "OPTIONS",
        "DELETE"
      ];
      config.noResponseRetries = config.noResponseRetries === void 0 || config.noResponseRetries === null ? 2 : config.noResponseRetries;
      const retryRanges = [
        // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
        // 1xx - Retry (Informational, request still processing)
        // 2xx - Do not retry (Success)
        // 3xx - Do not retry (Redirect)
        // 4xx - Do not retry (Client errors)
        // 429 - Retry ("Too Many Requests")
        // 5xx - Retry (Server errors)
        [100, 199],
        [429, 429],
        [500, 599]
      ];
      config.statusCodesToRetry = config.statusCodesToRetry || retryRanges;
      err.config.retryConfig = config;
      const shouldRetryFn = config.shouldRetry || shouldRetryRequest;
      if (!await shouldRetryFn(err)) {
        return { shouldRetry: false, config: err.config };
      }
      const retryDelay = config.currentRetryAttempt ? 0 : (_a = config.retryDelay) !== null && _a !== void 0 ? _a : 100;
      const delay = retryDelay + (Math.pow(2, config.currentRetryAttempt) - 1) / 2 * 1e3;
      err.config.retryConfig.currentRetryAttempt += 1;
      const backoff = config.retryBackoff ? config.retryBackoff(err, delay) : new Promise((resolve) => {
        setTimeout(resolve, delay);
      });
      if (config.onRetryAttempt) {
        config.onRetryAttempt(err);
      }
      await backoff;
      return { shouldRetry: true, config: err.config };
    }
    exports2.getRetryConfig = getRetryConfig;
    function shouldRetryRequest(err) {
      var _a;
      const config = getConfig(err);
      if (err.name === "AbortError" || ((_a = err.error) === null || _a === void 0 ? void 0 : _a.name) === "AbortError") {
        return false;
      }
      if (!config || config.retry === 0) {
        return false;
      }
      if (!err.response && (config.currentRetryAttempt || 0) >= config.noResponseRetries) {
        return false;
      }
      if (!err.config.method || config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {
        return false;
      }
      if (err.response && err.response.status) {
        let isInRange = false;
        for (const [min, max] of config.statusCodesToRetry) {
          const status = err.response.status;
          if (status >= min && status <= max) {
            isInRange = true;
            break;
          }
        }
        if (!isInRange) {
          return false;
        }
      }
      config.currentRetryAttempt = config.currentRetryAttempt || 0;
      if (config.currentRetryAttempt >= config.retry) {
        return false;
      }
      return true;
    }
    function getConfig(err) {
      if (err && err.config && err.config.retryConfig) {
        return err.config.retryConfig;
      }
      return;
    }
  }
});

// node_modules/https-proxy-agent/node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/https-proxy-agent/node_modules/ms/index.js"(exports2, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/https-proxy-agent/node_modules/debug/src/common.js
var require_common3 = __commonJS({
  "node_modules/https-proxy-agent/node_modules/debug/src/common.js"(exports2, module2) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self2 = debug;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// node_modules/https-proxy-agent/node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/https-proxy-agent/node_modules/debug/src/browser.js"(exports2, module2) {
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.storage = localstorage();
    exports2.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports2.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports2.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports2.storage.setItem("debug", namespaces);
        } else {
          exports2.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports2.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module2.exports = require_common3()(exports2);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/has-flag/index.js
var require_has_flag = __commonJS({
  "node_modules/has-flag/index.js"(exports2, module2) {
    "use strict";
    module2.exports = (flag, argv = process.argv) => {
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const position = argv.indexOf(prefix + flag);
      const terminatorPosition = argv.indexOf("--");
      return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };
  }
});

// node_modules/supports-color/index.js
var require_supports_color = __commonJS({
  "node_modules/supports-color/index.js"(exports2, module2) {
    "use strict";
    var os = require("os");
    var tty = require("tty");
    var hasFlag = require_has_flag();
    var { env } = process;
    var forceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      forceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      forceColor = 1;
    }
    if ("FORCE_COLOR" in env) {
      if (env.FORCE_COLOR === "true") {
        forceColor = 1;
      } else if (env.FORCE_COLOR === "false") {
        forceColor = 0;
      } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
      }
    }
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    function supportsColor(haveStream, streamIsTTY) {
      if (forceColor === 0) {
        return 0;
      }
      if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
        return 3;
      }
      if (hasFlag("color=256")) {
        return 2;
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env.TERM === "dumb") {
        return min;
      }
      if (process.platform === "win32") {
        const osRelease = os.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app":
            return version >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      return min;
    }
    function getSupportLevel(stream) {
      const level = supportsColor(stream, stream && stream.isTTY);
      return translateLevel(level);
    }
    module2.exports = {
      supportsColor: getSupportLevel,
      stdout: translateLevel(supportsColor(true, tty.isatty(1))),
      stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    };
  }
});

// node_modules/https-proxy-agent/node_modules/debug/src/node.js
var require_node = __commonJS({
  "node_modules/https-proxy-agent/node_modules/debug/src/node.js"(exports2, module2) {
    var tty = require("tty");
    var util = require("util");
    exports2.init = init;
    exports2.log = log;
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.destroy = util.deprecate(
      () => {
      },
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
    );
    exports2.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports2.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error) {
    }
    exports2.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === "null") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \x1B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports2.inspectOpts.hideDate) {
        return "";
      }
      return (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    function log(...args) {
      return process.stderr.write(util.format(...args) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports2.inspectOpts);
      for (let i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports2.inspectOpts[keys[i]];
      }
    }
    module2.exports = require_common3()(exports2);
    var { formatters } = module2.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// node_modules/https-proxy-agent/node_modules/debug/src/index.js
var require_src4 = __commonJS({
  "node_modules/https-proxy-agent/node_modules/debug/src/index.js"(exports2, module2) {
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module2.exports = require_browser();
    } else {
      module2.exports = require_node();
    }
  }
});

// node_modules/agent-base/dist/helpers.js
var require_helpers = __commonJS({
  "node_modules/agent-base/dist/helpers.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule)
        return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k in mod2)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k))
            __createBinding(result, mod2, k);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.req = exports2.json = exports2.toBuffer = void 0;
    var http = __importStar(require("http"));
    var https = __importStar(require("https"));
    async function toBuffer(stream) {
      let length = 0;
      const chunks = [];
      for await (const chunk of stream) {
        length += chunk.length;
        chunks.push(chunk);
      }
      return Buffer.concat(chunks, length);
    }
    exports2.toBuffer = toBuffer;
    async function json(stream) {
      const buf = await toBuffer(stream);
      const str = buf.toString("utf8");
      try {
        return JSON.parse(str);
      } catch (_err) {
        const err = _err;
        err.message += ` (input: ${str})`;
        throw err;
      }
    }
    exports2.json = json;
    function req(url, opts = {}) {
      const href = typeof url === "string" ? url : url.href;
      const req2 = (href.startsWith("https:") ? https : http).request(url, opts);
      const promise = new Promise((resolve, reject) => {
        req2.once("response", resolve).once("error", reject).end();
      });
      req2.then = promise.then.bind(promise);
      return req2;
    }
    exports2.req = req;
  }
});

// node_modules/agent-base/dist/index.js
var require_dist = __commonJS({
  "node_modules/agent-base/dist/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule)
        return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k in mod2)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k))
            __createBinding(result, mod2, k);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Agent = void 0;
    var http = __importStar(require("http"));
    __exportStar(require_helpers(), exports2);
    var INTERNAL = Symbol("AgentBaseInternalState");
    var Agent = class extends http.Agent {
      constructor(opts) {
        super(opts);
        this[INTERNAL] = {};
      }
      /**
       * Determine whether this is an `http` or `https` request.
       */
      isSecureEndpoint(options) {
        if (options) {
          if (typeof options.secureEndpoint === "boolean") {
            return options.secureEndpoint;
          }
          if (typeof options.protocol === "string") {
            return options.protocol === "https:";
          }
        }
        const { stack } = new Error();
        if (typeof stack !== "string")
          return false;
        return stack.split("\n").some((l) => l.indexOf("(https.js:") !== -1 || l.indexOf("node:https:") !== -1);
      }
      createSocket(req, options, cb) {
        const connectOpts = {
          ...options,
          secureEndpoint: this.isSecureEndpoint(options)
        };
        Promise.resolve().then(() => this.connect(req, connectOpts)).then((socket) => {
          if (socket instanceof http.Agent) {
            return socket.addRequest(req, connectOpts);
          }
          this[INTERNAL].currentSocket = socket;
          super.createSocket(req, options, cb);
        }, cb);
      }
      createConnection() {
        const socket = this[INTERNAL].currentSocket;
        this[INTERNAL].currentSocket = void 0;
        if (!socket) {
          throw new Error("No socket was returned in the `connect()` function");
        }
        return socket;
      }
      get defaultPort() {
        return this[INTERNAL].defaultPort ?? (this.protocol === "https:" ? 443 : 80);
      }
      set defaultPort(v) {
        if (this[INTERNAL]) {
          this[INTERNAL].defaultPort = v;
        }
      }
      get protocol() {
        return this[INTERNAL].protocol ?? (this.isSecureEndpoint() ? "https:" : "http:");
      }
      set protocol(v) {
        if (this[INTERNAL]) {
          this[INTERNAL].protocol = v;
        }
      }
    };
    exports2.Agent = Agent;
  }
});

// node_modules/https-proxy-agent/dist/parse-proxy-response.js
var require_parse_proxy_response = __commonJS({
  "node_modules/https-proxy-agent/dist/parse-proxy-response.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseProxyResponse = void 0;
    var debug_1 = __importDefault(require_src4());
    var debug = (0, debug_1.default)("https-proxy-agent:parse-proxy-response");
    function parseProxyResponse(socket) {
      return new Promise((resolve, reject) => {
        let buffersLength = 0;
        const buffers = [];
        function read() {
          const b = socket.read();
          if (b)
            ondata(b);
          else
            socket.once("readable", read);
        }
        function cleanup() {
          socket.removeListener("end", onend);
          socket.removeListener("error", onerror);
          socket.removeListener("readable", read);
        }
        function onend() {
          cleanup();
          debug("onend");
          reject(new Error("Proxy connection ended before receiving CONNECT response"));
        }
        function onerror(err) {
          cleanup();
          debug("onerror %o", err);
          reject(err);
        }
        function ondata(b) {
          buffers.push(b);
          buffersLength += b.length;
          const buffered = Buffer.concat(buffers, buffersLength);
          const endOfHeaders = buffered.indexOf("\r\n\r\n");
          if (endOfHeaders === -1) {
            debug("have not received end of HTTP headers yet...");
            read();
            return;
          }
          const headerParts = buffered.slice(0, endOfHeaders).toString("ascii").split("\r\n");
          const firstLine = headerParts.shift();
          if (!firstLine) {
            socket.destroy();
            return reject(new Error("No header received from proxy CONNECT response"));
          }
          const firstLineParts = firstLine.split(" ");
          const statusCode = +firstLineParts[1];
          const statusText = firstLineParts.slice(2).join(" ");
          const headers = {};
          for (const header of headerParts) {
            if (!header)
              continue;
            const firstColon = header.indexOf(":");
            if (firstColon === -1) {
              socket.destroy();
              return reject(new Error(`Invalid header from proxy CONNECT response: "${header}"`));
            }
            const key = header.slice(0, firstColon).toLowerCase();
            const value = header.slice(firstColon + 1).trimStart();
            const current = headers[key];
            if (typeof current === "string") {
              headers[key] = [current, value];
            } else if (Array.isArray(current)) {
              current.push(value);
            } else {
              headers[key] = value;
            }
          }
          debug("got proxy server response: %o %o", firstLine, headers);
          cleanup();
          resolve({
            connect: {
              statusCode,
              statusText,
              headers
            },
            buffered
          });
        }
        socket.on("error", onerror);
        socket.on("end", onend);
        read();
      });
    }
    exports2.parseProxyResponse = parseProxyResponse;
  }
});

// node_modules/https-proxy-agent/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/https-proxy-agent/dist/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule)
        return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k in mod2)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k))
            __createBinding(result, mod2, k);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpsProxyAgent = void 0;
    var net = __importStar(require("net"));
    var tls = __importStar(require("tls"));
    var assert_1 = __importDefault(require("assert"));
    var debug_1 = __importDefault(require_src4());
    var agent_base_1 = require_dist();
    var parse_proxy_response_1 = require_parse_proxy_response();
    var debug = (0, debug_1.default)("https-proxy-agent");
    var HttpsProxyAgent = class extends agent_base_1.Agent {
      constructor(proxy, opts) {
        super(opts);
        this.options = { path: void 0 };
        this.proxy = typeof proxy === "string" ? new URL(proxy) : proxy;
        this.proxyHeaders = opts?.headers ?? {};
        debug("Creating new HttpsProxyAgent instance: %o", this.proxy.href);
        const host = (this.proxy.hostname || this.proxy.host).replace(/^\[|\]$/g, "");
        const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === "https:" ? 443 : 80;
        this.connectOpts = {
          // Attempt to negotiate http/1.1 for proxy servers that support http/2
          ALPNProtocols: ["http/1.1"],
          ...opts ? omit(opts, "headers") : null,
          host,
          port
        };
      }
      /**
       * Called when the node-core HTTP client library is creating a
       * new HTTP request.
       */
      async connect(req, opts) {
        const { proxy } = this;
        if (!opts.host) {
          throw new TypeError('No "host" provided');
        }
        let socket;
        if (proxy.protocol === "https:") {
          debug("Creating `tls.Socket`: %o", this.connectOpts);
          const servername = this.connectOpts.servername || this.connectOpts.host;
          socket = tls.connect({
            ...this.connectOpts,
            servername: servername && net.isIP(servername) ? void 0 : servername
          });
        } else {
          debug("Creating `net.Socket`: %o", this.connectOpts);
          socket = net.connect(this.connectOpts);
        }
        const headers = typeof this.proxyHeaders === "function" ? this.proxyHeaders() : { ...this.proxyHeaders };
        const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;
        let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\r
`;
        if (proxy.username || proxy.password) {
          const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;
          headers["Proxy-Authorization"] = `Basic ${Buffer.from(auth).toString("base64")}`;
        }
        headers.Host = `${host}:${opts.port}`;
        if (!headers["Proxy-Connection"]) {
          headers["Proxy-Connection"] = this.keepAlive ? "Keep-Alive" : "close";
        }
        for (const name of Object.keys(headers)) {
          payload += `${name}: ${headers[name]}\r
`;
        }
        const proxyResponsePromise = (0, parse_proxy_response_1.parseProxyResponse)(socket);
        socket.write(`${payload}\r
`);
        const { connect, buffered } = await proxyResponsePromise;
        req.emit("proxyConnect", connect);
        this.emit("proxyConnect", connect, req);
        if (connect.statusCode === 200) {
          req.once("socket", resume);
          if (opts.secureEndpoint) {
            debug("Upgrading socket connection to TLS");
            const servername = opts.servername || opts.host;
            return tls.connect({
              ...omit(opts, "host", "path", "port"),
              socket,
              servername: net.isIP(servername) ? void 0 : servername
            });
          }
          return socket;
        }
        socket.destroy();
        const fakeSocket = new net.Socket({ writable: false });
        fakeSocket.readable = true;
        req.once("socket", (s) => {
          debug("Replaying proxy buffer for failed request");
          (0, assert_1.default)(s.listenerCount("data") > 0);
          s.push(buffered);
          s.push(null);
        });
        return fakeSocket;
      }
    };
    HttpsProxyAgent.protocols = ["http", "https"];
    exports2.HttpsProxyAgent = HttpsProxyAgent;
    function resume(socket) {
      socket.resume();
    }
    function omit(obj, ...keys) {
      const ret = {};
      let key;
      for (key in obj) {
        if (!keys.includes(key)) {
          ret[key] = obj[key];
        }
      }
      return ret;
    }
  }
});

// node_modules/gaxios/build/src/gaxios.js
var require_gaxios = __commonJS({
  "node_modules/gaxios/build/src/gaxios.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Gaxios = void 0;
    var extend_1 = __importDefault(require_extend());
    var https_1 = require("https");
    var node_fetch_1 = __importDefault(require_lib2());
    var querystring_1 = __importDefault(require("querystring"));
    var is_stream_1 = __importDefault(require_is_stream());
    var url_1 = require("url");
    var common_1 = require_common2();
    var retry_1 = require_retry();
    var https_proxy_agent_1 = require_dist2();
    var fetch = hasFetch() ? window.fetch : node_fetch_1.default;
    function hasWindow() {
      return typeof window !== "undefined" && !!window;
    }
    function hasFetch() {
      return hasWindow() && !!window.fetch;
    }
    function hasBuffer() {
      return typeof Buffer !== "undefined";
    }
    function hasHeader(options, header) {
      return !!getHeader(options, header);
    }
    function getHeader(options, header) {
      header = header.toLowerCase();
      for (const key of Object.keys((options === null || options === void 0 ? void 0 : options.headers) || {})) {
        if (header === key.toLowerCase()) {
          return options.headers[key];
        }
      }
      return void 0;
    }
    var HttpsProxyAgent;
    function loadProxy() {
      var _a, _b, _c, _d;
      const proxy = ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.HTTPS_PROXY) || ((_b = process === null || process === void 0 ? void 0 : process.env) === null || _b === void 0 ? void 0 : _b.https_proxy) || ((_c = process === null || process === void 0 ? void 0 : process.env) === null || _c === void 0 ? void 0 : _c.HTTP_PROXY) || ((_d = process === null || process === void 0 ? void 0 : process.env) === null || _d === void 0 ? void 0 : _d.http_proxy);
      if (proxy) {
        HttpsProxyAgent = https_proxy_agent_1.HttpsProxyAgent;
      }
      return proxy;
    }
    loadProxy();
    function skipProxy(url) {
      var _a;
      const noProxyEnv = (_a = process.env.NO_PROXY) !== null && _a !== void 0 ? _a : process.env.no_proxy;
      if (!noProxyEnv) {
        return false;
      }
      const noProxyUrls = noProxyEnv.split(",");
      const parsedURL = new url_1.URL(url);
      return !!noProxyUrls.find((url2) => {
        if (url2.startsWith("*.") || url2.startsWith(".")) {
          url2 = url2.replace(/^\*\./, ".");
          return parsedURL.hostname.endsWith(url2);
        } else {
          return url2 === parsedURL.origin || url2 === parsedURL.hostname;
        }
      });
    }
    function getProxy(url) {
      if (skipProxy(url)) {
        return void 0;
      } else {
        return loadProxy();
      }
    }
    var Gaxios = class {
      /**
       * The Gaxios class is responsible for making HTTP requests.
       * @param defaults The default set of options to be used for this instance.
       */
      constructor(defaults) {
        this.agentCache = /* @__PURE__ */ new Map();
        this.defaults = defaults || {};
      }
      /**
       * Perform an HTTP request with the given options.
       * @param opts Set of HTTP options that will be used for this HTTP request.
       */
      async request(opts = {}) {
        opts = this.validateOpts(opts);
        return this._request(opts);
      }
      async _defaultAdapter(opts) {
        const fetchImpl = opts.fetchImplementation || fetch;
        const res = await fetchImpl(opts.url, opts);
        const data = await this.getResponseData(opts, res);
        return this.translateResponse(opts, res, data);
      }
      /**
       * Internal, retryable version of the `request` method.
       * @param opts Set of HTTP options that will be used for this HTTP request.
       */
      async _request(opts = {}) {
        try {
          let translatedResponse;
          if (opts.adapter) {
            translatedResponse = await opts.adapter(opts, this._defaultAdapter.bind(this));
          } else {
            translatedResponse = await this._defaultAdapter(opts);
          }
          if (!opts.validateStatus(translatedResponse.status)) {
            if (opts.responseType === "stream") {
              let response = "";
              await new Promise((resolve) => {
                (translatedResponse === null || translatedResponse === void 0 ? void 0 : translatedResponse.data).on("data", (chunk) => {
                  response += chunk;
                });
                (translatedResponse === null || translatedResponse === void 0 ? void 0 : translatedResponse.data).on("end", resolve);
              });
              translatedResponse.data = response;
            }
            throw new common_1.GaxiosError(`Request failed with status code ${translatedResponse.status}`, opts, translatedResponse);
          }
          return translatedResponse;
        } catch (e) {
          const err = e instanceof common_1.GaxiosError ? e : new common_1.GaxiosError(e.message, opts, void 0, e);
          const { shouldRetry, config } = await (0, retry_1.getRetryConfig)(err);
          if (shouldRetry && config) {
            err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;
            return this._request(err.config);
          }
          throw err;
        }
      }
      async getResponseData(opts, res) {
        switch (opts.responseType) {
          case "stream":
            return res.body;
          case "json": {
            let data = await res.text();
            try {
              data = JSON.parse(data);
            } catch (_a) {
            }
            return data;
          }
          case "arraybuffer":
            return res.arrayBuffer();
          case "blob":
            return res.blob();
          case "text":
            return res.text();
          default:
            return this.getResponseDataFromContentType(res);
        }
      }
      /**
       * Validates the options, and merges them with defaults.
       * @param opts The original options passed from the client.
       */
      validateOpts(options) {
        const opts = (0, extend_1.default)(true, {}, this.defaults, options);
        if (!opts.url) {
          throw new Error("URL is required.");
        }
        const baseUrl = opts.baseUrl || opts.baseURL;
        if (baseUrl) {
          opts.url = baseUrl + opts.url;
        }
        opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;
        if (opts.params && Object.keys(opts.params).length > 0) {
          let additionalQueryParams = opts.paramsSerializer(opts.params);
          if (additionalQueryParams.startsWith("?")) {
            additionalQueryParams = additionalQueryParams.slice(1);
          }
          const prefix = opts.url.includes("?") ? "&" : "?";
          opts.url = opts.url + prefix + additionalQueryParams;
        }
        if (typeof options.maxContentLength === "number") {
          opts.size = options.maxContentLength;
        }
        if (typeof options.maxRedirects === "number") {
          opts.follow = options.maxRedirects;
        }
        opts.headers = opts.headers || {};
        if (opts.data) {
          const isFormData = typeof FormData === "undefined" ? false : (opts === null || opts === void 0 ? void 0 : opts.data) instanceof FormData;
          if (is_stream_1.default.readable(opts.data)) {
            opts.body = opts.data;
          } else if (hasBuffer() && Buffer.isBuffer(opts.data)) {
            opts.body = opts.data;
            if (!hasHeader(opts, "Content-Type")) {
              opts.headers["Content-Type"] = "application/json";
            }
          } else if (typeof opts.data === "object") {
            if (!isFormData) {
              if (getHeader(opts, "content-type") === "application/x-www-form-urlencoded") {
                opts.body = opts.paramsSerializer(opts.data);
              } else {
                if (!hasHeader(opts, "Content-Type")) {
                  opts.headers["Content-Type"] = "application/json";
                }
                opts.body = JSON.stringify(opts.data);
              }
            }
          } else {
            opts.body = opts.data;
          }
        }
        opts.validateStatus = opts.validateStatus || this.validateStatus;
        opts.responseType = opts.responseType || "unknown";
        if (!opts.headers["Accept"] && opts.responseType === "json") {
          opts.headers["Accept"] = "application/json";
        }
        opts.method = opts.method || "GET";
        const proxy = getProxy(opts.url);
        if (proxy) {
          if (this.agentCache.has(proxy)) {
            opts.agent = this.agentCache.get(proxy);
          } else {
            if (opts.cert && opts.key) {
              const parsedURL = new url_1.URL(proxy);
              opts.agent = new HttpsProxyAgent({
                port: parsedURL.port,
                host: parsedURL.host,
                protocol: parsedURL.protocol,
                cert: opts.cert,
                key: opts.key
              });
            } else {
              opts.agent = new HttpsProxyAgent(proxy);
            }
            this.agentCache.set(proxy, opts.agent);
          }
        } else if (opts.cert && opts.key) {
          if (this.agentCache.has(opts.key)) {
            opts.agent = this.agentCache.get(opts.key);
          } else {
            opts.agent = new https_1.Agent({
              cert: opts.cert,
              key: opts.key
            });
            this.agentCache.set(opts.key, opts.agent);
          }
        }
        if (typeof opts.errorRedactor !== "function" && opts.errorRedactor !== false) {
          opts.errorRedactor = common_1.defaultErrorRedactor;
        }
        return opts;
      }
      /**
       * By default, throw for any non-2xx status code
       * @param status status code from the HTTP response
       */
      validateStatus(status) {
        return status >= 200 && status < 300;
      }
      /**
       * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)
       * @param params key value pars to encode
       */
      paramsSerializer(params) {
        return querystring_1.default.stringify(params);
      }
      translateResponse(opts, res, data) {
        const headers = {};
        res.headers.forEach((value, key) => {
          headers[key] = value;
        });
        return {
          config: opts,
          data,
          headers,
          status: res.status,
          statusText: res.statusText,
          // XMLHttpRequestLike
          request: {
            responseURL: res.url
          }
        };
      }
      /**
       * Attempts to parse a response by looking at the Content-Type header.
       * @param {FetchResponse} response the HTTP response.
       * @returns {Promise<any>} a promise that resolves to the response data.
       */
      async getResponseDataFromContentType(response) {
        let contentType = response.headers.get("Content-Type");
        if (contentType === null) {
          return response.text();
        }
        contentType = contentType.toLowerCase();
        if (contentType.includes("application/json")) {
          let data = await response.text();
          try {
            data = JSON.parse(data);
          } catch (_a) {
          }
          return data;
        } else if (contentType.includes("text/plain") || contentType.includes("text/html")) {
          return response.text();
        } else {
          return response.blob();
        }
      }
    };
    exports2.Gaxios = Gaxios;
  }
});

// node_modules/gaxios/build/src/index.js
var require_src5 = __commonJS({
  "node_modules/gaxios/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.request = exports2.instance = exports2.Gaxios = exports2.GaxiosError = void 0;
    var gaxios_1 = require_gaxios();
    Object.defineProperty(exports2, "Gaxios", { enumerable: true, get: function() {
      return gaxios_1.Gaxios;
    } });
    var common_1 = require_common2();
    Object.defineProperty(exports2, "GaxiosError", { enumerable: true, get: function() {
      return common_1.GaxiosError;
    } });
    exports2.instance = new gaxios_1.Gaxios();
    async function request(opts) {
      return exports2.instance.request(opts);
    }
    exports2.request = request;
  }
});

// node_modules/bignumber.js/bignumber.js
var require_bignumber = __commonJS({
  "node_modules/bignumber.js/bignumber.js"(exports2, module2) {
    (function(globalObject) {
      "use strict";
      var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], SQRT_BASE = 1e7, MAX = 1e9;
      function clone(configObject) {
        var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
          prefix: "",
          groupSize: 3,
          secondaryGroupSize: 0,
          groupSeparator: ",",
          decimalSeparator: ".",
          fractionGroupSize: 0,
          fractionGroupSeparator: "\xA0",
          // non-breaking space
          suffix: ""
        }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
        function BigNumber2(v, b) {
          var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
          if (!(x instanceof BigNumber2))
            return new BigNumber2(v, b);
          if (b == null) {
            if (v && v._isBigNumber === true) {
              x.s = v.s;
              if (!v.c || v.e > MAX_EXP) {
                x.c = x.e = null;
              } else if (v.e < MIN_EXP) {
                x.c = [x.e = 0];
              } else {
                x.e = v.e;
                x.c = v.c.slice();
              }
              return;
            }
            if ((isNum = typeof v == "number") && v * 0 == 0) {
              x.s = 1 / v < 0 ? (v = -v, -1) : 1;
              if (v === ~~v) {
                for (e = 0, i = v; i >= 10; i /= 10, e++)
                  ;
                if (e > MAX_EXP) {
                  x.c = x.e = null;
                } else {
                  x.e = e;
                  x.c = [v];
                }
                return;
              }
              str = String(v);
            } else {
              if (!isNumeric.test(str = String(v)))
                return parseNumeric(x, str, isNum);
              x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
            }
            if ((e = str.indexOf(".")) > -1)
              str = str.replace(".", "");
            if ((i = str.search(/e/i)) > 0) {
              if (e < 0)
                e = i;
              e += +str.slice(i + 1);
              str = str.substring(0, i);
            } else if (e < 0) {
              e = str.length;
            }
          } else {
            intCheck(b, 2, ALPHABET.length, "Base");
            if (b == 10 && alphabetHasNormalDecimalDigits) {
              x = new BigNumber2(v);
              return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
            }
            str = String(v);
            if (isNum = typeof v == "number") {
              if (v * 0 != 0)
                return parseNumeric(x, str, isNum, b);
              x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
              if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
                throw Error(tooManyDigits + v);
              }
            } else {
              x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
            }
            alphabet = ALPHABET.slice(0, b);
            e = i = 0;
            for (len = str.length; i < len; i++) {
              if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                if (c == ".") {
                  if (i > e) {
                    e = len;
                    continue;
                  }
                } else if (!caseChanged) {
                  if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                    caseChanged = true;
                    i = -1;
                    e = 0;
                    continue;
                  }
                }
                return parseNumeric(x, String(v), isNum, b);
              }
            }
            isNum = false;
            str = convertBase(str, b, 10, x.s);
            if ((e = str.indexOf(".")) > -1)
              str = str.replace(".", "");
            else
              e = str.length;
          }
          for (i = 0; str.charCodeAt(i) === 48; i++)
            ;
          for (len = str.length; str.charCodeAt(--len) === 48; )
            ;
          if (str = str.slice(i, ++len)) {
            len -= i;
            if (isNum && BigNumber2.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
              throw Error(tooManyDigits + x.s * v);
            }
            if ((e = e - i - 1) > MAX_EXP) {
              x.c = x.e = null;
            } else if (e < MIN_EXP) {
              x.c = [x.e = 0];
            } else {
              x.e = e;
              x.c = [];
              i = (e + 1) % LOG_BASE;
              if (e < 0)
                i += LOG_BASE;
              if (i < len) {
                if (i)
                  x.c.push(+str.slice(0, i));
                for (len -= LOG_BASE; i < len; ) {
                  x.c.push(+str.slice(i, i += LOG_BASE));
                }
                i = LOG_BASE - (str = str.slice(i)).length;
              } else {
                i -= len;
              }
              for (; i--; str += "0")
                ;
              x.c.push(+str);
            }
          } else {
            x.c = [x.e = 0];
          }
        }
        BigNumber2.clone = clone;
        BigNumber2.ROUND_UP = 0;
        BigNumber2.ROUND_DOWN = 1;
        BigNumber2.ROUND_CEIL = 2;
        BigNumber2.ROUND_FLOOR = 3;
        BigNumber2.ROUND_HALF_UP = 4;
        BigNumber2.ROUND_HALF_DOWN = 5;
        BigNumber2.ROUND_HALF_EVEN = 6;
        BigNumber2.ROUND_HALF_CEIL = 7;
        BigNumber2.ROUND_HALF_FLOOR = 8;
        BigNumber2.EUCLID = 9;
        BigNumber2.config = BigNumber2.set = function(obj) {
          var p, v;
          if (obj != null) {
            if (typeof obj == "object") {
              if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                DECIMAL_PLACES = v;
              }
              if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
                v = obj[p];
                intCheck(v, 0, 8, p);
                ROUNDING_MODE = v;
              }
              if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, 0, p);
                  intCheck(v[1], 0, MAX, p);
                  TO_EXP_NEG = v[0];
                  TO_EXP_POS = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                }
              }
              if (obj.hasOwnProperty(p = "RANGE")) {
                v = obj[p];
                if (v && v.pop) {
                  intCheck(v[0], -MAX, -1, p);
                  intCheck(v[1], 1, MAX, p);
                  MIN_EXP = v[0];
                  MAX_EXP = v[1];
                } else {
                  intCheck(v, -MAX, MAX, p);
                  if (v) {
                    MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                  } else {
                    throw Error(bignumberError + p + " cannot be zero: " + v);
                  }
                }
              }
              if (obj.hasOwnProperty(p = "CRYPTO")) {
                v = obj[p];
                if (v === !!v) {
                  if (v) {
                    if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                      CRYPTO = v;
                    } else {
                      CRYPTO = !v;
                      throw Error(bignumberError + "crypto unavailable");
                    }
                  } else {
                    CRYPTO = v;
                  }
                } else {
                  throw Error(bignumberError + p + " not true or false: " + v);
                }
              }
              if (obj.hasOwnProperty(p = "MODULO_MODE")) {
                v = obj[p];
                intCheck(v, 0, 9, p);
                MODULO_MODE = v;
              }
              if (obj.hasOwnProperty(p = "POW_PRECISION")) {
                v = obj[p];
                intCheck(v, 0, MAX, p);
                POW_PRECISION = v;
              }
              if (obj.hasOwnProperty(p = "FORMAT")) {
                v = obj[p];
                if (typeof v == "object")
                  FORMAT = v;
                else
                  throw Error(bignumberError + p + " not an object: " + v);
              }
              if (obj.hasOwnProperty(p = "ALPHABET")) {
                v = obj[p];
                if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
                  alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
                  ALPHABET = v;
                } else {
                  throw Error(bignumberError + p + " invalid: " + v);
                }
              }
            } else {
              throw Error(bignumberError + "Object expected: " + obj);
            }
          }
          return {
            DECIMAL_PLACES,
            ROUNDING_MODE,
            EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
            RANGE: [MIN_EXP, MAX_EXP],
            CRYPTO,
            MODULO_MODE,
            POW_PRECISION,
            FORMAT,
            ALPHABET
          };
        };
        BigNumber2.isBigNumber = function(v) {
          if (!v || v._isBigNumber !== true)
            return false;
          if (!BigNumber2.DEBUG)
            return true;
          var i, n, c = v.c, e = v.e, s = v.s;
          out:
            if ({}.toString.call(c) == "[object Array]") {
              if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
                if (c[0] === 0) {
                  if (e === 0 && c.length === 1)
                    return true;
                  break out;
                }
                i = (e + 1) % LOG_BASE;
                if (i < 1)
                  i += LOG_BASE;
                if (String(c[0]).length == i) {
                  for (i = 0; i < c.length; i++) {
                    n = c[i];
                    if (n < 0 || n >= BASE || n !== mathfloor(n))
                      break out;
                  }
                  if (n !== 0)
                    return true;
                }
              }
            } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
              return true;
            }
          throw Error(bignumberError + "Invalid BigNumber: " + v);
        };
        BigNumber2.maximum = BigNumber2.max = function() {
          return maxOrMin(arguments, -1);
        };
        BigNumber2.minimum = BigNumber2.min = function() {
          return maxOrMin(arguments, 1);
        };
        BigNumber2.random = function() {
          var pow2_53 = 9007199254740992;
          var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
            return mathfloor(Math.random() * pow2_53);
          } : function() {
            return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
          };
          return function(dp) {
            var a, b, e, k, v, i = 0, c = [], rand = new BigNumber2(ONE);
            if (dp == null)
              dp = DECIMAL_PLACES;
            else
              intCheck(dp, 0, MAX);
            k = mathceil(dp / LOG_BASE);
            if (CRYPTO) {
              if (crypto.getRandomValues) {
                a = crypto.getRandomValues(new Uint32Array(k *= 2));
                for (; i < k; ) {
                  v = a[i] * 131072 + (a[i + 1] >>> 11);
                  if (v >= 9e15) {
                    b = crypto.getRandomValues(new Uint32Array(2));
                    a[i] = b[0];
                    a[i + 1] = b[1];
                  } else {
                    c.push(v % 1e14);
                    i += 2;
                  }
                }
                i = k / 2;
              } else if (crypto.randomBytes) {
                a = crypto.randomBytes(k *= 7);
                for (; i < k; ) {
                  v = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                  if (v >= 9e15) {
                    crypto.randomBytes(7).copy(a, i);
                  } else {
                    c.push(v % 1e14);
                    i += 7;
                  }
                }
                i = k / 7;
              } else {
                CRYPTO = false;
                throw Error(bignumberError + "crypto unavailable");
              }
            }
            if (!CRYPTO) {
              for (; i < k; ) {
                v = random53bitInt();
                if (v < 9e15)
                  c[i++] = v % 1e14;
              }
            }
            k = c[--i];
            dp %= LOG_BASE;
            if (k && dp) {
              v = POWS_TEN[LOG_BASE - dp];
              c[i] = mathfloor(k / v) * v;
            }
            for (; c[i] === 0; c.pop(), i--)
              ;
            if (i < 0) {
              c = [e = 0];
            } else {
              for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE)
                ;
              for (i = 1, v = c[0]; v >= 10; v /= 10, i++)
                ;
              if (i < LOG_BASE)
                e -= LOG_BASE - i;
            }
            rand.e = e;
            rand.c = c;
            return rand;
          };
        }();
        BigNumber2.sum = function() {
          var i = 1, args = arguments, sum = new BigNumber2(args[0]);
          for (; i < args.length; )
            sum = sum.plus(args[i++]);
          return sum;
        };
        convertBase = function() {
          var decimal = "0123456789";
          function toBaseOut(str, baseIn, baseOut, alphabet) {
            var j, arr = [0], arrL, i = 0, len = str.length;
            for (; i < len; ) {
              for (arrL = arr.length; arrL--; arr[arrL] *= baseIn)
                ;
              arr[0] += alphabet.indexOf(str.charAt(i++));
              for (j = 0; j < arr.length; j++) {
                if (arr[j] > baseOut - 1) {
                  if (arr[j + 1] == null)
                    arr[j + 1] = 0;
                  arr[j + 1] += arr[j] / baseOut | 0;
                  arr[j] %= baseOut;
                }
              }
            }
            return arr.reverse();
          }
          return function(str, baseIn, baseOut, sign, callerIsToString) {
            var alphabet, d, e, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
            if (i >= 0) {
              k = POW_PRECISION;
              POW_PRECISION = 0;
              str = str.replace(".", "");
              y = new BigNumber2(baseIn);
              x = y.pow(str.length - i);
              POW_PRECISION = k;
              y.c = toBaseOut(
                toFixedPoint(coeffToString(x.c), x.e, "0"),
                10,
                baseOut,
                decimal
              );
              y.e = y.c.length;
            }
            xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
            e = k = xc.length;
            for (; xc[--k] == 0; xc.pop())
              ;
            if (!xc[0])
              return alphabet.charAt(0);
            if (i < 0) {
              --e;
            } else {
              x.c = xc;
              x.e = e;
              x.s = sign;
              x = div(x, y, dp, rm, baseOut);
              xc = x.c;
              r = x.r;
              e = x.e;
            }
            d = e + dp + 1;
            i = xc[d];
            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;
            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
            if (d < 1 || !xc[0]) {
              str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
            } else {
              xc.length = d;
              if (r) {
                for (--baseOut; ++xc[--d] > baseOut; ) {
                  xc[d] = 0;
                  if (!d) {
                    ++e;
                    xc = [1].concat(xc);
                  }
                }
              }
              for (k = xc.length; !xc[--k]; )
                ;
              for (i = 0, str = ""; i <= k; str += alphabet.charAt(xc[i++]))
                ;
              str = toFixedPoint(str, e, alphabet.charAt(0));
            }
            return str;
          };
        }();
        div = function() {
          function multiply(x, k, base) {
            var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
            for (x = x.slice(); i--; ) {
              xlo = x[i] % SQRT_BASE;
              xhi = x[i] / SQRT_BASE | 0;
              m = khi * xlo + xhi * klo;
              temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
              carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
              x[i] = temp % base;
            }
            if (carry)
              x = [carry].concat(x);
            return x;
          }
          function compare2(a, b, aL, bL) {
            var i, cmp;
            if (aL != bL) {
              cmp = aL > bL ? 1 : -1;
            } else {
              for (i = cmp = 0; i < aL; i++) {
                if (a[i] != b[i]) {
                  cmp = a[i] > b[i] ? 1 : -1;
                  break;
                }
              }
            }
            return cmp;
          }
          function subtract(a, b, aL, base) {
            var i = 0;
            for (; aL--; ) {
              a[aL] -= i;
              i = a[aL] < b[aL] ? 1 : 0;
              a[aL] = i * base + a[aL] - b[aL];
            }
            for (; !a[0] && a.length > 1; a.splice(0, 1))
              ;
          }
          return function(x, y, dp, rm, base) {
            var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
            if (!xc || !xc[0] || !yc || !yc[0]) {
              return new BigNumber2(
                // Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
                  // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                  xc && xc[0] == 0 || !yc ? s * 0 : s / 0
                )
              );
            }
            q = new BigNumber2(s);
            qc = q.c = [];
            e = x.e - y.e;
            s = dp + e + 1;
            if (!base) {
              base = BASE;
              e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
              s = s / LOG_BASE | 0;
            }
            for (i = 0; yc[i] == (xc[i] || 0); i++)
              ;
            if (yc[i] > (xc[i] || 0))
              e--;
            if (s < 0) {
              qc.push(1);
              more = true;
            } else {
              xL = xc.length;
              yL = yc.length;
              i = 0;
              s += 2;
              n = mathfloor(base / (yc[0] + 1));
              if (n > 1) {
                yc = multiply(yc, n, base);
                xc = multiply(xc, n, base);
                yL = yc.length;
                xL = xc.length;
              }
              xi = yL;
              rem = xc.slice(0, yL);
              remL = rem.length;
              for (; remL < yL; rem[remL++] = 0)
                ;
              yz = yc.slice();
              yz = [0].concat(yz);
              yc0 = yc[0];
              if (yc[1] >= base / 2)
                yc0++;
              do {
                n = 0;
                cmp = compare2(yc, rem, yL, remL);
                if (cmp < 0) {
                  rem0 = rem[0];
                  if (yL != remL)
                    rem0 = rem0 * base + (rem[1] || 0);
                  n = mathfloor(rem0 / yc0);
                  if (n > 1) {
                    if (n >= base)
                      n = base - 1;
                    prod = multiply(yc, n, base);
                    prodL = prod.length;
                    remL = rem.length;
                    while (compare2(prod, rem, prodL, remL) == 1) {
                      n--;
                      subtract(prod, yL < prodL ? yz : yc, prodL, base);
                      prodL = prod.length;
                      cmp = 1;
                    }
                  } else {
                    if (n == 0) {
                      cmp = n = 1;
                    }
                    prod = yc.slice();
                    prodL = prod.length;
                  }
                  if (prodL < remL)
                    prod = [0].concat(prod);
                  subtract(rem, prod, remL, base);
                  remL = rem.length;
                  if (cmp == -1) {
                    while (compare2(yc, rem, yL, remL) < 1) {
                      n++;
                      subtract(rem, yL < remL ? yz : yc, remL, base);
                      remL = rem.length;
                    }
                  }
                } else if (cmp === 0) {
                  n++;
                  rem = [0];
                }
                qc[i++] = n;
                if (rem[0]) {
                  rem[remL++] = xc[xi] || 0;
                } else {
                  rem = [xc[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] != null) && s--);
              more = rem[0] != null;
              if (!qc[0])
                qc.splice(0, 1);
            }
            if (base == BASE) {
              for (i = 1, s = qc[0]; s >= 10; s /= 10, i++)
                ;
              round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
            } else {
              q.e = e;
              q.r = +more;
            }
            return q;
          };
        }();
        function format(n, i, rm, id) {
          var c0, e, ne, len, str;
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          if (!n.c)
            return n.toString();
          c0 = n.c[0];
          ne = n.e;
          if (i == null) {
            str = coeffToString(n.c);
            str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
          } else {
            n = round(new BigNumber2(n), i, rm);
            e = n.e;
            str = coeffToString(n.c);
            len = str.length;
            if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
              for (; len < i; str += "0", len++)
                ;
              str = toExponential(str, e);
            } else {
              i -= ne;
              str = toFixedPoint(str, e, "0");
              if (e + 1 > len) {
                if (--i > 0)
                  for (str += "."; i--; str += "0")
                    ;
              } else {
                i += e - len;
                if (i > 0) {
                  if (e + 1 == len)
                    str += ".";
                  for (; i--; str += "0")
                    ;
                }
              }
            }
          }
          return n.s < 0 && c0 ? "-" + str : str;
        }
        function maxOrMin(args, n) {
          var k, y, i = 1, x = new BigNumber2(args[0]);
          for (; i < args.length; i++) {
            y = new BigNumber2(args[i]);
            if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
              x = y;
            }
          }
          return x;
        }
        function normalise(n, c, e) {
          var i = 1, j = c.length;
          for (; !c[--j]; c.pop())
            ;
          for (j = c[0]; j >= 10; j /= 10, i++)
            ;
          if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
            n.c = n.e = null;
          } else if (e < MIN_EXP) {
            n.c = [n.e = 0];
          } else {
            n.e = e;
            n.c = c;
          }
          return n;
        }
        parseNumeric = function() {
          var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
          return function(x, str, isNum, b) {
            var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
            if (isInfinityOrNaN.test(s)) {
              x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
            } else {
              if (!isNum) {
                s = s.replace(basePrefix, function(m, p1, p2) {
                  base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                  return !b || b == base ? p1 : m;
                });
                if (b) {
                  base = b;
                  s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
                }
                if (str != s)
                  return new BigNumber2(s, base);
              }
              if (BigNumber2.DEBUG) {
                throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
              }
              x.s = null;
            }
            x.c = x.e = null;
          };
        }();
        function round(x, sd, rm, r) {
          var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
          if (xc) {
            out: {
              for (d = 1, k = xc[0]; k >= 10; k /= 10, d++)
                ;
              i = sd - d;
              if (i < 0) {
                i += LOG_BASE;
                j = sd;
                n = xc[ni = 0];
                rd = mathfloor(n / pows10[d - j - 1] % 10);
              } else {
                ni = mathceil((i + 1) / LOG_BASE);
                if (ni >= xc.length) {
                  if (r) {
                    for (; xc.length <= ni; xc.push(0))
                      ;
                    n = rd = 0;
                    d = 1;
                    i %= LOG_BASE;
                    j = i - LOG_BASE + 1;
                  } else {
                    break out;
                  }
                } else {
                  n = k = xc[ni];
                  for (d = 1; k >= 10; k /= 10, d++)
                    ;
                  i %= LOG_BASE;
                  j = i - LOG_BASE + d;
                  rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
                }
              }
              r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
              // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
              // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
              xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
              r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
              (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
              if (sd < 1 || !xc[0]) {
                xc.length = 0;
                if (r) {
                  sd -= x.e + 1;
                  xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                  x.e = -sd || 0;
                } else {
                  xc[0] = x.e = 0;
                }
                return x;
              }
              if (i == 0) {
                xc.length = ni;
                k = 1;
                ni--;
              } else {
                xc.length = ni + 1;
                k = pows10[LOG_BASE - i];
                xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
              }
              if (r) {
                for (; ; ) {
                  if (ni == 0) {
                    for (i = 1, j = xc[0]; j >= 10; j /= 10, i++)
                      ;
                    j = xc[0] += k;
                    for (k = 1; j >= 10; j /= 10, k++)
                      ;
                    if (i != k) {
                      x.e++;
                      if (xc[0] == BASE)
                        xc[0] = 1;
                    }
                    break;
                  } else {
                    xc[ni] += k;
                    if (xc[ni] != BASE)
                      break;
                    xc[ni--] = 0;
                    k = 1;
                  }
                }
              }
              for (i = xc.length; xc[--i] === 0; xc.pop())
                ;
            }
            if (x.e > MAX_EXP) {
              x.c = x.e = null;
            } else if (x.e < MIN_EXP) {
              x.c = [x.e = 0];
            }
          }
          return x;
        }
        function valueOf(n) {
          var str, e = n.e;
          if (e === null)
            return n.toString();
          str = coeffToString(n.c);
          str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
          return n.s < 0 ? "-" + str : str;
        }
        P.absoluteValue = P.abs = function() {
          var x = new BigNumber2(this);
          if (x.s < 0)
            x.s = 1;
          return x;
        };
        P.comparedTo = function(y, b) {
          return compare(this, new BigNumber2(y, b));
        };
        P.decimalPlaces = P.dp = function(dp, rm) {
          var c, n, v, x = this;
          if (dp != null) {
            intCheck(dp, 0, MAX);
            if (rm == null)
              rm = ROUNDING_MODE;
            else
              intCheck(rm, 0, 8);
            return round(new BigNumber2(x), dp + x.e + 1, rm);
          }
          if (!(c = x.c))
            return null;
          n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
          if (v = c[v])
            for (; v % 10 == 0; v /= 10, n--)
              ;
          if (n < 0)
            n = 0;
          return n;
        };
        P.dividedBy = P.div = function(y, b) {
          return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        P.dividedToIntegerBy = P.idiv = function(y, b) {
          return div(this, new BigNumber2(y, b), 0, 1);
        };
        P.exponentiatedBy = P.pow = function(n, m) {
          var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
          n = new BigNumber2(n);
          if (n.c && !n.isInteger()) {
            throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
          }
          if (m != null)
            m = new BigNumber2(m);
          nIsBig = n.e > 14;
          if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
            y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
            return m ? y.mod(m) : y;
          }
          nIsNeg = n.s < 0;
          if (m) {
            if (m.c ? !m.c[0] : !m.s)
              return new BigNumber2(NaN);
            isModExp = !nIsNeg && x.isInteger() && m.isInteger();
            if (isModExp)
              x = x.mod(m);
          } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
            k = x.s < 0 && isOdd(n) ? -0 : 0;
            if (x.e > -1)
              k = 1 / k;
            return new BigNumber2(nIsNeg ? 1 / k : k);
          } else if (POW_PRECISION) {
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
          }
          if (nIsBig) {
            half = new BigNumber2(0.5);
            if (nIsNeg)
              n.s = 1;
            nIsOdd = isOdd(n);
          } else {
            i = Math.abs(+valueOf(n));
            nIsOdd = i % 2;
          }
          y = new BigNumber2(ONE);
          for (; ; ) {
            if (nIsOdd) {
              y = y.times(x);
              if (!y.c)
                break;
              if (k) {
                if (y.c.length > k)
                  y.c.length = k;
              } else if (isModExp) {
                y = y.mod(m);
              }
            }
            if (i) {
              i = mathfloor(i / 2);
              if (i === 0)
                break;
              nIsOdd = i % 2;
            } else {
              n = n.times(half);
              round(n, n.e + 1, 1);
              if (n.e > 14) {
                nIsOdd = isOdd(n);
              } else {
                i = +valueOf(n);
                if (i === 0)
                  break;
                nIsOdd = i % 2;
              }
            }
            x = x.times(x);
            if (k) {
              if (x.c && x.c.length > k)
                x.c.length = k;
            } else if (isModExp) {
              x = x.mod(m);
            }
          }
          if (isModExp)
            return y;
          if (nIsNeg)
            y = ONE.div(y);
          return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
        P.integerValue = function(rm) {
          var n = new BigNumber2(this);
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          return round(n, n.e + 1, rm);
        };
        P.isEqualTo = P.eq = function(y, b) {
          return compare(this, new BigNumber2(y, b)) === 0;
        };
        P.isFinite = function() {
          return !!this.c;
        };
        P.isGreaterThan = P.gt = function(y, b) {
          return compare(this, new BigNumber2(y, b)) > 0;
        };
        P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
          return (b = compare(this, new BigNumber2(y, b))) === 1 || b === 0;
        };
        P.isInteger = function() {
          return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        P.isLessThan = P.lt = function(y, b) {
          return compare(this, new BigNumber2(y, b)) < 0;
        };
        P.isLessThanOrEqualTo = P.lte = function(y, b) {
          return (b = compare(this, new BigNumber2(y, b))) === -1 || b === 0;
        };
        P.isNaN = function() {
          return !this.s;
        };
        P.isNegative = function() {
          return this.s < 0;
        };
        P.isPositive = function() {
          return this.s > 0;
        };
        P.isZero = function() {
          return !!this.c && this.c[0] == 0;
        };
        P.minus = function(y, b) {
          var i, j, t, xLTy, x = this, a = x.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b)
            return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x.plus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc)
              return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
            if (!xc[0] || !yc[0]) {
              return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : (
                // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0
              ));
            }
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (xLTy = a < 0) {
              a = -a;
              t = xc;
            } else {
              ye = xe;
              t = yc;
            }
            t.reverse();
            for (b = a; b--; t.push(0))
              ;
            t.reverse();
          } else {
            j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
            for (a = b = 0; b < j; b++) {
              if (xc[b] != yc[b]) {
                xLTy = xc[b] < yc[b];
                break;
              }
            }
          }
          if (xLTy) {
            t = xc;
            xc = yc;
            yc = t;
            y.s = -y.s;
          }
          b = (j = yc.length) - (i = xc.length);
          if (b > 0)
            for (; b--; xc[i++] = 0)
              ;
          b = BASE - 1;
          for (; j > a; ) {
            if (xc[--j] < yc[j]) {
              for (i = j; i && !xc[--i]; xc[i] = b)
                ;
              --xc[i];
              xc[j] += BASE;
            }
            xc[j] -= yc[j];
          }
          for (; xc[0] == 0; xc.splice(0, 1), --ye)
            ;
          if (!xc[0]) {
            y.s = ROUNDING_MODE == 3 ? -1 : 1;
            y.c = [y.e = 0];
            return y;
          }
          return normalise(y, xc, ye);
        };
        P.modulo = P.mod = function(y, b) {
          var q, s, x = this;
          y = new BigNumber2(y, b);
          if (!x.c || !y.s || y.c && !y.c[0]) {
            return new BigNumber2(NaN);
          } else if (!y.c || x.c && !x.c[0]) {
            return new BigNumber2(x);
          }
          if (MODULO_MODE == 9) {
            s = y.s;
            y.s = 1;
            q = div(x, y, 0, 3);
            y.s = s;
            q.s *= s;
          } else {
            q = div(x, y, 0, MODULO_MODE);
          }
          y = x.minus(q.times(y));
          if (!y.c[0] && MODULO_MODE == 1)
            y.s = x.s;
          return y;
        };
        P.multipliedBy = P.times = function(y, b) {
          var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
          if (!xc || !yc || !xc[0] || !yc[0]) {
            if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
              y.c = y.e = y.s = null;
            } else {
              y.s *= x.s;
              if (!xc || !yc) {
                y.c = y.e = null;
              } else {
                y.c = [0];
                y.e = 0;
              }
            }
            return y;
          }
          e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
          y.s *= x.s;
          xcL = xc.length;
          ycL = yc.length;
          if (xcL < ycL) {
            zc = xc;
            xc = yc;
            yc = zc;
            i = xcL;
            xcL = ycL;
            ycL = i;
          }
          for (i = xcL + ycL, zc = []; i--; zc.push(0))
            ;
          base = BASE;
          sqrtBase = SQRT_BASE;
          for (i = ycL; --i >= 0; ) {
            c = 0;
            ylo = yc[i] % sqrtBase;
            yhi = yc[i] / sqrtBase | 0;
            for (k = xcL, j = i + k; j > i; ) {
              xlo = xc[--k] % sqrtBase;
              xhi = xc[k] / sqrtBase | 0;
              m = yhi * xlo + xhi * ylo;
              xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
              c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
              zc[j--] = xlo % base;
            }
            zc[j] = c;
          }
          if (c) {
            ++e;
          } else {
            zc.splice(0, 1);
          }
          return normalise(y, zc, e);
        };
        P.negated = function() {
          var x = new BigNumber2(this);
          x.s = -x.s || null;
          return x;
        };
        P.plus = function(y, b) {
          var t, x = this, a = x.s;
          y = new BigNumber2(y, b);
          b = y.s;
          if (!a || !b)
            return new BigNumber2(NaN);
          if (a != b) {
            y.s = -b;
            return x.minus(y);
          }
          var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
          if (!xe || !ye) {
            if (!xc || !yc)
              return new BigNumber2(a / 0);
            if (!xc[0] || !yc[0])
              return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
          }
          xe = bitFloor(xe);
          ye = bitFloor(ye);
          xc = xc.slice();
          if (a = xe - ye) {
            if (a > 0) {
              ye = xe;
              t = yc;
            } else {
              a = -a;
              t = xc;
            }
            t.reverse();
            for (; a--; t.push(0))
              ;
            t.reverse();
          }
          a = xc.length;
          b = yc.length;
          if (a - b < 0) {
            t = yc;
            yc = xc;
            xc = t;
            b = a;
          }
          for (a = 0; b; ) {
            a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
            xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
          }
          if (a) {
            xc = [a].concat(xc);
            ++ye;
          }
          return normalise(y, xc, ye);
        };
        P.precision = P.sd = function(sd, rm) {
          var c, n, v, x = this;
          if (sd != null && sd !== !!sd) {
            intCheck(sd, 1, MAX);
            if (rm == null)
              rm = ROUNDING_MODE;
            else
              intCheck(rm, 0, 8);
            return round(new BigNumber2(x), sd, rm);
          }
          if (!(c = x.c))
            return null;
          v = c.length - 1;
          n = v * LOG_BASE + 1;
          if (v = c[v]) {
            for (; v % 10 == 0; v /= 10, n--)
              ;
            for (v = c[0]; v >= 10; v /= 10, n++)
              ;
          }
          if (sd && x.e + 1 > n)
            n = x.e + 1;
          return n;
        };
        P.shiftedBy = function(k) {
          intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
          return this.times("1e" + k);
        };
        P.squareRoot = P.sqrt = function() {
          var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
          if (s !== 1 || !c || !c[0]) {
            return new BigNumber2(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
          }
          s = Math.sqrt(+valueOf(x));
          if (s == 0 || s == 1 / 0) {
            n = coeffToString(c);
            if ((n.length + e) % 2 == 0)
              n += "0";
            s = Math.sqrt(+n);
            e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
            if (s == 1 / 0) {
              n = "5e" + e;
            } else {
              n = s.toExponential();
              n = n.slice(0, n.indexOf("e") + 1) + e;
            }
            r = new BigNumber2(n);
          } else {
            r = new BigNumber2(s + "");
          }
          if (r.c[0]) {
            e = r.e;
            s = e + dp;
            if (s < 3)
              s = 0;
            for (; ; ) {
              t = r;
              r = half.times(t.plus(div(x, t, dp, 1)));
              if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                if (r.e < e)
                  --s;
                n = n.slice(s - 3, s + 1);
                if (n == "9999" || !rep && n == "4999") {
                  if (!rep) {
                    round(t, t.e + DECIMAL_PLACES + 2, 0);
                    if (t.times(t).eq(x)) {
                      r = t;
                      break;
                    }
                  }
                  dp += 4;
                  s += 4;
                  rep = 1;
                } else {
                  if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                    round(r, r.e + DECIMAL_PLACES + 2, 1);
                    m = !r.times(r).eq(x);
                  }
                  break;
                }
              }
            }
          }
          return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        P.toExponential = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp++;
          }
          return format(this, dp, rm, 1);
        };
        P.toFixed = function(dp, rm) {
          if (dp != null) {
            intCheck(dp, 0, MAX);
            dp = dp + this.e + 1;
          }
          return format(this, dp, rm);
        };
        P.toFormat = function(dp, rm, format2) {
          var str, x = this;
          if (format2 == null) {
            if (dp != null && rm && typeof rm == "object") {
              format2 = rm;
              rm = null;
            } else if (dp && typeof dp == "object") {
              format2 = dp;
              dp = rm = null;
            } else {
              format2 = FORMAT;
            }
          } else if (typeof format2 != "object") {
            throw Error(bignumberError + "Argument not an object: " + format2);
          }
          str = x.toFixed(dp, rm);
          if (x.c) {
            var i, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
            if (g2) {
              i = g1;
              g1 = g2;
              g2 = i;
              len -= i;
            }
            if (g1 > 0 && len > 0) {
              i = len % g1 || g1;
              intPart = intDigits.substr(0, i);
              for (; i < len; i += g1)
                intPart += groupSeparator + intDigits.substr(i, g1);
              if (g2 > 0)
                intPart += groupSeparator + intDigits.slice(i);
              if (isNeg)
                intPart = "-" + intPart;
            }
            str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
              new RegExp("\\d{" + g2 + "}\\B", "g"),
              "$&" + (format2.fractionGroupSeparator || "")
            ) : fractionPart) : intPart;
          }
          return (format2.prefix || "") + str + (format2.suffix || "");
        };
        P.toFraction = function(md) {
          var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
          if (md != null) {
            n = new BigNumber2(md);
            if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
              throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
            }
          }
          if (!xc)
            return new BigNumber2(x);
          d = new BigNumber2(ONE);
          n1 = d0 = new BigNumber2(ONE);
          d1 = n0 = new BigNumber2(ONE);
          s = coeffToString(xc);
          e = d.e = s.length - x.e - 1;
          d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
          md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
          exp = MAX_EXP;
          MAX_EXP = 1 / 0;
          n = new BigNumber2(s);
          n0.c[0] = 0;
          for (; ; ) {
            q = div(n, d, 0, 1);
            d2 = d0.plus(q.times(d1));
            if (d2.comparedTo(md) == 1)
              break;
            d0 = d1;
            d1 = d2;
            n1 = n0.plus(q.times(d2 = n1));
            n0 = d2;
            d = n.minus(q.times(d2 = d));
            n = d2;
          }
          d2 = div(md.minus(d0), d1, 0, 1);
          n0 = n0.plus(d2.times(n1));
          d0 = d0.plus(d2.times(d1));
          n0.s = n1.s = x.s;
          e = e * 2;
          r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
            div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
          ) < 1 ? [n1, d1] : [n0, d0];
          MAX_EXP = exp;
          return r;
        };
        P.toNumber = function() {
          return +valueOf(this);
        };
        P.toPrecision = function(sd, rm) {
          if (sd != null)
            intCheck(sd, 1, MAX);
          return format(this, sd, rm, 2);
        };
        P.toString = function(b) {
          var str, n = this, s = n.s, e = n.e;
          if (e === null) {
            if (s) {
              str = "Infinity";
              if (s < 0)
                str = "-" + str;
            } else {
              str = "NaN";
            }
          } else {
            if (b == null) {
              str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
            } else if (b === 10 && alphabetHasNormalDecimalDigits) {
              n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
              str = toFixedPoint(coeffToString(n.c), n.e, "0");
            } else {
              intCheck(b, 2, ALPHABET.length, "Base");
              str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
            }
            if (s < 0 && n.c[0])
              str = "-" + str;
          }
          return str;
        };
        P.valueOf = P.toJSON = function() {
          return valueOf(this);
        };
        P._isBigNumber = true;
        if (configObject != null)
          BigNumber2.set(configObject);
        return BigNumber2;
      }
      function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
      }
      function coeffToString(a) {
        var s, z, i = 1, j = a.length, r = a[0] + "";
        for (; i < j; ) {
          s = a[i++] + "";
          z = LOG_BASE - s.length;
          for (; z--; s = "0" + s)
            ;
          r += s;
        }
        for (j = r.length; r.charCodeAt(--j) === 48; )
          ;
        return r.slice(0, j + 1 || 1);
      }
      function compare(x, y) {
        var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
        if (!i || !j)
          return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        if (a || b)
          return a ? b ? 0 : -j : i;
        if (i != j)
          return i;
        a = i < 0;
        b = k == l;
        if (!xc || !yc)
          return b ? 0 : !xc ^ a ? 1 : -1;
        if (!b)
          return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        for (i = 0; i < j; i++)
          if (xc[i] != yc[i])
            return xc[i] > yc[i] ^ a ? 1 : -1;
        return k == l ? 0 : k > l ^ a ? 1 : -1;
      }
      function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== mathfloor(n)) {
          throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
        }
      }
      function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
      }
      function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
      }
      function toFixedPoint(str, e, z) {
        var len, zs;
        if (e < 0) {
          for (zs = z + "."; ++e; zs += z)
            ;
          str = zs + str;
        } else {
          len = str.length;
          if (++e > len) {
            for (zs = z, e -= len; --e; zs += z)
              ;
            str += zs;
          } else if (e < len) {
            str = str.slice(0, e) + "." + str.slice(e);
          }
        }
        return str;
      }
      BigNumber = clone();
      BigNumber["default"] = BigNumber.BigNumber = BigNumber;
      if (typeof define == "function" && define.amd) {
        define(function() {
          return BigNumber;
        });
      } else if (typeof module2 != "undefined" && module2.exports) {
        module2.exports = BigNumber;
      } else {
        if (!globalObject) {
          globalObject = typeof self != "undefined" && self ? self : window;
        }
        globalObject.BigNumber = BigNumber;
      }
    })(exports2);
  }
});

// node_modules/json-bigint/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/json-bigint/lib/stringify.js"(exports2, module2) {
    var BigNumber = require_bignumber();
    var JSON2 = module2.exports;
    (function() {
      "use strict";
      function f(n) {
        return n < 10 ? "0" + n : n;
      }
      var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
        // table of character substitutions
        "\b": "\\b",
        "	": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
      }, rep;
      function quote(string) {
        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
          var c = meta[a];
          return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
      }
      function str(key, holder) {
        var i, k, v, length, mind = gap, partial, value = holder[key], isBigNumber = value != null && (value instanceof BigNumber || BigNumber.isBigNumber(value));
        if (value && typeof value === "object" && typeof value.toJSON === "function") {
          value = value.toJSON(key);
        }
        if (typeof rep === "function") {
          value = rep.call(holder, key, value);
        }
        switch (typeof value) {
          case "string":
            if (isBigNumber) {
              return value;
            } else {
              return quote(value);
            }
          case "number":
            return isFinite(value) ? String(value) : "null";
          case "boolean":
          case "null":
          case "bigint":
            return String(value);
          case "object":
            if (!value) {
              return "null";
            }
            gap += indent;
            partial = [];
            if (Object.prototype.toString.apply(value) === "[object Array]") {
              length = value.length;
              for (i = 0; i < length; i += 1) {
                partial[i] = str(i, value) || "null";
              }
              v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
              gap = mind;
              return v;
            }
            if (rep && typeof rep === "object") {
              length = rep.length;
              for (i = 0; i < length; i += 1) {
                if (typeof rep[i] === "string") {
                  k = rep[i];
                  v = str(k, value);
                  if (v) {
                    partial.push(quote(k) + (gap ? ": " : ":") + v);
                  }
                }
              }
            } else {
              Object.keys(value).forEach(function(k2) {
                var v2 = str(k2, value);
                if (v2) {
                  partial.push(quote(k2) + (gap ? ": " : ":") + v2);
                }
              });
            }
            v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
            gap = mind;
            return v;
        }
      }
      if (typeof JSON2.stringify !== "function") {
        JSON2.stringify = function(value, replacer, space) {
          var i;
          gap = "";
          indent = "";
          if (typeof space === "number") {
            for (i = 0; i < space; i += 1) {
              indent += " ";
            }
          } else if (typeof space === "string") {
            indent = space;
          }
          rep = replacer;
          if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
            throw new Error("JSON.stringify");
          }
          return str("", { "": value });
        };
      }
    })();
  }
});

// node_modules/json-bigint/lib/parse.js
var require_parse2 = __commonJS({
  "node_modules/json-bigint/lib/parse.js"(exports2, module2) {
    var BigNumber = null;
    var suspectProtoRx = /(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/;
    var suspectConstructorRx = /(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;
    var json_parse = function(options) {
      "use strict";
      var _options = {
        strict: false,
        // not being strict means do not generate syntax errors for "duplicate key"
        storeAsString: false,
        // toggles whether the values should be stored as BigNumber (default) or a string
        alwaysParseAsBig: false,
        // toggles whether all numbers should be Big
        useNativeBigInt: false,
        // toggles whether to use native BigInt instead of bignumber.js
        protoAction: "error",
        constructorAction: "error"
      };
      if (options !== void 0 && options !== null) {
        if (options.strict === true) {
          _options.strict = true;
        }
        if (options.storeAsString === true) {
          _options.storeAsString = true;
        }
        _options.alwaysParseAsBig = options.alwaysParseAsBig === true ? options.alwaysParseAsBig : false;
        _options.useNativeBigInt = options.useNativeBigInt === true ? options.useNativeBigInt : false;
        if (typeof options.constructorAction !== "undefined") {
          if (options.constructorAction === "error" || options.constructorAction === "ignore" || options.constructorAction === "preserve") {
            _options.constructorAction = options.constructorAction;
          } else {
            throw new Error(
              `Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${options.constructorAction}`
            );
          }
        }
        if (typeof options.protoAction !== "undefined") {
          if (options.protoAction === "error" || options.protoAction === "ignore" || options.protoAction === "preserve") {
            _options.protoAction = options.protoAction;
          } else {
            throw new Error(
              `Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${options.protoAction}`
            );
          }
        }
      }
      var at, ch, escapee = {
        '"': '"',
        "\\": "\\",
        "/": "/",
        b: "\b",
        f: "\f",
        n: "\n",
        r: "\r",
        t: "	"
      }, text, error = function(m) {
        throw {
          name: "SyntaxError",
          message: m,
          at,
          text
        };
      }, next = function(c) {
        if (c && c !== ch) {
          error("Expected '" + c + "' instead of '" + ch + "'");
        }
        ch = text.charAt(at);
        at += 1;
        return ch;
      }, number = function() {
        var number2, string2 = "";
        if (ch === "-") {
          string2 = "-";
          next("-");
        }
        while (ch >= "0" && ch <= "9") {
          string2 += ch;
          next();
        }
        if (ch === ".") {
          string2 += ".";
          while (next() && ch >= "0" && ch <= "9") {
            string2 += ch;
          }
        }
        if (ch === "e" || ch === "E") {
          string2 += ch;
          next();
          if (ch === "-" || ch === "+") {
            string2 += ch;
            next();
          }
          while (ch >= "0" && ch <= "9") {
            string2 += ch;
            next();
          }
        }
        number2 = +string2;
        if (!isFinite(number2)) {
          error("Bad number");
        } else {
          if (BigNumber == null)
            BigNumber = require_bignumber();
          if (string2.length > 15)
            return _options.storeAsString ? string2 : _options.useNativeBigInt ? BigInt(string2) : new BigNumber(string2);
          else
            return !_options.alwaysParseAsBig ? number2 : _options.useNativeBigInt ? BigInt(number2) : new BigNumber(number2);
        }
      }, string = function() {
        var hex, i, string2 = "", uffff;
        if (ch === '"') {
          var startAt = at;
          while (next()) {
            if (ch === '"') {
              if (at - 1 > startAt)
                string2 += text.substring(startAt, at - 1);
              next();
              return string2;
            }
            if (ch === "\\") {
              if (at - 1 > startAt)
                string2 += text.substring(startAt, at - 1);
              next();
              if (ch === "u") {
                uffff = 0;
                for (i = 0; i < 4; i += 1) {
                  hex = parseInt(next(), 16);
                  if (!isFinite(hex)) {
                    break;
                  }
                  uffff = uffff * 16 + hex;
                }
                string2 += String.fromCharCode(uffff);
              } else if (typeof escapee[ch] === "string") {
                string2 += escapee[ch];
              } else {
                break;
              }
              startAt = at;
            }
          }
        }
        error("Bad string");
      }, white = function() {
        while (ch && ch <= " ") {
          next();
        }
      }, word = function() {
        switch (ch) {
          case "t":
            next("t");
            next("r");
            next("u");
            next("e");
            return true;
          case "f":
            next("f");
            next("a");
            next("l");
            next("s");
            next("e");
            return false;
          case "n":
            next("n");
            next("u");
            next("l");
            next("l");
            return null;
        }
        error("Unexpected '" + ch + "'");
      }, value, array = function() {
        var array2 = [];
        if (ch === "[") {
          next("[");
          white();
          if (ch === "]") {
            next("]");
            return array2;
          }
          while (ch) {
            array2.push(value());
            white();
            if (ch === "]") {
              next("]");
              return array2;
            }
            next(",");
            white();
          }
        }
        error("Bad array");
      }, object = function() {
        var key, object2 = /* @__PURE__ */ Object.create(null);
        if (ch === "{") {
          next("{");
          white();
          if (ch === "}") {
            next("}");
            return object2;
          }
          while (ch) {
            key = string();
            white();
            next(":");
            if (_options.strict === true && Object.hasOwnProperty.call(object2, key)) {
              error('Duplicate key "' + key + '"');
            }
            if (suspectProtoRx.test(key) === true) {
              if (_options.protoAction === "error") {
                error("Object contains forbidden prototype property");
              } else if (_options.protoAction === "ignore") {
                value();
              } else {
                object2[key] = value();
              }
            } else if (suspectConstructorRx.test(key) === true) {
              if (_options.constructorAction === "error") {
                error("Object contains forbidden constructor property");
              } else if (_options.constructorAction === "ignore") {
                value();
              } else {
                object2[key] = value();
              }
            } else {
              object2[key] = value();
            }
            white();
            if (ch === "}") {
              next("}");
              return object2;
            }
            next(",");
            white();
          }
        }
        error("Bad object");
      };
      value = function() {
        white();
        switch (ch) {
          case "{":
            return object();
          case "[":
            return array();
          case '"':
            return string();
          case "-":
            return number();
          default:
            return ch >= "0" && ch <= "9" ? number() : word();
        }
      };
      return function(source, reviver) {
        var result;
        text = source + "";
        at = 0;
        ch = " ";
        result = value();
        white();
        if (ch) {
          error("Syntax error");
        }
        return typeof reviver === "function" ? function walk(holder, key) {
          var k, v, value2 = holder[key];
          if (value2 && typeof value2 === "object") {
            Object.keys(value2).forEach(function(k2) {
              v = walk(value2, k2);
              if (v !== void 0) {
                value2[k2] = v;
              } else {
                delete value2[k2];
              }
            });
          }
          return reviver.call(holder, key, value2);
        }({ "": result }, "") : result;
      };
    };
    module2.exports = json_parse;
  }
});

// node_modules/json-bigint/index.js
var require_json_bigint = __commonJS({
  "node_modules/json-bigint/index.js"(exports2, module2) {
    var json_stringify = require_stringify().stringify;
    var json_parse = require_parse2();
    module2.exports = function(options) {
      return {
        parse: json_parse(options),
        stringify: json_stringify
      };
    };
    module2.exports.parse = json_parse();
    module2.exports.stringify = json_stringify;
  }
});

// node_modules/gcp-metadata/build/src/gcp-residency.js
var require_gcp_residency = __commonJS({
  "node_modules/gcp-metadata/build/src/gcp-residency.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.detectGCPResidency = exports2.isGoogleComputeEngine = exports2.isGoogleComputeEngineMACAddress = exports2.isGoogleComputeEngineLinux = exports2.isGoogleCloudServerless = exports2.GCE_LINUX_BIOS_PATHS = void 0;
    var fs_1 = require("fs");
    var os_1 = require("os");
    exports2.GCE_LINUX_BIOS_PATHS = {
      BIOS_DATE: "/sys/class/dmi/id/bios_date",
      BIOS_VENDOR: "/sys/class/dmi/id/bios_vendor"
    };
    var GCE_MAC_ADDRESS_REGEX = /^42:01/;
    function isGoogleCloudServerless() {
      const isGFEnvironment = process.env.CLOUD_RUN_JOB || process.env.FUNCTION_NAME || process.env.K_SERVICE;
      return !!isGFEnvironment;
    }
    exports2.isGoogleCloudServerless = isGoogleCloudServerless;
    function isGoogleComputeEngineLinux() {
      if ((0, os_1.platform)() !== "linux")
        return false;
      try {
        (0, fs_1.statSync)(exports2.GCE_LINUX_BIOS_PATHS.BIOS_DATE);
        const biosVendor = (0, fs_1.readFileSync)(exports2.GCE_LINUX_BIOS_PATHS.BIOS_VENDOR, "utf8");
        return /Google/.test(biosVendor);
      } catch (_a) {
        return false;
      }
    }
    exports2.isGoogleComputeEngineLinux = isGoogleComputeEngineLinux;
    function isGoogleComputeEngineMACAddress() {
      const interfaces = (0, os_1.networkInterfaces)();
      for (const item of Object.values(interfaces)) {
        if (!item)
          continue;
        for (const { mac } of item) {
          if (GCE_MAC_ADDRESS_REGEX.test(mac)) {
            return true;
          }
        }
      }
      return false;
    }
    exports2.isGoogleComputeEngineMACAddress = isGoogleComputeEngineMACAddress;
    function isGoogleComputeEngine() {
      return isGoogleComputeEngineLinux() || isGoogleComputeEngineMACAddress();
    }
    exports2.isGoogleComputeEngine = isGoogleComputeEngine;
    function detectGCPResidency() {
      return isGoogleCloudServerless() || isGoogleComputeEngine();
    }
    exports2.detectGCPResidency = detectGCPResidency;
  }
});

// node_modules/gcp-metadata/build/src/index.js
var require_src6 = __commonJS({
  "node_modules/gcp-metadata/build/src/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.requestTimeout = exports2.setGCPResidency = exports2.getGCPResidency = exports2.gcpResidencyCache = exports2.resetIsAvailableCache = exports2.isAvailable = exports2.project = exports2.instance = exports2.METADATA_SERVER_DETECTION = exports2.HEADERS = exports2.HEADER_VALUE = exports2.HEADER_NAME = exports2.SECONDARY_HOST_ADDRESS = exports2.HOST_ADDRESS = exports2.BASE_PATH = void 0;
    var gaxios_1 = require_src5();
    var jsonBigint = require_json_bigint();
    var gcp_residency_1 = require_gcp_residency();
    exports2.BASE_PATH = "/computeMetadata/v1";
    exports2.HOST_ADDRESS = "http://169.254.169.254";
    exports2.SECONDARY_HOST_ADDRESS = "http://metadata.google.internal.";
    exports2.HEADER_NAME = "Metadata-Flavor";
    exports2.HEADER_VALUE = "Google";
    exports2.HEADERS = Object.freeze({ [exports2.HEADER_NAME]: exports2.HEADER_VALUE });
    exports2.METADATA_SERVER_DETECTION = Object.freeze({
      "assume-present": "don't try to ping the metadata server, but assume it's present",
      none: "don't try to ping the metadata server, but don't try to use it either",
      "bios-only": "treat the result of a BIOS probe as canonical (don't fall back to pinging)",
      "ping-only": "skip the BIOS probe, and go straight to pinging"
    });
    function getBaseUrl(baseUrl) {
      if (!baseUrl) {
        baseUrl = process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST || exports2.HOST_ADDRESS;
      }
      if (!/^https?:\/\//.test(baseUrl)) {
        baseUrl = `http://${baseUrl}`;
      }
      return new URL(exports2.BASE_PATH, baseUrl).href;
    }
    function validate(options) {
      Object.keys(options).forEach((key) => {
        switch (key) {
          case "params":
          case "property":
          case "headers":
            break;
          case "qs":
            throw new Error("'qs' is not a valid configuration option. Please use 'params' instead.");
          default:
            throw new Error(`'${key}' is not a valid configuration option.`);
        }
      });
    }
    async function metadataAccessor(type, options, noResponseRetries = 3, fastFail = false) {
      options = options || {};
      if (typeof options === "string") {
        options = { property: options };
      }
      let property = "";
      if (typeof options === "object" && options.property) {
        property = "/" + options.property;
      }
      validate(options);
      try {
        const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;
        const res = await requestMethod({
          url: `${getBaseUrl()}/${type}${property}`,
          headers: Object.assign({}, exports2.HEADERS, options.headers),
          retryConfig: { noResponseRetries },
          params: options.params,
          responseType: "text",
          timeout: requestTimeout()
        });
        if (res.headers[exports2.HEADER_NAME.toLowerCase()] !== exports2.HEADER_VALUE) {
          throw new Error(`Invalid response from metadata service: incorrect ${exports2.HEADER_NAME} header.`);
        } else if (!res.data) {
          throw new Error("Invalid response from the metadata service");
        }
        if (typeof res.data === "string") {
          try {
            return jsonBigint.parse(res.data);
          } catch (_a) {
          }
        }
        return res.data;
      } catch (e) {
        const err = e;
        if (err.response && err.response.status !== 200) {
          err.message = `Unsuccessful response status code. ${err.message}`;
        }
        throw e;
      }
    }
    async function fastFailMetadataRequest(options) {
      const secondaryOptions = {
        ...options,
        url: options.url.replace(getBaseUrl(), getBaseUrl(exports2.SECONDARY_HOST_ADDRESS))
      };
      let responded = false;
      const r1 = (0, gaxios_1.request)(options).then((res) => {
        responded = true;
        return res;
      }).catch((err) => {
        if (responded) {
          return r2;
        } else {
          responded = true;
          throw err;
        }
      });
      const r2 = (0, gaxios_1.request)(secondaryOptions).then((res) => {
        responded = true;
        return res;
      }).catch((err) => {
        if (responded) {
          return r1;
        } else {
          responded = true;
          throw err;
        }
      });
      return Promise.race([r1, r2]);
    }
    function instance(options) {
      return metadataAccessor("instance", options);
    }
    exports2.instance = instance;
    function project(options) {
      return metadataAccessor("project", options);
    }
    exports2.project = project;
    function detectGCPAvailableRetries() {
      return process.env.DETECT_GCP_RETRIES ? Number(process.env.DETECT_GCP_RETRIES) : 0;
    }
    var cachedIsAvailableResponse;
    async function isAvailable() {
      if (process.env.METADATA_SERVER_DETECTION) {
        const value = process.env.METADATA_SERVER_DETECTION.trim().toLocaleLowerCase();
        if (!(value in exports2.METADATA_SERVER_DETECTION)) {
          throw new RangeError(`Unknown \`METADATA_SERVER_DETECTION\` env variable. Got \`${value}\`, but it should be \`${Object.keys(exports2.METADATA_SERVER_DETECTION).join("`, `")}\`, or unset`);
        }
        switch (value) {
          case "assume-present":
            return true;
          case "none":
            return false;
          case "bios-only":
            return getGCPResidency();
          case "ping-only":
        }
      }
      try {
        if (cachedIsAvailableResponse === void 0) {
          cachedIsAvailableResponse = metadataAccessor(
            "instance",
            void 0,
            detectGCPAvailableRetries(),
            // If the default HOST_ADDRESS has been overridden, we should not
            // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in
            // a non-GCP environment):
            !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST)
          );
        }
        await cachedIsAvailableResponse;
        return true;
      } catch (e) {
        const err = e;
        if (process.env.DEBUG_AUTH) {
          console.info(err);
        }
        if (err.type === "request-timeout") {
          return false;
        }
        if (err.response && err.response.status === 404) {
          return false;
        } else {
          if (!(err.response && err.response.status === 404) && // A warning is emitted if we see an unexpected err.code, or err.code
          // is not populated:
          (!err.code || ![
            "EHOSTDOWN",
            "EHOSTUNREACH",
            "ENETUNREACH",
            "ENOENT",
            "ENOTFOUND",
            "ECONNREFUSED"
          ].includes(err.code))) {
            let code = "UNKNOWN";
            if (err.code)
              code = err.code;
            process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, "MetadataLookupWarning");
          }
          return false;
        }
      }
    }
    exports2.isAvailable = isAvailable;
    function resetIsAvailableCache() {
      cachedIsAvailableResponse = void 0;
    }
    exports2.resetIsAvailableCache = resetIsAvailableCache;
    exports2.gcpResidencyCache = null;
    function getGCPResidency() {
      if (exports2.gcpResidencyCache === null) {
        setGCPResidency();
      }
      return exports2.gcpResidencyCache;
    }
    exports2.getGCPResidency = getGCPResidency;
    function setGCPResidency(value = null) {
      exports2.gcpResidencyCache = value !== null ? value : (0, gcp_residency_1.detectGCPResidency)();
    }
    exports2.setGCPResidency = setGCPResidency;
    function requestTimeout() {
      return getGCPResidency() ? 0 : 3e3;
    }
    exports2.requestTimeout = requestTimeout;
    __exportStar(require_gcp_residency(), exports2);
  }
});

// node_modules/base64-js/index.js
var require_base64_js = __commonJS({
  "node_modules/base64-js/index.js"(exports2) {
    "use strict";
    exports2.byteLength = byteLength;
    exports2.toByteArray = toByteArray;
    exports2.fromByteArray = fromByteArray;
    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
    var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for (i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }
    var i;
    var len;
    revLookup["-".charCodeAt(0)] = 62;
    revLookup["_".charCodeAt(0)] = 63;
    function getLens(b64) {
      var len2 = b64.length;
      if (len2 % 4 > 0) {
        throw new Error("Invalid string. Length must be a multiple of 4");
      }
      var validLen = b64.indexOf("=");
      if (validLen === -1)
        validLen = len2;
      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
      return [validLen, placeHoldersLen];
    }
    function byteLength(b64) {
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function _byteLength(b64, validLen, placeHoldersLen) {
      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
    }
    function toByteArray(b64) {
      var tmp;
      var lens = getLens(b64);
      var validLen = lens[0];
      var placeHoldersLen = lens[1];
      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
      var curByte = 0;
      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
      var i2;
      for (i2 = 0; i2 < len2; i2 += 4) {
        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
      }
      if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
      }
      return arr;
    }
    function tripletToBase64(num) {
      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
    }
    function encodeChunk(uint8, start, end) {
      var tmp;
      var output = [];
      for (var i2 = start; i2 < end; i2 += 3) {
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
      }
      return output.join("");
    }
    function fromByteArray(uint8) {
      var tmp;
      var len2 = uint8.length;
      var extraBytes = len2 % 3;
      var parts = [];
      var maxChunkLength = 16383;
      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
      }
      if (extraBytes === 1) {
        tmp = uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
        );
      } else if (extraBytes === 2) {
        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
        parts.push(
          lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
        );
      }
      return parts.join("");
    }
  }
});

// node_modules/google-auth-library/build/src/crypto/browser/crypto.js
var require_crypto = __commonJS({
  "node_modules/google-auth-library/build/src/crypto/browser/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BrowserCrypto = void 0;
    var base64js = require_base64_js();
    var crypto_1 = require_crypto3();
    var BrowserCrypto = class _BrowserCrypto {
      constructor() {
        if (typeof window === "undefined" || window.crypto === void 0 || window.crypto.subtle === void 0) {
          throw new Error("SubtleCrypto not found. Make sure it's an https:// website.");
        }
      }
      async sha256DigestBase64(str) {
        const inputBuffer = new TextEncoder().encode(str);
        const outputBuffer = await window.crypto.subtle.digest("SHA-256", inputBuffer);
        return base64js.fromByteArray(new Uint8Array(outputBuffer));
      }
      randomBytesBase64(count) {
        const array = new Uint8Array(count);
        window.crypto.getRandomValues(array);
        return base64js.fromByteArray(array);
      }
      static padBase64(base64) {
        while (base64.length % 4 !== 0) {
          base64 += "=";
        }
        return base64;
      }
      async verify(pubkey, data, signature) {
        const algo = {
          name: "RSASSA-PKCS1-v1_5",
          hash: { name: "SHA-256" }
        };
        const dataArray = new TextEncoder().encode(data);
        const signatureArray = base64js.toByteArray(_BrowserCrypto.padBase64(signature));
        const cryptoKey = await window.crypto.subtle.importKey("jwk", pubkey, algo, true, ["verify"]);
        const result = await window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);
        return result;
      }
      async sign(privateKey, data) {
        const algo = {
          name: "RSASSA-PKCS1-v1_5",
          hash: { name: "SHA-256" }
        };
        const dataArray = new TextEncoder().encode(data);
        const cryptoKey = await window.crypto.subtle.importKey("jwk", privateKey, algo, true, ["sign"]);
        const result = await window.crypto.subtle.sign(algo, cryptoKey, dataArray);
        return base64js.fromByteArray(new Uint8Array(result));
      }
      decodeBase64StringUtf8(base64) {
        const uint8array = base64js.toByteArray(_BrowserCrypto.padBase64(base64));
        const result = new TextDecoder().decode(uint8array);
        return result;
      }
      encodeBase64StringUtf8(text) {
        const uint8array = new TextEncoder().encode(text);
        const result = base64js.fromByteArray(uint8array);
        return result;
      }
      /**
       * Computes the SHA-256 hash of the provided string.
       * @param str The plain text string to hash.
       * @return A promise that resolves with the SHA-256 hash of the provided
       *   string in hexadecimal encoding.
       */
      async sha256DigestHex(str) {
        const inputBuffer = new TextEncoder().encode(str);
        const outputBuffer = await window.crypto.subtle.digest("SHA-256", inputBuffer);
        return (0, crypto_1.fromArrayBufferToHex)(outputBuffer);
      }
      /**
       * Computes the HMAC hash of a message using the provided crypto key and the
       * SHA-256 algorithm.
       * @param key The secret crypto key in utf-8 or ArrayBuffer format.
       * @param msg The plain text message.
       * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer
       *   format.
       */
      async signWithHmacSha256(key, msg) {
        const rawKey = typeof key === "string" ? key : String.fromCharCode(...new Uint16Array(key));
        const enc = new TextEncoder();
        const cryptoKey = await window.crypto.subtle.importKey("raw", enc.encode(rawKey), {
          name: "HMAC",
          hash: {
            name: "SHA-256"
          }
        }, false, ["sign"]);
        return window.crypto.subtle.sign("HMAC", cryptoKey, enc.encode(msg));
      }
    };
    exports2.BrowserCrypto = BrowserCrypto;
  }
});

// node_modules/google-auth-library/build/src/crypto/node/crypto.js
var require_crypto2 = __commonJS({
  "node_modules/google-auth-library/build/src/crypto/node/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeCrypto = void 0;
    var crypto2 = require("crypto");
    var NodeCrypto = class {
      async sha256DigestBase64(str) {
        return crypto2.createHash("sha256").update(str).digest("base64");
      }
      randomBytesBase64(count) {
        return crypto2.randomBytes(count).toString("base64");
      }
      async verify(pubkey, data, signature) {
        const verifier = crypto2.createVerify("sha256");
        verifier.update(data);
        verifier.end();
        return verifier.verify(pubkey, signature, "base64");
      }
      async sign(privateKey, data) {
        const signer = crypto2.createSign("RSA-SHA256");
        signer.update(data);
        signer.end();
        return signer.sign(privateKey, "base64");
      }
      decodeBase64StringUtf8(base64) {
        return Buffer.from(base64, "base64").toString("utf-8");
      }
      encodeBase64StringUtf8(text) {
        return Buffer.from(text, "utf-8").toString("base64");
      }
      /**
       * Computes the SHA-256 hash of the provided string.
       * @param str The plain text string to hash.
       * @return A promise that resolves with the SHA-256 hash of the provided
       *   string in hexadecimal encoding.
       */
      async sha256DigestHex(str) {
        return crypto2.createHash("sha256").update(str).digest("hex");
      }
      /**
       * Computes the HMAC hash of a message using the provided crypto key and the
       * SHA-256 algorithm.
       * @param key The secret crypto key in utf-8 or ArrayBuffer format.
       * @param msg The plain text message.
       * @return A promise that resolves with the HMAC-SHA256 hash in ArrayBuffer
       *   format.
       */
      async signWithHmacSha256(key, msg) {
        const cryptoKey = typeof key === "string" ? key : toBuffer(key);
        return toArrayBuffer(crypto2.createHmac("sha256", cryptoKey).update(msg).digest());
      }
    };
    exports2.NodeCrypto = NodeCrypto;
    function toArrayBuffer(buffer) {
      return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);
    }
    function toBuffer(arrayBuffer) {
      return Buffer.from(arrayBuffer);
    }
  }
});

// node_modules/google-auth-library/build/src/crypto/crypto.js
var require_crypto3 = __commonJS({
  "node_modules/google-auth-library/build/src/crypto/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromArrayBufferToHex = exports2.hasBrowserCrypto = exports2.createCrypto = void 0;
    var crypto_1 = require_crypto();
    var crypto_2 = require_crypto2();
    function createCrypto() {
      if (hasBrowserCrypto()) {
        return new crypto_1.BrowserCrypto();
      }
      return new crypto_2.NodeCrypto();
    }
    exports2.createCrypto = createCrypto;
    function hasBrowserCrypto() {
      return typeof window !== "undefined" && typeof window.crypto !== "undefined" && typeof window.crypto.subtle !== "undefined";
    }
    exports2.hasBrowserCrypto = hasBrowserCrypto;
    function fromArrayBufferToHex(arrayBuffer) {
      const byteArray = Array.from(new Uint8Array(arrayBuffer));
      return byteArray.map((byte) => {
        return byte.toString(16).padStart(2, "0");
      }).join("");
    }
    exports2.fromArrayBufferToHex = fromArrayBufferToHex;
  }
});

// node_modules/google-auth-library/build/src/options.js
var require_options = __commonJS({
  "node_modules/google-auth-library/build/src/options.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validate = void 0;
    function validate(options) {
      const vpairs = [
        { invalid: "uri", expected: "url" },
        { invalid: "json", expected: "data" },
        { invalid: "qs", expected: "params" }
      ];
      for (const pair of vpairs) {
        if (options[pair.invalid]) {
          const e = `'${pair.invalid}' is not a valid configuration option. Please use '${pair.expected}' instead. This library is using Axios for requests. Please see https://github.com/axios/axios to learn more about the valid request options.`;
          throw new Error(e);
        }
      }
    }
    exports2.validate = validate;
  }
});

// node_modules/google-auth-library/package.json
var require_package3 = __commonJS({
  "node_modules/google-auth-library/package.json"(exports2, module2) {
    module2.exports = {
      name: "google-auth-library",
      version: "9.0.0",
      author: "Google Inc.",
      description: "Google APIs Authentication Client Library for Node.js",
      engines: {
        node: ">=14"
      },
      main: "./build/src/index.js",
      types: "./build/src/index.d.ts",
      repository: "googleapis/google-auth-library-nodejs.git",
      keywords: [
        "google",
        "api",
        "google apis",
        "client",
        "client library"
      ],
      dependencies: {
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        gaxios: "^6.0.0",
        "gcp-metadata": "^6.0.0",
        gtoken: "^7.0.0",
        jws: "^4.0.0",
        "lru-cache": "^6.0.0"
      },
      devDependencies: {
        "@compodoc/compodoc": "^1.1.7",
        "@types/base64-js": "^1.2.5",
        "@types/chai": "^4.1.7",
        "@types/jws": "^3.1.0",
        "@types/lru-cache": "^5.0.0",
        "@types/mocha": "^9.0.0",
        "@types/mv": "^2.1.0",
        "@types/ncp": "^2.0.1",
        "@types/node": "^20.4.2",
        "@types/sinon": "^10.0.0",
        "assert-rejects": "^1.0.0",
        c8: "^8.0.0",
        chai: "^4.2.0",
        codecov: "^3.0.2",
        execa: "^5.0.0",
        gts: "^3.1.1",
        "is-docker": "^2.0.0",
        karma: "^6.0.0",
        "karma-chrome-launcher": "^3.0.0",
        "karma-coverage": "^2.0.0",
        "karma-firefox-launcher": "^2.0.0",
        "karma-mocha": "^2.0.0",
        "karma-sourcemap-loader": "^0.4.0",
        "karma-webpack": "^5.0.0",
        keypair: "^1.0.4",
        linkinator: "^4.0.0",
        mocha: "^9.2.2",
        mv: "^2.1.1",
        ncp: "^2.0.0",
        nock: "^13.0.0",
        "null-loader": "^4.0.0",
        puppeteer: "^19.0.0",
        sinon: "^15.0.0",
        "ts-loader": "^8.0.0",
        typescript: "^5.1.6",
        webpack: "^5.21.2",
        "webpack-cli": "^4.0.0"
      },
      files: [
        "build/src",
        "!build/src/**/*.map"
      ],
      scripts: {
        test: "c8 mocha build/test",
        clean: "gts clean",
        prepare: "npm run compile",
        lint: "gts check",
        compile: "tsc -p .",
        fix: "gts fix",
        pretest: "npm run compile",
        docs: "compodoc src/",
        "samples-setup": "cd samples/ && npm link ../ && npm run setup && cd ../",
        "samples-test": "cd samples/ && npm link ../ && npm test && cd ../",
        "system-test": "mocha build/system-test --timeout 60000",
        "presystem-test": "npm run compile",
        webpack: "webpack",
        "browser-test": "karma start",
        "docs-test": "linkinator docs",
        "predocs-test": "npm run docs",
        prelint: "cd samples; npm link ../; npm install",
        precompile: "gts clean"
      },
      license: "Apache-2.0"
    };
  }
});

// node_modules/google-auth-library/build/src/transporters.js
var require_transporters = __commonJS({
  "node_modules/google-auth-library/build/src/transporters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DefaultTransporter = void 0;
    var gaxios_1 = require_src5();
    var options_1 = require_options();
    var pkg = require_package3();
    var PRODUCT_NAME = "google-api-nodejs-client";
    var DefaultTransporter = class _DefaultTransporter {
      /**
       * Configures request options before making a request.
       * @param opts GaxiosOptions options.
       * @return Configured options.
       */
      configure(opts = {}) {
        opts.headers = opts.headers || {};
        if (typeof window === "undefined") {
          const uaValue = opts.headers["User-Agent"];
          if (!uaValue) {
            opts.headers["User-Agent"] = _DefaultTransporter.USER_AGENT;
          } else if (!uaValue.includes(`${PRODUCT_NAME}/`)) {
            opts.headers["User-Agent"] = `${uaValue} ${_DefaultTransporter.USER_AGENT}`;
          }
          if (!opts.headers["x-goog-api-client"]) {
            const nodeVersion = process.version.replace(/^v/, "");
            opts.headers["x-goog-api-client"] = `gl-node/${nodeVersion}`;
          }
        }
        return opts;
      }
      /**
       * Makes a request using Gaxios with given options.
       * @param opts GaxiosOptions options.
       * @param callback optional callback that contains GaxiosResponse object.
       * @return GaxiosPromise, assuming no callback is passed.
       */
      request(opts) {
        opts = this.configure(opts);
        (0, options_1.validate)(opts);
        return (0, gaxios_1.request)(opts).catch((e) => {
          throw this.processError(e);
        });
      }
      /**
       * Changes the error to include details from the body.
       */
      processError(e) {
        const res = e.response;
        const err = e;
        const body = res ? res.data : null;
        if (res && body && body.error && res.status !== 200) {
          if (typeof body.error === "string") {
            err.message = body.error;
            err.status = res.status;
          } else if (Array.isArray(body.error.errors)) {
            err.message = body.error.errors.map((err2) => err2.message).join("\n");
            err.code = body.error.code;
            err.errors = body.error.errors;
          } else {
            err.message = body.error.message;
            err.code = body.error.code;
          }
        } else if (res && res.status >= 400) {
          err.message = body;
          err.status = res.status;
        }
        return err;
      }
    };
    exports2.DefaultTransporter = DefaultTransporter;
    DefaultTransporter.USER_AGENT = `${PRODUCT_NAME}/${pkg.version}`;
  }
});

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "node_modules/safe-buffer/index.js"(exports2, module2) {
    var buffer = require("buffer");
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js
var require_param_bytes_for_alg = __commonJS({
  "node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js"(exports2, module2) {
    "use strict";
    function getParamSize(keySize) {
      var result = (keySize / 8 | 0) + (keySize % 8 === 0 ? 0 : 1);
      return result;
    }
    var paramBytesForAlg = {
      ES256: getParamSize(256),
      ES384: getParamSize(384),
      ES512: getParamSize(521)
    };
    function getParamBytesForAlg(alg) {
      var paramBytes = paramBytesForAlg[alg];
      if (paramBytes) {
        return paramBytes;
      }
      throw new Error('Unknown algorithm "' + alg + '"');
    }
    module2.exports = getParamBytesForAlg;
  }
});

// node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js
var require_ecdsa_sig_formatter = __commonJS({
  "node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js"(exports2, module2) {
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var getParamBytesForAlg = require_param_bytes_for_alg();
    var MAX_OCTET = 128;
    var CLASS_UNIVERSAL = 0;
    var PRIMITIVE_BIT = 32;
    var TAG_SEQ = 16;
    var TAG_INT = 2;
    var ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | CLASS_UNIVERSAL << 6;
    var ENCODED_TAG_INT = TAG_INT | CLASS_UNIVERSAL << 6;
    function base64Url(base64) {
      return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function signatureAsBuffer(signature) {
      if (Buffer2.isBuffer(signature)) {
        return signature;
      } else if ("string" === typeof signature) {
        return Buffer2.from(signature, "base64");
      }
      throw new TypeError("ECDSA signature must be a Base64 string or a Buffer");
    }
    function derToJose(signature, alg) {
      signature = signatureAsBuffer(signature);
      var paramBytes = getParamBytesForAlg(alg);
      var maxEncodedParamLength = paramBytes + 1;
      var inputLength = signature.length;
      var offset = 0;
      if (signature[offset++] !== ENCODED_TAG_SEQ) {
        throw new Error('Could not find expected "seq"');
      }
      var seqLength = signature[offset++];
      if (seqLength === (MAX_OCTET | 1)) {
        seqLength = signature[offset++];
      }
      if (inputLength - offset < seqLength) {
        throw new Error('"seq" specified length of "' + seqLength + '", only "' + (inputLength - offset) + '" remaining');
      }
      if (signature[offset++] !== ENCODED_TAG_INT) {
        throw new Error('Could not find expected "int" for "r"');
      }
      var rLength = signature[offset++];
      if (inputLength - offset - 2 < rLength) {
        throw new Error('"r" specified length of "' + rLength + '", only "' + (inputLength - offset - 2) + '" available');
      }
      if (maxEncodedParamLength < rLength) {
        throw new Error('"r" specified length of "' + rLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
      }
      var rOffset = offset;
      offset += rLength;
      if (signature[offset++] !== ENCODED_TAG_INT) {
        throw new Error('Could not find expected "int" for "s"');
      }
      var sLength = signature[offset++];
      if (inputLength - offset !== sLength) {
        throw new Error('"s" specified length of "' + sLength + '", expected "' + (inputLength - offset) + '"');
      }
      if (maxEncodedParamLength < sLength) {
        throw new Error('"s" specified length of "' + sLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
      }
      var sOffset = offset;
      offset += sLength;
      if (offset !== inputLength) {
        throw new Error('Expected to consume entire buffer, but "' + (inputLength - offset) + '" bytes remain');
      }
      var rPadding = paramBytes - rLength, sPadding = paramBytes - sLength;
      var dst = Buffer2.allocUnsafe(rPadding + rLength + sPadding + sLength);
      for (offset = 0; offset < rPadding; ++offset) {
        dst[offset] = 0;
      }
      signature.copy(dst, offset, rOffset + Math.max(-rPadding, 0), rOffset + rLength);
      offset = paramBytes;
      for (var o = offset; offset < o + sPadding; ++offset) {
        dst[offset] = 0;
      }
      signature.copy(dst, offset, sOffset + Math.max(-sPadding, 0), sOffset + sLength);
      dst = dst.toString("base64");
      dst = base64Url(dst);
      return dst;
    }
    function countPadding(buf, start, stop) {
      var padding = 0;
      while (start + padding < stop && buf[start + padding] === 0) {
        ++padding;
      }
      var needsSign = buf[start + padding] >= MAX_OCTET;
      if (needsSign) {
        --padding;
      }
      return padding;
    }
    function joseToDer(signature, alg) {
      signature = signatureAsBuffer(signature);
      var paramBytes = getParamBytesForAlg(alg);
      var signatureBytes = signature.length;
      if (signatureBytes !== paramBytes * 2) {
        throw new TypeError('"' + alg + '" signatures must be "' + paramBytes * 2 + '" bytes, saw "' + signatureBytes + '"');
      }
      var rPadding = countPadding(signature, 0, paramBytes);
      var sPadding = countPadding(signature, paramBytes, signature.length);
      var rLength = paramBytes - rPadding;
      var sLength = paramBytes - sPadding;
      var rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;
      var shortLength = rsBytes < MAX_OCTET;
      var dst = Buffer2.allocUnsafe((shortLength ? 2 : 3) + rsBytes);
      var offset = 0;
      dst[offset++] = ENCODED_TAG_SEQ;
      if (shortLength) {
        dst[offset++] = rsBytes;
      } else {
        dst[offset++] = MAX_OCTET | 1;
        dst[offset++] = rsBytes & 255;
      }
      dst[offset++] = ENCODED_TAG_INT;
      dst[offset++] = rLength;
      if (rPadding < 0) {
        dst[offset++] = 0;
        offset += signature.copy(dst, offset, 0, paramBytes);
      } else {
        offset += signature.copy(dst, offset, rPadding, paramBytes);
      }
      dst[offset++] = ENCODED_TAG_INT;
      dst[offset++] = sLength;
      if (sPadding < 0) {
        dst[offset++] = 0;
        signature.copy(dst, offset, paramBytes);
      } else {
        signature.copy(dst, offset, paramBytes + sPadding);
      }
      return dst;
    }
    module2.exports = {
      derToJose,
      joseToDer
    };
  }
});

// node_modules/google-auth-library/build/src/auth/authclient.js
var require_authclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/authclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AuthClient = void 0;
    var events_1 = require("events");
    var transporters_1 = require_transporters();
    var AuthClient = class extends events_1.EventEmitter {
      constructor() {
        super(...arguments);
        this.transporter = new transporters_1.DefaultTransporter();
        this.credentials = {};
        this.eagerRefreshThresholdMillis = 5 * 60 * 1e3;
        this.forceRefreshOnFailure = false;
      }
      /**
       * Sets the auth credentials.
       */
      setCredentials(credentials) {
        this.credentials = credentials;
      }
      /**
       * Append additional headers, e.g., x-goog-user-project, shared across the
       * classes inheriting AuthClient. This method should be used by any method
       * that overrides getRequestMetadataAsync(), which is a shared helper for
       * setting request information in both gRPC and HTTP API calls.
       *
       * @param headers object to append additional headers to.
       */
      addSharedMetadataHeaders(headers) {
        if (!headers["x-goog-user-project"] && // don't override a value the user sets.
        this.quotaProjectId) {
          headers["x-goog-user-project"] = this.quotaProjectId;
        }
        return headers;
      }
    };
    exports2.AuthClient = AuthClient;
  }
});

// node_modules/google-auth-library/build/src/auth/loginticket.js
var require_loginticket = __commonJS({
  "node_modules/google-auth-library/build/src/auth/loginticket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LoginTicket = void 0;
    var LoginTicket = class {
      /**
       * Create a simple class to extract user ID from an ID Token
       *
       * @param {string} env Envelope of the jwt
       * @param {TokenPayload} pay Payload of the jwt
       * @constructor
       */
      constructor(env, pay) {
        this.envelope = env;
        this.payload = pay;
      }
      getEnvelope() {
        return this.envelope;
      }
      getPayload() {
        return this.payload;
      }
      /**
       * Create a simple class to extract user ID from an ID Token
       *
       * @return The user ID
       */
      getUserId() {
        const payload = this.getPayload();
        if (payload && payload.sub) {
          return payload.sub;
        }
        return null;
      }
      /**
       * Returns attributes from the login ticket.  This can contain
       * various information about the user session.
       *
       * @return The envelope and payload
       */
      getAttributes() {
        return { envelope: this.getEnvelope(), payload: this.getPayload() };
      }
    };
    exports2.LoginTicket = LoginTicket;
  }
});

// node_modules/google-auth-library/build/src/auth/oauth2client.js
var require_oauth2client = __commonJS({
  "node_modules/google-auth-library/build/src/auth/oauth2client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OAuth2Client = exports2.CertificateFormat = exports2.CodeChallengeMethod = void 0;
    var gaxios_1 = require_src5();
    var querystring = require("querystring");
    var stream = require("stream");
    var formatEcdsa = require_ecdsa_sig_formatter();
    var crypto_1 = require_crypto3();
    var authclient_1 = require_authclient();
    var loginticket_1 = require_loginticket();
    var CodeChallengeMethod;
    (function(CodeChallengeMethod2) {
      CodeChallengeMethod2["Plain"] = "plain";
      CodeChallengeMethod2["S256"] = "S256";
    })(CodeChallengeMethod || (exports2.CodeChallengeMethod = CodeChallengeMethod = {}));
    var CertificateFormat;
    (function(CertificateFormat2) {
      CertificateFormat2["PEM"] = "PEM";
      CertificateFormat2["JWK"] = "JWK";
    })(CertificateFormat || (exports2.CertificateFormat = CertificateFormat = {}));
    var OAuth2Client = class _OAuth2Client extends authclient_1.AuthClient {
      constructor(optionsOrClientId, clientSecret, redirectUri) {
        super();
        this.certificateCache = {};
        this.certificateExpiry = null;
        this.certificateCacheFormat = CertificateFormat.PEM;
        this.refreshTokenPromises = /* @__PURE__ */ new Map();
        const opts = optionsOrClientId && typeof optionsOrClientId === "object" ? optionsOrClientId : { clientId: optionsOrClientId, clientSecret, redirectUri };
        this._clientId = opts.clientId;
        this._clientSecret = opts.clientSecret;
        this.redirectUri = opts.redirectUri;
        this.eagerRefreshThresholdMillis = opts.eagerRefreshThresholdMillis || 5 * 60 * 1e3;
        this.forceRefreshOnFailure = !!opts.forceRefreshOnFailure;
      }
      /**
       * Generates URL for consent page landing.
       * @param opts Options.
       * @return URL to consent page.
       */
      generateAuthUrl(opts = {}) {
        if (opts.code_challenge_method && !opts.code_challenge) {
          throw new Error("If a code_challenge_method is provided, code_challenge must be included.");
        }
        opts.response_type = opts.response_type || "code";
        opts.client_id = opts.client_id || this._clientId;
        opts.redirect_uri = opts.redirect_uri || this.redirectUri;
        if (Array.isArray(opts.scope)) {
          opts.scope = opts.scope.join(" ");
        }
        const rootUrl = _OAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_;
        return rootUrl + "?" + querystring.stringify(opts);
      }
      generateCodeVerifier() {
        throw new Error("generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.");
      }
      /**
       * Convenience method to automatically generate a code_verifier, and its
       * resulting SHA256. If used, this must be paired with a S256
       * code_challenge_method.
       *
       * For a full example see:
       * https://github.com/googleapis/google-auth-library-nodejs/blob/main/samples/oauth2-codeVerifier.js
       */
      async generateCodeVerifierAsync() {
        const crypto2 = (0, crypto_1.createCrypto)();
        const randomString = crypto2.randomBytesBase64(96);
        const codeVerifier = randomString.replace(/\+/g, "~").replace(/=/g, "_").replace(/\//g, "-");
        const unencodedCodeChallenge = await crypto2.sha256DigestBase64(codeVerifier);
        const codeChallenge = unencodedCodeChallenge.split("=")[0].replace(/\+/g, "-").replace(/\//g, "_");
        return { codeVerifier, codeChallenge };
      }
      getToken(codeOrOptions, callback) {
        const options = typeof codeOrOptions === "string" ? { code: codeOrOptions } : codeOrOptions;
        if (callback) {
          this.getTokenAsync(options).then((r) => callback(null, r.tokens, r.res), (e) => callback(e, null, e.response));
        } else {
          return this.getTokenAsync(options);
        }
      }
      async getTokenAsync(options) {
        const url = _OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;
        const values = {
          code: options.code,
          client_id: options.client_id || this._clientId,
          client_secret: this._clientSecret,
          redirect_uri: options.redirect_uri || this.redirectUri,
          grant_type: "authorization_code",
          code_verifier: options.codeVerifier
        };
        const res = await this.transporter.request({
          method: "POST",
          url,
          data: querystring.stringify(values),
          headers: { "Content-Type": "application/x-www-form-urlencoded" }
        });
        const tokens = res.data;
        if (res.data && res.data.expires_in) {
          tokens.expiry_date = (/* @__PURE__ */ new Date()).getTime() + res.data.expires_in * 1e3;
          delete tokens.expires_in;
        }
        this.emit("tokens", tokens);
        return { tokens, res };
      }
      /**
       * Refreshes the access token.
       * @param refresh_token Existing refresh token.
       * @private
       */
      async refreshToken(refreshToken) {
        if (!refreshToken) {
          return this.refreshTokenNoCache(refreshToken);
        }
        if (this.refreshTokenPromises.has(refreshToken)) {
          return this.refreshTokenPromises.get(refreshToken);
        }
        const p = this.refreshTokenNoCache(refreshToken).then((r) => {
          this.refreshTokenPromises.delete(refreshToken);
          return r;
        }, (e) => {
          this.refreshTokenPromises.delete(refreshToken);
          throw e;
        });
        this.refreshTokenPromises.set(refreshToken, p);
        return p;
      }
      async refreshTokenNoCache(refreshToken) {
        var _a;
        if (!refreshToken) {
          throw new Error("No refresh token is set.");
        }
        const url = _OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;
        const data = {
          refresh_token: refreshToken,
          client_id: this._clientId,
          client_secret: this._clientSecret,
          grant_type: "refresh_token"
        };
        let res;
        try {
          res = await this.transporter.request({
            method: "POST",
            url,
            data: querystring.stringify(data),
            headers: { "Content-Type": "application/x-www-form-urlencoded" }
          });
        } catch (e) {
          if (e instanceof gaxios_1.GaxiosError && e.message === "invalid_grant" && ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) && /ReAuth/i.test(e.response.data.error_description)) {
            e.message = JSON.stringify(e.response.data);
          }
          throw e;
        }
        const tokens = res.data;
        if (res.data && res.data.expires_in) {
          tokens.expiry_date = (/* @__PURE__ */ new Date()).getTime() + res.data.expires_in * 1e3;
          delete tokens.expires_in;
        }
        this.emit("tokens", tokens);
        return { tokens, res };
      }
      refreshAccessToken(callback) {
        if (callback) {
          this.refreshAccessTokenAsync().then((r) => callback(null, r.credentials, r.res), callback);
        } else {
          return this.refreshAccessTokenAsync();
        }
      }
      async refreshAccessTokenAsync() {
        const r = await this.refreshToken(this.credentials.refresh_token);
        const tokens = r.tokens;
        tokens.refresh_token = this.credentials.refresh_token;
        this.credentials = tokens;
        return { credentials: this.credentials, res: r.res };
      }
      getAccessToken(callback) {
        if (callback) {
          this.getAccessTokenAsync().then((r) => callback(null, r.token, r.res), callback);
        } else {
          return this.getAccessTokenAsync();
        }
      }
      async getAccessTokenAsync() {
        const shouldRefresh = !this.credentials.access_token || this.isTokenExpiring();
        if (shouldRefresh) {
          if (!this.credentials.refresh_token) {
            if (this.refreshHandler) {
              const refreshedAccessToken = await this.processAndValidateRefreshHandler();
              if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {
                this.setCredentials(refreshedAccessToken);
                return { token: this.credentials.access_token };
              }
            } else {
              throw new Error("No refresh token or refresh handler callback is set.");
            }
          }
          const r = await this.refreshAccessTokenAsync();
          if (!r.credentials || r.credentials && !r.credentials.access_token) {
            throw new Error("Could not refresh access token.");
          }
          return { token: r.credentials.access_token, res: r.res };
        } else {
          return { token: this.credentials.access_token };
        }
      }
      /**
       * The main authentication interface.  It takes an optional url which when
       * present is the endpoint being accessed, and returns a Promise which
       * resolves with authorization header fields.
       *
       * In OAuth2Client, the result has the form:
       * { Authorization: 'Bearer <access_token_value>' }
       * @param url The optional url being authorized
       */
      async getRequestHeaders(url) {
        const headers = (await this.getRequestMetadataAsync(url)).headers;
        return headers;
      }
      async getRequestMetadataAsync(url) {
        const thisCreds = this.credentials;
        if (!thisCreds.access_token && !thisCreds.refresh_token && !this.apiKey && !this.refreshHandler) {
          throw new Error("No access, refresh token, API key or refresh handler callback is set.");
        }
        if (thisCreds.access_token && !this.isTokenExpiring()) {
          thisCreds.token_type = thisCreds.token_type || "Bearer";
          const headers2 = {
            Authorization: thisCreds.token_type + " " + thisCreds.access_token
          };
          return { headers: this.addSharedMetadataHeaders(headers2) };
        }
        if (this.refreshHandler) {
          const refreshedAccessToken = await this.processAndValidateRefreshHandler();
          if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {
            this.setCredentials(refreshedAccessToken);
            const headers2 = {
              Authorization: "Bearer " + this.credentials.access_token
            };
            return { headers: this.addSharedMetadataHeaders(headers2) };
          }
        }
        if (this.apiKey) {
          return { headers: { "X-Goog-Api-Key": this.apiKey } };
        }
        let r = null;
        let tokens = null;
        try {
          r = await this.refreshToken(thisCreds.refresh_token);
          tokens = r.tokens;
        } catch (err) {
          const e = err;
          if (e.response && (e.response.status === 403 || e.response.status === 404)) {
            e.message = `Could not refresh access token: ${e.message}`;
          }
          throw e;
        }
        const credentials = this.credentials;
        credentials.token_type = credentials.token_type || "Bearer";
        tokens.refresh_token = credentials.refresh_token;
        this.credentials = tokens;
        const headers = {
          Authorization: credentials.token_type + " " + tokens.access_token
        };
        return { headers: this.addSharedMetadataHeaders(headers), res: r.res };
      }
      /**
       * Generates an URL to revoke the given token.
       * @param token The existing token to be revoked.
       */
      static getRevokeTokenUrl(token) {
        const parameters = querystring.stringify({ token });
        return `${_OAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_}?${parameters}`;
      }
      revokeToken(token, callback) {
        const opts = {
          url: _OAuth2Client.getRevokeTokenUrl(token),
          method: "POST"
        };
        if (callback) {
          this.transporter.request(opts).then((r) => callback(null, r), callback);
        } else {
          return this.transporter.request(opts);
        }
      }
      revokeCredentials(callback) {
        if (callback) {
          this.revokeCredentialsAsync().then((res) => callback(null, res), callback);
        } else {
          return this.revokeCredentialsAsync();
        }
      }
      async revokeCredentialsAsync() {
        const token = this.credentials.access_token;
        this.credentials = {};
        if (token) {
          return this.revokeToken(token);
        } else {
          throw new Error("No access token to revoke.");
        }
      }
      request(opts, callback) {
        if (callback) {
          this.requestAsync(opts).then((r) => callback(null, r), (e) => {
            return callback(e, e.response);
          });
        } else {
          return this.requestAsync(opts);
        }
      }
      async requestAsync(opts, retry = false) {
        let r2;
        try {
          const r = await this.getRequestMetadataAsync(opts.url);
          opts.headers = opts.headers || {};
          if (r.headers && r.headers["x-goog-user-project"]) {
            opts.headers["x-goog-user-project"] = r.headers["x-goog-user-project"];
          }
          if (r.headers && r.headers.Authorization) {
            opts.headers.Authorization = r.headers.Authorization;
          }
          if (this.apiKey) {
            opts.headers["X-Goog-Api-Key"] = this.apiKey;
          }
          r2 = await this.transporter.request(opts);
        } catch (e) {
          const res = e.response;
          if (res) {
            const statusCode = res.status;
            const mayRequireRefresh = this.credentials && this.credentials.access_token && this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure);
            const mayRequireRefreshWithNoRefreshToken = this.credentials && this.credentials.access_token && !this.credentials.refresh_token && (!this.credentials.expiry_date || this.forceRefreshOnFailure) && this.refreshHandler;
            const isReadableStream = res.config.data instanceof stream.Readable;
            const isAuthErr = statusCode === 401 || statusCode === 403;
            if (!retry && isAuthErr && !isReadableStream && mayRequireRefresh) {
              await this.refreshAccessTokenAsync();
              return this.requestAsync(opts, true);
            } else if (!retry && isAuthErr && !isReadableStream && mayRequireRefreshWithNoRefreshToken) {
              const refreshedAccessToken = await this.processAndValidateRefreshHandler();
              if (refreshedAccessToken === null || refreshedAccessToken === void 0 ? void 0 : refreshedAccessToken.access_token) {
                this.setCredentials(refreshedAccessToken);
              }
              return this.requestAsync(opts, true);
            }
          }
          throw e;
        }
        return r2;
      }
      verifyIdToken(options, callback) {
        if (callback && typeof callback !== "function") {
          throw new Error("This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.");
        }
        if (callback) {
          this.verifyIdTokenAsync(options).then((r) => callback(null, r), callback);
        } else {
          return this.verifyIdTokenAsync(options);
        }
      }
      async verifyIdTokenAsync(options) {
        if (!options.idToken) {
          throw new Error("The verifyIdToken method requires an ID Token");
        }
        const response = await this.getFederatedSignonCertsAsync();
        const login = await this.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, _OAuth2Client.ISSUERS_, options.maxExpiry);
        return login;
      }
      /**
       * Obtains information about the provisioned access token.  Especially useful
       * if you want to check the scopes that were provisioned to a given token.
       *
       * @param accessToken Required.  The Access Token for which you want to get
       * user info.
       */
      async getTokenInfo(accessToken) {
        const { data } = await this.transporter.request({
          method: "POST",
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            Authorization: `Bearer ${accessToken}`
          },
          url: _OAuth2Client.GOOGLE_TOKEN_INFO_URL
        });
        const info = Object.assign({
          expiry_date: (/* @__PURE__ */ new Date()).getTime() + data.expires_in * 1e3,
          scopes: data.scope.split(" ")
        }, data);
        delete info.expires_in;
        delete info.scope;
        return info;
      }
      getFederatedSignonCerts(callback) {
        if (callback) {
          this.getFederatedSignonCertsAsync().then((r) => callback(null, r.certs, r.res), callback);
        } else {
          return this.getFederatedSignonCertsAsync();
        }
      }
      async getFederatedSignonCertsAsync() {
        const nowTime = (/* @__PURE__ */ new Date()).getTime();
        const format = (0, crypto_1.hasBrowserCrypto)() ? CertificateFormat.JWK : CertificateFormat.PEM;
        if (this.certificateExpiry && nowTime < this.certificateExpiry.getTime() && this.certificateCacheFormat === format) {
          return { certs: this.certificateCache, format };
        }
        let res;
        let url;
        switch (format) {
          case CertificateFormat.PEM:
            url = _OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_;
            break;
          case CertificateFormat.JWK:
            url = _OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_;
            break;
          default:
            throw new Error(`Unsupported certificate format ${format}`);
        }
        try {
          res = await this.transporter.request({ url });
        } catch (e) {
          if (e instanceof Error) {
            e.message = `Failed to retrieve verification certificates: ${e.message}`;
          }
          throw e;
        }
        const cacheControl = res ? res.headers["cache-control"] : void 0;
        let cacheAge = -1;
        if (cacheControl) {
          const pattern = new RegExp("max-age=([0-9]*)");
          const regexResult = pattern.exec(cacheControl);
          if (regexResult && regexResult.length === 2) {
            cacheAge = Number(regexResult[1]) * 1e3;
          }
        }
        let certificates = {};
        switch (format) {
          case CertificateFormat.PEM:
            certificates = res.data;
            break;
          case CertificateFormat.JWK:
            for (const key of res.data.keys) {
              certificates[key.kid] = key;
            }
            break;
          default:
            throw new Error(`Unsupported certificate format ${format}`);
        }
        const now = /* @__PURE__ */ new Date();
        this.certificateExpiry = cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);
        this.certificateCache = certificates;
        this.certificateCacheFormat = format;
        return { certs: certificates, format, res };
      }
      getIapPublicKeys(callback) {
        if (callback) {
          this.getIapPublicKeysAsync().then((r) => callback(null, r.pubkeys, r.res), callback);
        } else {
          return this.getIapPublicKeysAsync();
        }
      }
      async getIapPublicKeysAsync() {
        let res;
        const url = _OAuth2Client.GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_;
        try {
          res = await this.transporter.request({ url });
        } catch (e) {
          if (e instanceof Error) {
            e.message = `Failed to retrieve verification certificates: ${e.message}`;
          }
          throw e;
        }
        return { pubkeys: res.data, res };
      }
      verifySignedJwtWithCerts() {
        throw new Error("verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.");
      }
      /**
       * Verify the id token is signed with the correct certificate
       * and is from the correct audience.
       * @param jwt The jwt to verify (The ID Token in this case).
       * @param certs The array of certs to test the jwt against.
       * @param requiredAudience The audience to test the jwt against.
       * @param issuers The allowed issuers of the jwt (Optional).
       * @param maxExpiry The max expiry the certificate can be (Optional).
       * @return Returns a promise resolving to LoginTicket on verification.
       */
      async verifySignedJwtWithCertsAsync(jwt, certs, requiredAudience, issuers, maxExpiry) {
        const crypto2 = (0, crypto_1.createCrypto)();
        if (!maxExpiry) {
          maxExpiry = _OAuth2Client.MAX_TOKEN_LIFETIME_SECS_;
        }
        const segments = jwt.split(".");
        if (segments.length !== 3) {
          throw new Error("Wrong number of segments in token: " + jwt);
        }
        const signed = segments[0] + "." + segments[1];
        let signature = segments[2];
        let envelope;
        let payload;
        try {
          envelope = JSON.parse(crypto2.decodeBase64StringUtf8(segments[0]));
        } catch (err) {
          if (err instanceof Error) {
            err.message = `Can't parse token envelope: ${segments[0]}': ${err.message}`;
          }
          throw err;
        }
        if (!envelope) {
          throw new Error("Can't parse token envelope: " + segments[0]);
        }
        try {
          payload = JSON.parse(crypto2.decodeBase64StringUtf8(segments[1]));
        } catch (err) {
          if (err instanceof Error) {
            err.message = `Can't parse token payload '${segments[0]}`;
          }
          throw err;
        }
        if (!payload) {
          throw new Error("Can't parse token payload: " + segments[1]);
        }
        if (!Object.prototype.hasOwnProperty.call(certs, envelope.kid)) {
          throw new Error("No pem found for envelope: " + JSON.stringify(envelope));
        }
        const cert = certs[envelope.kid];
        if (envelope.alg === "ES256") {
          signature = formatEcdsa.joseToDer(signature, "ES256").toString("base64");
        }
        const verified = await crypto2.verify(cert, signed, signature);
        if (!verified) {
          throw new Error("Invalid token signature: " + jwt);
        }
        if (!payload.iat) {
          throw new Error("No issue time in token: " + JSON.stringify(payload));
        }
        if (!payload.exp) {
          throw new Error("No expiration time in token: " + JSON.stringify(payload));
        }
        const iat = Number(payload.iat);
        if (isNaN(iat))
          throw new Error("iat field using invalid format");
        const exp = Number(payload.exp);
        if (isNaN(exp))
          throw new Error("exp field using invalid format");
        const now = (/* @__PURE__ */ new Date()).getTime() / 1e3;
        if (exp >= now + maxExpiry) {
          throw new Error("Expiration time too far in future: " + JSON.stringify(payload));
        }
        const earliest = iat - _OAuth2Client.CLOCK_SKEW_SECS_;
        const latest = exp + _OAuth2Client.CLOCK_SKEW_SECS_;
        if (now < earliest) {
          throw new Error("Token used too early, " + now + " < " + earliest + ": " + JSON.stringify(payload));
        }
        if (now > latest) {
          throw new Error("Token used too late, " + now + " > " + latest + ": " + JSON.stringify(payload));
        }
        if (issuers && issuers.indexOf(payload.iss) < 0) {
          throw new Error("Invalid issuer, expected one of [" + issuers + "], but got " + payload.iss);
        }
        if (typeof requiredAudience !== "undefined" && requiredAudience !== null) {
          const aud = payload.aud;
          let audVerified = false;
          if (requiredAudience.constructor === Array) {
            audVerified = requiredAudience.indexOf(aud) > -1;
          } else {
            audVerified = aud === requiredAudience;
          }
          if (!audVerified) {
            throw new Error("Wrong recipient, payload audience != requiredAudience");
          }
        }
        return new loginticket_1.LoginTicket(envelope, payload);
      }
      /**
       * Returns a promise that resolves with AccessTokenResponse type if
       * refreshHandler is defined.
       * If not, nothing is returned.
       */
      async processAndValidateRefreshHandler() {
        if (this.refreshHandler) {
          const accessTokenResponse = await this.refreshHandler();
          if (!accessTokenResponse.access_token) {
            throw new Error("No access token is returned by the refreshHandler callback.");
          }
          return accessTokenResponse;
        }
        return;
      }
      /**
       * Returns true if a token is expired or will expire within
       * eagerRefreshThresholdMillismilliseconds.
       * If there is no expiry time, assumes the token is not expired or expiring.
       */
      isTokenExpiring() {
        const expiryDate = this.credentials.expiry_date;
        return expiryDate ? expiryDate <= (/* @__PURE__ */ new Date()).getTime() + this.eagerRefreshThresholdMillis : false;
      }
    };
    exports2.OAuth2Client = OAuth2Client;
    OAuth2Client.GOOGLE_TOKEN_INFO_URL = "https://oauth2.googleapis.com/tokeninfo";
    OAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_ = "https://accounts.google.com/o/oauth2/v2/auth";
    OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_ = "https://oauth2.googleapis.com/token";
    OAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_ = "https://oauth2.googleapis.com/revoke";
    OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_ = "https://www.googleapis.com/oauth2/v1/certs";
    OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_ = "https://www.googleapis.com/oauth2/v3/certs";
    OAuth2Client.GOOGLE_OAUTH2_IAP_PUBLIC_KEY_URL_ = "https://www.gstatic.com/iap/verify/public_key";
    OAuth2Client.CLOCK_SKEW_SECS_ = 300;
    OAuth2Client.MAX_TOKEN_LIFETIME_SECS_ = 86400;
    OAuth2Client.ISSUERS_ = [
      "accounts.google.com",
      "https://accounts.google.com"
    ];
  }
});

// node_modules/google-auth-library/build/src/auth/computeclient.js
var require_computeclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/computeclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Compute = void 0;
    var gaxios_1 = require_src5();
    var gcpMetadata = require_src6();
    var oauth2client_1 = require_oauth2client();
    var Compute = class extends oauth2client_1.OAuth2Client {
      /**
       * Google Compute Engine service account credentials.
       *
       * Retrieve access token from the metadata server.
       * See: https://developers.google.com/compute/docs/authentication
       */
      constructor(options = {}) {
        super(options);
        this.credentials = { expiry_date: 1, refresh_token: "compute-placeholder" };
        this.serviceAccountEmail = options.serviceAccountEmail || "default";
        this.scopes = Array.isArray(options.scopes) ? options.scopes : options.scopes ? [options.scopes] : [];
      }
      /**
       * Refreshes the access token.
       * @param refreshToken Unused parameter
       */
      async refreshTokenNoCache(refreshToken) {
        const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;
        let data;
        try {
          const instanceOptions = {
            property: tokenPath
          };
          if (this.scopes.length > 0) {
            instanceOptions.params = {
              scopes: this.scopes.join(",")
            };
          }
          data = await gcpMetadata.instance(instanceOptions);
        } catch (e) {
          if (e instanceof gaxios_1.GaxiosError) {
            e.message = `Could not refresh access token: ${e.message}`;
            this.wrapError(e);
          }
          throw e;
        }
        const tokens = data;
        if (data && data.expires_in) {
          tokens.expiry_date = (/* @__PURE__ */ new Date()).getTime() + data.expires_in * 1e3;
          delete tokens.expires_in;
        }
        this.emit("tokens", tokens);
        return { tokens, res: null };
      }
      /**
       * Fetches an ID token.
       * @param targetAudience the audience for the fetched ID token.
       */
      async fetchIdToken(targetAudience) {
        const idTokenPath = `service-accounts/${this.serviceAccountEmail}/identity?format=full&audience=${targetAudience}`;
        let idToken;
        try {
          const instanceOptions = {
            property: idTokenPath
          };
          idToken = await gcpMetadata.instance(instanceOptions);
        } catch (e) {
          if (e instanceof Error) {
            e.message = `Could not fetch ID token: ${e.message}`;
          }
          throw e;
        }
        return idToken;
      }
      wrapError(e) {
        const res = e.response;
        if (res && res.status) {
          e.status = res.status;
          if (res.status === 403) {
            e.message = "A Forbidden error was returned while attempting to retrieve an access token for the Compute Engine built-in service account. This may be because the Compute Engine instance does not have the correct permission scopes specified: " + e.message;
          } else if (res.status === 404) {
            e.message = "A Not Found error was returned while attempting to retrieve an accesstoken for the Compute Engine built-in service account. This may be because the Compute Engine instance does not have any permission scopes specified: " + e.message;
          }
        }
      }
    };
    exports2.Compute = Compute;
  }
});

// node_modules/google-auth-library/build/src/auth/idtokenclient.js
var require_idtokenclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/idtokenclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IdTokenClient = void 0;
    var oauth2client_1 = require_oauth2client();
    var IdTokenClient = class extends oauth2client_1.OAuth2Client {
      /**
       * Google ID Token client
       *
       * Retrieve access token from the metadata server.
       * See: https://developers.google.com/compute/docs/authentication
       */
      constructor(options) {
        super();
        this.targetAudience = options.targetAudience;
        this.idTokenProvider = options.idTokenProvider;
      }
      async getRequestMetadataAsync(url) {
        if (!this.credentials.id_token || !this.credentials.expiry_date || this.isTokenExpiring()) {
          const idToken = await this.idTokenProvider.fetchIdToken(this.targetAudience);
          this.credentials = {
            id_token: idToken,
            expiry_date: this.getIdTokenExpiryDate(idToken)
          };
        }
        const headers = {
          Authorization: "Bearer " + this.credentials.id_token
        };
        return { headers };
      }
      getIdTokenExpiryDate(idToken) {
        const payloadB64 = idToken.split(".")[1];
        if (payloadB64) {
          const payload = JSON.parse(Buffer.from(payloadB64, "base64").toString("ascii"));
          return payload.exp * 1e3;
        }
      }
    };
    exports2.IdTokenClient = IdTokenClient;
  }
});

// node_modules/google-auth-library/build/src/auth/envDetect.js
var require_envDetect = __commonJS({
  "node_modules/google-auth-library/build/src/auth/envDetect.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEnv = exports2.clear = exports2.GCPEnv = void 0;
    var gcpMetadata = require_src6();
    var GCPEnv;
    (function(GCPEnv2) {
      GCPEnv2["APP_ENGINE"] = "APP_ENGINE";
      GCPEnv2["KUBERNETES_ENGINE"] = "KUBERNETES_ENGINE";
      GCPEnv2["CLOUD_FUNCTIONS"] = "CLOUD_FUNCTIONS";
      GCPEnv2["COMPUTE_ENGINE"] = "COMPUTE_ENGINE";
      GCPEnv2["CLOUD_RUN"] = "CLOUD_RUN";
      GCPEnv2["NONE"] = "NONE";
    })(GCPEnv || (exports2.GCPEnv = GCPEnv = {}));
    var envPromise;
    function clear() {
      envPromise = void 0;
    }
    exports2.clear = clear;
    async function getEnv() {
      if (envPromise) {
        return envPromise;
      }
      envPromise = getEnvMemoized();
      return envPromise;
    }
    exports2.getEnv = getEnv;
    async function getEnvMemoized() {
      let env = GCPEnv.NONE;
      if (isAppEngine()) {
        env = GCPEnv.APP_ENGINE;
      } else if (isCloudFunction()) {
        env = GCPEnv.CLOUD_FUNCTIONS;
      } else if (await isComputeEngine()) {
        if (await isKubernetesEngine()) {
          env = GCPEnv.KUBERNETES_ENGINE;
        } else if (isCloudRun()) {
          env = GCPEnv.CLOUD_RUN;
        } else {
          env = GCPEnv.COMPUTE_ENGINE;
        }
      } else {
        env = GCPEnv.NONE;
      }
      return env;
    }
    function isAppEngine() {
      return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);
    }
    function isCloudFunction() {
      return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);
    }
    function isCloudRun() {
      return !!process.env.K_CONFIGURATION;
    }
    async function isKubernetesEngine() {
      try {
        await gcpMetadata.instance("attributes/cluster-name");
        return true;
      } catch (e) {
        return false;
      }
    }
    async function isComputeEngine() {
      return gcpMetadata.isAvailable();
    }
  }
});

// node_modules/jws/lib/data-stream.js
var require_data_stream = __commonJS({
  "node_modules/jws/lib/data-stream.js"(exports2, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    var Stream = require("stream");
    var util = require("util");
    function DataStream(data) {
      this.buffer = null;
      this.writable = true;
      this.readable = true;
      if (!data) {
        this.buffer = Buffer2.alloc(0);
        return this;
      }
      if (typeof data.pipe === "function") {
        this.buffer = Buffer2.alloc(0);
        data.pipe(this);
        return this;
      }
      if (data.length || typeof data === "object") {
        this.buffer = data;
        this.writable = false;
        process.nextTick(function() {
          this.emit("end", data);
          this.readable = false;
          this.emit("close");
        }.bind(this));
        return this;
      }
      throw new TypeError("Unexpected data type (" + typeof data + ")");
    }
    util.inherits(DataStream, Stream);
    DataStream.prototype.write = function write(data) {
      this.buffer = Buffer2.concat([this.buffer, Buffer2.from(data)]);
      this.emit("data", data);
    };
    DataStream.prototype.end = function end(data) {
      if (data)
        this.write(data);
      this.emit("end", data);
      this.emit("close");
      this.writable = false;
      this.readable = false;
    };
    module2.exports = DataStream;
  }
});

// node_modules/buffer-equal-constant-time/index.js
var require_buffer_equal_constant_time = __commonJS({
  "node_modules/buffer-equal-constant-time/index.js"(exports2, module2) {
    "use strict";
    var Buffer2 = require("buffer").Buffer;
    var SlowBuffer = require("buffer").SlowBuffer;
    module2.exports = bufferEq;
    function bufferEq(a, b) {
      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
        return false;
      }
      if (a.length !== b.length) {
        return false;
      }
      var c = 0;
      for (var i = 0; i < a.length; i++) {
        c |= a[i] ^ b[i];
      }
      return c === 0;
    }
    bufferEq.install = function() {
      Buffer2.prototype.equal = SlowBuffer.prototype.equal = function equal(that) {
        return bufferEq(this, that);
      };
    };
    var origBufEqual = Buffer2.prototype.equal;
    var origSlowBufEqual = SlowBuffer.prototype.equal;
    bufferEq.restore = function() {
      Buffer2.prototype.equal = origBufEqual;
      SlowBuffer.prototype.equal = origSlowBufEqual;
    };
  }
});

// node_modules/jwa/index.js
var require_jwa = __commonJS({
  "node_modules/jwa/index.js"(exports2, module2) {
    var bufferEqual = require_buffer_equal_constant_time();
    var Buffer2 = require_safe_buffer().Buffer;
    var crypto2 = require("crypto");
    var formatEcdsa = require_ecdsa_sig_formatter();
    var util = require("util");
    var MSG_INVALID_ALGORITHM = '"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" and "none".';
    var MSG_INVALID_SECRET = "secret must be a string or buffer";
    var MSG_INVALID_VERIFIER_KEY = "key must be a string or a buffer";
    var MSG_INVALID_SIGNER_KEY = "key must be a string, a buffer or an object";
    var supportsKeyObjects = typeof crypto2.createPublicKey === "function";
    if (supportsKeyObjects) {
      MSG_INVALID_VERIFIER_KEY += " or a KeyObject";
      MSG_INVALID_SECRET += "or a KeyObject";
    }
    function checkIsPublicKey(key) {
      if (Buffer2.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.type !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.asymmetricKeyType !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
    }
    function checkIsPrivateKey(key) {
      if (Buffer2.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (typeof key === "object") {
        return;
      }
      throw typeError(MSG_INVALID_SIGNER_KEY);
    }
    function checkIsSecretKey(key) {
      if (Buffer2.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return key;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (key.type !== "secret") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_SECRET);
      }
    }
    function fromBase64(base64) {
      return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function toBase64(base64url) {
      base64url = base64url.toString();
      var padding = 4 - base64url.length % 4;
      if (padding !== 4) {
        for (var i = 0; i < padding; ++i) {
          base64url += "=";
        }
      }
      return base64url.replace(/\-/g, "+").replace(/_/g, "/");
    }
    function typeError(template) {
      var args = [].slice.call(arguments, 1);
      var errMsg = util.format.bind(util, template).apply(null, args);
      return new TypeError(errMsg);
    }
    function bufferOrString(obj) {
      return Buffer2.isBuffer(obj) || typeof obj === "string";
    }
    function normalizeInput(thing) {
      if (!bufferOrString(thing))
        thing = JSON.stringify(thing);
      return thing;
    }
    function createHmacSigner(bits) {
      return function sign(thing, secret) {
        checkIsSecretKey(secret);
        thing = normalizeInput(thing);
        var hmac = crypto2.createHmac("sha" + bits, secret);
        var sig = (hmac.update(thing), hmac.digest("base64"));
        return fromBase64(sig);
      };
    }
    function createHmacVerifier(bits) {
      return function verify(thing, signature, secret) {
        var computedSig = createHmacSigner(bits)(thing, secret);
        return bufferEqual(Buffer2.from(signature), Buffer2.from(computedSig));
      };
    }
    function createKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto2.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign(privateKey, "base64"));
        return fromBase64(sig);
      };
    }
    function createKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto2.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify(publicKey, signature, "base64");
      };
    }
    function createPSSKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto2.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign({
          key: privateKey,
          padding: crypto2.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto2.constants.RSA_PSS_SALTLEN_DIGEST
        }, "base64"));
        return fromBase64(sig);
      };
    }
    function createPSSKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto2.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify({
          key: publicKey,
          padding: crypto2.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto2.constants.RSA_PSS_SALTLEN_DIGEST
        }, signature, "base64");
      };
    }
    function createECDSASigner(bits) {
      var inner = createKeySigner(bits);
      return function sign() {
        var signature = inner.apply(null, arguments);
        signature = formatEcdsa.derToJose(signature, "ES" + bits);
        return signature;
      };
    }
    function createECDSAVerifer(bits) {
      var inner = createKeyVerifier(bits);
      return function verify(thing, signature, publicKey) {
        signature = formatEcdsa.joseToDer(signature, "ES" + bits).toString("base64");
        var result = inner(thing, signature, publicKey);
        return result;
      };
    }
    function createNoneSigner() {
      return function sign() {
        return "";
      };
    }
    function createNoneVerifier() {
      return function verify(thing, signature) {
        return signature === "";
      };
    }
    module2.exports = function jwa(algorithm) {
      var signerFactories = {
        hs: createHmacSigner,
        rs: createKeySigner,
        ps: createPSSKeySigner,
        es: createECDSASigner,
        none: createNoneSigner
      };
      var verifierFactories = {
        hs: createHmacVerifier,
        rs: createKeyVerifier,
        ps: createPSSKeyVerifier,
        es: createECDSAVerifer,
        none: createNoneVerifier
      };
      var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/);
      if (!match)
        throw typeError(MSG_INVALID_ALGORITHM, algorithm);
      var algo = (match[1] || match[3]).toLowerCase();
      var bits = match[2];
      return {
        sign: signerFactories[algo](bits),
        verify: verifierFactories[algo](bits)
      };
    };
  }
});

// node_modules/jws/lib/tostring.js
var require_tostring = __commonJS({
  "node_modules/jws/lib/tostring.js"(exports2, module2) {
    var Buffer2 = require("buffer").Buffer;
    module2.exports = function toString(obj) {
      if (typeof obj === "string")
        return obj;
      if (typeof obj === "number" || Buffer2.isBuffer(obj))
        return obj.toString();
      return JSON.stringify(obj);
    };
  }
});

// node_modules/jws/lib/sign-stream.js
var require_sign_stream = __commonJS({
  "node_modules/jws/lib/sign-stream.js"(exports2, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream();
    var jwa = require_jwa();
    var Stream = require("stream");
    var toString = require_tostring();
    var util = require("util");
    function base64url(string, encoding) {
      return Buffer2.from(string, encoding).toString("base64").replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function jwsSecuredInput(header, payload, encoding) {
      encoding = encoding || "utf8";
      var encodedHeader = base64url(toString(header), "binary");
      var encodedPayload = base64url(toString(payload), encoding);
      return util.format("%s.%s", encodedHeader, encodedPayload);
    }
    function jwsSign(opts) {
      var header = opts.header;
      var payload = opts.payload;
      var secretOrKey = opts.secret || opts.privateKey;
      var encoding = opts.encoding;
      var algo = jwa(header.alg);
      var securedInput = jwsSecuredInput(header, payload, encoding);
      var signature = algo.sign(securedInput, secretOrKey);
      return util.format("%s.%s", securedInput, signature);
    }
    function SignStream(opts) {
      var secret = opts.secret || opts.privateKey || opts.key;
      var secretStream = new DataStream(secret);
      this.readable = true;
      this.header = opts.header;
      this.encoding = opts.encoding;
      this.secret = this.privateKey = this.key = secretStream;
      this.payload = new DataStream(opts.payload);
      this.secret.once("close", function() {
        if (!this.payload.writable && this.readable)
          this.sign();
      }.bind(this));
      this.payload.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.sign();
      }.bind(this));
    }
    util.inherits(SignStream, Stream);
    SignStream.prototype.sign = function sign() {
      try {
        var signature = jwsSign({
          header: this.header,
          payload: this.payload.buffer,
          secret: this.secret.buffer,
          encoding: this.encoding
        });
        this.emit("done", signature);
        this.emit("data", signature);
        this.emit("end");
        this.readable = false;
        return signature;
      } catch (e) {
        this.readable = false;
        this.emit("error", e);
        this.emit("close");
      }
    };
    SignStream.sign = jwsSign;
    module2.exports = SignStream;
  }
});

// node_modules/jws/lib/verify-stream.js
var require_verify_stream = __commonJS({
  "node_modules/jws/lib/verify-stream.js"(exports2, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream();
    var jwa = require_jwa();
    var Stream = require("stream");
    var toString = require_tostring();
    var util = require("util");
    var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;
    function isObject(thing) {
      return Object.prototype.toString.call(thing) === "[object Object]";
    }
    function safeJsonParse(thing) {
      if (isObject(thing))
        return thing;
      try {
        return JSON.parse(thing);
      } catch (e) {
        return void 0;
      }
    }
    function headerFromJWS(jwsSig) {
      var encodedHeader = jwsSig.split(".", 1)[0];
      return safeJsonParse(Buffer2.from(encodedHeader, "base64").toString("binary"));
    }
    function securedInputFromJWS(jwsSig) {
      return jwsSig.split(".", 2).join(".");
    }
    function signatureFromJWS(jwsSig) {
      return jwsSig.split(".")[2];
    }
    function payloadFromJWS(jwsSig, encoding) {
      encoding = encoding || "utf8";
      var payload = jwsSig.split(".")[1];
      return Buffer2.from(payload, "base64").toString(encoding);
    }
    function isValidJws(string) {
      return JWS_REGEX.test(string) && !!headerFromJWS(string);
    }
    function jwsVerify(jwsSig, algorithm, secretOrKey) {
      if (!algorithm) {
        var err = new Error("Missing algorithm parameter for jws.verify");
        err.code = "MISSING_ALGORITHM";
        throw err;
      }
      jwsSig = toString(jwsSig);
      var signature = signatureFromJWS(jwsSig);
      var securedInput = securedInputFromJWS(jwsSig);
      var algo = jwa(algorithm);
      return algo.verify(securedInput, signature, secretOrKey);
    }
    function jwsDecode(jwsSig, opts) {
      opts = opts || {};
      jwsSig = toString(jwsSig);
      if (!isValidJws(jwsSig))
        return null;
      var header = headerFromJWS(jwsSig);
      if (!header)
        return null;
      var payload = payloadFromJWS(jwsSig);
      if (header.typ === "JWT" || opts.json)
        payload = JSON.parse(payload, opts.encoding);
      return {
        header,
        payload,
        signature: signatureFromJWS(jwsSig)
      };
    }
    function VerifyStream(opts) {
      opts = opts || {};
      var secretOrKey = opts.secret || opts.publicKey || opts.key;
      var secretStream = new DataStream(secretOrKey);
      this.readable = true;
      this.algorithm = opts.algorithm;
      this.encoding = opts.encoding;
      this.secret = this.publicKey = this.key = secretStream;
      this.signature = new DataStream(opts.signature);
      this.secret.once("close", function() {
        if (!this.signature.writable && this.readable)
          this.verify();
      }.bind(this));
      this.signature.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.verify();
      }.bind(this));
    }
    util.inherits(VerifyStream, Stream);
    VerifyStream.prototype.verify = function verify() {
      try {
        var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);
        var obj = jwsDecode(this.signature.buffer, this.encoding);
        this.emit("done", valid, obj);
        this.emit("data", valid);
        this.emit("end");
        this.readable = false;
        return valid;
      } catch (e) {
        this.readable = false;
        this.emit("error", e);
        this.emit("close");
      }
    };
    VerifyStream.decode = jwsDecode;
    VerifyStream.isValid = isValidJws;
    VerifyStream.verify = jwsVerify;
    module2.exports = VerifyStream;
  }
});

// node_modules/jws/index.js
var require_jws = __commonJS({
  "node_modules/jws/index.js"(exports2) {
    var SignStream = require_sign_stream();
    var VerifyStream = require_verify_stream();
    var ALGORITHMS = [
      "HS256",
      "HS384",
      "HS512",
      "RS256",
      "RS384",
      "RS512",
      "PS256",
      "PS384",
      "PS512",
      "ES256",
      "ES384",
      "ES512"
    ];
    exports2.ALGORITHMS = ALGORITHMS;
    exports2.sign = SignStream.sign;
    exports2.verify = VerifyStream.verify;
    exports2.decode = VerifyStream.decode;
    exports2.isValid = VerifyStream.isValid;
    exports2.createSign = function createSign(opts) {
      return new SignStream(opts);
    };
    exports2.createVerify = function createVerify(opts) {
      return new VerifyStream(opts);
    };
  }
});

// node_modules/gtoken/build/src/index.js
var require_src7 = __commonJS({
  "node_modules/gtoken/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GoogleToken = void 0;
    var fs = require("fs");
    var gaxios_1 = require_src5();
    var jws = require_jws();
    var path = require("path");
    var util_1 = require("util");
    var readFile = fs.readFile ? (0, util_1.promisify)(fs.readFile) : async () => {
      throw new ErrorWithCode("use key rather than keyFile.", "MISSING_CREDENTIALS");
    };
    var GOOGLE_TOKEN_URL = "https://www.googleapis.com/oauth2/v4/token";
    var GOOGLE_REVOKE_TOKEN_URL = "https://accounts.google.com/o/oauth2/revoke?token=";
    var ErrorWithCode = class extends Error {
      constructor(message, code) {
        super(message);
        this.code = code;
      }
    };
    var GoogleToken = class {
      get accessToken() {
        return this.rawToken ? this.rawToken.access_token : void 0;
      }
      get idToken() {
        return this.rawToken ? this.rawToken.id_token : void 0;
      }
      get tokenType() {
        return this.rawToken ? this.rawToken.token_type : void 0;
      }
      get refreshToken() {
        return this.rawToken ? this.rawToken.refresh_token : void 0;
      }
      /**
       * Create a GoogleToken.
       *
       * @param options  Configuration object.
       */
      constructor(options) {
        this.transporter = {
          request: (opts) => (0, gaxios_1.request)(opts)
        };
        this.configure(options);
      }
      /**
       * Returns whether the token has expired.
       *
       * @return true if the token has expired, false otherwise.
       */
      hasExpired() {
        const now = (/* @__PURE__ */ new Date()).getTime();
        if (this.rawToken && this.expiresAt) {
          return now >= this.expiresAt;
        } else {
          return true;
        }
      }
      /**
       * Returns whether the token will expire within eagerRefreshThresholdMillis
       *
       * @return true if the token will be expired within eagerRefreshThresholdMillis, false otherwise.
       */
      isTokenExpiring() {
        var _a;
        const now = (/* @__PURE__ */ new Date()).getTime();
        const eagerRefreshThresholdMillis = (_a = this.eagerRefreshThresholdMillis) !== null && _a !== void 0 ? _a : 0;
        if (this.rawToken && this.expiresAt) {
          return this.expiresAt <= now + eagerRefreshThresholdMillis;
        } else {
          return true;
        }
      }
      getToken(callback, opts = {}) {
        if (typeof callback === "object") {
          opts = callback;
          callback = void 0;
        }
        opts = Object.assign({
          forceRefresh: false
        }, opts);
        if (callback) {
          const cb = callback;
          this.getTokenAsync(opts).then((t) => cb(null, t), callback);
          return;
        }
        return this.getTokenAsync(opts);
      }
      /**
       * Given a keyFile, extract the key and client email if available
       * @param keyFile Path to a json, pem, or p12 file that contains the key.
       * @returns an object with privateKey and clientEmail properties
       */
      async getCredentials(keyFile) {
        const ext = path.extname(keyFile);
        switch (ext) {
          case ".json": {
            const key = await readFile(keyFile, "utf8");
            const body = JSON.parse(key);
            const privateKey = body.private_key;
            const clientEmail = body.client_email;
            if (!privateKey || !clientEmail) {
              throw new ErrorWithCode("private_key and client_email are required.", "MISSING_CREDENTIALS");
            }
            return { privateKey, clientEmail };
          }
          case ".der":
          case ".crt":
          case ".pem": {
            const privateKey = await readFile(keyFile, "utf8");
            return { privateKey };
          }
          case ".p12":
          case ".pfx": {
            throw new ErrorWithCode("*.p12 certificates are not supported after v6.1.2. Consider utilizing *.json format or converting *.p12 to *.pem using the OpenSSL CLI.", "UNKNOWN_CERTIFICATE_TYPE");
          }
          default:
            throw new ErrorWithCode("Unknown certificate type. Type is determined based on file extension. Current supported extensions are *.json, and *.pem.", "UNKNOWN_CERTIFICATE_TYPE");
        }
      }
      async getTokenAsync(opts) {
        if (this.inFlightRequest && !opts.forceRefresh) {
          return this.inFlightRequest;
        }
        try {
          return await (this.inFlightRequest = this.getTokenAsyncInner(opts));
        } finally {
          this.inFlightRequest = void 0;
        }
      }
      async getTokenAsyncInner(opts) {
        if (this.isTokenExpiring() === false && opts.forceRefresh === false) {
          return Promise.resolve(this.rawToken);
        }
        if (!this.key && !this.keyFile) {
          throw new Error("No key or keyFile set.");
        }
        if (!this.key && this.keyFile) {
          const creds = await this.getCredentials(this.keyFile);
          this.key = creds.privateKey;
          this.iss = creds.clientEmail || this.iss;
          if (!creds.clientEmail) {
            this.ensureEmail();
          }
        }
        return this.requestToken();
      }
      ensureEmail() {
        if (!this.iss) {
          throw new ErrorWithCode("email is required.", "MISSING_CREDENTIALS");
        }
      }
      revokeToken(callback) {
        if (callback) {
          this.revokeTokenAsync().then(() => callback(), callback);
          return;
        }
        return this.revokeTokenAsync();
      }
      async revokeTokenAsync() {
        if (!this.accessToken) {
          throw new Error("No token to revoke.");
        }
        const url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;
        await this.transporter.request({ url });
        this.configure({
          email: this.iss,
          sub: this.sub,
          key: this.key,
          keyFile: this.keyFile,
          scope: this.scope,
          additionalClaims: this.additionalClaims
        });
      }
      /**
       * Configure the GoogleToken for re-use.
       * @param  {object} options Configuration object.
       */
      configure(options = {}) {
        this.keyFile = options.keyFile;
        this.key = options.key;
        this.rawToken = void 0;
        this.iss = options.email || options.iss;
        this.sub = options.sub;
        this.additionalClaims = options.additionalClaims;
        if (typeof options.scope === "object") {
          this.scope = options.scope.join(" ");
        } else {
          this.scope = options.scope;
        }
        this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;
        if (options.transporter) {
          this.transporter = options.transporter;
        }
      }
      /**
       * Request the token from Google.
       */
      async requestToken() {
        var _a, _b;
        const iat = Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);
        const additionalClaims = this.additionalClaims || {};
        const payload = Object.assign({
          iss: this.iss,
          scope: this.scope,
          aud: GOOGLE_TOKEN_URL,
          exp: iat + 3600,
          iat,
          sub: this.sub
        }, additionalClaims);
        const signedJWT = jws.sign({
          header: { alg: "RS256" },
          payload,
          secret: this.key
        });
        try {
          const r = await this.transporter.request({
            method: "POST",
            url: GOOGLE_TOKEN_URL,
            data: {
              grant_type: "urn:ietf:params:oauth:grant-type:jwt-bearer",
              assertion: signedJWT
            },
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            responseType: "json"
          });
          this.rawToken = r.data;
          this.expiresAt = r.data.expires_in === null || r.data.expires_in === void 0 ? void 0 : (iat + r.data.expires_in) * 1e3;
          return this.rawToken;
        } catch (e) {
          this.rawToken = void 0;
          this.tokenExpires = void 0;
          const body = e.response && ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) ? (_b = e.response) === null || _b === void 0 ? void 0 : _b.data : {};
          if (body.error) {
            const desc = body.error_description ? `: ${body.error_description}` : "";
            e.message = `${body.error}${desc}`;
          }
          throw e;
        }
      }
    };
    exports2.GoogleToken = GoogleToken;
  }
});

// node_modules/yallist/iterator.js
var require_iterator = __commonJS({
  "node_modules/yallist/iterator.js"(exports2, module2) {
    "use strict";
    module2.exports = function(Yallist) {
      Yallist.prototype[Symbol.iterator] = function* () {
        for (let walker = this.head; walker; walker = walker.next) {
          yield walker.value;
        }
      };
    };
  }
});

// node_modules/yallist/yallist.js
var require_yallist = __commonJS({
  "node_modules/yallist/yallist.js"(exports2, module2) {
    "use strict";
    module2.exports = Yallist;
    Yallist.Node = Node;
    Yallist.create = Yallist;
    function Yallist(list) {
      var self2 = this;
      if (!(self2 instanceof Yallist)) {
        self2 = new Yallist();
      }
      self2.tail = null;
      self2.head = null;
      self2.length = 0;
      if (list && typeof list.forEach === "function") {
        list.forEach(function(item) {
          self2.push(item);
        });
      } else if (arguments.length > 0) {
        for (var i = 0, l = arguments.length; i < l; i++) {
          self2.push(arguments[i]);
        }
      }
      return self2;
    }
    Yallist.prototype.removeNode = function(node) {
      if (node.list !== this) {
        throw new Error("removing node which does not belong to this list");
      }
      var next = node.next;
      var prev = node.prev;
      if (next) {
        next.prev = prev;
      }
      if (prev) {
        prev.next = next;
      }
      if (node === this.head) {
        this.head = next;
      }
      if (node === this.tail) {
        this.tail = prev;
      }
      node.list.length--;
      node.next = null;
      node.prev = null;
      node.list = null;
      return next;
    };
    Yallist.prototype.unshiftNode = function(node) {
      if (node === this.head) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var head = this.head;
      node.list = this;
      node.next = head;
      if (head) {
        head.prev = node;
      }
      this.head = node;
      if (!this.tail) {
        this.tail = node;
      }
      this.length++;
    };
    Yallist.prototype.pushNode = function(node) {
      if (node === this.tail) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var tail = this.tail;
      node.list = this;
      node.prev = tail;
      if (tail) {
        tail.next = node;
      }
      this.tail = node;
      if (!this.head) {
        this.head = node;
      }
      this.length++;
    };
    Yallist.prototype.push = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        push(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.unshift = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        unshift(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.pop = function() {
      if (!this.tail) {
        return void 0;
      }
      var res = this.tail.value;
      this.tail = this.tail.prev;
      if (this.tail) {
        this.tail.next = null;
      } else {
        this.head = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.shift = function() {
      if (!this.head) {
        return void 0;
      }
      var res = this.head.value;
      this.head = this.head.next;
      if (this.head) {
        this.head.prev = null;
      } else {
        this.tail = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.forEach = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.head, i = 0; walker !== null; i++) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
      }
    };
    Yallist.prototype.forEachReverse = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
      }
    };
    Yallist.prototype.get = function(n) {
      for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
        walker = walker.next;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.getReverse = function(n) {
      for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
        walker = walker.prev;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.map = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.head; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
      }
      return res;
    };
    Yallist.prototype.mapReverse = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.tail; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
      }
      return res;
    };
    Yallist.prototype.reduce = function(fn, initial) {
      var acc;
      var walker = this.head;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = 0; walker !== null; i++) {
        acc = fn(acc, walker.value, i);
        walker = walker.next;
      }
      return acc;
    };
    Yallist.prototype.reduceReverse = function(fn, initial) {
      var acc;
      var walker = this.tail;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = this.length - 1; walker !== null; i--) {
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
      }
      return acc;
    };
    Yallist.prototype.toArray = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.head; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.next;
      }
      return arr;
    };
    Yallist.prototype.toArrayReverse = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.tail; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.prev;
      }
      return arr;
    };
    Yallist.prototype.slice = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
        walker = walker.next;
      }
      for (; walker !== null && i < to; i++, walker = walker.next) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.sliceReverse = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
        walker = walker.prev;
      }
      for (; walker !== null && i > from; i--, walker = walker.prev) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
      if (start > this.length) {
        start = this.length - 1;
      }
      if (start < 0) {
        start = this.length + start;
      }
      for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
        walker = walker.next;
      }
      var ret = [];
      for (var i = 0; walker && i < deleteCount; i++) {
        ret.push(walker.value);
        walker = this.removeNode(walker);
      }
      if (walker === null) {
        walker = this.tail;
      }
      if (walker !== this.head && walker !== this.tail) {
        walker = walker.prev;
      }
      for (var i = 0; i < nodes.length; i++) {
        walker = insert(this, walker, nodes[i]);
      }
      return ret;
    };
    Yallist.prototype.reverse = function() {
      var head = this.head;
      var tail = this.tail;
      for (var walker = head; walker !== null; walker = walker.prev) {
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
      }
      this.head = tail;
      this.tail = head;
      return this;
    };
    function insert(self2, node, value) {
      var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
      if (inserted.next === null) {
        self2.tail = inserted;
      }
      if (inserted.prev === null) {
        self2.head = inserted;
      }
      self2.length++;
      return inserted;
    }
    function push(self2, item) {
      self2.tail = new Node(item, self2.tail, null, self2);
      if (!self2.head) {
        self2.head = self2.tail;
      }
      self2.length++;
    }
    function unshift(self2, item) {
      self2.head = new Node(item, null, self2.head, self2);
      if (!self2.tail) {
        self2.tail = self2.head;
      }
      self2.length++;
    }
    function Node(value, prev, next, list) {
      if (!(this instanceof Node)) {
        return new Node(value, prev, next, list);
      }
      this.list = list;
      this.value = value;
      if (prev) {
        prev.next = this;
        this.prev = prev;
      } else {
        this.prev = null;
      }
      if (next) {
        next.prev = this;
        this.next = next;
      } else {
        this.next = null;
      }
    }
    try {
      require_iterator()(Yallist);
    } catch (er) {
    }
  }
});

// node_modules/lru-cache/index.js
var require_lru_cache = __commonJS({
  "node_modules/lru-cache/index.js"(exports2, module2) {
    "use strict";
    var Yallist = require_yallist();
    var MAX = Symbol("max");
    var LENGTH = Symbol("length");
    var LENGTH_CALCULATOR = Symbol("lengthCalculator");
    var ALLOW_STALE = Symbol("allowStale");
    var MAX_AGE = Symbol("maxAge");
    var DISPOSE = Symbol("dispose");
    var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
    var LRU_LIST = Symbol("lruList");
    var CACHE = Symbol("cache");
    var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
    var naiveLength = () => 1;
    var LRUCache = class {
      constructor(options) {
        if (typeof options === "number")
          options = { max: options };
        if (!options)
          options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0))
          throw new TypeError("max must be a non-negative number");
        const max = this[MAX] = options.max || Infinity;
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
      }
      // resize the cache when the max changes.
      set max(mL) {
        if (typeof mL !== "number" || mL < 0)
          throw new TypeError("max must be a non-negative number");
        this[MAX] = mL || Infinity;
        trim(this);
      }
      get max() {
        return this[MAX];
      }
      set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
      }
      get allowStale() {
        return this[ALLOW_STALE];
      }
      set maxAge(mA) {
        if (typeof mA !== "number")
          throw new TypeError("maxAge must be a non-negative number");
        this[MAX_AGE] = mA;
        trim(this);
      }
      get maxAge() {
        return this[MAX_AGE];
      }
      // resize the cache when the lengthCalculator changes.
      set lengthCalculator(lC) {
        if (typeof lC !== "function")
          lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
          this[LENGTH_CALCULATOR] = lC;
          this[LENGTH] = 0;
          this[LRU_LIST].forEach((hit) => {
            hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
            this[LENGTH] += hit.length;
          });
        }
        trim(this);
      }
      get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
      }
      get length() {
        return this[LENGTH];
      }
      get itemCount() {
        return this[LRU_LIST].length;
      }
      rforEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].tail; walker !== null; ) {
          const prev = walker.prev;
          forEachStep(this, fn, walker, thisp);
          walker = prev;
        }
      }
      forEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].head; walker !== null; ) {
          const next = walker.next;
          forEachStep(this, fn, walker, thisp);
          walker = next;
        }
      }
      keys() {
        return this[LRU_LIST].toArray().map((k) => k.key);
      }
      values() {
        return this[LRU_LIST].toArray().map((k) => k.value);
      }
      reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
          this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
        }
        this[CACHE] = /* @__PURE__ */ new Map();
        this[LRU_LIST] = new Yallist();
        this[LENGTH] = 0;
      }
      dump() {
        return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        }).toArray().filter((h) => h);
      }
      dumpLru() {
        return this[LRU_LIST];
      }
      set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
          if (len > this[MAX]) {
            del(this, this[CACHE].get(key));
            return false;
          }
          const node = this[CACHE].get(key);
          const item = node.value;
          if (this[DISPOSE]) {
            if (!this[NO_DISPOSE_ON_SET])
              this[DISPOSE](key, item.value);
          }
          item.now = now;
          item.maxAge = maxAge;
          item.value = value;
          this[LENGTH] += len - item.length;
          item.length = len;
          this.get(key);
          trim(this);
          return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        if (hit.length > this[MAX]) {
          if (this[DISPOSE])
            this[DISPOSE](key, value);
          return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim(this);
        return true;
      }
      has(key) {
        if (!this[CACHE].has(key))
          return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
      }
      get(key) {
        return get(this, key, true);
      }
      peek(key) {
        return get(this, key, false);
      }
      pop() {
        const node = this[LRU_LIST].tail;
        if (!node)
          return null;
        del(this, node);
        return node.value;
      }
      del(key) {
        del(this, this[CACHE].get(key));
      }
      load(arr) {
        this.reset();
        const now = Date.now();
        for (let l = arr.length - 1; l >= 0; l--) {
          const hit = arr[l];
          const expiresAt = hit.e || 0;
          if (expiresAt === 0)
            this.set(hit.k, hit.v);
          else {
            const maxAge = expiresAt - now;
            if (maxAge > 0) {
              this.set(hit.k, hit.v, maxAge);
            }
          }
        }
      }
      prune() {
        this[CACHE].forEach((value, key) => get(this, key, false));
      }
    };
    var get = (self2, key, doUse) => {
      const node = self2[CACHE].get(key);
      if (node) {
        const hit = node.value;
        if (isStale(self2, hit)) {
          del(self2, node);
          if (!self2[ALLOW_STALE])
            return void 0;
        } else {
          if (doUse) {
            if (self2[UPDATE_AGE_ON_GET])
              node.value.now = Date.now();
            self2[LRU_LIST].unshiftNode(node);
          }
        }
        return hit.value;
      }
    };
    var isStale = (self2, hit) => {
      if (!hit || !hit.maxAge && !self2[MAX_AGE])
        return false;
      const diff = Date.now() - hit.now;
      return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
    };
    var trim = (self2) => {
      if (self2[LENGTH] > self2[MAX]) {
        for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
          const prev = walker.prev;
          del(self2, walker);
          walker = prev;
        }
      }
    };
    var del = (self2, node) => {
      if (node) {
        const hit = node.value;
        if (self2[DISPOSE])
          self2[DISPOSE](hit.key, hit.value);
        self2[LENGTH] -= hit.length;
        self2[CACHE].delete(hit.key);
        self2[LRU_LIST].removeNode(node);
      }
    };
    var Entry = class {
      constructor(key, value, length, now, maxAge) {
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      }
    };
    var forEachStep = (self2, fn, node, thisp) => {
      let hit = node.value;
      if (isStale(self2, hit)) {
        del(self2, node);
        if (!self2[ALLOW_STALE])
          hit = void 0;
      }
      if (hit)
        fn.call(thisp, hit.value, hit.key, self2);
    };
    module2.exports = LRUCache;
  }
});

// node_modules/google-auth-library/build/src/auth/jwtaccess.js
var require_jwtaccess = __commonJS({
  "node_modules/google-auth-library/build/src/auth/jwtaccess.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JWTAccess = void 0;
    var jws = require_jws();
    var LRU = require_lru_cache();
    var DEFAULT_HEADER = {
      alg: "RS256",
      typ: "JWT"
    };
    var JWTAccess = class _JWTAccess {
      /**
       * JWTAccess service account credentials.
       *
       * Create a new access token by using the credential to create a new JWT token
       * that's recognized as the access token.
       *
       * @param email the service account email address.
       * @param key the private key that will be used to sign the token.
       * @param keyId the ID of the private key used to sign the token.
       */
      constructor(email, key, keyId, eagerRefreshThresholdMillis) {
        this.cache = new LRU({
          max: 500,
          maxAge: 60 * 60 * 1e3
        });
        this.email = email;
        this.key = key;
        this.keyId = keyId;
        this.eagerRefreshThresholdMillis = eagerRefreshThresholdMillis !== null && eagerRefreshThresholdMillis !== void 0 ? eagerRefreshThresholdMillis : 5 * 60 * 1e3;
      }
      /**
       * Ensures that we're caching a key appropriately, giving precedence to scopes vs. url
       *
       * @param url The URI being authorized.
       * @param scopes The scope or scopes being authorized
       * @returns A string that returns the cached key.
       */
      getCachedKey(url, scopes) {
        let cacheKey = url;
        if (scopes && Array.isArray(scopes) && scopes.length) {
          cacheKey = url ? `${url}_${scopes.join("_")}` : `${scopes.join("_")}`;
        } else if (typeof scopes === "string") {
          cacheKey = url ? `${url}_${scopes}` : scopes;
        }
        if (!cacheKey) {
          throw Error("Scopes or url must be provided");
        }
        return cacheKey;
      }
      /**
       * Get a non-expired access token, after refreshing if necessary.
       *
       * @param url The URI being authorized.
       * @param additionalClaims An object with a set of additional claims to
       * include in the payload.
       * @returns An object that includes the authorization header.
       */
      getRequestHeaders(url, additionalClaims, scopes) {
        const key = this.getCachedKey(url, scopes);
        const cachedToken = this.cache.get(key);
        const now = Date.now();
        if (cachedToken && cachedToken.expiration - now > this.eagerRefreshThresholdMillis) {
          return cachedToken.headers;
        }
        const iat = Math.floor(Date.now() / 1e3);
        const exp = _JWTAccess.getExpirationTime(iat);
        let defaultClaims;
        if (Array.isArray(scopes)) {
          scopes = scopes.join(" ");
        }
        if (scopes) {
          defaultClaims = {
            iss: this.email,
            sub: this.email,
            scope: scopes,
            exp,
            iat
          };
        } else {
          defaultClaims = {
            iss: this.email,
            sub: this.email,
            aud: url,
            exp,
            iat
          };
        }
        if (additionalClaims) {
          for (const claim in defaultClaims) {
            if (additionalClaims[claim]) {
              throw new Error(`The '${claim}' property is not allowed when passing additionalClaims. This claim is included in the JWT by default.`);
            }
          }
        }
        const header = this.keyId ? { ...DEFAULT_HEADER, kid: this.keyId } : DEFAULT_HEADER;
        const payload = Object.assign(defaultClaims, additionalClaims);
        const signedJWT = jws.sign({ header, payload, secret: this.key });
        const headers = { Authorization: `Bearer ${signedJWT}` };
        this.cache.set(key, {
          expiration: exp * 1e3,
          headers
        });
        return headers;
      }
      /**
       * Returns an expiration time for the JWT token.
       *
       * @param iat The issued at time for the JWT.
       * @returns An expiration time for the JWT.
       */
      static getExpirationTime(iat) {
        const exp = iat + 3600;
        return exp;
      }
      /**
       * Create a JWTAccess credentials instance using the given input options.
       * @param json The input object.
       */
      fromJSON(json) {
        if (!json) {
          throw new Error("Must pass in a JSON object containing the service account auth settings.");
        }
        if (!json.client_email) {
          throw new Error("The incoming JSON object does not contain a client_email field");
        }
        if (!json.private_key) {
          throw new Error("The incoming JSON object does not contain a private_key field");
        }
        this.email = json.client_email;
        this.key = json.private_key;
        this.keyId = json.private_key_id;
        this.projectId = json.project_id;
      }
      fromStream(inputStream, callback) {
        if (callback) {
          this.fromStreamAsync(inputStream).then(() => callback(), callback);
        } else {
          return this.fromStreamAsync(inputStream);
        }
      }
      fromStreamAsync(inputStream) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            reject(new Error("Must pass in a stream containing the service account auth settings."));
          }
          let s = "";
          inputStream.setEncoding("utf8").on("data", (chunk) => s += chunk).on("error", reject).on("end", () => {
            try {
              const data = JSON.parse(s);
              this.fromJSON(data);
              resolve();
            } catch (err) {
              reject(err);
            }
          });
        });
      }
    };
    exports2.JWTAccess = JWTAccess;
  }
});

// node_modules/google-auth-library/build/src/auth/jwtclient.js
var require_jwtclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/jwtclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.JWT = void 0;
    var gtoken_1 = require_src7();
    var jwtaccess_1 = require_jwtaccess();
    var oauth2client_1 = require_oauth2client();
    var JWT = class _JWT extends oauth2client_1.OAuth2Client {
      constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {
        const opts = optionsOrEmail && typeof optionsOrEmail === "object" ? optionsOrEmail : { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };
        super({
          eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,
          forceRefreshOnFailure: opts.forceRefreshOnFailure
        });
        this.email = opts.email;
        this.keyFile = opts.keyFile;
        this.key = opts.key;
        this.keyId = opts.keyId;
        this.scopes = opts.scopes;
        this.subject = opts.subject;
        this.additionalClaims = opts.additionalClaims;
        this.credentials = { refresh_token: "jwt-placeholder", expiry_date: 1 };
      }
      /**
       * Creates a copy of the credential with the specified scopes.
       * @param scopes List of requested scopes or a single scope.
       * @return The cloned instance.
       */
      createScoped(scopes) {
        return new _JWT({
          email: this.email,
          keyFile: this.keyFile,
          key: this.key,
          keyId: this.keyId,
          scopes,
          subject: this.subject,
          additionalClaims: this.additionalClaims
        });
      }
      /**
       * Obtains the metadata to be sent with the request.
       *
       * @param url the URI being authorized.
       */
      async getRequestMetadataAsync(url) {
        url = this.defaultServicePath ? `https://${this.defaultServicePath}/` : url;
        const useSelfSignedJWT = !this.hasUserScopes() && url || this.useJWTAccessWithScope && this.hasAnyScopes();
        if (!this.apiKey && useSelfSignedJWT) {
          if (this.additionalClaims && this.additionalClaims.target_audience) {
            const { tokens } = await this.refreshToken();
            return {
              headers: this.addSharedMetadataHeaders({
                Authorization: `Bearer ${tokens.id_token}`
              })
            };
          } else {
            if (!this.access) {
              this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);
            }
            let scopes;
            if (this.hasUserScopes()) {
              scopes = this.scopes;
            } else if (!url) {
              scopes = this.defaultScopes;
            }
            const headers = await this.access.getRequestHeaders(
              url !== null && url !== void 0 ? url : void 0,
              this.additionalClaims,
              // Scopes take precedent over audience for signing,
              // so we only provide them if useJWTAccessWithScope is on
              this.useJWTAccessWithScope ? scopes : void 0
            );
            return { headers: this.addSharedMetadataHeaders(headers) };
          }
        } else if (this.hasAnyScopes() || this.apiKey) {
          return super.getRequestMetadataAsync(url);
        } else {
          return { headers: {} };
        }
      }
      /**
       * Fetches an ID token.
       * @param targetAudience the audience for the fetched ID token.
       */
      async fetchIdToken(targetAudience) {
        const gtoken = new gtoken_1.GoogleToken({
          iss: this.email,
          sub: this.subject,
          scope: this.scopes || this.defaultScopes,
          keyFile: this.keyFile,
          key: this.key,
          additionalClaims: { target_audience: targetAudience },
          transporter: this.transporter
        });
        await gtoken.getToken({
          forceRefresh: true
        });
        if (!gtoken.idToken) {
          throw new Error("Unknown error: Failed to fetch ID token");
        }
        return gtoken.idToken;
      }
      /**
       * Determine if there are currently scopes available.
       */
      hasUserScopes() {
        if (!this.scopes) {
          return false;
        }
        return this.scopes.length > 0;
      }
      /**
       * Are there any default or user scopes defined.
       */
      hasAnyScopes() {
        if (this.scopes && this.scopes.length > 0)
          return true;
        if (this.defaultScopes && this.defaultScopes.length > 0)
          return true;
        return false;
      }
      authorize(callback) {
        if (callback) {
          this.authorizeAsync().then((r) => callback(null, r), callback);
        } else {
          return this.authorizeAsync();
        }
      }
      async authorizeAsync() {
        const result = await this.refreshToken();
        if (!result) {
          throw new Error("No result returned");
        }
        this.credentials = result.tokens;
        this.credentials.refresh_token = "jwt-placeholder";
        this.key = this.gtoken.key;
        this.email = this.gtoken.iss;
        return result.tokens;
      }
      /**
       * Refreshes the access token.
       * @param refreshToken ignored
       * @private
       */
      async refreshTokenNoCache(refreshToken) {
        const gtoken = this.createGToken();
        const token = await gtoken.getToken({
          forceRefresh: this.isTokenExpiring()
        });
        const tokens = {
          access_token: token.access_token,
          token_type: "Bearer",
          expiry_date: gtoken.expiresAt,
          id_token: gtoken.idToken
        };
        this.emit("tokens", tokens);
        return { res: null, tokens };
      }
      /**
       * Create a gToken if it doesn't already exist.
       */
      createGToken() {
        if (!this.gtoken) {
          this.gtoken = new gtoken_1.GoogleToken({
            iss: this.email,
            sub: this.subject,
            scope: this.scopes || this.defaultScopes,
            keyFile: this.keyFile,
            key: this.key,
            additionalClaims: this.additionalClaims,
            transporter: this.transporter
          });
        }
        return this.gtoken;
      }
      /**
       * Create a JWT credentials instance using the given input options.
       * @param json The input object.
       */
      fromJSON(json) {
        if (!json) {
          throw new Error("Must pass in a JSON object containing the service account auth settings.");
        }
        if (!json.client_email) {
          throw new Error("The incoming JSON object does not contain a client_email field");
        }
        if (!json.private_key) {
          throw new Error("The incoming JSON object does not contain a private_key field");
        }
        this.email = json.client_email;
        this.key = json.private_key;
        this.keyId = json.private_key_id;
        this.projectId = json.project_id;
        this.quotaProjectId = json.quota_project_id;
      }
      fromStream(inputStream, callback) {
        if (callback) {
          this.fromStreamAsync(inputStream).then(() => callback(), callback);
        } else {
          return this.fromStreamAsync(inputStream);
        }
      }
      fromStreamAsync(inputStream) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            throw new Error("Must pass in a stream containing the service account auth settings.");
          }
          let s = "";
          inputStream.setEncoding("utf8").on("error", reject).on("data", (chunk) => s += chunk).on("end", () => {
            try {
              const data = JSON.parse(s);
              this.fromJSON(data);
              resolve();
            } catch (e) {
              reject(e);
            }
          });
        });
      }
      /**
       * Creates a JWT credentials instance using an API Key for authentication.
       * @param apiKey The API Key in string form.
       */
      fromAPIKey(apiKey) {
        if (typeof apiKey !== "string") {
          throw new Error("Must provide an API Key string.");
        }
        this.apiKey = apiKey;
      }
      /**
       * Using the key or keyFile on the JWT client, obtain an object that contains
       * the key and the client email.
       */
      async getCredentials() {
        if (this.key) {
          return { private_key: this.key, client_email: this.email };
        } else if (this.keyFile) {
          const gtoken = this.createGToken();
          const creds = await gtoken.getCredentials(this.keyFile);
          return { private_key: creds.privateKey, client_email: creds.clientEmail };
        }
        throw new Error("A key or a keyFile must be provided to getCredentials.");
      }
    };
    exports2.JWT = JWT;
  }
});

// node_modules/google-auth-library/build/src/auth/refreshclient.js
var require_refreshclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/refreshclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UserRefreshClient = exports2.USER_REFRESH_ACCOUNT_TYPE = void 0;
    var oauth2client_1 = require_oauth2client();
    exports2.USER_REFRESH_ACCOUNT_TYPE = "authorized_user";
    var UserRefreshClient = class extends oauth2client_1.OAuth2Client {
      constructor(optionsOrClientId, clientSecret, refreshToken, eagerRefreshThresholdMillis, forceRefreshOnFailure) {
        const opts = optionsOrClientId && typeof optionsOrClientId === "object" ? optionsOrClientId : {
          clientId: optionsOrClientId,
          clientSecret,
          refreshToken,
          eagerRefreshThresholdMillis,
          forceRefreshOnFailure
        };
        super({
          clientId: opts.clientId,
          clientSecret: opts.clientSecret,
          eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,
          forceRefreshOnFailure: opts.forceRefreshOnFailure
        });
        this._refreshToken = opts.refreshToken;
        this.credentials.refresh_token = opts.refreshToken;
      }
      /**
       * Refreshes the access token.
       * @param refreshToken An ignored refreshToken..
       * @param callback Optional callback.
       */
      async refreshTokenNoCache(refreshToken) {
        return super.refreshTokenNoCache(this._refreshToken);
      }
      /**
       * Create a UserRefreshClient credentials instance using the given input
       * options.
       * @param json The input object.
       */
      fromJSON(json) {
        if (!json) {
          throw new Error("Must pass in a JSON object containing the user refresh token");
        }
        if (json.type !== "authorized_user") {
          throw new Error('The incoming JSON object does not have the "authorized_user" type');
        }
        if (!json.client_id) {
          throw new Error("The incoming JSON object does not contain a client_id field");
        }
        if (!json.client_secret) {
          throw new Error("The incoming JSON object does not contain a client_secret field");
        }
        if (!json.refresh_token) {
          throw new Error("The incoming JSON object does not contain a refresh_token field");
        }
        this._clientId = json.client_id;
        this._clientSecret = json.client_secret;
        this._refreshToken = json.refresh_token;
        this.credentials.refresh_token = json.refresh_token;
        this.quotaProjectId = json.quota_project_id;
      }
      fromStream(inputStream, callback) {
        if (callback) {
          this.fromStreamAsync(inputStream).then(() => callback(), callback);
        } else {
          return this.fromStreamAsync(inputStream);
        }
      }
      async fromStreamAsync(inputStream) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            return reject(new Error("Must pass in a stream containing the user refresh token."));
          }
          let s = "";
          inputStream.setEncoding("utf8").on("error", reject).on("data", (chunk) => s += chunk).on("end", () => {
            try {
              const data = JSON.parse(s);
              this.fromJSON(data);
              return resolve();
            } catch (err) {
              return reject(err);
            }
          });
        });
      }
    };
    exports2.UserRefreshClient = UserRefreshClient;
  }
});

// node_modules/google-auth-library/build/src/auth/impersonated.js
var require_impersonated = __commonJS({
  "node_modules/google-auth-library/build/src/auth/impersonated.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Impersonated = exports2.IMPERSONATED_ACCOUNT_TYPE = void 0;
    var oauth2client_1 = require_oauth2client();
    var gaxios_1 = require_src5();
    exports2.IMPERSONATED_ACCOUNT_TYPE = "impersonated_service_account";
    var Impersonated = class extends oauth2client_1.OAuth2Client {
      /**
       * Impersonated service account credentials.
       *
       * Create a new access token by impersonating another service account.
       *
       * Impersonated Credentials allowing credentials issued to a user or
       * service account to impersonate another. The source project using
       * Impersonated Credentials must enable the "IAMCredentials" API.
       * Also, the target service account must grant the orginating principal
       * the "Service Account Token Creator" IAM role.
       *
       * @param {object} options - The configuration object.
       * @param {object} [options.sourceClient] the source credential used as to
       * acquire the impersonated credentials.
       * @param {string} [options.targetPrincipal] the service account to
       * impersonate.
       * @param {string[]} [options.delegates] the chained list of delegates
       * required to grant the final access_token. If set, the sequence of
       * identities must have "Service Account Token Creator" capability granted to
       * the preceding identity. For example, if set to [serviceAccountB,
       * serviceAccountC], the sourceCredential must have the Token Creator role on
       * serviceAccountB. serviceAccountB must have the Token Creator on
       * serviceAccountC. Finally, C must have Token Creator on target_principal.
       * If left unset, sourceCredential must have that role on targetPrincipal.
       * @param {string[]} [options.targetScopes] scopes to request during the
       * authorization grant.
       * @param {number} [options.lifetime] number of seconds the delegated
       * credential should be valid for up to 3600 seconds by default, or 43,200
       * seconds by extending the token's lifetime, see:
       * https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials#sa-credentials-oauth
       * @param {string} [options.endpoint] api endpoint override.
       */
      constructor(options = {}) {
        var _a, _b, _c, _d, _e, _f;
        super(options);
        this.credentials = {
          expiry_date: 1,
          refresh_token: "impersonated-placeholder"
        };
        this.sourceClient = (_a = options.sourceClient) !== null && _a !== void 0 ? _a : new oauth2client_1.OAuth2Client();
        this.targetPrincipal = (_b = options.targetPrincipal) !== null && _b !== void 0 ? _b : "";
        this.delegates = (_c = options.delegates) !== null && _c !== void 0 ? _c : [];
        this.targetScopes = (_d = options.targetScopes) !== null && _d !== void 0 ? _d : [];
        this.lifetime = (_e = options.lifetime) !== null && _e !== void 0 ? _e : 3600;
        this.endpoint = (_f = options.endpoint) !== null && _f !== void 0 ? _f : "https://iamcredentials.googleapis.com";
      }
      /**
       * Refreshes the access token.
       * @param refreshToken Unused parameter
       */
      async refreshToken(refreshToken) {
        var _a, _b, _c, _d, _e, _f;
        try {
          await this.sourceClient.getAccessToken();
          const name = "projects/-/serviceAccounts/" + this.targetPrincipal;
          const u = `${this.endpoint}/v1/${name}:generateAccessToken`;
          const body = {
            delegates: this.delegates,
            scope: this.targetScopes,
            lifetime: this.lifetime + "s"
          };
          const res = await this.sourceClient.request({
            url: u,
            data: body,
            method: "POST"
          });
          const tokenResponse = res.data;
          this.credentials.access_token = tokenResponse.accessToken;
          this.credentials.expiry_date = Date.parse(tokenResponse.expireTime);
          return {
            tokens: this.credentials,
            res
          };
        } catch (error) {
          if (!(error instanceof Error))
            throw error;
          let status = 0;
          let message = "";
          if (error instanceof gaxios_1.GaxiosError) {
            status = (_c = (_b = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.status;
            message = (_f = (_e = (_d = error === null || error === void 0 ? void 0 : error.response) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.error) === null || _f === void 0 ? void 0 : _f.message;
          }
          if (status && message) {
            error.message = `${status}: unable to impersonate: ${message}`;
            throw error;
          } else {
            error.message = `unable to impersonate: ${error}`;
            throw error;
          }
        }
      }
      /**
       * Generates an OpenID Connect ID token for a service account.
       *
       * {@link https://cloud.google.com/iam/docs/reference/credentials/rest/v1/projects.serviceAccounts/generateIdToken Reference Documentation}
       *
       * @param targetAudience the audience for the fetched ID token.
       * @param options the for the request
       * @return an OpenID Connect ID token
       */
      async fetchIdToken(targetAudience, options) {
        var _a;
        await this.sourceClient.getAccessToken();
        const name = `projects/-/serviceAccounts/${this.targetPrincipal}`;
        const u = `${this.endpoint}/v1/${name}:generateIdToken`;
        const body = {
          delegates: this.delegates,
          audience: targetAudience,
          includeEmail: (_a = options === null || options === void 0 ? void 0 : options.includeEmail) !== null && _a !== void 0 ? _a : true
        };
        const res = await this.sourceClient.request({
          url: u,
          data: body,
          method: "POST"
        });
        return res.data.token;
      }
    };
    exports2.Impersonated = Impersonated;
  }
});

// node_modules/google-auth-library/build/src/auth/oauth2common.js
var require_oauth2common = __commonJS({
  "node_modules/google-auth-library/build/src/auth/oauth2common.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getErrorFromOAuthErrorResponse = exports2.OAuthClientAuthHandler = void 0;
    var querystring = require("querystring");
    var crypto_1 = require_crypto3();
    var METHODS_SUPPORTING_REQUEST_BODY = ["PUT", "POST", "PATCH"];
    var OAuthClientAuthHandler = class {
      /**
       * Instantiates an OAuth client authentication handler.
       * @param clientAuthentication The client auth credentials.
       */
      constructor(clientAuthentication) {
        this.clientAuthentication = clientAuthentication;
        this.crypto = (0, crypto_1.createCrypto)();
      }
      /**
       * Applies client authentication on the OAuth request's headers or POST
       * body but does not process the request.
       * @param opts The GaxiosOptions whose headers or data are to be modified
       *   depending on the client authentication mechanism to be used.
       * @param bearerToken The optional bearer token to use for authentication.
       *   When this is used, no client authentication credentials are needed.
       */
      applyClientAuthenticationOptions(opts, bearerToken) {
        this.injectAuthenticatedHeaders(opts, bearerToken);
        if (!bearerToken) {
          this.injectAuthenticatedRequestBody(opts);
        }
      }
      /**
       * Applies client authentication on the request's header if either
       * basic authentication or bearer token authentication is selected.
       *
       * @param opts The GaxiosOptions whose headers or data are to be modified
       *   depending on the client authentication mechanism to be used.
       * @param bearerToken The optional bearer token to use for authentication.
       *   When this is used, no client authentication credentials are needed.
       */
      injectAuthenticatedHeaders(opts, bearerToken) {
        var _a;
        if (bearerToken) {
          opts.headers = opts.headers || {};
          Object.assign(opts.headers, {
            Authorization: `Bearer ${bearerToken}}`
          });
        } else if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === "basic") {
          opts.headers = opts.headers || {};
          const clientId = this.clientAuthentication.clientId;
          const clientSecret = this.clientAuthentication.clientSecret || "";
          const base64EncodedCreds = this.crypto.encodeBase64StringUtf8(`${clientId}:${clientSecret}`);
          Object.assign(opts.headers, {
            Authorization: `Basic ${base64EncodedCreds}`
          });
        }
      }
      /**
       * Applies client authentication on the request's body if request-body
       * client authentication is selected.
       *
       * @param opts The GaxiosOptions whose headers or data are to be modified
       *   depending on the client authentication mechanism to be used.
       */
      injectAuthenticatedRequestBody(opts) {
        var _a;
        if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === "request-body") {
          const method = (opts.method || "GET").toUpperCase();
          if (METHODS_SUPPORTING_REQUEST_BODY.indexOf(method) !== -1) {
            let contentType;
            const headers = opts.headers || {};
            for (const key in headers) {
              if (key.toLowerCase() === "content-type" && headers[key]) {
                contentType = headers[key].toLowerCase();
                break;
              }
            }
            if (contentType === "application/x-www-form-urlencoded") {
              opts.data = opts.data || "";
              const data = querystring.parse(opts.data);
              Object.assign(data, {
                client_id: this.clientAuthentication.clientId,
                client_secret: this.clientAuthentication.clientSecret || ""
              });
              opts.data = querystring.stringify(data);
            } else if (contentType === "application/json") {
              opts.data = opts.data || {};
              Object.assign(opts.data, {
                client_id: this.clientAuthentication.clientId,
                client_secret: this.clientAuthentication.clientSecret || ""
              });
            } else {
              throw new Error(`${contentType} content-types are not supported with ${this.clientAuthentication.confidentialClientType} client authentication`);
            }
          } else {
            throw new Error(`${method} HTTP method does not support ${this.clientAuthentication.confidentialClientType} client authentication`);
          }
        }
      }
    };
    exports2.OAuthClientAuthHandler = OAuthClientAuthHandler;
    function getErrorFromOAuthErrorResponse(resp, err) {
      const errorCode = resp.error;
      const errorDescription = resp.error_description;
      const errorUri = resp.error_uri;
      let message = `Error code ${errorCode}`;
      if (typeof errorDescription !== "undefined") {
        message += `: ${errorDescription}`;
      }
      if (typeof errorUri !== "undefined") {
        message += ` - ${errorUri}`;
      }
      const newError = new Error(message);
      if (err) {
        const keys = Object.keys(err);
        if (err.stack) {
          keys.push("stack");
        }
        keys.forEach((key) => {
          if (key !== "message") {
            Object.defineProperty(newError, key, {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              value: err[key],
              writable: false,
              enumerable: true
            });
          }
        });
      }
      return newError;
    }
    exports2.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;
  }
});

// node_modules/google-auth-library/build/src/auth/stscredentials.js
var require_stscredentials = __commonJS({
  "node_modules/google-auth-library/build/src/auth/stscredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StsCredentials = void 0;
    var gaxios_1 = require_src5();
    var querystring = require("querystring");
    var transporters_1 = require_transporters();
    var oauth2common_1 = require_oauth2common();
    var StsCredentials = class extends oauth2common_1.OAuthClientAuthHandler {
      /**
       * Initializes an STS credentials instance.
       * @param tokenExchangeEndpoint The token exchange endpoint.
       * @param clientAuthentication The client authentication credentials if
       *   available.
       */
      constructor(tokenExchangeEndpoint, clientAuthentication) {
        super(clientAuthentication);
        this.tokenExchangeEndpoint = tokenExchangeEndpoint;
        this.transporter = new transporters_1.DefaultTransporter();
      }
      /**
       * Exchanges the provided token for another type of token based on the
       * rfc8693 spec.
       * @param stsCredentialsOptions The token exchange options used to populate
       *   the token exchange request.
       * @param additionalHeaders Optional additional headers to pass along the
       *   request.
       * @param options Optional additional GCP-specific non-spec defined options
       *   to send with the request.
       *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`
       * @return A promise that resolves with the token exchange response containing
       *   the requested token and its expiration time.
       */
      async exchangeToken(stsCredentialsOptions, additionalHeaders, options) {
        var _a, _b, _c;
        const values = {
          grant_type: stsCredentialsOptions.grantType,
          resource: stsCredentialsOptions.resource,
          audience: stsCredentialsOptions.audience,
          scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(" "),
          requested_token_type: stsCredentialsOptions.requestedTokenType,
          subject_token: stsCredentialsOptions.subjectToken,
          subject_token_type: stsCredentialsOptions.subjectTokenType,
          actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,
          actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,
          // Non-standard GCP-specific options.
          options: options && JSON.stringify(options)
        };
        Object.keys(values).forEach((key) => {
          if (typeof values[key] === "undefined") {
            delete values[key];
          }
        });
        const headers = {
          "Content-Type": "application/x-www-form-urlencoded"
        };
        Object.assign(headers, additionalHeaders || {});
        const opts = {
          url: this.tokenExchangeEndpoint,
          method: "POST",
          headers,
          data: querystring.stringify(values),
          responseType: "json"
        };
        this.applyClientAuthenticationOptions(opts);
        try {
          const response = await this.transporter.request(opts);
          const stsSuccessfulResponse = response.data;
          stsSuccessfulResponse.res = response;
          return stsSuccessfulResponse;
        } catch (error) {
          if (error instanceof gaxios_1.GaxiosError && error.response) {
            throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(
              error.response.data,
              // Preserve other fields from the original error.
              error
            );
          }
          throw error;
        }
      }
    };
    exports2.StsCredentials = StsCredentials;
  }
});

// node_modules/google-auth-library/build/src/auth/baseexternalclient.js
var require_baseexternalclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/baseexternalclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseExternalAccountClient = exports2.CLOUD_RESOURCE_MANAGER = exports2.EXTERNAL_ACCOUNT_TYPE = exports2.EXPIRATION_TIME_OFFSET = void 0;
    var stream = require("stream");
    var authclient_1 = require_authclient();
    var sts = require_stscredentials();
    var STS_GRANT_TYPE = "urn:ietf:params:oauth:grant-type:token-exchange";
    var STS_REQUEST_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:access_token";
    var DEFAULT_OAUTH_SCOPE = "https://www.googleapis.com/auth/cloud-platform";
    var DEFAULT_TOKEN_LIFESPAN = 3600;
    exports2.EXPIRATION_TIME_OFFSET = 5 * 60 * 1e3;
    exports2.EXTERNAL_ACCOUNT_TYPE = "external_account";
    exports2.CLOUD_RESOURCE_MANAGER = "https://cloudresourcemanager.googleapis.com/v1/projects/";
    var WORKFORCE_AUDIENCE_PATTERN = "//iam.googleapis.com/locations/[^/]+/workforcePools/[^/]+/providers/.+";
    var BaseExternalAccountClient = class extends authclient_1.AuthClient {
      /**
       * Instantiate a BaseExternalAccountClient instance using the provided JSON
       * object loaded from an external account credentials file.
       * @param options The external account options object typically loaded
       *   from the external account JSON credential file.
       * @param additionalOptions Optional additional behavior customization
       *   options. These currently customize expiration threshold time and
       *   whether to retry on 401/403 API request errors.
       */
      constructor(options, additionalOptions) {
        var _a, _b;
        super();
        if (options.type !== exports2.EXTERNAL_ACCOUNT_TYPE) {
          throw new Error(`Expected "${exports2.EXTERNAL_ACCOUNT_TYPE}" type but received "${options.type}"`);
        }
        this.clientAuth = options.client_id ? {
          confidentialClientType: "basic",
          clientId: options.client_id,
          clientSecret: options.client_secret
        } : void 0;
        this.stsCredential = new sts.StsCredentials(options.token_url, this.clientAuth);
        this.scopes = [DEFAULT_OAUTH_SCOPE];
        this.cachedAccessToken = null;
        this.audience = options.audience;
        this.subjectTokenType = options.subject_token_type;
        this.quotaProjectId = options.quota_project_id;
        this.workforcePoolUserProject = options.workforce_pool_user_project;
        const workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);
        if (this.workforcePoolUserProject && !this.audience.match(workforceAudiencePattern)) {
          throw new Error("workforcePoolUserProject should not be set for non-workforce pool credentials.");
        }
        this.serviceAccountImpersonationUrl = options.service_account_impersonation_url;
        this.serviceAccountImpersonationLifetime = (_b = (_a = options.service_account_impersonation) === null || _a === void 0 ? void 0 : _a.token_lifetime_seconds) !== null && _b !== void 0 ? _b : DEFAULT_TOKEN_LIFESPAN;
        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== "number") {
          this.eagerRefreshThresholdMillis = exports2.EXPIRATION_TIME_OFFSET;
        } else {
          this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;
        }
        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);
        this.projectId = null;
        this.projectNumber = this.getProjectNumber(this.audience);
        this.universeDomain = options.universe_domain;
      }
      /** The service account email to be impersonated, if available. */
      getServiceAccountEmail() {
        var _a;
        if (this.serviceAccountImpersonationUrl) {
          const re = /serviceAccounts\/(?<email>[^:]+):generateAccessToken$/;
          const result = re.exec(this.serviceAccountImpersonationUrl);
          return ((_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.email) || null;
        }
        return null;
      }
      /**
       * Provides a mechanism to inject GCP access tokens directly.
       * When the provided credential expires, a new credential, using the
       * external account options, is retrieved.
       * @param credentials The Credentials object to set on the current client.
       */
      setCredentials(credentials) {
        super.setCredentials(credentials);
        this.cachedAccessToken = credentials;
      }
      /**
       * @return A promise that resolves with the current GCP access token
       *   response. If the current credential is expired, a new one is retrieved.
       */
      async getAccessToken() {
        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {
          await this.refreshAccessTokenAsync();
        }
        return {
          token: this.cachedAccessToken.access_token,
          res: this.cachedAccessToken.res
        };
      }
      /**
       * The main authentication interface. It takes an optional url which when
       * present is the endpoint being accessed, and returns a Promise which
       * resolves with authorization header fields.
       *
       * The result has the form:
       * { Authorization: 'Bearer <access_token_value>' }
       */
      async getRequestHeaders() {
        const accessTokenResponse = await this.getAccessToken();
        const headers = {
          Authorization: `Bearer ${accessTokenResponse.token}`
        };
        return this.addSharedMetadataHeaders(headers);
      }
      request(opts, callback) {
        if (callback) {
          this.requestAsync(opts).then((r) => callback(null, r), (e) => {
            return callback(e, e.response);
          });
        } else {
          return this.requestAsync(opts);
        }
      }
      /**
       * @return A promise that resolves with the project ID corresponding to the
       *   current workload identity pool or current workforce pool if
       *   determinable. For workforce pool credential, it returns the project ID
       *   corresponding to the workforcePoolUserProject.
       *   This is introduced to match the current pattern of using the Auth
       *   library:
       *   const projectId = await auth.getProjectId();
       *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;
       *   const res = await client.request({ url });
       *   The resource may not have permission
       *   (resourcemanager.projects.get) to call this API or the required
       *   scopes may not be selected:
       *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes
       */
      async getProjectId() {
        const projectNumber = this.projectNumber || this.workforcePoolUserProject;
        if (this.projectId) {
          return this.projectId;
        } else if (projectNumber) {
          const headers = await this.getRequestHeaders();
          const response = await this.transporter.request({
            headers,
            url: `${exports2.CLOUD_RESOURCE_MANAGER}${projectNumber}`,
            responseType: "json"
          });
          this.projectId = response.data.projectId;
          return this.projectId;
        }
        return null;
      }
      /**
       * Authenticates the provided HTTP request, processes it and resolves with the
       * returned response.
       * @param opts The HTTP request options.
       * @param retry Whether the current attempt is a retry after a failed attempt.
       * @return A promise that resolves with the successful response.
       */
      async requestAsync(opts, retry = false) {
        let response;
        try {
          const requestHeaders = await this.getRequestHeaders();
          opts.headers = opts.headers || {};
          if (requestHeaders && requestHeaders["x-goog-user-project"]) {
            opts.headers["x-goog-user-project"] = requestHeaders["x-goog-user-project"];
          }
          if (requestHeaders && requestHeaders.Authorization) {
            opts.headers.Authorization = requestHeaders.Authorization;
          }
          response = await this.transporter.request(opts);
        } catch (e) {
          const res = e.response;
          if (res) {
            const statusCode = res.status;
            const isReadableStream = res.config.data instanceof stream.Readable;
            const isAuthErr = statusCode === 401 || statusCode === 403;
            if (!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {
              await this.refreshAccessTokenAsync();
              return await this.requestAsync(opts, true);
            }
          }
          throw e;
        }
        return response;
      }
      /**
       * Forces token refresh, even if unexpired tokens are currently cached.
       * External credentials are exchanged for GCP access tokens via the token
       * exchange endpoint and other settings provided in the client options
       * object.
       * If the service_account_impersonation_url is provided, an additional
       * step to exchange the external account GCP access token for a service
       * account impersonated token is performed.
       * @return A promise that resolves with the fresh GCP access tokens.
       */
      async refreshAccessTokenAsync() {
        const subjectToken = await this.retrieveSubjectToken();
        const stsCredentialsOptions = {
          grantType: STS_GRANT_TYPE,
          audience: this.audience,
          requestedTokenType: STS_REQUEST_TOKEN_TYPE,
          subjectToken,
          subjectTokenType: this.subjectTokenType,
          // generateAccessToken requires the provided access token to have
          // scopes:
          // https://www.googleapis.com/auth/iam or
          // https://www.googleapis.com/auth/cloud-platform
          // The new service account access token scopes will match the user
          // provided ones.
          scope: this.serviceAccountImpersonationUrl ? [DEFAULT_OAUTH_SCOPE] : this.getScopesArray()
        };
        const additionalOptions = !this.clientAuth && this.workforcePoolUserProject ? { userProject: this.workforcePoolUserProject } : void 0;
        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, void 0, additionalOptions);
        if (this.serviceAccountImpersonationUrl) {
          this.cachedAccessToken = await this.getImpersonatedAccessToken(stsResponse.access_token);
        } else if (stsResponse.expires_in) {
          this.cachedAccessToken = {
            access_token: stsResponse.access_token,
            expiry_date: (/* @__PURE__ */ new Date()).getTime() + stsResponse.expires_in * 1e3,
            res: stsResponse.res
          };
        } else {
          this.cachedAccessToken = {
            access_token: stsResponse.access_token,
            res: stsResponse.res
          };
        }
        this.credentials = {};
        Object.assign(this.credentials, this.cachedAccessToken);
        delete this.credentials.res;
        this.emit("tokens", {
          refresh_token: null,
          expiry_date: this.cachedAccessToken.expiry_date,
          access_token: this.cachedAccessToken.access_token,
          token_type: "Bearer",
          id_token: null
        });
        return this.cachedAccessToken;
      }
      /**
       * Returns the workload identity pool project number if it is determinable
       * from the audience resource name.
       * @param audience The STS audience used to determine the project number.
       * @return The project number associated with the workload identity pool, if
       *   this can be determined from the STS audience field. Otherwise, null is
       *   returned.
       */
      getProjectNumber(audience) {
        const match = audience.match(/\/projects\/([^/]+)/);
        if (!match) {
          return null;
        }
        return match[1];
      }
      /**
       * Exchanges an external account GCP access token for a service
       * account impersonated access token using iamcredentials
       * GenerateAccessToken API.
       * @param token The access token to exchange for a service account access
       *   token.
       * @return A promise that resolves with the service account impersonated
       *   credentials response.
       */
      async getImpersonatedAccessToken(token) {
        const opts = {
          url: this.serviceAccountImpersonationUrl,
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`
          },
          data: {
            scope: this.getScopesArray(),
            lifetime: this.serviceAccountImpersonationLifetime + "s"
          },
          responseType: "json"
        };
        const response = await this.transporter.request(opts);
        const successResponse = response.data;
        return {
          access_token: successResponse.accessToken,
          // Convert from ISO format to timestamp.
          expiry_date: new Date(successResponse.expireTime).getTime(),
          res: response
        };
      }
      /**
       * Returns whether the provided credentials are expired or not.
       * If there is no expiry time, assumes the token is not expired or expiring.
       * @param accessToken The credentials to check for expiration.
       * @return Whether the credentials are expired or not.
       */
      isExpired(accessToken) {
        const now = (/* @__PURE__ */ new Date()).getTime();
        return accessToken.expiry_date ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis : false;
      }
      /**
       * @return The list of scopes for the requested GCP access token.
       */
      getScopesArray() {
        if (typeof this.scopes === "string") {
          return [this.scopes];
        } else if (typeof this.scopes === "undefined") {
          return [DEFAULT_OAUTH_SCOPE];
        } else {
          return this.scopes;
        }
      }
    };
    exports2.BaseExternalAccountClient = BaseExternalAccountClient;
  }
});

// node_modules/google-auth-library/build/src/auth/identitypoolclient.js
var require_identitypoolclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/identitypoolclient.js"(exports2) {
    "use strict";
    var _a;
    var _b;
    var _c;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IdentityPoolClient = void 0;
    var fs = require("fs");
    var util_1 = require("util");
    var baseexternalclient_1 = require_baseexternalclient();
    var readFile = (0, util_1.promisify)((_a = fs.readFile) !== null && _a !== void 0 ? _a : () => {
    });
    var realpath = (0, util_1.promisify)((_b = fs.realpath) !== null && _b !== void 0 ? _b : () => {
    });
    var lstat = (0, util_1.promisify)((_c = fs.lstat) !== null && _c !== void 0 ? _c : () => {
    });
    var IdentityPoolClient = class extends baseexternalclient_1.BaseExternalAccountClient {
      /**
       * Instantiate an IdentityPoolClient instance using the provided JSON
       * object loaded from an external account credentials file.
       * An error is thrown if the credential is not a valid file-sourced or
       * url-sourced credential or a workforce pool user project is provided
       * with a non workforce audience.
       * @param options The external account options object typically loaded
       *   from the external account JSON credential file.
       * @param additionalOptions Optional additional behavior customization
       *   options. These currently customize expiration threshold time and
       *   whether to retry on 401/403 API request errors.
       */
      constructor(options, additionalOptions) {
        var _a2, _b2;
        super(options, additionalOptions);
        this.file = options.credential_source.file;
        this.url = options.credential_source.url;
        this.headers = options.credential_source.headers;
        if (!this.file && !this.url) {
          throw new Error('No valid Identity Pool "credential_source" provided');
        }
        this.formatType = ((_a2 = options.credential_source.format) === null || _a2 === void 0 ? void 0 : _a2.type) || "text";
        this.formatSubjectTokenFieldName = (_b2 = options.credential_source.format) === null || _b2 === void 0 ? void 0 : _b2.subject_token_field_name;
        if (this.formatType !== "json" && this.formatType !== "text") {
          throw new Error(`Invalid credential_source format "${this.formatType}"`);
        }
        if (this.formatType === "json" && !this.formatSubjectTokenFieldName) {
          throw new Error("Missing subject_token_field_name for JSON credential_source format");
        }
      }
      /**
       * Triggered when a external subject token is needed to be exchanged for a GCP
       * access token via GCP STS endpoint.
       * This uses the `options.credential_source` object to figure out how
       * to retrieve the token using the current environment. In this case,
       * this either retrieves the local credential from a file location (k8s
       * workload) or by sending a GET request to a local metadata server (Azure
       * workloads).
       * @return A promise that resolves with the external subject token.
       */
      async retrieveSubjectToken() {
        if (this.file) {
          return await this.getTokenFromFile(this.file, this.formatType, this.formatSubjectTokenFieldName);
        }
        return await this.getTokenFromUrl(this.url, this.formatType, this.formatSubjectTokenFieldName, this.headers);
      }
      /**
       * Looks up the external subject token in the file path provided and
       * resolves with that token.
       * @param file The file path where the external credential is located.
       * @param formatType The token file or URL response type (JSON or text).
       * @param formatSubjectTokenFieldName For JSON response types, this is the
       *   subject_token field name. For Azure, this is access_token. For text
       *   response types, this is ignored.
       * @return A promise that resolves with the external subject token.
       */
      async getTokenFromFile(filePath, formatType, formatSubjectTokenFieldName) {
        try {
          filePath = await realpath(filePath);
          if (!(await lstat(filePath)).isFile()) {
            throw new Error();
          }
        } catch (err) {
          if (err instanceof Error) {
            err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;
          }
          throw err;
        }
        let subjectToken;
        const rawText = await readFile(filePath, { encoding: "utf8" });
        if (formatType === "text") {
          subjectToken = rawText;
        } else if (formatType === "json" && formatSubjectTokenFieldName) {
          const json = JSON.parse(rawText);
          subjectToken = json[formatSubjectTokenFieldName];
        }
        if (!subjectToken) {
          throw new Error("Unable to parse the subject_token from the credential_source file");
        }
        return subjectToken;
      }
      /**
       * Sends a GET request to the URL provided and resolves with the returned
       * external subject token.
       * @param url The URL to call to retrieve the subject token. This is typically
       *   a local metadata server.
       * @param formatType The token file or URL response type (JSON or text).
       * @param formatSubjectTokenFieldName For JSON response types, this is the
       *   subject_token field name. For Azure, this is access_token. For text
       *   response types, this is ignored.
       * @param headers The optional additional headers to send with the request to
       *   the metadata server url.
       * @return A promise that resolves with the external subject token.
       */
      async getTokenFromUrl(url, formatType, formatSubjectTokenFieldName, headers) {
        const opts = {
          url,
          method: "GET",
          headers,
          responseType: formatType
        };
        let subjectToken;
        if (formatType === "text") {
          const response = await this.transporter.request(opts);
          subjectToken = response.data;
        } else if (formatType === "json" && formatSubjectTokenFieldName) {
          const response = await this.transporter.request(opts);
          subjectToken = response.data[formatSubjectTokenFieldName];
        }
        if (!subjectToken) {
          throw new Error("Unable to parse the subject_token from the credential_source URL");
        }
        return subjectToken;
      }
    };
    exports2.IdentityPoolClient = IdentityPoolClient;
  }
});

// node_modules/google-auth-library/build/src/auth/awsrequestsigner.js
var require_awsrequestsigner = __commonJS({
  "node_modules/google-auth-library/build/src/auth/awsrequestsigner.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsRequestSigner = void 0;
    var crypto_1 = require_crypto3();
    var AWS_ALGORITHM = "AWS4-HMAC-SHA256";
    var AWS_REQUEST_TYPE = "aws4_request";
    var AwsRequestSigner = class {
      /**
       * Instantiates an AWS API request signer used to send authenticated signed
       * requests to AWS APIs based on the AWS Signature Version 4 signing process.
       * This also provides a mechanism to generate the signed request without
       * sending it.
       * @param getCredentials A mechanism to retrieve AWS security credentials
       *   when needed.
       * @param region The AWS region to use.
       */
      constructor(getCredentials, region) {
        this.getCredentials = getCredentials;
        this.region = region;
        this.crypto = (0, crypto_1.createCrypto)();
      }
      /**
       * Generates the signed request for the provided HTTP request for calling
       * an AWS API. This follows the steps described at:
       * https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html
       * @param amzOptions The AWS request options that need to be signed.
       * @return A promise that resolves with the GaxiosOptions containing the
       *   signed HTTP request parameters.
       */
      async getRequestOptions(amzOptions) {
        if (!amzOptions.url) {
          throw new Error('"url" is required in "amzOptions"');
        }
        const requestPayloadData = typeof amzOptions.data === "object" ? JSON.stringify(amzOptions.data) : amzOptions.data;
        const url = amzOptions.url;
        const method = amzOptions.method || "GET";
        const requestPayload = amzOptions.body || requestPayloadData;
        const additionalAmzHeaders = amzOptions.headers;
        const awsSecurityCredentials = await this.getCredentials();
        const uri = new URL(url);
        const headerMap = await generateAuthenticationHeaderMap({
          crypto: this.crypto,
          host: uri.host,
          canonicalUri: uri.pathname,
          canonicalQuerystring: uri.search.substr(1),
          method,
          region: this.region,
          securityCredentials: awsSecurityCredentials,
          requestPayload,
          additionalAmzHeaders
        });
        const headers = Object.assign(
          // Add x-amz-date if available.
          headerMap.amzDate ? { "x-amz-date": headerMap.amzDate } : {},
          {
            Authorization: headerMap.authorizationHeader,
            host: uri.host
          },
          additionalAmzHeaders || {}
        );
        if (awsSecurityCredentials.token) {
          Object.assign(headers, {
            "x-amz-security-token": awsSecurityCredentials.token
          });
        }
        const awsSignedReq = {
          url,
          method,
          headers
        };
        if (typeof requestPayload !== "undefined") {
          awsSignedReq.body = requestPayload;
        }
        return awsSignedReq;
      }
    };
    exports2.AwsRequestSigner = AwsRequestSigner;
    async function sign(crypto2, key, msg) {
      return await crypto2.signWithHmacSha256(key, msg);
    }
    async function getSigningKey(crypto2, key, dateStamp, region, serviceName) {
      const kDate = await sign(crypto2, `AWS4${key}`, dateStamp);
      const kRegion = await sign(crypto2, kDate, region);
      const kService = await sign(crypto2, kRegion, serviceName);
      const kSigning = await sign(crypto2, kService, "aws4_request");
      return kSigning;
    }
    async function generateAuthenticationHeaderMap(options) {
      const additionalAmzHeaders = options.additionalAmzHeaders || {};
      const requestPayload = options.requestPayload || "";
      const serviceName = options.host.split(".")[0];
      const now = /* @__PURE__ */ new Date();
      const amzDate = now.toISOString().replace(/[-:]/g, "").replace(/\.[0-9]+/, "");
      const dateStamp = now.toISOString().replace(/[-]/g, "").replace(/T.*/, "");
      const reformattedAdditionalAmzHeaders = {};
      Object.keys(additionalAmzHeaders).forEach((key) => {
        reformattedAdditionalAmzHeaders[key.toLowerCase()] = additionalAmzHeaders[key];
      });
      if (options.securityCredentials.token) {
        reformattedAdditionalAmzHeaders["x-amz-security-token"] = options.securityCredentials.token;
      }
      const amzHeaders = Object.assign(
        {
          host: options.host
        },
        // Previously the date was not fixed with x-amz- and could be provided manually.
        // https://github.com/boto/botocore/blob/879f8440a4e9ace5d3cf145ce8b3d5e5ffb892ef/tests/unit/auth/aws4_testsuite/get-header-value-trim.req
        reformattedAdditionalAmzHeaders.date ? {} : { "x-amz-date": amzDate },
        reformattedAdditionalAmzHeaders
      );
      let canonicalHeaders = "";
      const signedHeadersList = Object.keys(amzHeaders).sort();
      signedHeadersList.forEach((key) => {
        canonicalHeaders += `${key}:${amzHeaders[key]}
`;
      });
      const signedHeaders = signedHeadersList.join(";");
      const payloadHash = await options.crypto.sha256DigestHex(requestPayload);
      const canonicalRequest = `${options.method}
${options.canonicalUri}
${options.canonicalQuerystring}
${canonicalHeaders}
${signedHeaders}
${payloadHash}`;
      const credentialScope = `${dateStamp}/${options.region}/${serviceName}/${AWS_REQUEST_TYPE}`;
      const stringToSign = `${AWS_ALGORITHM}
${amzDate}
${credentialScope}
` + await options.crypto.sha256DigestHex(canonicalRequest);
      const signingKey = await getSigningKey(options.crypto, options.securityCredentials.secretAccessKey, dateStamp, options.region, serviceName);
      const signature = await sign(options.crypto, signingKey, stringToSign);
      const authorizationHeader = `${AWS_ALGORITHM} Credential=${options.securityCredentials.accessKeyId}/${credentialScope}, SignedHeaders=${signedHeaders}, Signature=${(0, crypto_1.fromArrayBufferToHex)(signature)}`;
      return {
        // Do not return x-amz-date if date is available.
        amzDate: reformattedAdditionalAmzHeaders.date ? void 0 : amzDate,
        authorizationHeader,
        canonicalQuerystring: options.canonicalQuerystring
      };
    }
  }
});

// node_modules/google-auth-library/build/src/auth/awsclient.js
var require_awsclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/awsclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsClient = void 0;
    var awsrequestsigner_1 = require_awsrequestsigner();
    var baseexternalclient_1 = require_baseexternalclient();
    var AwsClient = class extends baseexternalclient_1.BaseExternalAccountClient {
      /**
       * Instantiates an AwsClient instance using the provided JSON
       * object loaded from an external account credentials file.
       * An error is thrown if the credential is not a valid AWS credential.
       * @param options The external account options object typically loaded
       *   from the external account JSON credential file.
       * @param additionalOptions Optional additional behavior customization
       *   options. These currently customize expiration threshold time and
       *   whether to retry on 401/403 API request errors.
       */
      constructor(options, additionalOptions) {
        super(options, additionalOptions);
        this.environmentId = options.credential_source.environment_id;
        this.regionUrl = options.credential_source.region_url;
        this.securityCredentialsUrl = options.credential_source.url;
        this.regionalCredVerificationUrl = options.credential_source.regional_cred_verification_url;
        this.imdsV2SessionTokenUrl = options.credential_source.imdsv2_session_token_url;
        this.awsRequestSigner = null;
        this.region = "";
        this.validateEnvironmentId();
      }
      validateEnvironmentId() {
        var _a;
        const match = (_a = this.environmentId) === null || _a === void 0 ? void 0 : _a.match(/^(aws)(\d+)$/);
        if (!match || !this.regionalCredVerificationUrl) {
          throw new Error('No valid AWS "credential_source" provided');
        } else if (parseInt(match[2], 10) !== 1) {
          throw new Error(`aws version "${match[2]}" is not supported in the current build.`);
        }
      }
      /**
       * Triggered when an external subject token is needed to be exchanged for a
       * GCP access token via GCP STS endpoint.
       * This uses the `options.credential_source` object to figure out how
       * to retrieve the token using the current environment. In this case,
       * this uses a serialized AWS signed request to the STS GetCallerIdentity
       * endpoint.
       * The logic is summarized as:
       * 1. If imdsv2_session_token_url is provided in the credential source, then
       *    fetch the aws session token and include it in the headers of the
       *    metadata requests. This is a requirement for IDMSv2 but optional
       *    for IDMSv1.
       * 2. Retrieve AWS region from availability-zone.
       * 3a. Check AWS credentials in environment variables. If not found, get
       *     from security-credentials endpoint.
       * 3b. Get AWS credentials from security-credentials endpoint. In order
       *     to retrieve this, the AWS role needs to be determined by calling
       *     security-credentials endpoint without any argument. Then the
       *     credentials can be retrieved via: security-credentials/role_name
       * 4. Generate the signed request to AWS STS GetCallerIdentity action.
       * 5. Inject x-goog-cloud-target-resource into header and serialize the
       *    signed request. This will be the subject-token to pass to GCP STS.
       * @return A promise that resolves with the external subject token.
       */
      async retrieveSubjectToken() {
        if (!this.awsRequestSigner) {
          const metadataHeaders = {};
          if (this.shouldUseMetadataServer() && this.imdsV2SessionTokenUrl) {
            metadataHeaders["x-aws-ec2-metadata-token"] = await this.getImdsV2SessionToken();
          }
          this.region = await this.getAwsRegion(metadataHeaders);
          this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async () => {
            if (this.securityCredentialsFromEnv) {
              return this.securityCredentialsFromEnv;
            }
            const roleName = await this.getAwsRoleName(metadataHeaders);
            const awsCreds = await this.getAwsSecurityCredentials(roleName, metadataHeaders);
            return {
              accessKeyId: awsCreds.AccessKeyId,
              secretAccessKey: awsCreds.SecretAccessKey,
              token: awsCreds.Token
            };
          }, this.region);
        }
        const options = await this.awsRequestSigner.getRequestOptions({
          url: this.regionalCredVerificationUrl.replace("{region}", this.region),
          method: "POST"
        });
        const reformattedHeader = [];
        const extendedHeaders = Object.assign({
          // The full, canonical resource name of the workload identity pool
          // provider, with or without the HTTPS prefix.
          // Including this header as part of the signature is recommended to
          // ensure data integrity.
          "x-goog-cloud-target-resource": this.audience
        }, options.headers);
        for (const key in extendedHeaders) {
          reformattedHeader.push({
            key,
            value: extendedHeaders[key]
          });
        }
        return encodeURIComponent(JSON.stringify({
          url: options.url,
          method: options.method,
          headers: reformattedHeader
        }));
      }
      /**
       * @return A promise that resolves with the IMDSv2 Session Token.
       */
      async getImdsV2SessionToken() {
        const opts = {
          url: this.imdsV2SessionTokenUrl,
          method: "PUT",
          responseType: "text",
          headers: { "x-aws-ec2-metadata-token-ttl-seconds": "300" }
        };
        const response = await this.transporter.request(opts);
        return response.data;
      }
      /**
       * @param headers The headers to be used in the metadata request.
       * @return A promise that resolves with the current AWS region.
       */
      async getAwsRegion(headers) {
        if (this.regionFromEnv) {
          return this.regionFromEnv;
        }
        if (!this.regionUrl) {
          throw new Error('Unable to determine AWS region due to missing "options.credential_source.region_url"');
        }
        const opts = {
          url: this.regionUrl,
          method: "GET",
          responseType: "text",
          headers
        };
        const response = await this.transporter.request(opts);
        return response.data.substr(0, response.data.length - 1);
      }
      /**
       * @param headers The headers to be used in the metadata request.
       * @return A promise that resolves with the assigned role to the current
       *   AWS VM. This is needed for calling the security-credentials endpoint.
       */
      async getAwsRoleName(headers) {
        if (!this.securityCredentialsUrl) {
          throw new Error('Unable to determine AWS role name due to missing "options.credential_source.url"');
        }
        const opts = {
          url: this.securityCredentialsUrl,
          method: "GET",
          responseType: "text",
          headers
        };
        const response = await this.transporter.request(opts);
        return response.data;
      }
      /**
       * Retrieves the temporary AWS credentials by calling the security-credentials
       * endpoint as specified in the `credential_source` object.
       * @param roleName The role attached to the current VM.
       * @param headers The headers to be used in the metadata request.
       * @return A promise that resolves with the temporary AWS credentials
       *   needed for creating the GetCallerIdentity signed request.
       */
      async getAwsSecurityCredentials(roleName, headers) {
        const response = await this.transporter.request({
          url: `${this.securityCredentialsUrl}/${roleName}`,
          responseType: "json",
          headers
        });
        return response.data;
      }
      shouldUseMetadataServer() {
        return !this.regionFromEnv || !this.securityCredentialsFromEnv;
      }
      get regionFromEnv() {
        return process.env["AWS_REGION"] || process.env["AWS_DEFAULT_REGION"] || null;
      }
      get securityCredentialsFromEnv() {
        if (process.env["AWS_ACCESS_KEY_ID"] && process.env["AWS_SECRET_ACCESS_KEY"]) {
          return {
            accessKeyId: process.env["AWS_ACCESS_KEY_ID"],
            secretAccessKey: process.env["AWS_SECRET_ACCESS_KEY"],
            token: process.env["AWS_SESSION_TOKEN"]
          };
        }
        return null;
      }
    };
    exports2.AwsClient = AwsClient;
    AwsClient.AWS_EC2_METADATA_IPV4_ADDRESS = "169.254.169.254";
    AwsClient.AWS_EC2_METADATA_IPV6_ADDRESS = "fd00:ec2::254";
  }
});

// node_modules/google-auth-library/build/src/auth/executable-response.js
var require_executable_response = __commonJS({
  "node_modules/google-auth-library/build/src/auth/executable-response.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InvalidSubjectTokenError = exports2.InvalidMessageFieldError = exports2.InvalidCodeFieldError = exports2.InvalidTokenTypeFieldError = exports2.InvalidExpirationTimeFieldError = exports2.InvalidSuccessFieldError = exports2.InvalidVersionFieldError = exports2.ExecutableResponseError = exports2.ExecutableResponse = void 0;
    var SAML_SUBJECT_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:saml2";
    var OIDC_SUBJECT_TOKEN_TYPE1 = "urn:ietf:params:oauth:token-type:id_token";
    var OIDC_SUBJECT_TOKEN_TYPE2 = "urn:ietf:params:oauth:token-type:jwt";
    var ExecutableResponse = class {
      /**
       * Instantiates an ExecutableResponse instance using the provided JSON object
       * from the output of the executable.
       * @param responseJson Response from a 3rd party executable, loaded from a
       * run of the executable or a cached output file.
       */
      constructor(responseJson) {
        if (!responseJson.version) {
          throw new InvalidVersionFieldError("Executable response must contain a 'version' field.");
        }
        if (responseJson.success === void 0) {
          throw new InvalidSuccessFieldError("Executable response must contain a 'success' field.");
        }
        this.version = responseJson.version;
        this.success = responseJson.success;
        if (this.success) {
          this.expirationTime = responseJson.expiration_time;
          this.tokenType = responseJson.token_type;
          if (this.tokenType !== SAML_SUBJECT_TOKEN_TYPE && this.tokenType !== OIDC_SUBJECT_TOKEN_TYPE1 && this.tokenType !== OIDC_SUBJECT_TOKEN_TYPE2) {
            throw new InvalidTokenTypeFieldError(`Executable response must contain a 'token_type' field when successful and it must be one of ${OIDC_SUBJECT_TOKEN_TYPE1}, ${OIDC_SUBJECT_TOKEN_TYPE2}, or ${SAML_SUBJECT_TOKEN_TYPE}.`);
          }
          if (this.tokenType === SAML_SUBJECT_TOKEN_TYPE) {
            if (!responseJson.saml_response) {
              throw new InvalidSubjectTokenError(`Executable response must contain a 'saml_response' field when token_type=${SAML_SUBJECT_TOKEN_TYPE}.`);
            }
            this.subjectToken = responseJson.saml_response;
          } else {
            if (!responseJson.id_token) {
              throw new InvalidSubjectTokenError(`Executable response must contain a 'id_token' field when token_type=${OIDC_SUBJECT_TOKEN_TYPE1} or ${OIDC_SUBJECT_TOKEN_TYPE2}.`);
            }
            this.subjectToken = responseJson.id_token;
          }
        } else {
          if (!responseJson.code) {
            throw new InvalidCodeFieldError("Executable response must contain a 'code' field when unsuccessful.");
          }
          if (!responseJson.message) {
            throw new InvalidMessageFieldError("Executable response must contain a 'message' field when unsuccessful.");
          }
          this.errorCode = responseJson.code;
          this.errorMessage = responseJson.message;
        }
      }
      /**
       * @return A boolean representing if the response has a valid token. Returns
       * true when the response was successful and the token is not expired.
       */
      isValid() {
        return !this.isExpired() && this.success;
      }
      /**
       * @return A boolean representing if the response is expired. Returns true if the
       * provided timeout has passed.
       */
      isExpired() {
        return this.expirationTime !== void 0 && this.expirationTime < Math.round(Date.now() / 1e3);
      }
    };
    exports2.ExecutableResponse = ExecutableResponse;
    var ExecutableResponseError = class extends Error {
      constructor(message) {
        super(message);
        Object.setPrototypeOf(this, new.target.prototype);
      }
    };
    exports2.ExecutableResponseError = ExecutableResponseError;
    var InvalidVersionFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidVersionFieldError = InvalidVersionFieldError;
    var InvalidSuccessFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidSuccessFieldError = InvalidSuccessFieldError;
    var InvalidExpirationTimeFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidExpirationTimeFieldError = InvalidExpirationTimeFieldError;
    var InvalidTokenTypeFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidTokenTypeFieldError = InvalidTokenTypeFieldError;
    var InvalidCodeFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidCodeFieldError = InvalidCodeFieldError;
    var InvalidMessageFieldError = class extends ExecutableResponseError {
    };
    exports2.InvalidMessageFieldError = InvalidMessageFieldError;
    var InvalidSubjectTokenError = class extends ExecutableResponseError {
    };
    exports2.InvalidSubjectTokenError = InvalidSubjectTokenError;
  }
});

// node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js
var require_pluggable_auth_handler = __commonJS({
  "node_modules/google-auth-library/build/src/auth/pluggable-auth-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PluggableAuthHandler = void 0;
    var pluggable_auth_client_1 = require_pluggable_auth_client();
    var executable_response_1 = require_executable_response();
    var childProcess = require("child_process");
    var fs = require("fs");
    var PluggableAuthHandler = class _PluggableAuthHandler {
      /**
       * Instantiates a PluggableAuthHandler instance using the provided
       * PluggableAuthHandlerOptions object.
       */
      constructor(options) {
        if (!options.command) {
          throw new Error("No command provided.");
        }
        this.commandComponents = _PluggableAuthHandler.parseCommand(options.command);
        this.timeoutMillis = options.timeoutMillis;
        if (!this.timeoutMillis) {
          throw new Error("No timeoutMillis provided.");
        }
        this.outputFile = options.outputFile;
      }
      /**
       * Calls user provided executable to get a 3rd party subject token and
       * returns the response.
       * @param envMap a Map of additional Environment Variables required for
       *   the executable.
       * @return A promise that resolves with the executable response.
       */
      retrieveResponseFromExecutable(envMap) {
        return new Promise((resolve, reject) => {
          const child = childProcess.spawn(this.commandComponents[0], this.commandComponents.slice(1), {
            env: { ...process.env, ...Object.fromEntries(envMap) }
          });
          let output = "";
          child.stdout.on("data", (data) => {
            output += data;
          });
          child.stderr.on("data", (err) => {
            output += err;
          });
          const timeout = setTimeout(() => {
            child.removeAllListeners();
            child.kill();
            return reject(new Error("The executable failed to finish within the timeout specified."));
          }, this.timeoutMillis);
          child.on("close", (code) => {
            clearTimeout(timeout);
            if (code === 0) {
              try {
                const responseJson = JSON.parse(output);
                const response = new executable_response_1.ExecutableResponse(responseJson);
                return resolve(response);
              } catch (error) {
                if (error instanceof executable_response_1.ExecutableResponseError) {
                  return reject(error);
                }
                return reject(new executable_response_1.ExecutableResponseError(`The executable returned an invalid response: ${output}`));
              }
            } else {
              return reject(new pluggable_auth_client_1.ExecutableError(output, code.toString()));
            }
          });
        });
      }
      /**
       * Checks user provided output file for response from previous run of
       * executable and return the response if it exists, is formatted correctly, and is not expired.
       */
      async retrieveCachedResponse() {
        if (!this.outputFile || this.outputFile.length === 0) {
          return void 0;
        }
        let filePath;
        try {
          filePath = await fs.promises.realpath(this.outputFile);
        } catch (_a) {
          return void 0;
        }
        if (!(await fs.promises.lstat(filePath)).isFile()) {
          return void 0;
        }
        const responseString = await fs.promises.readFile(filePath, {
          encoding: "utf8"
        });
        if (responseString === "") {
          return void 0;
        }
        try {
          const responseJson = JSON.parse(responseString);
          const response = new executable_response_1.ExecutableResponse(responseJson);
          if (response.isValid()) {
            return new executable_response_1.ExecutableResponse(responseJson);
          }
          return void 0;
        } catch (error) {
          if (error instanceof executable_response_1.ExecutableResponseError) {
            throw error;
          }
          throw new executable_response_1.ExecutableResponseError(`The output file contained an invalid response: ${responseString}`);
        }
      }
      /**
       * Parses given command string into component array, splitting on spaces unless
       * spaces are between quotation marks.
       */
      static parseCommand(command) {
        const components = command.match(/(?:[^\s"]+|"[^"]*")+/g);
        if (!components) {
          throw new Error(`Provided command: "${command}" could not be parsed.`);
        }
        for (let i = 0; i < components.length; i++) {
          if (components[i][0] === '"' && components[i].slice(-1) === '"') {
            components[i] = components[i].slice(1, -1);
          }
        }
        return components;
      }
    };
    exports2.PluggableAuthHandler = PluggableAuthHandler;
  }
});

// node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js
var require_pluggable_auth_client = __commonJS({
  "node_modules/google-auth-library/build/src/auth/pluggable-auth-client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PluggableAuthClient = exports2.ExecutableError = void 0;
    var baseexternalclient_1 = require_baseexternalclient();
    var executable_response_1 = require_executable_response();
    var pluggable_auth_handler_1 = require_pluggable_auth_handler();
    var ExecutableError = class extends Error {
      constructor(message, code) {
        super(`The executable failed with exit code: ${code} and error message: ${message}.`);
        this.code = code;
        Object.setPrototypeOf(this, new.target.prototype);
      }
    };
    exports2.ExecutableError = ExecutableError;
    var DEFAULT_EXECUTABLE_TIMEOUT_MILLIS = 30 * 1e3;
    var MINIMUM_EXECUTABLE_TIMEOUT_MILLIS = 5 * 1e3;
    var MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS = 120 * 1e3;
    var GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES = "GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES";
    var MAXIMUM_EXECUTABLE_VERSION = 1;
    var PluggableAuthClient = class extends baseexternalclient_1.BaseExternalAccountClient {
      /**
       * Instantiates a PluggableAuthClient instance using the provided JSON
       * object loaded from an external account credentials file.
       * An error is thrown if the credential is not a valid pluggable auth credential.
       * @param options The external account options object typically loaded from
       *   the external account JSON credential file.
       * @param additionalOptions Optional additional behavior customization
       *   options. These currently customize expiration threshold time and
       *   whether to retry on 401/403 API request errors.
       */
      constructor(options, additionalOptions) {
        super(options, additionalOptions);
        if (!options.credential_source.executable) {
          throw new Error('No valid Pluggable Auth "credential_source" provided.');
        }
        this.command = options.credential_source.executable.command;
        if (!this.command) {
          throw new Error('No valid Pluggable Auth "credential_source" provided.');
        }
        if (options.credential_source.executable.timeout_millis === void 0) {
          this.timeoutMillis = DEFAULT_EXECUTABLE_TIMEOUT_MILLIS;
        } else {
          this.timeoutMillis = options.credential_source.executable.timeout_millis;
          if (this.timeoutMillis < MINIMUM_EXECUTABLE_TIMEOUT_MILLIS || this.timeoutMillis > MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS) {
            throw new Error(`Timeout must be between ${MINIMUM_EXECUTABLE_TIMEOUT_MILLIS} and ${MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS} milliseconds.`);
          }
        }
        this.outputFile = options.credential_source.executable.output_file;
        this.handler = new pluggable_auth_handler_1.PluggableAuthHandler({
          command: this.command,
          timeoutMillis: this.timeoutMillis,
          outputFile: this.outputFile
        });
      }
      /**
       * Triggered when an external subject token is needed to be exchanged for a
       * GCP access token via GCP STS endpoint.
       * This uses the `options.credential_source` object to figure out how
       * to retrieve the token using the current environment. In this case,
       * this calls a user provided executable which returns the subject token.
       * The logic is summarized as:
       * 1. Validated that the executable is allowed to run. The
       *    GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment must be set to
       *    1 for security reasons.
       * 2. If an output file is specified by the user, check the file location
       *    for a response. If the file exists and contains a valid response,
       *    return the subject token from the file.
       * 3. Call the provided executable and return response.
       * @return A promise that resolves with the external subject token.
       */
      async retrieveSubjectToken() {
        if (process.env[GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES] !== "1") {
          throw new Error("Pluggable Auth executables need to be explicitly allowed to run by setting the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment Variable to 1.");
        }
        let executableResponse = void 0;
        if (this.outputFile) {
          executableResponse = await this.handler.retrieveCachedResponse();
        }
        if (!executableResponse) {
          const envMap = /* @__PURE__ */ new Map();
          envMap.set("GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE", this.audience);
          envMap.set("GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE", this.subjectTokenType);
          envMap.set("GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE", "0");
          if (this.outputFile) {
            envMap.set("GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE", this.outputFile);
          }
          const serviceAccountEmail = this.getServiceAccountEmail();
          if (serviceAccountEmail) {
            envMap.set("GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL", serviceAccountEmail);
          }
          executableResponse = await this.handler.retrieveResponseFromExecutable(envMap);
        }
        if (executableResponse.version > MAXIMUM_EXECUTABLE_VERSION) {
          throw new Error(`Version of executable is not currently supported, maximum supported version is ${MAXIMUM_EXECUTABLE_VERSION}.`);
        }
        if (!executableResponse.success) {
          throw new ExecutableError(executableResponse.errorMessage, executableResponse.errorCode);
        }
        if (this.outputFile) {
          if (!executableResponse.expirationTime) {
            throw new executable_response_1.InvalidExpirationTimeFieldError("The executable response must contain the `expiration_time` field for successful responses when an output_file has been specified in the configuration.");
          }
        }
        if (executableResponse.isExpired()) {
          throw new Error("Executable response is expired.");
        }
        return executableResponse.subjectToken;
      }
    };
    exports2.PluggableAuthClient = PluggableAuthClient;
  }
});

// node_modules/google-auth-library/build/src/auth/externalclient.js
var require_externalclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/externalclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExternalAccountClient = void 0;
    var baseexternalclient_1 = require_baseexternalclient();
    var identitypoolclient_1 = require_identitypoolclient();
    var awsclient_1 = require_awsclient();
    var pluggable_auth_client_1 = require_pluggable_auth_client();
    var ExternalAccountClient = class {
      constructor() {
        throw new Error("ExternalAccountClients should be initialized via: ExternalAccountClient.fromJSON(), directly via explicit constructors, eg. new AwsClient(options), new IdentityPoolClient(options), newPluggableAuthClientOptions, or via new GoogleAuth(options).getClient()");
      }
      /**
       * This static method will instantiate the
       * corresponding type of external account credential depending on the
       * underlying credential source.
       * @param options The external account options object typically loaded
       *   from the external account JSON credential file.
       * @param additionalOptions Optional additional behavior customization
       *   options. These currently customize expiration threshold time and
       *   whether to retry on 401/403 API request errors.
       * @return A BaseExternalAccountClient instance or null if the options
       *   provided do not correspond to an external account credential.
       */
      static fromJSON(options, additionalOptions) {
        var _a, _b;
        if (options && options.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {
          if ((_a = options.credential_source) === null || _a === void 0 ? void 0 : _a.environment_id) {
            return new awsclient_1.AwsClient(options, additionalOptions);
          } else if ((_b = options.credential_source) === null || _b === void 0 ? void 0 : _b.executable) {
            return new pluggable_auth_client_1.PluggableAuthClient(options, additionalOptions);
          } else {
            return new identitypoolclient_1.IdentityPoolClient(options, additionalOptions);
          }
        } else {
          return null;
        }
      }
    };
    exports2.ExternalAccountClient = ExternalAccountClient;
  }
});

// node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js
var require_externalAccountAuthorizedUserClient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExternalAccountAuthorizedUserClient = exports2.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = void 0;
    var authclient_1 = require_authclient();
    var oauth2common_1 = require_oauth2common();
    var gaxios_1 = require_src5();
    var stream = require("stream");
    var baseexternalclient_1 = require_baseexternalclient();
    exports2.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = "external_account_authorized_user";
    var ExternalAccountAuthorizedUserHandler = class extends oauth2common_1.OAuthClientAuthHandler {
      /**
       * Initializes an ExternalAccountAuthorizedUserHandler instance.
       * @param url The URL of the token refresh endpoint.
       * @param transporter The transporter to use for the refresh request.
       * @param clientAuthentication The client authentication credentials to use
       *   for the refresh request.
       */
      constructor(url, transporter, clientAuthentication) {
        super(clientAuthentication);
        this.url = url;
        this.transporter = transporter;
      }
      /**
       * Requests a new access token from the token_url endpoint using the provided
       *   refresh token.
       * @param refreshToken The refresh token to use to generate a new access token.
       * @param additionalHeaders Optional additional headers to pass along the
       *   request.
       * @return A promise that resolves with the token refresh response containing
       *   the requested access token and its expiration time.
       */
      async refreshToken(refreshToken, additionalHeaders) {
        const values = new URLSearchParams({
          grant_type: "refresh_token",
          refresh_token: refreshToken
        });
        const headers = {
          "Content-Type": "application/x-www-form-urlencoded",
          ...additionalHeaders
        };
        const opts = {
          url: this.url,
          method: "POST",
          headers,
          data: values.toString(),
          responseType: "json"
        };
        this.applyClientAuthenticationOptions(opts);
        try {
          const response = await this.transporter.request(opts);
          const tokenRefreshResponse = response.data;
          tokenRefreshResponse.res = response;
          return tokenRefreshResponse;
        } catch (error) {
          if (error instanceof gaxios_1.GaxiosError && error.response) {
            throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(
              error.response.data,
              // Preserve other fields from the original error.
              error
            );
          }
          throw error;
        }
      }
    };
    var ExternalAccountAuthorizedUserClient = class extends authclient_1.AuthClient {
      /**
       * Instantiates an ExternalAccountAuthorizedUserClient instances using the
       * provided JSON object loaded from a credentials files.
       * An error is throws if the credential is not valid.
       * @param options The external account authorized user option object typically
       *   from the external accoutn authorized user JSON credential file.
       * @param additionalOptions Optional additional behavior customization
       *   options. These currently customize expiration threshold time and
       *   whether to retry on 401/403 API request errors.
       */
      constructor(options, additionalOptions) {
        super();
        this.refreshToken = options.refresh_token;
        const clientAuth = {
          confidentialClientType: "basic",
          clientId: options.client_id,
          clientSecret: options.client_secret
        };
        this.externalAccountAuthorizedUserHandler = new ExternalAccountAuthorizedUserHandler(options.token_url, this.transporter, clientAuth);
        this.cachedAccessToken = null;
        this.quotaProjectId = options.quota_project_id;
        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== "number") {
          this.eagerRefreshThresholdMillis = baseexternalclient_1.EXPIRATION_TIME_OFFSET;
        } else {
          this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;
        }
        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);
      }
      async getAccessToken() {
        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {
          await this.refreshAccessTokenAsync();
        }
        return {
          token: this.cachedAccessToken.access_token,
          res: this.cachedAccessToken.res
        };
      }
      async getRequestHeaders() {
        const accessTokenResponse = await this.getAccessToken();
        const headers = {
          Authorization: `Bearer ${accessTokenResponse.token}`
        };
        return this.addSharedMetadataHeaders(headers);
      }
      request(opts, callback) {
        if (callback) {
          this.requestAsync(opts).then((r) => callback(null, r), (e) => {
            return callback(e, e.response);
          });
        } else {
          return this.requestAsync(opts);
        }
      }
      /**
       * Authenticates the provided HTTP request, processes it and resolves with the
       * returned response.
       * @param opts The HTTP request options.
       * @param retry Whether the current attempt is a retry after a failed attempt.
       * @return A promise that resolves with the successful response.
       */
      async requestAsync(opts, retry = false) {
        let response;
        try {
          const requestHeaders = await this.getRequestHeaders();
          opts.headers = opts.headers || {};
          if (requestHeaders && requestHeaders["x-goog-user-project"]) {
            opts.headers["x-goog-user-project"] = requestHeaders["x-goog-user-project"];
          }
          if (requestHeaders && requestHeaders.Authorization) {
            opts.headers.Authorization = requestHeaders.Authorization;
          }
          response = await this.transporter.request(opts);
        } catch (e) {
          const res = e.response;
          if (res) {
            const statusCode = res.status;
            const isReadableStream = res.config.data instanceof stream.Readable;
            const isAuthErr = statusCode === 401 || statusCode === 403;
            if (!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {
              await this.refreshAccessTokenAsync();
              return await this.requestAsync(opts, true);
            }
          }
          throw e;
        }
        return response;
      }
      /**
       * Forces token refresh, even if unexpired tokens are currently cached.
       * @return A promise that resolves with the refreshed credential.
       */
      async refreshAccessTokenAsync() {
        const refreshResponse = await this.externalAccountAuthorizedUserHandler.refreshToken(this.refreshToken);
        this.cachedAccessToken = {
          access_token: refreshResponse.access_token,
          expiry_date: (/* @__PURE__ */ new Date()).getTime() + refreshResponse.expires_in * 1e3,
          res: refreshResponse.res
        };
        if (refreshResponse.refresh_token !== void 0) {
          this.refreshToken = refreshResponse.refresh_token;
        }
        return this.cachedAccessToken;
      }
      /**
       * Returns whether the provided credentials are expired or not.
       * If there is no expiry time, assumes the token is not expired or expiring.
       * @param credentials The credentials to check for expiration.
       * @return Whether the credentials are expired or not.
       */
      isExpired(credentials) {
        const now = (/* @__PURE__ */ new Date()).getTime();
        return credentials.expiry_date ? now >= credentials.expiry_date - this.eagerRefreshThresholdMillis : false;
      }
    };
    exports2.ExternalAccountAuthorizedUserClient = ExternalAccountAuthorizedUserClient;
  }
});

// node_modules/google-auth-library/build/src/auth/googleauth.js
var require_googleauth = __commonJS({
  "node_modules/google-auth-library/build/src/auth/googleauth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GoogleAuth = exports2.CLOUD_SDK_CLIENT_ID = void 0;
    var child_process_1 = require("child_process");
    var fs = require("fs");
    var gcpMetadata = require_src6();
    var os = require("os");
    var path = require("path");
    var crypto_1 = require_crypto3();
    var transporters_1 = require_transporters();
    var computeclient_1 = require_computeclient();
    var idtokenclient_1 = require_idtokenclient();
    var envDetect_1 = require_envDetect();
    var jwtclient_1 = require_jwtclient();
    var refreshclient_1 = require_refreshclient();
    var impersonated_1 = require_impersonated();
    var externalclient_1 = require_externalclient();
    var baseexternalclient_1 = require_baseexternalclient();
    var externalAccountAuthorizedUserClient_1 = require_externalAccountAuthorizedUserClient();
    exports2.CLOUD_SDK_CLIENT_ID = "764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com";
    var GoogleAuthExceptionMessages = {
      NO_PROJECT_ID_FOUND: "Unable to detect a Project Id in the current environment. \nTo learn more about authentication and Google APIs, visit: \nhttps://cloud.google.com/docs/authentication/getting-started"
    };
    var GoogleAuth = class {
      // Note:  this properly is only public to satisify unit tests.
      // https://github.com/Microsoft/TypeScript/issues/5228
      get isGCE() {
        return this.checkIsGCE;
      }
      constructor(opts) {
        this.checkIsGCE = void 0;
        this.jsonContent = null;
        this.cachedCredential = null;
        opts = opts || {};
        this._cachedProjectId = opts.projectId || null;
        this.cachedCredential = opts.authClient || null;
        this.keyFilename = opts.keyFilename || opts.keyFile;
        this.scopes = opts.scopes;
        this.jsonContent = opts.credentials || null;
        this.clientOptions = opts.clientOptions;
      }
      // GAPIC client libraries should always use self-signed JWTs. The following
      // variables are set on the JWT client in order to indicate the type of library,
      // and sign the JWT with the correct audience and scopes (if not supplied).
      setGapicJWTValues(client2) {
        client2.defaultServicePath = this.defaultServicePath;
        client2.useJWTAccessWithScope = this.useJWTAccessWithScope;
        client2.defaultScopes = this.defaultScopes;
      }
      getProjectId(callback) {
        if (callback) {
          this.getProjectIdAsync().then((r) => callback(null, r), callback);
        } else {
          return this.getProjectIdAsync();
        }
      }
      /**
       * A temporary method for internal `getProjectId` usages where `null` is
       * acceptable. In a future major release, `getProjectId` should return `null`
       * (as the `Promise<string | null>` base signature describes) and this private
       * method should be removed.
       *
       * @returns Promise that resolves with project id (or `null`)
       */
      async getProjectIdOptional() {
        try {
          return await this.getProjectId();
        } catch (e) {
          if (e instanceof Error && e.message === GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND) {
            return null;
          } else {
            throw e;
          }
        }
      }
      /*
       * A private method for finding and caching a projectId.
       *
       * Supports environments in order of precedence:
       * - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable
       * - GOOGLE_APPLICATION_CREDENTIALS JSON file
       * - Cloud SDK: `gcloud config config-helper --format json`
       * - GCE project ID from metadata server
       *
       * @returns projectId
       */
      async findAndCacheProjectId() {
        let projectId = null;
        projectId || (projectId = await this.getProductionProjectId());
        projectId || (projectId = await this.getFileProjectId());
        projectId || (projectId = await this.getDefaultServiceProjectId());
        projectId || (projectId = await this.getGCEProjectId());
        projectId || (projectId = await this.getExternalAccountClientProjectId());
        if (projectId) {
          this._cachedProjectId = projectId;
          return projectId;
        } else {
          throw new Error(GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND);
        }
      }
      async getProjectIdAsync() {
        if (this._cachedProjectId) {
          return this._cachedProjectId;
        }
        if (!this._findProjectIdPromise) {
          this._findProjectIdPromise = this.findAndCacheProjectId();
        }
        return this._findProjectIdPromise;
      }
      /**
       * @returns Any scopes (user-specified or default scopes specified by the
       *   client library) that need to be set on the current Auth client.
       */
      getAnyScopes() {
        return this.scopes || this.defaultScopes;
      }
      getApplicationDefault(optionsOrCallback = {}, callback) {
        let options;
        if (typeof optionsOrCallback === "function") {
          callback = optionsOrCallback;
        } else {
          options = optionsOrCallback;
        }
        if (callback) {
          this.getApplicationDefaultAsync(options).then((r) => callback(null, r.credential, r.projectId), callback);
        } else {
          return this.getApplicationDefaultAsync(options);
        }
      }
      async getApplicationDefaultAsync(options = {}) {
        if (this.cachedCredential) {
          return await this.prepareAndCacheADC(this.cachedCredential);
        }
        const quotaProjectIdOverride = process.env["GOOGLE_CLOUD_QUOTA_PROJECT"];
        let credential;
        credential = await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);
        if (credential) {
          if (credential instanceof jwtclient_1.JWT) {
            credential.scopes = this.scopes;
          } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {
            credential.scopes = this.getAnyScopes();
          }
          return await this.prepareAndCacheADC(credential, quotaProjectIdOverride);
        }
        credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);
        if (credential) {
          if (credential instanceof jwtclient_1.JWT) {
            credential.scopes = this.scopes;
          } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {
            credential.scopes = this.getAnyScopes();
          }
          return await this.prepareAndCacheADC(credential, quotaProjectIdOverride);
        }
        let isGCE;
        try {
          isGCE = await this._checkIsGCE();
        } catch (e) {
          if (e instanceof Error) {
            e.message = `Unexpected error determining execution environment: ${e.message}`;
          }
          throw e;
        }
        if (!isGCE) {
          throw new Error("Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.");
        }
        options.scopes = this.getAnyScopes();
        return await this.prepareAndCacheADC(new computeclient_1.Compute(options), quotaProjectIdOverride);
      }
      async prepareAndCacheADC(credential, quotaProjectIdOverride) {
        const projectId = await this.getProjectIdOptional();
        if (quotaProjectIdOverride) {
          credential.quotaProjectId = quotaProjectIdOverride;
        }
        this.cachedCredential = credential;
        return { credential, projectId };
      }
      /**
       * Determines whether the auth layer is running on Google Compute Engine.
       * Checks for GCP Residency, then fallback to checking if metadata server
       * is available.
       *
       * @returns A promise that resolves with the boolean.
       * @api private
       */
      async _checkIsGCE() {
        if (this.checkIsGCE === void 0) {
          this.checkIsGCE = gcpMetadata.getGCPResidency() || await gcpMetadata.isAvailable();
        }
        return this.checkIsGCE;
      }
      /**
       * Attempts to load default credentials from the environment variable path..
       * @returns Promise that resolves with the OAuth2Client or null.
       * @api private
       */
      async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {
        const credentialsPath = process.env["GOOGLE_APPLICATION_CREDENTIALS"] || process.env["google_application_credentials"];
        if (!credentialsPath || credentialsPath.length === 0) {
          return null;
        }
        try {
          return this._getApplicationCredentialsFromFilePath(credentialsPath, options);
        } catch (e) {
          if (e instanceof Error) {
            e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;
          }
          throw e;
        }
      }
      /**
       * Attempts to load default credentials from a well-known file location
       * @return Promise that resolves with the OAuth2Client or null.
       * @api private
       */
      async _tryGetApplicationCredentialsFromWellKnownFile(options) {
        let location = null;
        if (this._isWindows()) {
          location = process.env["APPDATA"];
        } else {
          const home = process.env["HOME"];
          if (home) {
            location = path.join(home, ".config");
          }
        }
        if (location) {
          location = path.join(location, "gcloud", "application_default_credentials.json");
          if (!fs.existsSync(location)) {
            location = null;
          }
        }
        if (!location) {
          return null;
        }
        const client2 = await this._getApplicationCredentialsFromFilePath(location, options);
        return client2;
      }
      /**
       * Attempts to load default credentials from a file at the given path..
       * @param filePath The path to the file to read.
       * @returns Promise that resolves with the OAuth2Client
       * @api private
       */
      async _getApplicationCredentialsFromFilePath(filePath, options = {}) {
        if (!filePath || filePath.length === 0) {
          throw new Error("The file path is invalid.");
        }
        try {
          filePath = fs.realpathSync(filePath);
          if (!fs.lstatSync(filePath).isFile()) {
            throw new Error();
          }
        } catch (err) {
          if (err instanceof Error) {
            err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;
          }
          throw err;
        }
        const readStream = fs.createReadStream(filePath);
        return this.fromStream(readStream, options);
      }
      /**
       * Create a credentials instance using a given impersonated input options.
       * @param json The impersonated input object.
       * @returns JWT or UserRefresh Client with data
       */
      fromImpersonatedJSON(json) {
        var _a, _b, _c, _d;
        if (!json) {
          throw new Error("Must pass in a JSON object containing an  impersonated refresh token");
        }
        if (json.type !== impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {
          throw new Error(`The incoming JSON object does not have the "${impersonated_1.IMPERSONATED_ACCOUNT_TYPE}" type`);
        }
        if (!json.source_credentials) {
          throw new Error("The incoming JSON object does not contain a source_credentials field");
        }
        if (!json.service_account_impersonation_url) {
          throw new Error("The incoming JSON object does not contain a service_account_impersonation_url field");
        }
        const sourceClient = new refreshclient_1.UserRefreshClient(json.source_credentials.client_id, json.source_credentials.client_secret, json.source_credentials.refresh_token);
        const targetPrincipal = (_b = (_a = /(?<target>[^/]+):generateAccessToken$/.exec(json.service_account_impersonation_url)) === null || _a === void 0 ? void 0 : _a.groups) === null || _b === void 0 ? void 0 : _b.target;
        if (!targetPrincipal) {
          throw new RangeError(`Cannot extract target principal from ${json.service_account_impersonation_url}`);
        }
        const targetScopes = (_c = this.getAnyScopes()) !== null && _c !== void 0 ? _c : [];
        const client2 = new impersonated_1.Impersonated({
          delegates: (_d = json.delegates) !== null && _d !== void 0 ? _d : [],
          sourceClient,
          targetPrincipal,
          targetScopes: Array.isArray(targetScopes) ? targetScopes : [targetScopes]
        });
        return client2;
      }
      /**
       * Create a credentials instance using the given input options.
       * @param json The input object.
       * @param options The JWT or UserRefresh options for the client
       * @returns JWT or UserRefresh Client with data
       */
      fromJSON(json, options = {}) {
        let client2;
        options = options || {};
        if (json.type === refreshclient_1.USER_REFRESH_ACCOUNT_TYPE) {
          client2 = new refreshclient_1.UserRefreshClient(options);
          client2.fromJSON(json);
        } else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {
          client2 = this.fromImpersonatedJSON(json);
        } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {
          client2 = externalclient_1.ExternalAccountClient.fromJSON(json, options);
          client2.scopes = this.getAnyScopes();
        } else if (json.type === externalAccountAuthorizedUserClient_1.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE) {
          client2 = new externalAccountAuthorizedUserClient_1.ExternalAccountAuthorizedUserClient(json, options);
        } else {
          options.scopes = this.scopes;
          client2 = new jwtclient_1.JWT(options);
          this.setGapicJWTValues(client2);
          client2.fromJSON(json);
        }
        return client2;
      }
      /**
       * Return a JWT or UserRefreshClient from JavaScript object, caching both the
       * object used to instantiate and the client.
       * @param json The input object.
       * @param options The JWT or UserRefresh options for the client
       * @returns JWT or UserRefresh Client with data
       */
      _cacheClientFromJSON(json, options) {
        const client2 = this.fromJSON(json, options);
        this.jsonContent = json;
        this.cachedCredential = client2;
        return client2;
      }
      fromStream(inputStream, optionsOrCallback = {}, callback) {
        let options = {};
        if (typeof optionsOrCallback === "function") {
          callback = optionsOrCallback;
        } else {
          options = optionsOrCallback;
        }
        if (callback) {
          this.fromStreamAsync(inputStream, options).then((r) => callback(null, r), callback);
        } else {
          return this.fromStreamAsync(inputStream, options);
        }
      }
      fromStreamAsync(inputStream, options) {
        return new Promise((resolve, reject) => {
          if (!inputStream) {
            throw new Error("Must pass in a stream containing the Google auth settings.");
          }
          let s = "";
          inputStream.setEncoding("utf8").on("error", reject).on("data", (chunk) => s += chunk).on("end", () => {
            try {
              try {
                const data = JSON.parse(s);
                const r = this._cacheClientFromJSON(data, options);
                return resolve(r);
              } catch (err) {
                if (!this.keyFilename)
                  throw err;
                const client2 = new jwtclient_1.JWT({
                  ...this.clientOptions,
                  keyFile: this.keyFilename
                });
                this.cachedCredential = client2;
                this.setGapicJWTValues(client2);
                return resolve(client2);
              }
            } catch (err) {
              return reject(err);
            }
          });
        });
      }
      /**
       * Create a credentials instance using the given API key string.
       * @param apiKey The API key string
       * @param options An optional options object.
       * @returns A JWT loaded from the key
       */
      fromAPIKey(apiKey, options) {
        options = options || {};
        const client2 = new jwtclient_1.JWT(options);
        client2.fromAPIKey(apiKey);
        return client2;
      }
      /**
       * Determines whether the current operating system is Windows.
       * @api private
       */
      _isWindows() {
        const sys = os.platform();
        if (sys && sys.length >= 3) {
          if (sys.substring(0, 3).toLowerCase() === "win") {
            return true;
          }
        }
        return false;
      }
      /**
       * Run the Google Cloud SDK command that prints the default project ID
       */
      async getDefaultServiceProjectId() {
        return new Promise((resolve) => {
          (0, child_process_1.exec)("gcloud config config-helper --format json", (err, stdout) => {
            if (!err && stdout) {
              try {
                const projectId = JSON.parse(stdout).configuration.properties.core.project;
                resolve(projectId);
                return;
              } catch (e) {
              }
            }
            resolve(null);
          });
        });
      }
      /**
       * Loads the project id from environment variables.
       * @api private
       */
      getProductionProjectId() {
        return process.env["GCLOUD_PROJECT"] || process.env["GOOGLE_CLOUD_PROJECT"] || process.env["gcloud_project"] || process.env["google_cloud_project"];
      }
      /**
       * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.
       * @api private
       */
      async getFileProjectId() {
        if (this.cachedCredential) {
          return this.cachedCredential.projectId;
        }
        if (this.keyFilename) {
          const creds = await this.getClient();
          if (creds && creds.projectId) {
            return creds.projectId;
          }
        }
        const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();
        if (r) {
          return r.projectId;
        } else {
          return null;
        }
      }
      /**
       * Gets the project ID from external account client if available.
       */
      async getExternalAccountClientProjectId() {
        if (!this.jsonContent || this.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {
          return null;
        }
        const creds = await this.getClient();
        return await creds.getProjectId();
      }
      /**
       * Gets the Compute Engine project ID if it can be inferred.
       */
      async getGCEProjectId() {
        try {
          const r = await gcpMetadata.project("project-id");
          return r;
        } catch (e) {
          return null;
        }
      }
      getCredentials(callback) {
        if (callback) {
          this.getCredentialsAsync().then((r) => callback(null, r), callback);
        } else {
          return this.getCredentialsAsync();
        }
      }
      async getCredentialsAsync() {
        const client2 = await this.getClient();
        if (client2 instanceof baseexternalclient_1.BaseExternalAccountClient) {
          const serviceAccountEmail = client2.getServiceAccountEmail();
          if (serviceAccountEmail) {
            return { client_email: serviceAccountEmail };
          }
        }
        if (this.jsonContent) {
          const credential = {
            client_email: this.jsonContent.client_email,
            private_key: this.jsonContent.private_key
          };
          return credential;
        }
        const isGCE = await this._checkIsGCE();
        if (!isGCE) {
          throw new Error("Unknown error.");
        }
        const data = await gcpMetadata.instance({
          property: "service-accounts/",
          params: { recursive: "true" }
        });
        if (!data || !data.default || !data.default.email) {
          throw new Error("Failure from metadata server.");
        }
        return { client_email: data.default.email };
      }
      /**
       * Automatically obtain a client based on the provided configuration.  If no
       * options were passed, use Application Default Credentials.
       */
      async getClient() {
        if (!this.cachedCredential) {
          if (this.jsonContent) {
            this._cacheClientFromJSON(this.jsonContent, this.clientOptions);
          } else if (this.keyFilename) {
            const filePath = path.resolve(this.keyFilename);
            const stream = fs.createReadStream(filePath);
            await this.fromStreamAsync(stream, this.clientOptions);
          } else {
            await this.getApplicationDefaultAsync(this.clientOptions);
          }
        }
        return this.cachedCredential;
      }
      /**
       * Creates a client which will fetch an ID token for authorization.
       * @param targetAudience the audience for the fetched ID token.
       * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.
       */
      async getIdTokenClient(targetAudience) {
        const client2 = await this.getClient();
        if (!("fetchIdToken" in client2)) {
          throw new Error("Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.");
        }
        return new idtokenclient_1.IdTokenClient({ targetAudience, idTokenProvider: client2 });
      }
      /**
       * Automatically obtain application default credentials, and return
       * an access token for making requests.
       */
      async getAccessToken() {
        const client2 = await this.getClient();
        return (await client2.getAccessToken()).token;
      }
      /**
       * Obtain the HTTP headers that will provide authorization for a given
       * request.
       */
      async getRequestHeaders(url) {
        const client2 = await this.getClient();
        return client2.getRequestHeaders(url);
      }
      /**
       * Obtain credentials for a request, then attach the appropriate headers to
       * the request options.
       * @param opts Axios or Request options on which to attach the headers
       */
      async authorizeRequest(opts) {
        opts = opts || {};
        const url = opts.url || opts.uri;
        const client2 = await this.getClient();
        const headers = await client2.getRequestHeaders(url);
        opts.headers = Object.assign(opts.headers || {}, headers);
        return opts;
      }
      /**
       * Automatically obtain application default credentials, and make an
       * HTTP request using the given options.
       * @param opts Axios request options for the HTTP request.
       */
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      async request(opts) {
        const client2 = await this.getClient();
        return client2.request(opts);
      }
      /**
       * Determine the compute environment in which the code is running.
       */
      getEnv() {
        return (0, envDetect_1.getEnv)();
      }
      /**
       * Sign the given data with the current private key, or go out
       * to the IAM API to sign it.
       * @param data The data to be signed.
       */
      async sign(data) {
        const client2 = await this.getClient();
        const crypto2 = (0, crypto_1.createCrypto)();
        if (client2 instanceof jwtclient_1.JWT && client2.key) {
          const sign = await crypto2.sign(client2.key, data);
          return sign;
        }
        const creds = await this.getCredentials();
        if (!creds.client_email) {
          throw new Error("Cannot sign data without `client_email`.");
        }
        return this.signBlob(crypto2, creds.client_email, data);
      }
      async signBlob(crypto2, emailOrUniqueId, data) {
        const url = `https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${emailOrUniqueId}:signBlob`;
        const res = await this.request({
          method: "POST",
          url,
          data: {
            payload: crypto2.encodeBase64StringUtf8(data)
          }
        });
        return res.data.signedBlob;
      }
    };
    exports2.GoogleAuth = GoogleAuth;
    GoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;
  }
});

// node_modules/google-auth-library/build/src/auth/iam.js
var require_iam = __commonJS({
  "node_modules/google-auth-library/build/src/auth/iam.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IAMAuth = void 0;
    var IAMAuth = class {
      /**
       * IAM credentials.
       *
       * @param selector the iam authority selector
       * @param token the token
       * @constructor
       */
      constructor(selector, token) {
        this.selector = selector;
        this.token = token;
        this.selector = selector;
        this.token = token;
      }
      /**
       * Acquire the HTTP headers required to make an authenticated request.
       */
      getRequestHeaders() {
        return {
          "x-goog-iam-authority-selector": this.selector,
          "x-goog-iam-authorization-token": this.token
        };
      }
    };
    exports2.IAMAuth = IAMAuth;
  }
});

// node_modules/google-auth-library/build/src/auth/downscopedclient.js
var require_downscopedclient = __commonJS({
  "node_modules/google-auth-library/build/src/auth/downscopedclient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DownscopedClient = exports2.EXPIRATION_TIME_OFFSET = exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT = void 0;
    var stream = require("stream");
    var authclient_1 = require_authclient();
    var sts = require_stscredentials();
    var STS_GRANT_TYPE = "urn:ietf:params:oauth:grant-type:token-exchange";
    var STS_REQUEST_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:access_token";
    var STS_SUBJECT_TOKEN_TYPE = "urn:ietf:params:oauth:token-type:access_token";
    var STS_ACCESS_TOKEN_URL = "https://sts.googleapis.com/v1/token";
    exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT = 10;
    exports2.EXPIRATION_TIME_OFFSET = 5 * 60 * 1e3;
    var DownscopedClient = class extends authclient_1.AuthClient {
      /**
       * Instantiates a downscoped client object using the provided source
       * AuthClient and credential access boundary rules.
       * To downscope permissions of a source AuthClient, a Credential Access
       * Boundary that specifies which resources the new credential can access, as
       * well as an upper bound on the permissions that are available on each
       * resource, has to be defined. A downscoped client can then be instantiated
       * using the source AuthClient and the Credential Access Boundary.
       * @param authClient The source AuthClient to be downscoped based on the
       *   provided Credential Access Boundary rules.
       * @param credentialAccessBoundary The Credential Access Boundary which
       *   contains a list of access boundary rules. Each rule contains information
       *   on the resource that the rule applies to, the upper bound of the
       *   permissions that are available on that resource and an optional
       *   condition to further restrict permissions.
       * @param additionalOptions Optional additional behavior customization
       *   options. These currently customize expiration threshold time and
       *   whether to retry on 401/403 API request errors.
       * @param quotaProjectId Optional quota project id for setting up in the
       *   x-goog-user-project header.
       */
      constructor(authClient, credentialAccessBoundary, additionalOptions, quotaProjectId) {
        super();
        this.authClient = authClient;
        this.credentialAccessBoundary = credentialAccessBoundary;
        if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length === 0) {
          throw new Error("At least one access boundary rule needs to be defined.");
        } else if (credentialAccessBoundary.accessBoundary.accessBoundaryRules.length > exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT) {
          throw new Error(`The provided access boundary has more than ${exports2.MAX_ACCESS_BOUNDARY_RULES_COUNT} access boundary rules.`);
        }
        for (const rule of credentialAccessBoundary.accessBoundary.accessBoundaryRules) {
          if (rule.availablePermissions.length === 0) {
            throw new Error("At least one permission should be defined in access boundary rules.");
          }
        }
        this.stsCredential = new sts.StsCredentials(STS_ACCESS_TOKEN_URL);
        this.cachedDownscopedAccessToken = null;
        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== "number") {
          this.eagerRefreshThresholdMillis = exports2.EXPIRATION_TIME_OFFSET;
        } else {
          this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;
        }
        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);
        this.quotaProjectId = quotaProjectId;
      }
      /**
       * Provides a mechanism to inject Downscoped access tokens directly.
       * The expiry_date field is required to facilitate determination of the token
       * expiration which would make it easier for the token consumer to handle.
       * @param credentials The Credentials object to set on the current client.
       */
      setCredentials(credentials) {
        if (!credentials.expiry_date) {
          throw new Error("The access token expiry_date field is missing in the provided credentials.");
        }
        super.setCredentials(credentials);
        this.cachedDownscopedAccessToken = credentials;
      }
      async getAccessToken() {
        if (!this.cachedDownscopedAccessToken || this.isExpired(this.cachedDownscopedAccessToken)) {
          await this.refreshAccessTokenAsync();
        }
        return {
          token: this.cachedDownscopedAccessToken.access_token,
          expirationTime: this.cachedDownscopedAccessToken.expiry_date,
          res: this.cachedDownscopedAccessToken.res
        };
      }
      /**
       * The main authentication interface. It takes an optional url which when
       * present is the endpoint being accessed, and returns a Promise which
       * resolves with authorization header fields.
       *
       * The result has the form:
       * { Authorization: 'Bearer <access_token_value>' }
       */
      async getRequestHeaders() {
        const accessTokenResponse = await this.getAccessToken();
        const headers = {
          Authorization: `Bearer ${accessTokenResponse.token}`
        };
        return this.addSharedMetadataHeaders(headers);
      }
      request(opts, callback) {
        if (callback) {
          this.requestAsync(opts).then((r) => callback(null, r), (e) => {
            return callback(e, e.response);
          });
        } else {
          return this.requestAsync(opts);
        }
      }
      /**
       * Authenticates the provided HTTP request, processes it and resolves with the
       * returned response.
       * @param opts The HTTP request options.
       * @param retry Whether the current attempt is a retry after a failed attempt.
       * @return A promise that resolves with the successful response.
       */
      async requestAsync(opts, retry = false) {
        let response;
        try {
          const requestHeaders = await this.getRequestHeaders();
          opts.headers = opts.headers || {};
          if (requestHeaders && requestHeaders["x-goog-user-project"]) {
            opts.headers["x-goog-user-project"] = requestHeaders["x-goog-user-project"];
          }
          if (requestHeaders && requestHeaders.Authorization) {
            opts.headers.Authorization = requestHeaders.Authorization;
          }
          response = await this.transporter.request(opts);
        } catch (e) {
          const res = e.response;
          if (res) {
            const statusCode = res.status;
            const isReadableStream = res.config.data instanceof stream.Readable;
            const isAuthErr = statusCode === 401 || statusCode === 403;
            if (!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {
              await this.refreshAccessTokenAsync();
              return await this.requestAsync(opts, true);
            }
          }
          throw e;
        }
        return response;
      }
      /**
       * Forces token refresh, even if unexpired tokens are currently cached.
       * GCP access tokens are retrieved from authclient object/source credential.
       * Then GCP access tokens are exchanged for downscoped access tokens via the
       * token exchange endpoint.
       * @return A promise that resolves with the fresh downscoped access token.
       */
      async refreshAccessTokenAsync() {
        var _a;
        const subjectToken = (await this.authClient.getAccessToken()).token;
        const stsCredentialsOptions = {
          grantType: STS_GRANT_TYPE,
          requestedTokenType: STS_REQUEST_TOKEN_TYPE,
          subjectToken,
          subjectTokenType: STS_SUBJECT_TOKEN_TYPE
        };
        const stsResponse = await this.stsCredential.exchangeToken(stsCredentialsOptions, void 0, this.credentialAccessBoundary);
        const sourceCredExpireDate = ((_a = this.authClient.credentials) === null || _a === void 0 ? void 0 : _a.expiry_date) || null;
        const expiryDate = stsResponse.expires_in ? (/* @__PURE__ */ new Date()).getTime() + stsResponse.expires_in * 1e3 : sourceCredExpireDate;
        this.cachedDownscopedAccessToken = {
          access_token: stsResponse.access_token,
          expiry_date: expiryDate,
          res: stsResponse.res
        };
        this.credentials = {};
        Object.assign(this.credentials, this.cachedDownscopedAccessToken);
        delete this.credentials.res;
        this.emit("tokens", {
          refresh_token: null,
          expiry_date: this.cachedDownscopedAccessToken.expiry_date,
          access_token: this.cachedDownscopedAccessToken.access_token,
          token_type: "Bearer",
          id_token: null
        });
        return this.cachedDownscopedAccessToken;
      }
      /**
       * Returns whether the provided credentials are expired or not.
       * If there is no expiry time, assumes the token is not expired or expiring.
       * @param downscopedAccessToken The credentials to check for expiration.
       * @return Whether the credentials are expired or not.
       */
      isExpired(downscopedAccessToken) {
        const now = (/* @__PURE__ */ new Date()).getTime();
        return downscopedAccessToken.expiry_date ? now >= downscopedAccessToken.expiry_date - this.eagerRefreshThresholdMillis : false;
      }
    };
    exports2.DownscopedClient = DownscopedClient;
  }
});

// node_modules/google-auth-library/build/src/index.js
var require_src8 = __commonJS({
  "node_modules/google-auth-library/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GoogleAuth = exports2.auth = exports2.DefaultTransporter = exports2.PluggableAuthClient = exports2.DownscopedClient = exports2.BaseExternalAccountClient = exports2.ExternalAccountClient = exports2.IdentityPoolClient = exports2.AwsClient = exports2.UserRefreshClient = exports2.LoginTicket = exports2.OAuth2Client = exports2.CodeChallengeMethod = exports2.Impersonated = exports2.JWT = exports2.JWTAccess = exports2.IdTokenClient = exports2.IAMAuth = exports2.GCPEnv = exports2.Compute = exports2.AuthClient = void 0;
    var googleauth_1 = require_googleauth();
    Object.defineProperty(exports2, "GoogleAuth", { enumerable: true, get: function() {
      return googleauth_1.GoogleAuth;
    } });
    var authclient_1 = require_authclient();
    Object.defineProperty(exports2, "AuthClient", { enumerable: true, get: function() {
      return authclient_1.AuthClient;
    } });
    var computeclient_1 = require_computeclient();
    Object.defineProperty(exports2, "Compute", { enumerable: true, get: function() {
      return computeclient_1.Compute;
    } });
    var envDetect_1 = require_envDetect();
    Object.defineProperty(exports2, "GCPEnv", { enumerable: true, get: function() {
      return envDetect_1.GCPEnv;
    } });
    var iam_1 = require_iam();
    Object.defineProperty(exports2, "IAMAuth", { enumerable: true, get: function() {
      return iam_1.IAMAuth;
    } });
    var idtokenclient_1 = require_idtokenclient();
    Object.defineProperty(exports2, "IdTokenClient", { enumerable: true, get: function() {
      return idtokenclient_1.IdTokenClient;
    } });
    var jwtaccess_1 = require_jwtaccess();
    Object.defineProperty(exports2, "JWTAccess", { enumerable: true, get: function() {
      return jwtaccess_1.JWTAccess;
    } });
    var jwtclient_1 = require_jwtclient();
    Object.defineProperty(exports2, "JWT", { enumerable: true, get: function() {
      return jwtclient_1.JWT;
    } });
    var impersonated_1 = require_impersonated();
    Object.defineProperty(exports2, "Impersonated", { enumerable: true, get: function() {
      return impersonated_1.Impersonated;
    } });
    var oauth2client_1 = require_oauth2client();
    Object.defineProperty(exports2, "CodeChallengeMethod", { enumerable: true, get: function() {
      return oauth2client_1.CodeChallengeMethod;
    } });
    Object.defineProperty(exports2, "OAuth2Client", { enumerable: true, get: function() {
      return oauth2client_1.OAuth2Client;
    } });
    var loginticket_1 = require_loginticket();
    Object.defineProperty(exports2, "LoginTicket", { enumerable: true, get: function() {
      return loginticket_1.LoginTicket;
    } });
    var refreshclient_1 = require_refreshclient();
    Object.defineProperty(exports2, "UserRefreshClient", { enumerable: true, get: function() {
      return refreshclient_1.UserRefreshClient;
    } });
    var awsclient_1 = require_awsclient();
    Object.defineProperty(exports2, "AwsClient", { enumerable: true, get: function() {
      return awsclient_1.AwsClient;
    } });
    var identitypoolclient_1 = require_identitypoolclient();
    Object.defineProperty(exports2, "IdentityPoolClient", { enumerable: true, get: function() {
      return identitypoolclient_1.IdentityPoolClient;
    } });
    var externalclient_1 = require_externalclient();
    Object.defineProperty(exports2, "ExternalAccountClient", { enumerable: true, get: function() {
      return externalclient_1.ExternalAccountClient;
    } });
    var baseexternalclient_1 = require_baseexternalclient();
    Object.defineProperty(exports2, "BaseExternalAccountClient", { enumerable: true, get: function() {
      return baseexternalclient_1.BaseExternalAccountClient;
    } });
    var downscopedclient_1 = require_downscopedclient();
    Object.defineProperty(exports2, "DownscopedClient", { enumerable: true, get: function() {
      return downscopedclient_1.DownscopedClient;
    } });
    var pluggable_auth_client_1 = require_pluggable_auth_client();
    Object.defineProperty(exports2, "PluggableAuthClient", { enumerable: true, get: function() {
      return pluggable_auth_client_1.PluggableAuthClient;
    } });
    var transporters_1 = require_transporters();
    Object.defineProperty(exports2, "DefaultTransporter", { enumerable: true, get: function() {
      return transporters_1.DefaultTransporter;
    } });
    var auth = new googleauth_1.GoogleAuth();
    exports2.auth = auth;
  }
});

// node_modules/object-hash/index.js
var require_object_hash = __commonJS({
  "node_modules/object-hash/index.js"(exports2, module2) {
    "use strict";
    var crypto2 = require("crypto");
    exports2 = module2.exports = objectHash;
    function objectHash(object, options) {
      options = applyDefaults(object, options);
      return hash(object, options);
    }
    exports2.sha1 = function(object) {
      return objectHash(object);
    };
    exports2.keys = function(object) {
      return objectHash(object, { excludeValues: true, algorithm: "sha1", encoding: "hex" });
    };
    exports2.MD5 = function(object) {
      return objectHash(object, { algorithm: "md5", encoding: "hex" });
    };
    exports2.keysMD5 = function(object) {
      return objectHash(object, { algorithm: "md5", encoding: "hex", excludeValues: true });
    };
    var hashes = crypto2.getHashes ? crypto2.getHashes().slice() : ["sha1", "md5"];
    hashes.push("passthrough");
    var encodings = ["buffer", "hex", "binary", "base64"];
    function applyDefaults(object, sourceOptions) {
      sourceOptions = sourceOptions || {};
      var options = {};
      options.algorithm = sourceOptions.algorithm || "sha1";
      options.encoding = sourceOptions.encoding || "hex";
      options.excludeValues = sourceOptions.excludeValues ? true : false;
      options.algorithm = options.algorithm.toLowerCase();
      options.encoding = options.encoding.toLowerCase();
      options.ignoreUnknown = sourceOptions.ignoreUnknown !== true ? false : true;
      options.respectType = sourceOptions.respectType === false ? false : true;
      options.respectFunctionNames = sourceOptions.respectFunctionNames === false ? false : true;
      options.respectFunctionProperties = sourceOptions.respectFunctionProperties === false ? false : true;
      options.unorderedArrays = sourceOptions.unorderedArrays !== true ? false : true;
      options.unorderedSets = sourceOptions.unorderedSets === false ? false : true;
      options.unorderedObjects = sourceOptions.unorderedObjects === false ? false : true;
      options.replacer = sourceOptions.replacer || void 0;
      options.excludeKeys = sourceOptions.excludeKeys || void 0;
      if (typeof object === "undefined") {
        throw new Error("Object argument required.");
      }
      for (var i = 0; i < hashes.length; ++i) {
        if (hashes[i].toLowerCase() === options.algorithm.toLowerCase()) {
          options.algorithm = hashes[i];
        }
      }
      if (hashes.indexOf(options.algorithm) === -1) {
        throw new Error('Algorithm "' + options.algorithm + '"  not supported. supported values: ' + hashes.join(", "));
      }
      if (encodings.indexOf(options.encoding) === -1 && options.algorithm !== "passthrough") {
        throw new Error('Encoding "' + options.encoding + '"  not supported. supported values: ' + encodings.join(", "));
      }
      return options;
    }
    function isNativeFunction(f) {
      if (typeof f !== "function") {
        return false;
      }
      var exp = /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i;
      return exp.exec(Function.prototype.toString.call(f)) != null;
    }
    function hash(object, options) {
      var hashingStream;
      if (options.algorithm !== "passthrough") {
        hashingStream = crypto2.createHash(options.algorithm);
      } else {
        hashingStream = new PassThrough();
      }
      if (typeof hashingStream.write === "undefined") {
        hashingStream.write = hashingStream.update;
        hashingStream.end = hashingStream.update;
      }
      var hasher = typeHasher(options, hashingStream);
      hasher.dispatch(object);
      if (!hashingStream.update) {
        hashingStream.end("");
      }
      if (hashingStream.digest) {
        return hashingStream.digest(options.encoding === "buffer" ? void 0 : options.encoding);
      }
      var buf = hashingStream.read();
      if (options.encoding === "buffer") {
        return buf;
      }
      return buf.toString(options.encoding);
    }
    exports2.writeToStream = function(object, options, stream) {
      if (typeof stream === "undefined") {
        stream = options;
        options = {};
      }
      options = applyDefaults(object, options);
      return typeHasher(options, stream).dispatch(object);
    };
    function typeHasher(options, writeTo, context) {
      context = context || [];
      var write = function(str) {
        if (writeTo.update) {
          return writeTo.update(str, "utf8");
        } else {
          return writeTo.write(str, "utf8");
        }
      };
      return {
        dispatch: function(value) {
          if (options.replacer) {
            value = options.replacer(value);
          }
          var type = typeof value;
          if (value === null) {
            type = "null";
          }
          return this["_" + type](value);
        },
        _object: function(object) {
          var pattern = /\[object (.*)\]/i;
          var objString = Object.prototype.toString.call(object);
          var objType = pattern.exec(objString);
          if (!objType) {
            objType = "unknown:[" + objString + "]";
          } else {
            objType = objType[1];
          }
          objType = objType.toLowerCase();
          var objectNumber = null;
          if ((objectNumber = context.indexOf(object)) >= 0) {
            return this.dispatch("[CIRCULAR:" + objectNumber + "]");
          } else {
            context.push(object);
          }
          if (typeof Buffer !== "undefined" && Buffer.isBuffer && Buffer.isBuffer(object)) {
            write("buffer:");
            return write(object);
          }
          if (objType !== "object" && objType !== "function" && objType !== "asyncfunction") {
            if (this["_" + objType]) {
              this["_" + objType](object);
            } else if (options.ignoreUnknown) {
              return write("[" + objType + "]");
            } else {
              throw new Error('Unknown object type "' + objType + '"');
            }
          } else {
            var keys = Object.keys(object);
            if (options.unorderedObjects) {
              keys = keys.sort();
            }
            if (options.respectType !== false && !isNativeFunction(object)) {
              keys.splice(0, 0, "prototype", "__proto__", "constructor");
            }
            if (options.excludeKeys) {
              keys = keys.filter(function(key) {
                return !options.excludeKeys(key);
              });
            }
            write("object:" + keys.length + ":");
            var self2 = this;
            return keys.forEach(function(key) {
              self2.dispatch(key);
              write(":");
              if (!options.excludeValues) {
                self2.dispatch(object[key]);
              }
              write(",");
            });
          }
        },
        _array: function(arr, unordered) {
          unordered = typeof unordered !== "undefined" ? unordered : options.unorderedArrays !== false;
          var self2 = this;
          write("array:" + arr.length + ":");
          if (!unordered || arr.length <= 1) {
            return arr.forEach(function(entry) {
              return self2.dispatch(entry);
            });
          }
          var contextAdditions = [];
          var entries = arr.map(function(entry) {
            var strm = new PassThrough();
            var localContext = context.slice();
            var hasher = typeHasher(options, strm, localContext);
            hasher.dispatch(entry);
            contextAdditions = contextAdditions.concat(localContext.slice(context.length));
            return strm.read().toString();
          });
          context = context.concat(contextAdditions);
          entries.sort();
          return this._array(entries, false);
        },
        _date: function(date) {
          return write("date:" + date.toJSON());
        },
        _symbol: function(sym) {
          return write("symbol:" + sym.toString());
        },
        _error: function(err) {
          return write("error:" + err.toString());
        },
        _boolean: function(bool) {
          return write("bool:" + bool.toString());
        },
        _string: function(string) {
          write("string:" + string.length + ":");
          write(string.toString());
        },
        _function: function(fn) {
          write("fn:");
          if (isNativeFunction(fn)) {
            this.dispatch("[native]");
          } else {
            this.dispatch(fn.toString());
          }
          if (options.respectFunctionNames !== false) {
            this.dispatch("function-name:" + String(fn.name));
          }
          if (options.respectFunctionProperties) {
            this._object(fn);
          }
        },
        _number: function(number) {
          return write("number:" + number.toString());
        },
        _xml: function(xml) {
          return write("xml:" + xml.toString());
        },
        _null: function() {
          return write("Null");
        },
        _undefined: function() {
          return write("Undefined");
        },
        _regexp: function(regex) {
          return write("regex:" + regex.toString());
        },
        _uint8array: function(arr) {
          write("uint8array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _uint8clampedarray: function(arr) {
          write("uint8clampedarray:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _int8array: function(arr) {
          write("int8array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _uint16array: function(arr) {
          write("uint16array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _int16array: function(arr) {
          write("int16array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _uint32array: function(arr) {
          write("uint32array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _int32array: function(arr) {
          write("int32array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _float32array: function(arr) {
          write("float32array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _float64array: function(arr) {
          write("float64array:");
          return this.dispatch(Array.prototype.slice.call(arr));
        },
        _arraybuffer: function(arr) {
          write("arraybuffer:");
          return this.dispatch(new Uint8Array(arr));
        },
        _url: function(url) {
          return write("url:" + url.toString(), "utf8");
        },
        _map: function(map) {
          write("map:");
          var arr = Array.from(map);
          return this._array(arr, options.unorderedSets !== false);
        },
        _set: function(set) {
          write("set:");
          var arr = Array.from(set);
          return this._array(arr, options.unorderedSets !== false);
        },
        _file: function(file) {
          write("file:");
          return this.dispatch([file.name, file.size, file.type, file.lastModfied]);
        },
        _blob: function() {
          if (options.ignoreUnknown) {
            return write("[blob]");
          }
          throw Error('Hashing Blob objects is currently not supported\n(see https://github.com/puleos/object-hash/issues/26)\nUse "options.replacer" or "options.ignoreUnknown"\n');
        },
        _domwindow: function() {
          return write("domwindow");
        },
        _bigint: function(number) {
          return write("bigint:" + number.toString());
        },
        /* Node.js standard native objects */
        _process: function() {
          return write("process");
        },
        _timer: function() {
          return write("timer");
        },
        _pipe: function() {
          return write("pipe");
        },
        _tcp: function() {
          return write("tcp");
        },
        _udp: function() {
          return write("udp");
        },
        _tty: function() {
          return write("tty");
        },
        _statwatcher: function() {
          return write("statwatcher");
        },
        _securecontext: function() {
          return write("securecontext");
        },
        _connection: function() {
          return write("connection");
        },
        _zlib: function() {
          return write("zlib");
        },
        _context: function() {
          return write("context");
        },
        _nodescript: function() {
          return write("nodescript");
        },
        _httpparser: function() {
          return write("httpparser");
        },
        _dataview: function() {
          return write("dataview");
        },
        _signal: function() {
          return write("signal");
        },
        _fsevent: function() {
          return write("fsevent");
        },
        _tlswrap: function() {
          return write("tlswrap");
        }
      };
    }
    function PassThrough() {
      return {
        buf: "",
        write: function(b) {
          this.buf += b;
        },
        end: function(b) {
          this.buf += b;
        },
        read: function() {
          return this.buf;
        }
      };
    }
  }
});

// node_modules/google-gax/build/src/featureDetection.js
var require_featureDetection = __commonJS({
  "node_modules/google-gax/build/src/featureDetection.js"(exports2) {
    "use strict";
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hasAbortController = exports2.isNodeJS = exports2.hasWindowFetch = void 0;
    var features = {
      windowFetch: typeof window !== "undefined" && (window === null || window === void 0 ? void 0 : window.fetch) && typeof (window === null || window === void 0 ? void 0 : window.fetch) === "function",
      // eslint-disable-next-line node/no-unsupported-features/node-builtins
      textEncoder: typeof TextEncoder !== "undefined",
      // eslint-disable-next-line node/no-unsupported-features/node-builtins
      textDecoder: typeof TextDecoder !== "undefined",
      nodeJS: typeof process !== "undefined" && ((_a = process === null || process === void 0 ? void 0 : process.versions) === null || _a === void 0 ? void 0 : _a.node),
      abortController: typeof AbortController !== "undefined"
    };
    function hasWindowFetch() {
      return features.windowFetch;
    }
    exports2.hasWindowFetch = hasWindowFetch;
    function isNodeJS() {
      return features.nodeJS;
    }
    exports2.isNodeJS = isNodeJS;
    function hasAbortController() {
      return features.abortController;
    }
    exports2.hasAbortController = hasAbortController;
  }
});

// node_modules/google-gax/build/src/warnings.js
var require_warnings = __commonJS({
  "node_modules/google-gax/build/src/warnings.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.warn = void 0;
    var featureDetection_1 = require_featureDetection();
    var emittedWarnings = /* @__PURE__ */ new Set();
    function warn(code, message, warnType) {
      if (emittedWarnings.has(code)) {
        return;
      }
      emittedWarnings.add(code);
      if (!(0, featureDetection_1.isNodeJS)()) {
        console.warn(message);
      } else if (typeof warnType !== "undefined") {
        process.emitWarning(message, {
          type: warnType
        });
      } else {
        process.emitWarning(message);
      }
    }
    exports2.warn = warn;
  }
});

// node_modules/google-gax/build/src/util.js
var require_util3 = __commonJS({
  "node_modules/google-gax/build/src/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toLowerCamelCase = exports2.toCamelCase = exports2.camelToSnakeCase = void 0;
    function words(str, normalize = false) {
      if (normalize) {
        str = str.replace(/([A-Z])([A-Z]+)([A-Z])/g, (str2) => {
          return str2[0] + str2.slice(1, str2.length - 1).toLowerCase() + str2[str2.length - 1];
        });
      }
      return str.split(/(?=[A-Z])|[^A-Za-z0-9.]+/).filter((w) => w.length > 0).map((w, index) => index === 0 ? w : w.toLowerCase());
    }
    function lowercase(str) {
      if (str.length === 0) {
        return str;
      }
      return str[0].toLowerCase() + str.slice(1);
    }
    function camelToSnakeCase(str) {
      const wordsList = words(str);
      if (wordsList.length === 0) {
        return str;
      }
      const result = [wordsList[0]];
      result.push(...wordsList.slice(1).map(lowercase));
      return result.join("_");
    }
    exports2.camelToSnakeCase = camelToSnakeCase;
    function capitalize(str) {
      if (str.length === 0) {
        return str;
      }
      return str[0].toUpperCase() + str.slice(1);
    }
    function toCamelCase(str) {
      const wordsList = words(
        str,
        /*normalize:*/
        true
      );
      if (wordsList.length === 0) {
        return str;
      }
      const result = [wordsList[0]];
      result.push(...wordsList.slice(1).map((w) => {
        if (w.match(/^\d+$/)) {
          return "_" + w;
        }
        return capitalize(w);
      }));
      return result.join("");
    }
    exports2.toCamelCase = toCamelCase;
    function toLowerCamelCase(str) {
      const camelCase = toCamelCase(str);
      if (camelCase.length === 0) {
        return camelCase;
      }
      return camelCase[0].toLowerCase() + camelCase.slice(1);
    }
    exports2.toLowerCamelCase = toLowerCamelCase;
  }
});

// node_modules/google-gax/build/src/gax.js
var require_gax = __commonJS({
  "node_modules/google-gax/build/src/gax.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createByteLengthFunction = exports2.constructSettings = exports2.createBundleOptions = exports2.createMaxRetriesBackoffSettings = exports2.createDefaultBackoffSettings = exports2.createBackoffSettings = exports2.createRetryOptions = exports2.CallSettings = exports2.RetryOptions = void 0;
    var warnings_1 = require_warnings();
    var util_1 = require_util3();
    var RetryOptions = class {
      constructor(retryCodes, backoffSettings) {
        this.retryCodes = retryCodes;
        this.backoffSettings = backoffSettings;
      }
    };
    exports2.RetryOptions = RetryOptions;
    var CallSettings = class _CallSettings {
      /**
       * @param {Object} settings - An object containing parameters of this settings.
       * @param {number} settings.timeout - The client-side timeout for API calls.
       *   This parameter is ignored for retrying calls.
       * @param {RetryOptions} settings.retry - The configuration for retrying upon
       *   transient error. If set to null, this call will not retry.
       * @param {boolean} settings.autoPaginate - If there is no `pageDescriptor`,
       *   this attrbute has no meaning. Otherwise, determines whether a page
       * streamed response should make the page structure transparent to the user by
       *   flattening the repeated field in the returned generator.
       * @param {number} settings.pageToken - If there is no `pageDescriptor`,
       *   this attribute has no meaning. Otherwise, determines the page token used
       * in the page streaming request.
       * @param {Object} settings.otherArgs - Additional arguments to be passed to
       *   the API calls.
       *
       * @constructor
       */
      constructor(settings) {
        var _a;
        settings = settings || {};
        this.timeout = settings.timeout || 30 * 1e3;
        this.retry = settings.retry;
        this.autoPaginate = "autoPaginate" in settings ? settings.autoPaginate : true;
        this.maxResults = settings.maxResults;
        this.otherArgs = settings.otherArgs || {};
        this.bundleOptions = settings.bundleOptions;
        this.isBundling = "isBundling" in settings ? settings.isBundling : true;
        this.longrunning = "longrunning" in settings ? settings.longrunning : void 0;
        this.apiName = (_a = settings.apiName) !== null && _a !== void 0 ? _a : void 0;
        this.retryRequestOptions = settings.retryRequestOptions;
      }
      /**
       * Returns a new CallSettings merged from this and a CallOptions object.
       *
       * @param {CallOptions} options - an instance whose values override
       *   those in this object. If null, ``merge`` returns a copy of this
       *   object
       * @return {CallSettings} The merged CallSettings instance.
       */
      merge(options) {
        if (!options) {
          return new _CallSettings(this);
        }
        let timeout = this.timeout;
        let retry = this.retry;
        let autoPaginate = this.autoPaginate;
        let maxResults = this.maxResults;
        let otherArgs = this.otherArgs;
        let isBundling = this.isBundling;
        let longrunning = this.longrunning;
        let apiName = this.apiName;
        let retryRequestOptions = this.retryRequestOptions;
        if (retry !== void 0 && retry !== null && retry.retryCodes !== null && retry.retryCodes.length > 0) {
          retry.backoffSettings.initialRpcTimeoutMillis = timeout;
          retry.backoffSettings.maxRpcTimeoutMillis = timeout;
          retry.backoffSettings.totalTimeoutMillis = timeout;
        }
        if ("timeout" in options) {
          timeout = options.timeout;
          if (retry !== void 0 && retry !== null && retry.retryCodes.length > 0) {
            retry.backoffSettings.initialRpcTimeoutMillis = timeout;
            retry.backoffSettings.maxRpcTimeoutMillis = timeout;
            retry.backoffSettings.totalTimeoutMillis = timeout;
          }
        }
        if ("retry" in options) {
          retry = mergeRetryOptions(retry || {}, options.retry);
        }
        if ("autoPaginate" in options && !options.autoPaginate) {
          autoPaginate = false;
        }
        if ("maxResults" in options) {
          maxResults = options.maxResults;
        }
        if ("otherArgs" in options) {
          otherArgs = {};
          for (const key in this.otherArgs) {
            otherArgs[key] = this.otherArgs[key];
          }
          for (const optionsKey in options.otherArgs) {
            otherArgs[optionsKey] = options.otherArgs[optionsKey];
          }
        }
        if ("isBundling" in options) {
          isBundling = options.isBundling;
        }
        if ("maxRetries" in options) {
          retry.backoffSettings.maxRetries = options.maxRetries;
          delete retry.backoffSettings.totalTimeoutMillis;
        }
        if ("longrunning" in options) {
          longrunning = options.longrunning;
        }
        if ("apiName" in options) {
          apiName = options.apiName;
        }
        if ("retryRequestOptions" in options) {
          retryRequestOptions = options.retryRequestOptions;
        }
        return new _CallSettings({
          timeout,
          retry,
          bundleOptions: this.bundleOptions,
          longrunning,
          autoPaginate,
          maxResults,
          otherArgs,
          isBundling,
          apiName,
          retryRequestOptions
        });
      }
    };
    exports2.CallSettings = CallSettings;
    function createRetryOptions(retryCodes, backoffSettings) {
      return {
        retryCodes,
        backoffSettings
      };
    }
    exports2.createRetryOptions = createRetryOptions;
    function createBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, totalTimeoutMillis) {
      return {
        initialRetryDelayMillis,
        retryDelayMultiplier,
        maxRetryDelayMillis,
        initialRpcTimeoutMillis,
        rpcTimeoutMultiplier,
        maxRpcTimeoutMillis,
        totalTimeoutMillis
      };
    }
    exports2.createBackoffSettings = createBackoffSettings;
    function createDefaultBackoffSettings() {
      return createBackoffSettings(100, 1.3, 6e4, null, null, null, null);
    }
    exports2.createDefaultBackoffSettings = createDefaultBackoffSettings;
    function createMaxRetriesBackoffSettings(initialRetryDelayMillis, retryDelayMultiplier, maxRetryDelayMillis, initialRpcTimeoutMillis, rpcTimeoutMultiplier, maxRpcTimeoutMillis, maxRetries) {
      return {
        initialRetryDelayMillis,
        retryDelayMultiplier,
        maxRetryDelayMillis,
        initialRpcTimeoutMillis,
        rpcTimeoutMultiplier,
        maxRpcTimeoutMillis,
        maxRetries
      };
    }
    exports2.createMaxRetriesBackoffSettings = createMaxRetriesBackoffSettings;
    function createBundleOptions(options) {
      const params = [
        "element_count_threshold",
        "element_count_limit",
        "request_byte_threshold",
        "request_byte_limit",
        "delay_threshold_millis"
      ];
      params.forEach((param) => {
        if (param in options && typeof options[param] !== "number") {
          throw new Error(`${param} should be a number`);
        }
      });
      const elementCountThreshold = options.element_count_threshold || 0;
      const elementCountLimit = options.element_count_limit || 0;
      const requestByteThreshold = options.request_byte_threshold || 0;
      const requestByteLimit = options.request_byte_limit || 0;
      const delayThreshold = options.delay_threshold_millis || 0;
      if (elementCountThreshold === 0 && requestByteThreshold === 0 && delayThreshold === 0) {
        throw new Error("one threshold should be > 0");
      }
      return {
        elementCountThreshold,
        elementCountLimit,
        requestByteThreshold,
        requestByteLimit,
        delayThreshold
      };
    }
    exports2.createBundleOptions = createBundleOptions;
    function constructRetry(methodConfig, retryCodes, retryParams, retryNames) {
      if (!methodConfig) {
        return null;
      }
      let codes = null;
      if (retryCodes && "retry_codes_name" in methodConfig) {
        const retryCodesName = methodConfig["retry_codes_name"];
        codes = (retryCodes[retryCodesName] || []).map((name) => {
          return Number(retryNames[name]);
        });
      }
      let backoffSettings = null;
      if (retryParams && "retry_params_name" in methodConfig) {
        const params = retryParams[methodConfig.retry_params_name];
        backoffSettings = createBackoffSettings(params.initial_retry_delay_millis, params.retry_delay_multiplier, params.max_retry_delay_millis, params.initial_rpc_timeout_millis, params.rpc_timeout_multiplier, params.max_rpc_timeout_millis, params.total_timeout_millis);
      }
      return createRetryOptions(codes, backoffSettings);
    }
    function mergeRetryOptions(retry, overrides) {
      if (!overrides) {
        return null;
      }
      if (!overrides.retryCodes && !overrides.backoffSettings) {
        return retry;
      }
      const codes = overrides.retryCodes ? overrides.retryCodes : retry.retryCodes;
      const backoffSettings = overrides.backoffSettings ? overrides.backoffSettings : retry.backoffSettings;
      return createRetryOptions(codes, backoffSettings);
    }
    function constructSettings(serviceName, clientConfig, configOverrides, retryNames, otherArgs) {
      otherArgs = otherArgs || {};
      const defaults = {};
      const serviceConfig = (clientConfig.interfaces || {})[serviceName];
      if (!serviceConfig) {
        return null;
      }
      const overrides = (configOverrides.interfaces || {})[serviceName] || {};
      const methods = serviceConfig.methods;
      const overridingMethods = overrides.methods || {};
      for (const methodName in methods) {
        const methodConfig = methods[methodName];
        const jsName = (0, util_1.toLowerCamelCase)(methodName);
        let retry = constructRetry(methodConfig, serviceConfig.retry_codes, serviceConfig.retry_params, retryNames);
        let bundlingConfig = methodConfig.bundling;
        let timeout = methodConfig.timeout_millis;
        if (methodName in overridingMethods) {
          const overridingMethod = overridingMethods[methodName];
          if (overridingMethod) {
            if ("bundling" in overridingMethod) {
              bundlingConfig = overridingMethod.bundling;
            }
            if ("timeout_millis" in overridingMethod) {
              timeout = overridingMethod.timeout_millis;
            }
          }
          retry = mergeRetryOptions(retry, constructRetry(overridingMethod, overrides.retry_codes, overrides.retry_params, retryNames));
        }
        const apiName = serviceName;
        defaults[jsName] = new CallSettings({
          timeout,
          retry,
          bundleOptions: bundlingConfig ? createBundleOptions(bundlingConfig) : null,
          otherArgs,
          apiName
        });
      }
      return defaults;
    }
    exports2.constructSettings = constructSettings;
    function createByteLengthFunction(message) {
      return function getByteLength(obj) {
        try {
          return message.encode(obj).finish().length;
        } catch (err) {
          const stringified = JSON.stringify(obj);
          (0, warnings_1.warn)("error_encoding_protobufjs_object", `Cannot encode protobuf.js object: ${stringified}: ${err}`);
          return stringified.length;
        }
      };
    }
    exports2.createByteLengthFunction = createByteLengthFunction;
  }
});

// node_modules/google-gax/build/src/protosList.json
var require_protosList = __commonJS({
  "node_modules/google-gax/build/src/protosList.json"(exports2, module2) {
    module2.exports = [
      "google/api/annotations.proto",
      "google/api/apikeys/v2/apikeys.proto",
      "google/api/apikeys/v2/resources.proto",
      "google/api/auth.proto",
      "google/api/backend.proto",
      "google/api/billing.proto",
      "google/api/client.proto",
      "google/api/config_change.proto",
      "google/api/consumer.proto",
      "google/api/context.proto",
      "google/api/control.proto",
      "google/api/distribution.proto",
      "google/api/documentation.proto",
      "google/api/endpoint.proto",
      "google/api/error_reason.proto",
      "google/api/expr/conformance/v1alpha1/conformance_service.proto",
      "google/api/expr/v1alpha1/checked.proto",
      "google/api/expr/v1alpha1/eval.proto",
      "google/api/expr/v1alpha1/explain.proto",
      "google/api/expr/v1alpha1/syntax.proto",
      "google/api/expr/v1alpha1/value.proto",
      "google/api/expr/v1beta1/decl.proto",
      "google/api/expr/v1beta1/eval.proto",
      "google/api/expr/v1beta1/expr.proto",
      "google/api/expr/v1beta1/source.proto",
      "google/api/expr/v1beta1/value.proto",
      "google/api/field_behavior.proto",
      "google/api/http.proto",
      "google/api/httpbody.proto",
      "google/api/label.proto",
      "google/api/launch_stage.proto",
      "google/api/log.proto",
      "google/api/logging.proto",
      "google/api/metric.proto",
      "google/api/monitored_resource.proto",
      "google/api/monitoring.proto",
      "google/api/quota.proto",
      "google/api/resource.proto",
      "google/api/routing.proto",
      "google/api/service.proto",
      "google/api/servicecontrol/v1/check_error.proto",
      "google/api/servicecontrol/v1/distribution.proto",
      "google/api/servicecontrol/v1/http_request.proto",
      "google/api/servicecontrol/v1/log_entry.proto",
      "google/api/servicecontrol/v1/metric_value.proto",
      "google/api/servicecontrol/v1/operation.proto",
      "google/api/servicecontrol/v1/quota_controller.proto",
      "google/api/servicecontrol/v1/service_controller.proto",
      "google/api/servicecontrol/v2/service_controller.proto",
      "google/api/servicemanagement/v1/resources.proto",
      "google/api/servicemanagement/v1/servicemanager.proto",
      "google/api/serviceusage/v1/resources.proto",
      "google/api/serviceusage/v1/serviceusage.proto",
      "google/api/serviceusage/v1beta1/resources.proto",
      "google/api/serviceusage/v1beta1/serviceusage.proto",
      "google/api/source_info.proto",
      "google/api/system_parameter.proto",
      "google/api/usage.proto",
      "google/api/visibility.proto",
      "google/cloud/location/locations.proto",
      "google/iam/v1/iam_policy.proto",
      "google/iam/v1/logging/audit_data.proto",
      "google/iam/v1/options.proto",
      "google/iam/v1/policy.proto",
      "google/logging/type/http_request.proto",
      "google/logging/type/log_severity.proto",
      "google/longrunning/operations.proto",
      "google/monitoring/v3/alert.proto",
      "google/monitoring/v3/alert_service.proto",
      "google/monitoring/v3/common.proto",
      "google/monitoring/v3/dropped_labels.proto",
      "google/monitoring/v3/group.proto",
      "google/monitoring/v3/group_service.proto",
      "google/monitoring/v3/metric.proto",
      "google/monitoring/v3/metric_service.proto",
      "google/monitoring/v3/mutation_record.proto",
      "google/monitoring/v3/notification.proto",
      "google/monitoring/v3/notification_service.proto",
      "google/monitoring/v3/query_service.proto",
      "google/monitoring/v3/service.proto",
      "google/monitoring/v3/service_service.proto",
      "google/monitoring/v3/snooze.proto",
      "google/monitoring/v3/snooze_service.proto",
      "google/monitoring/v3/span_context.proto",
      "google/monitoring/v3/uptime.proto",
      "google/monitoring/v3/uptime_service.proto",
      "google/protobuf/any.proto",
      "google/protobuf/api.proto",
      "google/protobuf/bridge/message_set.proto",
      "google/protobuf/compiler/plugin.proto",
      "google/protobuf/compiler/ruby/ruby_generated_code.proto",
      "google/protobuf/compiler/ruby/ruby_generated_code_proto2.proto",
      "google/protobuf/compiler/ruby/ruby_generated_code_proto2_import.proto",
      "google/protobuf/compiler/ruby/ruby_generated_pkg_explicit.proto",
      "google/protobuf/compiler/ruby/ruby_generated_pkg_explicit_legacy.proto",
      "google/protobuf/compiler/ruby/ruby_generated_pkg_implicit.proto",
      "google/protobuf/descriptor.proto",
      "google/protobuf/duration.proto",
      "google/protobuf/empty.proto",
      "google/protobuf/field_mask.proto",
      "google/protobuf/source_context.proto",
      "google/protobuf/struct.proto",
      "google/protobuf/timestamp.proto",
      "google/protobuf/type.proto",
      "google/protobuf/util/json_format.proto",
      "google/protobuf/util/json_format_proto3.proto",
      "google/protobuf/wrappers.proto",
      "google/rpc/code.proto",
      "google/rpc/context/attribute_context.proto",
      "google/rpc/context/audit_context.proto",
      "google/rpc/error_details.proto",
      "google/rpc/http.proto",
      "google/rpc/status.proto",
      "google/type/calendar_period.proto",
      "google/type/color.proto",
      "google/type/date.proto",
      "google/type/datetime.proto",
      "google/type/dayofweek.proto",
      "google/type/decimal.proto",
      "google/type/expr.proto",
      "google/type/fraction.proto",
      "google/type/interval.proto",
      "google/type/latlng.proto",
      "google/type/localized_text.proto",
      "google/type/money.proto",
      "google/type/month.proto",
      "google/type/phone_number.proto",
      "google/type/postal_address.proto",
      "google/type/quaternion.proto",
      "google/type/timeofday.proto"
    ];
  }
});

// node_modules/google-gax/build/src/grpc.js
var require_grpc = __commonJS({
  "node_modules/google-gax/build/src/grpc.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GoogleProtoFilesRoot = exports2.GrpcClient = exports2.ClientStub = void 0;
    var grpcProtoLoader = require_src2();
    var child_process_1 = require("child_process");
    var fs = require("fs");
    var google_auth_library_1 = require_src8();
    var grpc = require_src3();
    var os = require("os");
    var path_1 = require("path");
    var path = require("path");
    var protobuf = require_protobufjs();
    var objectHash = require_object_hash();
    var gax = require_gax();
    var googleProtoFilesDir = path.join(__dirname, "..", "..", "build", "protos");
    var INCLUDE_DIRS = [];
    INCLUDE_DIRS.push(googleProtoFilesDir);
    var commonProtoFiles = require_protosList();
    var COMMON_PROTO_FILES = commonProtoFiles.map((file) => file.replace(/[/\\]/g, path.sep));
    async function readFileAsync(path2) {
      return new Promise((resolve, reject) => {
        fs.readFile(path2, "utf8", (err, content) => {
          if (err)
            return reject(err);
          else
            resolve(content);
        });
      });
    }
    async function execFileAsync(command, args) {
      return new Promise((resolve, reject) => {
        (0, child_process_1.execFile)(command, args, (err, stdout) => {
          if (err)
            return reject(err);
          else
            resolve(stdout);
        });
      });
    }
    var ClientStub = class extends grpc.Client {
    };
    exports2.ClientStub = ClientStub;
    var GrpcClient = class _GrpcClient {
      /**
       * Key for proto cache map. We are doing our best to make sure we respect
       * the options, so if the same proto file is loaded with different set of
       * options, the cache won't be used.  Since some of the options are
       * Functions (e.g. `enums: String` - see below in `loadProto()`),
       * they will be omitted from the cache key.  If the cache breaks anything
       * for you, use the `ignoreCache` parameter of `loadProto()` to disable it.
       */
      static protoCacheKey(filename, options) {
        if (!filename || Array.isArray(filename) && (filename.length === 0 || !filename[0])) {
          return void 0;
        }
        return JSON.stringify(filename) + " " + JSON.stringify(options);
      }
      /**
       * In rare cases users might need to deallocate all memory consumed by loaded protos.
       * This method will delete the proto cache content.
       */
      static clearProtoCache() {
        _GrpcClient.protoCache.clear();
      }
      /**
       * A class which keeps the context of gRPC and auth for the gRPC.
       *
       * @param {Object=} options - The optional parameters. It will be directly
       *   passed to google-auth-library library, so parameters like keyFile or
       *   credentials will be valid.
       * @param {Object=} options.auth - An instance of google-auth-library.
       *   When specified, this auth instance will be used instead of creating
       *   a new one.
       * @param {Object=} options.grpc - When specified, this will be used
       *   for the 'grpc' module in this context. By default, it will load the grpc
       *   module in the standard way.
       * @constructor
       */
      constructor(options = {}) {
        var _a;
        this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);
        this.fallback = false;
        const minimumVersion = 10;
        const major = Number((_a = process.version.match(/^v(\d+)/)) === null || _a === void 0 ? void 0 : _a[1]);
        if (Number.isNaN(major) || major < minimumVersion) {
          const errorMessage = `Node.js v${minimumVersion}.0.0 is a minimum requirement. To learn about legacy version support visit: https://github.com/googleapis/google-cloud-node#supported-nodejs-versions`;
          throw new Error(errorMessage);
        }
        if ("grpc" in options) {
          this.grpc = options.grpc;
          this.grpcVersion = "";
        } else {
          this.grpc = grpc;
          this.grpcVersion = require_package2().version;
        }
      }
      /**
       * Creates a gRPC credentials. It asks the auth data if necessary.
       * @private
       * @param {Object} opts - options values for configuring credentials.
       * @param {Object=} opts.sslCreds - when specified, this is used instead
       *   of default channel credentials.
       * @return {Promise} The promise which will be resolved to the gRPC credential.
       */
      async _getCredentials(opts) {
        if (opts.sslCreds) {
          return opts.sslCreds;
        }
        const grpc2 = this.grpc;
        const sslCreds = opts.cert && opts.key ? grpc2.credentials.createSsl(null, Buffer.from(opts.key), Buffer.from(opts.cert)) : grpc2.credentials.createSsl();
        const client2 = await this.auth.getClient();
        const credentials = grpc2.credentials.combineChannelCredentials(sslCreds, grpc2.credentials.createFromGoogleCredential(client2));
        return credentials;
      }
      static defaultOptions() {
        const includeDirs = INCLUDE_DIRS.slice();
        const options = {
          keepCase: false,
          longs: String,
          enums: String,
          defaults: true,
          oneofs: true,
          includeDirs
        };
        return options;
      }
      /**
       * Loads the gRPC service from the proto file(s) at the given path and with the
       * given options. Caches the loaded protos so the subsequent loads don't do
       * any disk reads.
       * @param filename The path to the proto file(s).
       * @param options Options for loading the proto file.
       * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic
       *   incorrectly decides that the options object is the same, or if you want to
       *   re-read the protos from disk for any other reason.
       */
      loadFromProto(filename, options, ignoreCache = false) {
        const cacheKey = _GrpcClient.protoCacheKey(filename, options);
        let grpcPackage = cacheKey ? _GrpcClient.protoCache.get(cacheKey) : void 0;
        if (ignoreCache || !grpcPackage) {
          const packageDef = grpcProtoLoader.loadSync(filename, options);
          grpcPackage = this.grpc.loadPackageDefinition(packageDef);
          if (cacheKey) {
            _GrpcClient.protoCache.set(cacheKey, grpcPackage);
          }
        }
        return grpcPackage;
      }
      /**
       * Load gRPC proto service from a filename looking in googleapis common protos
       * when necessary. Caches the loaded protos so the subsequent loads don't do
       * any disk reads.
       * @param {String} protoPath - The directory to search for the protofile.
       * @param {String|String[]} filename - The filename(s) of the proto(s) to be loaded.
       *   If omitted, protoPath will be treated as a file path to load.
       * @param ignoreCache Defaults to `false`. Set it to `true` if the caching logic
       *   incorrectly decides that the options object is the same, or if you want to
       *   re-read the protos from disk for any other reason.
       * @return {Object<string, *>} The gRPC loaded result (the toplevel namespace
       *   object).
       */
      loadProto(protoPath, filename, ignoreCache = false) {
        if (!filename) {
          filename = path.basename(protoPath);
          protoPath = path.dirname(protoPath);
        }
        if (Array.isArray(filename) && filename.length === 0) {
          return {};
        }
        const options = _GrpcClient.defaultOptions();
        options.includeDirs.unshift(protoPath);
        return this.loadFromProto(filename, options, ignoreCache);
      }
      static _resolveFile(protoPath, filename) {
        if (fs.existsSync(path.join(protoPath, filename))) {
          return path.join(protoPath, filename);
        } else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {
          return path.join(googleProtoFilesDir, filename);
        }
        throw new Error(filename + " could not be found in " + protoPath);
      }
      loadProtoJSON(json, ignoreCache = false) {
        const hash = objectHash(JSON.stringify(json)).toString();
        const cached = _GrpcClient.protoCache.get(hash);
        if (cached && !ignoreCache) {
          return cached;
        }
        const options = _GrpcClient.defaultOptions();
        const packageDefinition = grpcProtoLoader.fromJSON(json, options);
        const grpcPackage = this.grpc.loadPackageDefinition(packageDefinition);
        _GrpcClient.protoCache.set(hash, grpcPackage);
        return grpcPackage;
      }
      metadataBuilder(headers) {
        const Metadata = this.grpc.Metadata;
        const baseMetadata = new Metadata();
        for (const key in headers) {
          const value = headers[key];
          if (Array.isArray(value)) {
            value.forEach((v) => baseMetadata.add(key, v));
          } else {
            baseMetadata.set(key, `${value}`);
          }
        }
        return function buildMetadata(abTests, moreHeaders) {
          let copied = false;
          let metadata = baseMetadata;
          if (moreHeaders) {
            for (const key in moreHeaders) {
              if (key.toLowerCase() !== "x-goog-api-client") {
                if (!copied) {
                  copied = true;
                  metadata = metadata.clone();
                }
                const value = moreHeaders[key];
                if (Array.isArray(value)) {
                  value.forEach((v) => metadata.add(key, v));
                } else {
                  metadata.set(key, `${value}`);
                }
              }
            }
          }
          return metadata;
        };
      }
      /**
       * A wrapper of {@link constructSettings} function under the gRPC context.
       *
       * Most of parameters are common among constructSettings, please take a look.
       * @param {string} serviceName - The fullly-qualified name of the service.
       * @param {Object} clientConfig - A dictionary of the client config.
       * @param {Object} configOverrides - A dictionary of overriding configs.
       * @param {Object} headers - A dictionary of additional HTTP header name to
       *   its value.
       * @return {Object} A mapping of method names to CallSettings.
       */
      constructSettings(serviceName, clientConfig, configOverrides, headers) {
        return gax.constructSettings(serviceName, clientConfig, configOverrides, this.grpc.status, { metadataBuilder: this.metadataBuilder(headers) });
      }
      /**
       * Creates a gRPC stub with current gRPC and auth.
       * @param {function} CreateStub - The constructor function of the stub.
       * @param {Object} options - The optional arguments to customize
       *   gRPC connection. This options will be passed to the constructor of
       *   gRPC client too.
       * @param {string} options.servicePath - The name of the server of the service.
       * @param {number} options.port - The port of the service.
       * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used
       *   to set up gRPC connection.
       * @param {string} defaultServicePath - The default service path.
       * @return {Promise} A promise which resolves to a gRPC stub instance.
       */
      async createStub(CreateStub, options, customServicePath) {
        const grpcGcpOptions = [
          "grpc.callInvocationTransformer",
          "grpc.channelFactoryOverride",
          "grpc.gcpApiConfig"
        ];
        const [cert, key] = await this._detectClientCertificate(options);
        const servicePath = this._mtlsServicePath(options.servicePath, customServicePath, cert && key);
        const opts = Object.assign({}, options, { cert, key, servicePath });
        const serviceAddress = servicePath + ":" + opts.port;
        const creds = await this._getCredentials(opts);
        const grpcOptions = {};
        grpcOptions["grpc.max_receive_message_length"] = -1;
        grpcOptions["grpc.max_send_message_length"] = -1;
        grpcOptions["grpc.initial_reconnect_backoff_ms"] = 1e3;
        Object.keys(opts).forEach((key2) => {
          const value = options[key2];
          if (key2.startsWith("grpc.grpc.")) {
            key2 = key2.replace(/^grpc\./, "");
          }
          if (key2.startsWith("grpc.")) {
            if (grpcGcpOptions.includes(key2)) {
              key2 = key2.replace(/^grpc\./, "");
            }
            grpcOptions[key2] = value;
          }
          if (key2.startsWith("grpc-node.")) {
            grpcOptions[key2] = value;
          }
        });
        const stub = new CreateStub(serviceAddress, creds, grpcOptions);
        return stub;
      }
      /**
       * Detect mTLS client certificate based on logic described in
       * https://google.aip.dev/auth/4114.
       *
       * @param {object} [options] - The configuration object.
       * @returns {Promise} Resolves array of strings representing cert and key.
       */
      async _detectClientCertificate(opts) {
        var _a;
        const certRegex = /(?<cert>-----BEGIN CERTIFICATE-----.*?-----END CERTIFICATE-----)/s;
        const keyRegex = /(?<key>-----BEGIN PRIVATE KEY-----.*?-----END PRIVATE KEY-----)/s;
        if (typeof process !== "undefined" && ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.GOOGLE_API_USE_CLIENT_CERTIFICATE) === "true") {
          if ((opts === null || opts === void 0 ? void 0 : opts.cert) && (opts === null || opts === void 0 ? void 0 : opts.key)) {
            return [opts.cert, opts.key];
          }
          const metadataPath = (0, path_1.join)(os.homedir(), ".secureConnect", "context_aware_metadata.json");
          const metadata = JSON.parse(await readFileAsync(metadataPath));
          if (!metadata.cert_provider_command) {
            throw Error("no cert_provider_command found");
          }
          const stdout = await execFileAsync(metadata.cert_provider_command[0], metadata.cert_provider_command.slice(1));
          const matchCert = stdout.toString().match(certRegex);
          const matchKey = stdout.toString().match(keyRegex);
          if (!((matchCert === null || matchCert === void 0 ? void 0 : matchCert.groups) && (matchKey === null || matchKey === void 0 ? void 0 : matchKey.groups))) {
            throw Error("unable to parse certificate and key");
          } else {
            return [matchCert.groups.cert, matchKey.groups.key];
          }
        }
        return [void 0, void 0];
      }
      /**
       * Return service path, taking into account mTLS logic.
       * See: https://google.aip.dev/auth/4114
       *
       * @param {string|undefined} servicePath - The path of the service.
       * @param {string|undefined} customServicePath - Did the user provide a custom service URL.
       * @param {boolean} hasCertificate - Was a certificate found.
       * @returns {string} The DNS address for this service.
       */
      _mtlsServicePath(servicePath, customServicePath, hasCertificate) {
        var _a, _b;
        if (customServicePath || !servicePath)
          return servicePath;
        if (typeof process !== "undefined" && ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.GOOGLE_API_USE_MTLS_ENDPOINT) === "never") {
          return servicePath;
        } else if (typeof process !== "undefined" && ((_b = process === null || process === void 0 ? void 0 : process.env) === null || _b === void 0 ? void 0 : _b.GOOGLE_API_USE_MTLS_ENDPOINT) === "always" || hasCertificate) {
          return servicePath.replace("googleapis.com", "mtls.googleapis.com");
        }
        return servicePath;
      }
      /**
       * Creates a 'bytelength' function for a given proto message class.
       *
       * See {@link BundleDescriptor} about the meaning of the return value.
       *
       * @param {function} message - a constructor function that is generated by
       *   protobuf.js. Assumes 'encoder' field in the message.
       * @return {function(Object):number} - a function to compute the byte length
       *   for an object.
       */
      static createByteLengthFunction(message) {
        return gax.createByteLengthFunction(message);
      }
    };
    exports2.GrpcClient = GrpcClient;
    GrpcClient.protoCache = /* @__PURE__ */ new Map();
    var GoogleProtoFilesRoot = class _GoogleProtoFilesRoot extends protobuf.Root {
      constructor(...args) {
        super(...args);
      }
      // Causes the loading of an included proto to check if it is a common
      // proto. If it is a common proto, use the bundled proto.
      resolvePath(originPath, includePath) {
        originPath = path.normalize(originPath);
        includePath = path.normalize(includePath);
        if (path.isAbsolute(includePath)) {
          if (!fs.existsSync(includePath)) {
            throw new Error("The include `" + includePath + "` was not found.");
          }
          return includePath;
        }
        if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {
          return path.join(googleProtoFilesDir, includePath);
        }
        return _GoogleProtoFilesRoot._findIncludePath(originPath, includePath);
      }
      static _findIncludePath(originPath, includePath) {
        originPath = path.normalize(originPath);
        includePath = path.normalize(includePath);
        let current = originPath;
        let found = fs.existsSync(path.join(current, includePath));
        while (!found && current.length > 0) {
          current = current.substring(0, current.lastIndexOf(path.sep));
          found = fs.existsSync(path.join(current, includePath));
        }
        if (!found) {
          throw new Error("The include `" + includePath + "` was not found.");
        }
        return path.join(current, includePath);
      }
    };
    exports2.GoogleProtoFilesRoot = GoogleProtoFilesRoot;
  }
});

// node_modules/protobufjs/minimal.js
var require_minimal2 = __commonJS({
  "node_modules/protobufjs/minimal.js"(exports2, module2) {
    "use strict";
    module2.exports = require_index_minimal();
  }
});

// node_modules/google-gax/build/protos/iam_service.js
var require_iam_service = __commonJS({
  "node_modules/google-gax/build/protos/iam_service.js"(exports2, module2) {
    !function(e) {
      "function" == typeof define && define.amd ? define(["protobufjs/minimal"], e) : "function" == typeof require && "object" == typeof module2 && module2 && module2.exports && (module2.exports = e(require_minimal2()));
    }(function(o) {
      "use strict";
      var e, t, n, r, F, a = o.Reader, i = o.Writer, p = o.util, l = o.roots.iam_protos || (o.roots.iam_protos = {});
      function B(e2, t2, n2) {
        o.rpc.Service.call(this, e2, t2, n2);
      }
      function s(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function u(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function c(e2) {
        if (this.permissions = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function G(e2) {
        if (this.permissions = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function U(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function d(e2) {
        if (this.bindings = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function g(e2) {
        if (this.members = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function M(e2) {
        if (this.bindingDeltas = [], this.auditConfigDeltas = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function f(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function y(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function L(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function J(e2) {
        if (this.rules = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function h(e2) {
        if (this.additionalBindings = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function _(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function b(e2) {
        if (this.pattern = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function H(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function q(e2) {
        if (this.file = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function m(e2) {
        if (this.dependency = [], this.publicDependency = [], this.weakDependency = [], this.messageType = [], this.enumType = [], this.service = [], this.extension = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function O(e2) {
        if (this.field = [], this.extension = [], this.nestedType = [], this.enumType = [], this.extensionRange = [], this.oneofDecl = [], this.reservedRange = [], this.reservedName = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function v(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function Y(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function z(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function P(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function W(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function w(e2) {
        if (this.value = [], this.reservedRange = [], this.reservedName = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function X(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function j(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function D(e2) {
        if (this.method = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function x(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function S(e2) {
        if (this.uninterpretedOption = [], this[".google.api.resourceDefinition"] = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function k(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function T(e2) {
        if (this.uninterpretedOption = [], this[".google.api.fieldBehavior"] = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function Q(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function E(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function K(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function A(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function N(e2) {
        if (this.uninterpretedOption = [], this[".google.api.methodSignature"] = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function R(e2) {
        if (this.name = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function Z(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function $(e2) {
        if (this.location = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function I(e2) {
        if (this.path = [], this.span = [], this.leadingDetachedComments = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function ee(e2) {
        if (this.annotation = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function C(e2) {
        if (this.path = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function V(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      return l.google = ((F = {}).iam = ((n = {}).v1 = ((t = {}).IAMPolicy = (((B.prototype = Object.create(o.rpc.Service.prototype)).constructor = B).create = function(e2, t2, n2) {
        return new this(e2, t2, n2);
      }, Object.defineProperty(B.prototype.setIamPolicy = function e2(t2, n2) {
        return this.rpcCall(e2, l.google.iam.v1.SetIamPolicyRequest, l.google.iam.v1.Policy, t2, n2);
      }, "name", { value: "SetIamPolicy" }), Object.defineProperty(B.prototype.getIamPolicy = function e2(t2, n2) {
        return this.rpcCall(e2, l.google.iam.v1.GetIamPolicyRequest, l.google.iam.v1.Policy, t2, n2);
      }, "name", { value: "GetIamPolicy" }), Object.defineProperty(B.prototype.testIamPermissions = function e2(t2, n2) {
        return this.rpcCall(e2, l.google.iam.v1.TestIamPermissionsRequest, l.google.iam.v1.TestIamPermissionsResponse, t2, n2);
      }, "name", { value: "TestIamPermissions" }), B), t.SetIamPolicyRequest = (s.prototype.resource = "", s.prototype.policy = null, s.create = function(e2) {
        return new s(e2);
      }, s.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.resource && Object.hasOwnProperty.call(e2, "resource") && t2.uint32(10).string(e2.resource), null != e2.policy && Object.hasOwnProperty.call(e2, "policy") && l.google.iam.v1.Policy.encode(e2.policy, t2.uint32(18).fork()).ldelim(), t2;
      }, s.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, s.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.SetIamPolicyRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.resource = e2.string();
              break;
            case 2:
              o2.policy = l.google.iam.v1.Policy.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, s.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, s.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.resource && e2.hasOwnProperty("resource") && !p.isString(e2.resource))
          return "resource: string expected";
        if (null != e2.policy && e2.hasOwnProperty("policy")) {
          e2 = l.google.iam.v1.Policy.verify(e2.policy);
          if (e2)
            return "policy." + e2;
        }
        return null;
      }, s.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.SetIamPolicyRequest)
          return e2;
        var t2 = new l.google.iam.v1.SetIamPolicyRequest();
        if (null != e2.resource && (t2.resource = String(e2.resource)), null != e2.policy) {
          if ("object" != typeof e2.policy)
            throw TypeError(".google.iam.v1.SetIamPolicyRequest.policy: object expected");
          t2.policy = l.google.iam.v1.Policy.fromObject(e2.policy);
        }
        return t2;
      }, s.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.resource = "", n2.policy = null), null != e2.resource && e2.hasOwnProperty("resource") && (n2.resource = e2.resource), null != e2.policy && e2.hasOwnProperty("policy") && (n2.policy = l.google.iam.v1.Policy.toObject(e2.policy, t2)), n2;
      }, s.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, s), t.GetIamPolicyRequest = (u.prototype.resource = "", u.prototype.options = null, u.create = function(e2) {
        return new u(e2);
      }, u.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.resource && Object.hasOwnProperty.call(e2, "resource") && t2.uint32(10).string(e2.resource), null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.iam.v1.GetPolicyOptions.encode(e2.options, t2.uint32(18).fork()).ldelim(), t2;
      }, u.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, u.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.GetIamPolicyRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.resource = e2.string();
              break;
            case 2:
              o2.options = l.google.iam.v1.GetPolicyOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, u.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, u.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.resource && e2.hasOwnProperty("resource") && !p.isString(e2.resource))
          return "resource: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = l.google.iam.v1.GetPolicyOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, u.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.GetIamPolicyRequest)
          return e2;
        var t2 = new l.google.iam.v1.GetIamPolicyRequest();
        if (null != e2.resource && (t2.resource = String(e2.resource)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.iam.v1.GetIamPolicyRequest.options: object expected");
          t2.options = l.google.iam.v1.GetPolicyOptions.fromObject(e2.options);
        }
        return t2;
      }, u.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.resource = "", n2.options = null), null != e2.resource && e2.hasOwnProperty("resource") && (n2.resource = e2.resource), null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.iam.v1.GetPolicyOptions.toObject(e2.options, t2)), n2;
      }, u.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, u), t.TestIamPermissionsRequest = (c.prototype.resource = "", c.prototype.permissions = p.emptyArray, c.create = function(e2) {
        return new c(e2);
      }, c.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.resource && Object.hasOwnProperty.call(e2, "resource") && t2.uint32(10).string(e2.resource), null != e2.permissions && e2.permissions.length)
          for (var n2 = 0; n2 < e2.permissions.length; ++n2)
            t2.uint32(18).string(e2.permissions[n2]);
        return t2;
      }, c.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, c.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.TestIamPermissionsRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.resource = e2.string();
              break;
            case 2:
              o2.permissions && o2.permissions.length || (o2.permissions = []), o2.permissions.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, c.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, c.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.resource && e2.hasOwnProperty("resource") && !p.isString(e2.resource))
          return "resource: string expected";
        if (null != e2.permissions && e2.hasOwnProperty("permissions")) {
          if (!Array.isArray(e2.permissions))
            return "permissions: array expected";
          for (var t2 = 0; t2 < e2.permissions.length; ++t2)
            if (!p.isString(e2.permissions[t2]))
              return "permissions: string[] expected";
        }
        return null;
      }, c.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.TestIamPermissionsRequest)
          return e2;
        var t2 = new l.google.iam.v1.TestIamPermissionsRequest();
        if (null != e2.resource && (t2.resource = String(e2.resource)), e2.permissions) {
          if (!Array.isArray(e2.permissions))
            throw TypeError(".google.iam.v1.TestIamPermissionsRequest.permissions: array expected");
          t2.permissions = [];
          for (var n2 = 0; n2 < e2.permissions.length; ++n2)
            t2.permissions[n2] = String(e2.permissions[n2]);
        }
        return t2;
      }, c.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.permissions = []), t2.defaults && (n2.resource = ""), null != e2.resource && e2.hasOwnProperty("resource") && (n2.resource = e2.resource), e2.permissions && e2.permissions.length) {
          n2.permissions = [];
          for (var o2 = 0; o2 < e2.permissions.length; ++o2)
            n2.permissions[o2] = e2.permissions[o2];
        }
        return n2;
      }, c.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, c), t.TestIamPermissionsResponse = (G.prototype.permissions = p.emptyArray, G.create = function(e2) {
        return new G(e2);
      }, G.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.permissions && e2.permissions.length)
          for (var n2 = 0; n2 < e2.permissions.length; ++n2)
            t2.uint32(10).string(e2.permissions[n2]);
        return t2;
      }, G.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, G.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.TestIamPermissionsResponse(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.permissions && o2.permissions.length || (o2.permissions = []), o2.permissions.push(e2.string())) : e2.skipType(7 & r2);
        }
        return o2;
      }, G.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, G.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.permissions && e2.hasOwnProperty("permissions")) {
          if (!Array.isArray(e2.permissions))
            return "permissions: array expected";
          for (var t2 = 0; t2 < e2.permissions.length; ++t2)
            if (!p.isString(e2.permissions[t2]))
              return "permissions: string[] expected";
        }
        return null;
      }, G.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.TestIamPermissionsResponse)
          return e2;
        var t2 = new l.google.iam.v1.TestIamPermissionsResponse();
        if (e2.permissions) {
          if (!Array.isArray(e2.permissions))
            throw TypeError(".google.iam.v1.TestIamPermissionsResponse.permissions: array expected");
          t2.permissions = [];
          for (var n2 = 0; n2 < e2.permissions.length; ++n2)
            t2.permissions[n2] = String(e2.permissions[n2]);
        }
        return t2;
      }, G.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.permissions = []), e2.permissions && e2.permissions.length) {
          n2.permissions = [];
          for (var o2 = 0; o2 < e2.permissions.length; ++o2)
            n2.permissions[o2] = e2.permissions[o2];
        }
        return n2;
      }, G.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, G), t.GetPolicyOptions = (U.prototype.requestedPolicyVersion = 0, U.create = function(e2) {
        return new U(e2);
      }, U.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.requestedPolicyVersion && Object.hasOwnProperty.call(e2, "requestedPolicyVersion") && t2.uint32(8).int32(e2.requestedPolicyVersion), t2;
      }, U.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, U.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.GetPolicyOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? o2.requestedPolicyVersion = e2.int32() : e2.skipType(7 & r2);
        }
        return o2;
      }, U.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, U.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.requestedPolicyVersion && e2.hasOwnProperty("requestedPolicyVersion") && !p.isInteger(e2.requestedPolicyVersion) ? "requestedPolicyVersion: integer expected" : null;
      }, U.fromObject = function(e2) {
        var t2;
        return e2 instanceof l.google.iam.v1.GetPolicyOptions ? e2 : (t2 = new l.google.iam.v1.GetPolicyOptions(), null != e2.requestedPolicyVersion && (t2.requestedPolicyVersion = 0 | e2.requestedPolicyVersion), t2);
      }, U.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.requestedPolicyVersion = 0), null != e2.requestedPolicyVersion && e2.hasOwnProperty("requestedPolicyVersion") && (n2.requestedPolicyVersion = e2.requestedPolicyVersion), n2;
      }, U.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, U), t.Policy = (d.prototype.version = 0, d.prototype.bindings = p.emptyArray, d.prototype.etag = p.newBuffer([]), d.create = function(e2) {
        return new d(e2);
      }, d.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.version && Object.hasOwnProperty.call(e2, "version") && t2.uint32(8).int32(e2.version), null != e2.etag && Object.hasOwnProperty.call(e2, "etag") && t2.uint32(26).bytes(e2.etag), null != e2.bindings && e2.bindings.length)
          for (var n2 = 0; n2 < e2.bindings.length; ++n2)
            l.google.iam.v1.Binding.encode(e2.bindings[n2], t2.uint32(34).fork()).ldelim();
        return t2;
      }, d.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, d.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.Policy(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.version = e2.int32();
              break;
            case 4:
              o2.bindings && o2.bindings.length || (o2.bindings = []), o2.bindings.push(l.google.iam.v1.Binding.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.etag = e2.bytes();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, d.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, d.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.version && e2.hasOwnProperty("version") && !p.isInteger(e2.version))
          return "version: integer expected";
        if (null != e2.bindings && e2.hasOwnProperty("bindings")) {
          if (!Array.isArray(e2.bindings))
            return "bindings: array expected";
          for (var t2 = 0; t2 < e2.bindings.length; ++t2) {
            var n2 = l.google.iam.v1.Binding.verify(e2.bindings[t2]);
            if (n2)
              return "bindings." + n2;
          }
        }
        return null != e2.etag && e2.hasOwnProperty("etag") && !(e2.etag && "number" == typeof e2.etag.length || p.isString(e2.etag)) ? "etag: buffer expected" : null;
      }, d.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.Policy)
          return e2;
        var t2 = new l.google.iam.v1.Policy();
        if (null != e2.version && (t2.version = 0 | e2.version), e2.bindings) {
          if (!Array.isArray(e2.bindings))
            throw TypeError(".google.iam.v1.Policy.bindings: array expected");
          t2.bindings = [];
          for (var n2 = 0; n2 < e2.bindings.length; ++n2) {
            if ("object" != typeof e2.bindings[n2])
              throw TypeError(".google.iam.v1.Policy.bindings: object expected");
            t2.bindings[n2] = l.google.iam.v1.Binding.fromObject(e2.bindings[n2]);
          }
        }
        return null != e2.etag && ("string" == typeof e2.etag ? p.base64.decode(e2.etag, t2.etag = p.newBuffer(p.base64.length(e2.etag)), 0) : e2.etag.length && (t2.etag = e2.etag)), t2;
      }, d.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.bindings = []), t2.defaults && (n2.version = 0, t2.bytes === String ? n2.etag = "" : (n2.etag = [], t2.bytes !== Array && (n2.etag = p.newBuffer(n2.etag)))), null != e2.version && e2.hasOwnProperty("version") && (n2.version = e2.version), null != e2.etag && e2.hasOwnProperty("etag") && (n2.etag = t2.bytes === String ? p.base64.encode(e2.etag, 0, e2.etag.length) : t2.bytes === Array ? Array.prototype.slice.call(e2.etag) : e2.etag), e2.bindings && e2.bindings.length) {
          n2.bindings = [];
          for (var o2 = 0; o2 < e2.bindings.length; ++o2)
            n2.bindings[o2] = l.google.iam.v1.Binding.toObject(e2.bindings[o2], t2);
        }
        return n2;
      }, d.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, d), t.Binding = (g.prototype.role = "", g.prototype.members = p.emptyArray, g.prototype.condition = null, g.create = function(e2) {
        return new g(e2);
      }, g.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.role && Object.hasOwnProperty.call(e2, "role") && t2.uint32(10).string(e2.role), null != e2.members && e2.members.length)
          for (var n2 = 0; n2 < e2.members.length; ++n2)
            t2.uint32(18).string(e2.members[n2]);
        return null != e2.condition && Object.hasOwnProperty.call(e2, "condition") && l.google.type.Expr.encode(e2.condition, t2.uint32(26).fork()).ldelim(), t2;
      }, g.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, g.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.Binding(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.role = e2.string();
              break;
            case 2:
              o2.members && o2.members.length || (o2.members = []), o2.members.push(e2.string());
              break;
            case 3:
              o2.condition = l.google.type.Expr.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, g.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, g.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.role && e2.hasOwnProperty("role") && !p.isString(e2.role))
          return "role: string expected";
        if (null != e2.members && e2.hasOwnProperty("members")) {
          if (!Array.isArray(e2.members))
            return "members: array expected";
          for (var t2 = 0; t2 < e2.members.length; ++t2)
            if (!p.isString(e2.members[t2]))
              return "members: string[] expected";
        }
        if (null != e2.condition && e2.hasOwnProperty("condition")) {
          var n2 = l.google.type.Expr.verify(e2.condition);
          if (n2)
            return "condition." + n2;
        }
        return null;
      }, g.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.Binding)
          return e2;
        var t2 = new l.google.iam.v1.Binding();
        if (null != e2.role && (t2.role = String(e2.role)), e2.members) {
          if (!Array.isArray(e2.members))
            throw TypeError(".google.iam.v1.Binding.members: array expected");
          t2.members = [];
          for (var n2 = 0; n2 < e2.members.length; ++n2)
            t2.members[n2] = String(e2.members[n2]);
        }
        if (null != e2.condition) {
          if ("object" != typeof e2.condition)
            throw TypeError(".google.iam.v1.Binding.condition: object expected");
          t2.condition = l.google.type.Expr.fromObject(e2.condition);
        }
        return t2;
      }, g.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.members = []), t2.defaults && (n2.role = "", n2.condition = null), null != e2.role && e2.hasOwnProperty("role") && (n2.role = e2.role), e2.members && e2.members.length) {
          n2.members = [];
          for (var o2 = 0; o2 < e2.members.length; ++o2)
            n2.members[o2] = e2.members[o2];
        }
        return null != e2.condition && e2.hasOwnProperty("condition") && (n2.condition = l.google.type.Expr.toObject(e2.condition, t2)), n2;
      }, g.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, g), t.PolicyDelta = (M.prototype.bindingDeltas = p.emptyArray, M.prototype.auditConfigDeltas = p.emptyArray, M.create = function(e2) {
        return new M(e2);
      }, M.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.bindingDeltas && e2.bindingDeltas.length)
          for (var n2 = 0; n2 < e2.bindingDeltas.length; ++n2)
            l.google.iam.v1.BindingDelta.encode(e2.bindingDeltas[n2], t2.uint32(10).fork()).ldelim();
        if (null != e2.auditConfigDeltas && e2.auditConfigDeltas.length)
          for (n2 = 0; n2 < e2.auditConfigDeltas.length; ++n2)
            l.google.iam.v1.AuditConfigDelta.encode(e2.auditConfigDeltas[n2], t2.uint32(18).fork()).ldelim();
        return t2;
      }, M.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, M.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.PolicyDelta(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.bindingDeltas && o2.bindingDeltas.length || (o2.bindingDeltas = []), o2.bindingDeltas.push(l.google.iam.v1.BindingDelta.decode(e2, e2.uint32()));
              break;
            case 2:
              o2.auditConfigDeltas && o2.auditConfigDeltas.length || (o2.auditConfigDeltas = []), o2.auditConfigDeltas.push(l.google.iam.v1.AuditConfigDelta.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, M.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, M.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.bindingDeltas && e2.hasOwnProperty("bindingDeltas")) {
          if (!Array.isArray(e2.bindingDeltas))
            return "bindingDeltas: array expected";
          for (var t2 = 0; t2 < e2.bindingDeltas.length; ++t2)
            if (n2 = l.google.iam.v1.BindingDelta.verify(e2.bindingDeltas[t2]))
              return "bindingDeltas." + n2;
        }
        if (null != e2.auditConfigDeltas && e2.hasOwnProperty("auditConfigDeltas")) {
          if (!Array.isArray(e2.auditConfigDeltas))
            return "auditConfigDeltas: array expected";
          for (var n2, t2 = 0; t2 < e2.auditConfigDeltas.length; ++t2)
            if (n2 = l.google.iam.v1.AuditConfigDelta.verify(e2.auditConfigDeltas[t2]))
              return "auditConfigDeltas." + n2;
        }
        return null;
      }, M.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.PolicyDelta)
          return e2;
        var t2 = new l.google.iam.v1.PolicyDelta();
        if (e2.bindingDeltas) {
          if (!Array.isArray(e2.bindingDeltas))
            throw TypeError(".google.iam.v1.PolicyDelta.bindingDeltas: array expected");
          t2.bindingDeltas = [];
          for (var n2 = 0; n2 < e2.bindingDeltas.length; ++n2) {
            if ("object" != typeof e2.bindingDeltas[n2])
              throw TypeError(".google.iam.v1.PolicyDelta.bindingDeltas: object expected");
            t2.bindingDeltas[n2] = l.google.iam.v1.BindingDelta.fromObject(e2.bindingDeltas[n2]);
          }
        }
        if (e2.auditConfigDeltas) {
          if (!Array.isArray(e2.auditConfigDeltas))
            throw TypeError(".google.iam.v1.PolicyDelta.auditConfigDeltas: array expected");
          t2.auditConfigDeltas = [];
          for (n2 = 0; n2 < e2.auditConfigDeltas.length; ++n2) {
            if ("object" != typeof e2.auditConfigDeltas[n2])
              throw TypeError(".google.iam.v1.PolicyDelta.auditConfigDeltas: object expected");
            t2.auditConfigDeltas[n2] = l.google.iam.v1.AuditConfigDelta.fromObject(e2.auditConfigDeltas[n2]);
          }
        }
        return t2;
      }, M.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.bindingDeltas = [], n2.auditConfigDeltas = []), e2.bindingDeltas && e2.bindingDeltas.length) {
          n2.bindingDeltas = [];
          for (var o2 = 0; o2 < e2.bindingDeltas.length; ++o2)
            n2.bindingDeltas[o2] = l.google.iam.v1.BindingDelta.toObject(e2.bindingDeltas[o2], t2);
        }
        if (e2.auditConfigDeltas && e2.auditConfigDeltas.length) {
          n2.auditConfigDeltas = [];
          for (o2 = 0; o2 < e2.auditConfigDeltas.length; ++o2)
            n2.auditConfigDeltas[o2] = l.google.iam.v1.AuditConfigDelta.toObject(e2.auditConfigDeltas[o2], t2);
        }
        return n2;
      }, M.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, M), t.BindingDelta = (f.prototype.action = 0, f.prototype.role = "", f.prototype.member = "", f.prototype.condition = null, f.create = function(e2) {
        return new f(e2);
      }, f.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.action && Object.hasOwnProperty.call(e2, "action") && t2.uint32(8).int32(e2.action), null != e2.role && Object.hasOwnProperty.call(e2, "role") && t2.uint32(18).string(e2.role), null != e2.member && Object.hasOwnProperty.call(e2, "member") && t2.uint32(26).string(e2.member), null != e2.condition && Object.hasOwnProperty.call(e2, "condition") && l.google.type.Expr.encode(e2.condition, t2.uint32(34).fork()).ldelim(), t2;
      }, f.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, f.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.BindingDelta(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.action = e2.int32();
              break;
            case 2:
              o2.role = e2.string();
              break;
            case 3:
              o2.member = e2.string();
              break;
            case 4:
              o2.condition = l.google.type.Expr.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, f.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, f.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.action && e2.hasOwnProperty("action"))
          switch (e2.action) {
            default:
              return "action: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.role && e2.hasOwnProperty("role") && !p.isString(e2.role))
          return "role: string expected";
        if (null != e2.member && e2.hasOwnProperty("member") && !p.isString(e2.member))
          return "member: string expected";
        if (null != e2.condition && e2.hasOwnProperty("condition")) {
          e2 = l.google.type.Expr.verify(e2.condition);
          if (e2)
            return "condition." + e2;
        }
        return null;
      }, f.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.BindingDelta)
          return e2;
        var t2 = new l.google.iam.v1.BindingDelta();
        switch (e2.action) {
          case "ACTION_UNSPECIFIED":
          case 0:
            t2.action = 0;
            break;
          case "ADD":
          case 1:
            t2.action = 1;
            break;
          case "REMOVE":
          case 2:
            t2.action = 2;
        }
        if (null != e2.role && (t2.role = String(e2.role)), null != e2.member && (t2.member = String(e2.member)), null != e2.condition) {
          if ("object" != typeof e2.condition)
            throw TypeError(".google.iam.v1.BindingDelta.condition: object expected");
          t2.condition = l.google.type.Expr.fromObject(e2.condition);
        }
        return t2;
      }, f.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.action = t2.enums === String ? "ACTION_UNSPECIFIED" : 0, n2.role = "", n2.member = "", n2.condition = null), null != e2.action && e2.hasOwnProperty("action") && (n2.action = t2.enums === String ? l.google.iam.v1.BindingDelta.Action[e2.action] : e2.action), null != e2.role && e2.hasOwnProperty("role") && (n2.role = e2.role), null != e2.member && e2.hasOwnProperty("member") && (n2.member = e2.member), null != e2.condition && e2.hasOwnProperty("condition") && (n2.condition = l.google.type.Expr.toObject(e2.condition, t2)), n2;
      }, f.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, f.Action = (e = {}, (r = Object.create(e))[e[0] = "ACTION_UNSPECIFIED"] = 0, r[e[1] = "ADD"] = 1, r[e[2] = "REMOVE"] = 2, r), f), t.AuditConfigDelta = (y.prototype.action = 0, y.prototype.service = "", y.prototype.exemptedMember = "", y.prototype.logType = "", y.create = function(e2) {
        return new y(e2);
      }, y.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.action && Object.hasOwnProperty.call(e2, "action") && t2.uint32(8).int32(e2.action), null != e2.service && Object.hasOwnProperty.call(e2, "service") && t2.uint32(18).string(e2.service), null != e2.exemptedMember && Object.hasOwnProperty.call(e2, "exemptedMember") && t2.uint32(26).string(e2.exemptedMember), null != e2.logType && Object.hasOwnProperty.call(e2, "logType") && t2.uint32(34).string(e2.logType), t2;
      }, y.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, y.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.AuditConfigDelta(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.action = e2.int32();
              break;
            case 2:
              o2.service = e2.string();
              break;
            case 3:
              o2.exemptedMember = e2.string();
              break;
            case 4:
              o2.logType = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, y.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, y.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.action && e2.hasOwnProperty("action"))
          switch (e2.action) {
            default:
              return "action: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        return null != e2.service && e2.hasOwnProperty("service") && !p.isString(e2.service) ? "service: string expected" : null != e2.exemptedMember && e2.hasOwnProperty("exemptedMember") && !p.isString(e2.exemptedMember) ? "exemptedMember: string expected" : null != e2.logType && e2.hasOwnProperty("logType") && !p.isString(e2.logType) ? "logType: string expected" : null;
      }, y.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.AuditConfigDelta)
          return e2;
        var t2 = new l.google.iam.v1.AuditConfigDelta();
        switch (e2.action) {
          case "ACTION_UNSPECIFIED":
          case 0:
            t2.action = 0;
            break;
          case "ADD":
          case 1:
            t2.action = 1;
            break;
          case "REMOVE":
          case 2:
            t2.action = 2;
        }
        return null != e2.service && (t2.service = String(e2.service)), null != e2.exemptedMember && (t2.exemptedMember = String(e2.exemptedMember)), null != e2.logType && (t2.logType = String(e2.logType)), t2;
      }, y.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.action = t2.enums === String ? "ACTION_UNSPECIFIED" : 0, n2.service = "", n2.exemptedMember = "", n2.logType = ""), null != e2.action && e2.hasOwnProperty("action") && (n2.action = t2.enums === String ? l.google.iam.v1.AuditConfigDelta.Action[e2.action] : e2.action), null != e2.service && e2.hasOwnProperty("service") && (n2.service = e2.service), null != e2.exemptedMember && e2.hasOwnProperty("exemptedMember") && (n2.exemptedMember = e2.exemptedMember), null != e2.logType && e2.hasOwnProperty("logType") && (n2.logType = e2.logType), n2;
      }, y.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, y.Action = (e = {}, (r = Object.create(e))[e[0] = "ACTION_UNSPECIFIED"] = 0, r[e[1] = "ADD"] = 1, r[e[2] = "REMOVE"] = 2, r), y), t.logging = ((e = {}).AuditData = (L.prototype.policyDelta = null, L.create = function(e2) {
        return new L(e2);
      }, L.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.policyDelta && Object.hasOwnProperty.call(e2, "policyDelta") && l.google.iam.v1.PolicyDelta.encode(e2.policyDelta, t2.uint32(18).fork()).ldelim(), t2;
      }, L.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, L.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.iam.v1.logging.AuditData(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 2 ? o2.policyDelta = l.google.iam.v1.PolicyDelta.decode(e2, e2.uint32()) : e2.skipType(7 & r2);
        }
        return o2;
      }, L.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, L.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.policyDelta && e2.hasOwnProperty("policyDelta")) {
          e2 = l.google.iam.v1.PolicyDelta.verify(e2.policyDelta);
          if (e2)
            return "policyDelta." + e2;
        }
        return null;
      }, L.fromObject = function(e2) {
        if (e2 instanceof l.google.iam.v1.logging.AuditData)
          return e2;
        var t2 = new l.google.iam.v1.logging.AuditData();
        if (null != e2.policyDelta) {
          if ("object" != typeof e2.policyDelta)
            throw TypeError(".google.iam.v1.logging.AuditData.policyDelta: object expected");
          t2.policyDelta = l.google.iam.v1.PolicyDelta.fromObject(e2.policyDelta);
        }
        return t2;
      }, L.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.policyDelta = null), null != e2.policyDelta && e2.hasOwnProperty("policyDelta") && (n2.policyDelta = l.google.iam.v1.PolicyDelta.toObject(e2.policyDelta, t2)), n2;
      }, L.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, L), e), t), n), F.api = ((r = {}).Http = (J.prototype.rules = p.emptyArray, J.prototype.fullyDecodeReservedExpansion = false, J.create = function(e2) {
        return new J(e2);
      }, J.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.rules && e2.rules.length)
          for (var n2 = 0; n2 < e2.rules.length; ++n2)
            l.google.api.HttpRule.encode(e2.rules[n2], t2.uint32(10).fork()).ldelim();
        return null != e2.fullyDecodeReservedExpansion && Object.hasOwnProperty.call(e2, "fullyDecodeReservedExpansion") && t2.uint32(16).bool(e2.fullyDecodeReservedExpansion), t2;
      }, J.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, J.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.api.Http(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.rules && o2.rules.length || (o2.rules = []), o2.rules.push(l.google.api.HttpRule.decode(e2, e2.uint32()));
              break;
            case 2:
              o2.fullyDecodeReservedExpansion = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, J.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, J.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.rules && e2.hasOwnProperty("rules")) {
          if (!Array.isArray(e2.rules))
            return "rules: array expected";
          for (var t2 = 0; t2 < e2.rules.length; ++t2) {
            var n2 = l.google.api.HttpRule.verify(e2.rules[t2]);
            if (n2)
              return "rules." + n2;
          }
        }
        return null != e2.fullyDecodeReservedExpansion && e2.hasOwnProperty("fullyDecodeReservedExpansion") && "boolean" != typeof e2.fullyDecodeReservedExpansion ? "fullyDecodeReservedExpansion: boolean expected" : null;
      }, J.fromObject = function(e2) {
        if (e2 instanceof l.google.api.Http)
          return e2;
        var t2 = new l.google.api.Http();
        if (e2.rules) {
          if (!Array.isArray(e2.rules))
            throw TypeError(".google.api.Http.rules: array expected");
          t2.rules = [];
          for (var n2 = 0; n2 < e2.rules.length; ++n2) {
            if ("object" != typeof e2.rules[n2])
              throw TypeError(".google.api.Http.rules: object expected");
            t2.rules[n2] = l.google.api.HttpRule.fromObject(e2.rules[n2]);
          }
        }
        return null != e2.fullyDecodeReservedExpansion && (t2.fullyDecodeReservedExpansion = Boolean(e2.fullyDecodeReservedExpansion)), t2;
      }, J.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.rules = []), t2.defaults && (n2.fullyDecodeReservedExpansion = false), e2.rules && e2.rules.length) {
          n2.rules = [];
          for (var o2 = 0; o2 < e2.rules.length; ++o2)
            n2.rules[o2] = l.google.api.HttpRule.toObject(e2.rules[o2], t2);
        }
        return null != e2.fullyDecodeReservedExpansion && e2.hasOwnProperty("fullyDecodeReservedExpansion") && (n2.fullyDecodeReservedExpansion = e2.fullyDecodeReservedExpansion), n2;
      }, J.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, J), r.HttpRule = (h.prototype.selector = "", h.prototype.get = "", h.prototype.put = "", h.prototype.post = "", h.prototype.delete = "", h.prototype.patch = "", h.prototype.custom = null, h.prototype.body = "", h.prototype.responseBody = "", h.prototype.additionalBindings = p.emptyArray, Object.defineProperty(h.prototype, "pattern", { get: p.oneOfGetter(e = ["get", "put", "post", "delete", "patch", "custom"]), set: p.oneOfSetter(e) }), h.create = function(e2) {
        return new h(e2);
      }, h.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.selector && Object.hasOwnProperty.call(e2, "selector") && t2.uint32(10).string(e2.selector), null != e2.get && Object.hasOwnProperty.call(e2, "get") && t2.uint32(18).string(e2.get), null != e2.put && Object.hasOwnProperty.call(e2, "put") && t2.uint32(26).string(e2.put), null != e2.post && Object.hasOwnProperty.call(e2, "post") && t2.uint32(34).string(e2.post), null != e2.delete && Object.hasOwnProperty.call(e2, "delete") && t2.uint32(42).string(e2.delete), null != e2.patch && Object.hasOwnProperty.call(e2, "patch") && t2.uint32(50).string(e2.patch), null != e2.body && Object.hasOwnProperty.call(e2, "body") && t2.uint32(58).string(e2.body), null != e2.custom && Object.hasOwnProperty.call(e2, "custom") && l.google.api.CustomHttpPattern.encode(e2.custom, t2.uint32(66).fork()).ldelim(), null != e2.additionalBindings && e2.additionalBindings.length)
          for (var n2 = 0; n2 < e2.additionalBindings.length; ++n2)
            l.google.api.HttpRule.encode(e2.additionalBindings[n2], t2.uint32(90).fork()).ldelim();
        return null != e2.responseBody && Object.hasOwnProperty.call(e2, "responseBody") && t2.uint32(98).string(e2.responseBody), t2;
      }, h.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, h.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.api.HttpRule(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.selector = e2.string();
              break;
            case 2:
              o2.get = e2.string();
              break;
            case 3:
              o2.put = e2.string();
              break;
            case 4:
              o2.post = e2.string();
              break;
            case 5:
              o2.delete = e2.string();
              break;
            case 6:
              o2.patch = e2.string();
              break;
            case 8:
              o2.custom = l.google.api.CustomHttpPattern.decode(e2, e2.uint32());
              break;
            case 7:
              o2.body = e2.string();
              break;
            case 12:
              o2.responseBody = e2.string();
              break;
            case 11:
              o2.additionalBindings && o2.additionalBindings.length || (o2.additionalBindings = []), o2.additionalBindings.push(l.google.api.HttpRule.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, h.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, h.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        var t2 = {};
        if (null != e2.selector && e2.hasOwnProperty("selector") && !p.isString(e2.selector))
          return "selector: string expected";
        if (null != e2.get && e2.hasOwnProperty("get") && (t2.pattern = 1, !p.isString(e2.get)))
          return "get: string expected";
        if (null != e2.put && e2.hasOwnProperty("put")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !p.isString(e2.put))
            return "put: string expected";
        }
        if (null != e2.post && e2.hasOwnProperty("post")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !p.isString(e2.post))
            return "post: string expected";
        }
        if (null != e2.delete && e2.hasOwnProperty("delete")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !p.isString(e2.delete))
            return "delete: string expected";
        }
        if (null != e2.patch && e2.hasOwnProperty("patch")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !p.isString(e2.patch))
            return "patch: string expected";
        }
        if (null != e2.custom && e2.hasOwnProperty("custom")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, n2 = l.google.api.CustomHttpPattern.verify(e2.custom))
            return "custom." + n2;
        }
        if (null != e2.body && e2.hasOwnProperty("body") && !p.isString(e2.body))
          return "body: string expected";
        if (null != e2.responseBody && e2.hasOwnProperty("responseBody") && !p.isString(e2.responseBody))
          return "responseBody: string expected";
        if (null != e2.additionalBindings && e2.hasOwnProperty("additionalBindings")) {
          if (!Array.isArray(e2.additionalBindings))
            return "additionalBindings: array expected";
          for (var n2, o2 = 0; o2 < e2.additionalBindings.length; ++o2)
            if (n2 = l.google.api.HttpRule.verify(e2.additionalBindings[o2]))
              return "additionalBindings." + n2;
        }
        return null;
      }, h.fromObject = function(e2) {
        if (e2 instanceof l.google.api.HttpRule)
          return e2;
        var t2 = new l.google.api.HttpRule();
        if (null != e2.selector && (t2.selector = String(e2.selector)), null != e2.get && (t2.get = String(e2.get)), null != e2.put && (t2.put = String(e2.put)), null != e2.post && (t2.post = String(e2.post)), null != e2.delete && (t2.delete = String(e2.delete)), null != e2.patch && (t2.patch = String(e2.patch)), null != e2.custom) {
          if ("object" != typeof e2.custom)
            throw TypeError(".google.api.HttpRule.custom: object expected");
          t2.custom = l.google.api.CustomHttpPattern.fromObject(e2.custom);
        }
        if (null != e2.body && (t2.body = String(e2.body)), null != e2.responseBody && (t2.responseBody = String(e2.responseBody)), e2.additionalBindings) {
          if (!Array.isArray(e2.additionalBindings))
            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
          t2.additionalBindings = [];
          for (var n2 = 0; n2 < e2.additionalBindings.length; ++n2) {
            if ("object" != typeof e2.additionalBindings[n2])
              throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
            t2.additionalBindings[n2] = l.google.api.HttpRule.fromObject(e2.additionalBindings[n2]);
          }
        }
        return t2;
      }, h.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.additionalBindings = []), t2.defaults && (n2.selector = "", n2.body = "", n2.responseBody = ""), null != e2.selector && e2.hasOwnProperty("selector") && (n2.selector = e2.selector), null != e2.get && e2.hasOwnProperty("get") && (n2.get = e2.get, t2.oneofs) && (n2.pattern = "get"), null != e2.put && e2.hasOwnProperty("put") && (n2.put = e2.put, t2.oneofs) && (n2.pattern = "put"), null != e2.post && e2.hasOwnProperty("post") && (n2.post = e2.post, t2.oneofs) && (n2.pattern = "post"), null != e2.delete && e2.hasOwnProperty("delete") && (n2.delete = e2.delete, t2.oneofs) && (n2.pattern = "delete"), null != e2.patch && e2.hasOwnProperty("patch") && (n2.patch = e2.patch, t2.oneofs) && (n2.pattern = "patch"), null != e2.body && e2.hasOwnProperty("body") && (n2.body = e2.body), null != e2.custom && e2.hasOwnProperty("custom") && (n2.custom = l.google.api.CustomHttpPattern.toObject(e2.custom, t2), t2.oneofs) && (n2.pattern = "custom"), e2.additionalBindings && e2.additionalBindings.length) {
          n2.additionalBindings = [];
          for (var o2 = 0; o2 < e2.additionalBindings.length; ++o2)
            n2.additionalBindings[o2] = l.google.api.HttpRule.toObject(e2.additionalBindings[o2], t2);
        }
        return null != e2.responseBody && e2.hasOwnProperty("responseBody") && (n2.responseBody = e2.responseBody), n2;
      }, h.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, h), r.CustomHttpPattern = (_.prototype.kind = "", _.prototype.path = "", _.create = function(e2) {
        return new _(e2);
      }, _.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.kind && Object.hasOwnProperty.call(e2, "kind") && t2.uint32(10).string(e2.kind), null != e2.path && Object.hasOwnProperty.call(e2, "path") && t2.uint32(18).string(e2.path), t2;
      }, _.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, _.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.api.CustomHttpPattern(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.kind = e2.string();
              break;
            case 2:
              o2.path = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, _.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, _.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.kind && e2.hasOwnProperty("kind") && !p.isString(e2.kind) ? "kind: string expected" : null != e2.path && e2.hasOwnProperty("path") && !p.isString(e2.path) ? "path: string expected" : null;
      }, _.fromObject = function(e2) {
        var t2;
        return e2 instanceof l.google.api.CustomHttpPattern ? e2 : (t2 = new l.google.api.CustomHttpPattern(), null != e2.kind && (t2.kind = String(e2.kind)), null != e2.path && (t2.path = String(e2.path)), t2);
      }, _.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.kind = "", n2.path = ""), null != e2.kind && e2.hasOwnProperty("kind") && (n2.kind = e2.kind), null != e2.path && e2.hasOwnProperty("path") && (n2.path = e2.path), n2;
      }, _.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, _), r.FieldBehavior = (e = {}, (t = Object.create(e))[e[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0, t[e[1] = "OPTIONAL"] = 1, t[e[2] = "REQUIRED"] = 2, t[e[3] = "OUTPUT_ONLY"] = 3, t[e[4] = "INPUT_ONLY"] = 4, t[e[5] = "IMMUTABLE"] = 5, t), r.ResourceDescriptor = (b.prototype.type = "", b.prototype.pattern = p.emptyArray, b.prototype.nameField = "", b.prototype.history = 0, b.prototype.plural = "", b.prototype.singular = "", b.create = function(e2) {
        return new b(e2);
      }, b.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.type && Object.hasOwnProperty.call(e2, "type") && t2.uint32(10).string(e2.type), null != e2.pattern && e2.pattern.length)
          for (var n2 = 0; n2 < e2.pattern.length; ++n2)
            t2.uint32(18).string(e2.pattern[n2]);
        return null != e2.nameField && Object.hasOwnProperty.call(e2, "nameField") && t2.uint32(26).string(e2.nameField), null != e2.history && Object.hasOwnProperty.call(e2, "history") && t2.uint32(32).int32(e2.history), null != e2.plural && Object.hasOwnProperty.call(e2, "plural") && t2.uint32(42).string(e2.plural), null != e2.singular && Object.hasOwnProperty.call(e2, "singular") && t2.uint32(50).string(e2.singular), t2;
      }, b.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, b.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.api.ResourceDescriptor(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.type = e2.string();
              break;
            case 2:
              o2.pattern && o2.pattern.length || (o2.pattern = []), o2.pattern.push(e2.string());
              break;
            case 3:
              o2.nameField = e2.string();
              break;
            case 4:
              o2.history = e2.int32();
              break;
            case 5:
              o2.plural = e2.string();
              break;
            case 6:
              o2.singular = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, b.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, b.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.type && e2.hasOwnProperty("type") && !p.isString(e2.type))
          return "type: string expected";
        if (null != e2.pattern && e2.hasOwnProperty("pattern")) {
          if (!Array.isArray(e2.pattern))
            return "pattern: array expected";
          for (var t2 = 0; t2 < e2.pattern.length; ++t2)
            if (!p.isString(e2.pattern[t2]))
              return "pattern: string[] expected";
        }
        if (null != e2.nameField && e2.hasOwnProperty("nameField") && !p.isString(e2.nameField))
          return "nameField: string expected";
        if (null != e2.history && e2.hasOwnProperty("history"))
          switch (e2.history) {
            default:
              return "history: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        return null != e2.plural && e2.hasOwnProperty("plural") && !p.isString(e2.plural) ? "plural: string expected" : null != e2.singular && e2.hasOwnProperty("singular") && !p.isString(e2.singular) ? "singular: string expected" : null;
      }, b.fromObject = function(e2) {
        if (e2 instanceof l.google.api.ResourceDescriptor)
          return e2;
        var t2 = new l.google.api.ResourceDescriptor();
        if (null != e2.type && (t2.type = String(e2.type)), e2.pattern) {
          if (!Array.isArray(e2.pattern))
            throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
          t2.pattern = [];
          for (var n2 = 0; n2 < e2.pattern.length; ++n2)
            t2.pattern[n2] = String(e2.pattern[n2]);
        }
        switch (null != e2.nameField && (t2.nameField = String(e2.nameField)), e2.history) {
          case "HISTORY_UNSPECIFIED":
          case 0:
            t2.history = 0;
            break;
          case "ORIGINALLY_SINGLE_PATTERN":
          case 1:
            t2.history = 1;
            break;
          case "FUTURE_MULTI_PATTERN":
          case 2:
            t2.history = 2;
        }
        return null != e2.plural && (t2.plural = String(e2.plural)), null != e2.singular && (t2.singular = String(e2.singular)), t2;
      }, b.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.pattern = []), t2.defaults && (n2.type = "", n2.nameField = "", n2.history = t2.enums === String ? "HISTORY_UNSPECIFIED" : 0, n2.plural = "", n2.singular = ""), null != e2.type && e2.hasOwnProperty("type") && (n2.type = e2.type), e2.pattern && e2.pattern.length) {
          n2.pattern = [];
          for (var o2 = 0; o2 < e2.pattern.length; ++o2)
            n2.pattern[o2] = e2.pattern[o2];
        }
        return null != e2.nameField && e2.hasOwnProperty("nameField") && (n2.nameField = e2.nameField), null != e2.history && e2.hasOwnProperty("history") && (n2.history = t2.enums === String ? l.google.api.ResourceDescriptor.History[e2.history] : e2.history), null != e2.plural && e2.hasOwnProperty("plural") && (n2.plural = e2.plural), null != e2.singular && e2.hasOwnProperty("singular") && (n2.singular = e2.singular), n2;
      }, b.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, b.History = (e = {}, (t = Object.create(e))[e[0] = "HISTORY_UNSPECIFIED"] = 0, t[e[1] = "ORIGINALLY_SINGLE_PATTERN"] = 1, t[e[2] = "FUTURE_MULTI_PATTERN"] = 2, t), b), r.ResourceReference = (H.prototype.type = "", H.prototype.childType = "", H.create = function(e2) {
        return new H(e2);
      }, H.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.type && Object.hasOwnProperty.call(e2, "type") && t2.uint32(10).string(e2.type), null != e2.childType && Object.hasOwnProperty.call(e2, "childType") && t2.uint32(18).string(e2.childType), t2;
      }, H.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, H.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.api.ResourceReference(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.type = e2.string();
              break;
            case 2:
              o2.childType = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, H.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, H.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.type && e2.hasOwnProperty("type") && !p.isString(e2.type) ? "type: string expected" : null != e2.childType && e2.hasOwnProperty("childType") && !p.isString(e2.childType) ? "childType: string expected" : null;
      }, H.fromObject = function(e2) {
        var t2;
        return e2 instanceof l.google.api.ResourceReference ? e2 : (t2 = new l.google.api.ResourceReference(), null != e2.type && (t2.type = String(e2.type)), null != e2.childType && (t2.childType = String(e2.childType)), t2);
      }, H.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.type = "", n2.childType = ""), null != e2.type && e2.hasOwnProperty("type") && (n2.type = e2.type), null != e2.childType && e2.hasOwnProperty("childType") && (n2.childType = e2.childType), n2;
      }, H.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, H), r), F.protobuf = ((n = {}).FileDescriptorSet = (q.prototype.file = p.emptyArray, q.create = function(e2) {
        return new q(e2);
      }, q.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.file && e2.file.length)
          for (var n2 = 0; n2 < e2.file.length; ++n2)
            l.google.protobuf.FileDescriptorProto.encode(e2.file[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, q.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, q.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.FileDescriptorSet(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.file && o2.file.length || (o2.file = []), o2.file.push(l.google.protobuf.FileDescriptorProto.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, q.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, q.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.file && e2.hasOwnProperty("file")) {
          if (!Array.isArray(e2.file))
            return "file: array expected";
          for (var t2 = 0; t2 < e2.file.length; ++t2) {
            var n2 = l.google.protobuf.FileDescriptorProto.verify(e2.file[t2]);
            if (n2)
              return "file." + n2;
          }
        }
        return null;
      }, q.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.FileDescriptorSet)
          return e2;
        var t2 = new l.google.protobuf.FileDescriptorSet();
        if (e2.file) {
          if (!Array.isArray(e2.file))
            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
          t2.file = [];
          for (var n2 = 0; n2 < e2.file.length; ++n2) {
            if ("object" != typeof e2.file[n2])
              throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
            t2.file[n2] = l.google.protobuf.FileDescriptorProto.fromObject(e2.file[n2]);
          }
        }
        return t2;
      }, q.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.file = []), e2.file && e2.file.length) {
          n2.file = [];
          for (var o2 = 0; o2 < e2.file.length; ++o2)
            n2.file[o2] = l.google.protobuf.FileDescriptorProto.toObject(e2.file[o2], t2);
        }
        return n2;
      }, q.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, q), n.FileDescriptorProto = (m.prototype.name = "", m.prototype.package = "", m.prototype.dependency = p.emptyArray, m.prototype.publicDependency = p.emptyArray, m.prototype.weakDependency = p.emptyArray, m.prototype.messageType = p.emptyArray, m.prototype.enumType = p.emptyArray, m.prototype.service = p.emptyArray, m.prototype.extension = p.emptyArray, m.prototype.options = null, m.prototype.sourceCodeInfo = null, m.prototype.syntax = "", m.create = function(e2) {
        return new m(e2);
      }, m.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.package && Object.hasOwnProperty.call(e2, "package") && t2.uint32(18).string(e2.package), null != e2.dependency && e2.dependency.length)
          for (var n2 = 0; n2 < e2.dependency.length; ++n2)
            t2.uint32(26).string(e2.dependency[n2]);
        if (null != e2.messageType && e2.messageType.length)
          for (n2 = 0; n2 < e2.messageType.length; ++n2)
            l.google.protobuf.DescriptorProto.encode(e2.messageType[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.enumType && e2.enumType.length)
          for (n2 = 0; n2 < e2.enumType.length; ++n2)
            l.google.protobuf.EnumDescriptorProto.encode(e2.enumType[n2], t2.uint32(42).fork()).ldelim();
        if (null != e2.service && e2.service.length)
          for (n2 = 0; n2 < e2.service.length; ++n2)
            l.google.protobuf.ServiceDescriptorProto.encode(e2.service[n2], t2.uint32(50).fork()).ldelim();
        if (null != e2.extension && e2.extension.length)
          for (n2 = 0; n2 < e2.extension.length; ++n2)
            l.google.protobuf.FieldDescriptorProto.encode(e2.extension[n2], t2.uint32(58).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.FileOptions.encode(e2.options, t2.uint32(66).fork()).ldelim(), null != e2.sourceCodeInfo && Object.hasOwnProperty.call(e2, "sourceCodeInfo") && l.google.protobuf.SourceCodeInfo.encode(e2.sourceCodeInfo, t2.uint32(74).fork()).ldelim(), null != e2.publicDependency && e2.publicDependency.length)
          for (n2 = 0; n2 < e2.publicDependency.length; ++n2)
            t2.uint32(80).int32(e2.publicDependency[n2]);
        if (null != e2.weakDependency && e2.weakDependency.length)
          for (n2 = 0; n2 < e2.weakDependency.length; ++n2)
            t2.uint32(88).int32(e2.weakDependency[n2]);
        return null != e2.syntax && Object.hasOwnProperty.call(e2, "syntax") && t2.uint32(98).string(e2.syntax), t2;
      }, m.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, m.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.FileDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.package = e2.string();
              break;
            case 3:
              o2.dependency && o2.dependency.length || (o2.dependency = []), o2.dependency.push(e2.string());
              break;
            case 10:
              if (o2.publicDependency && o2.publicDependency.length || (o2.publicDependency = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.publicDependency.push(e2.int32());
              else
                o2.publicDependency.push(e2.int32());
              break;
            case 11:
              if (o2.weakDependency && o2.weakDependency.length || (o2.weakDependency = []), 2 == (7 & r2))
                for (i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.weakDependency.push(e2.int32());
              else
                o2.weakDependency.push(e2.int32());
              break;
            case 4:
              o2.messageType && o2.messageType.length || (o2.messageType = []), o2.messageType.push(l.google.protobuf.DescriptorProto.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.enumType && o2.enumType.length || (o2.enumType = []), o2.enumType.push(l.google.protobuf.EnumDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 6:
              o2.service && o2.service.length || (o2.service = []), o2.service.push(l.google.protobuf.ServiceDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 7:
              o2.extension && o2.extension.length || (o2.extension = []), o2.extension.push(l.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 8:
              o2.options = l.google.protobuf.FileOptions.decode(e2, e2.uint32());
              break;
            case 9:
              o2.sourceCodeInfo = l.google.protobuf.SourceCodeInfo.decode(e2, e2.uint32());
              break;
            case 12:
              o2.syntax = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, m.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, m.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.package && e2.hasOwnProperty("package") && !p.isString(e2.package))
          return "package: string expected";
        if (null != e2.dependency && e2.hasOwnProperty("dependency")) {
          if (!Array.isArray(e2.dependency))
            return "dependency: array expected";
          for (var t2 = 0; t2 < e2.dependency.length; ++t2)
            if (!p.isString(e2.dependency[t2]))
              return "dependency: string[] expected";
        }
        if (null != e2.publicDependency && e2.hasOwnProperty("publicDependency")) {
          if (!Array.isArray(e2.publicDependency))
            return "publicDependency: array expected";
          for (t2 = 0; t2 < e2.publicDependency.length; ++t2)
            if (!p.isInteger(e2.publicDependency[t2]))
              return "publicDependency: integer[] expected";
        }
        if (null != e2.weakDependency && e2.hasOwnProperty("weakDependency")) {
          if (!Array.isArray(e2.weakDependency))
            return "weakDependency: array expected";
          for (t2 = 0; t2 < e2.weakDependency.length; ++t2)
            if (!p.isInteger(e2.weakDependency[t2]))
              return "weakDependency: integer[] expected";
        }
        if (null != e2.messageType && e2.hasOwnProperty("messageType")) {
          if (!Array.isArray(e2.messageType))
            return "messageType: array expected";
          for (t2 = 0; t2 < e2.messageType.length; ++t2)
            if (n2 = l.google.protobuf.DescriptorProto.verify(e2.messageType[t2]))
              return "messageType." + n2;
        }
        if (null != e2.enumType && e2.hasOwnProperty("enumType")) {
          if (!Array.isArray(e2.enumType))
            return "enumType: array expected";
          for (t2 = 0; t2 < e2.enumType.length; ++t2)
            if (n2 = l.google.protobuf.EnumDescriptorProto.verify(e2.enumType[t2]))
              return "enumType." + n2;
        }
        if (null != e2.service && e2.hasOwnProperty("service")) {
          if (!Array.isArray(e2.service))
            return "service: array expected";
          for (t2 = 0; t2 < e2.service.length; ++t2)
            if (n2 = l.google.protobuf.ServiceDescriptorProto.verify(e2.service[t2]))
              return "service." + n2;
        }
        if (null != e2.extension && e2.hasOwnProperty("extension")) {
          if (!Array.isArray(e2.extension))
            return "extension: array expected";
          for (t2 = 0; t2 < e2.extension.length; ++t2)
            if (n2 = l.google.protobuf.FieldDescriptorProto.verify(e2.extension[t2]))
              return "extension." + n2;
        }
        var n2;
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = l.google.protobuf.FileOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.sourceCodeInfo && e2.hasOwnProperty("sourceCodeInfo") && (n2 = l.google.protobuf.SourceCodeInfo.verify(e2.sourceCodeInfo)))
          return "sourceCodeInfo." + n2;
        return null != e2.syntax && e2.hasOwnProperty("syntax") && !p.isString(e2.syntax) ? "syntax: string expected" : null;
      }, m.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.FileDescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.FileDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.package && (t2.package = String(e2.package)), e2.dependency) {
          if (!Array.isArray(e2.dependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
          t2.dependency = [];
          for (var n2 = 0; n2 < e2.dependency.length; ++n2)
            t2.dependency[n2] = String(e2.dependency[n2]);
        }
        if (e2.publicDependency) {
          if (!Array.isArray(e2.publicDependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
          t2.publicDependency = [];
          for (n2 = 0; n2 < e2.publicDependency.length; ++n2)
            t2.publicDependency[n2] = 0 | e2.publicDependency[n2];
        }
        if (e2.weakDependency) {
          if (!Array.isArray(e2.weakDependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
          t2.weakDependency = [];
          for (n2 = 0; n2 < e2.weakDependency.length; ++n2)
            t2.weakDependency[n2] = 0 | e2.weakDependency[n2];
        }
        if (e2.messageType) {
          if (!Array.isArray(e2.messageType))
            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
          t2.messageType = [];
          for (n2 = 0; n2 < e2.messageType.length; ++n2) {
            if ("object" != typeof e2.messageType[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
            t2.messageType[n2] = l.google.protobuf.DescriptorProto.fromObject(e2.messageType[n2]);
          }
        }
        if (e2.enumType) {
          if (!Array.isArray(e2.enumType))
            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
          t2.enumType = [];
          for (n2 = 0; n2 < e2.enumType.length; ++n2) {
            if ("object" != typeof e2.enumType[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
            t2.enumType[n2] = l.google.protobuf.EnumDescriptorProto.fromObject(e2.enumType[n2]);
          }
        }
        if (e2.service) {
          if (!Array.isArray(e2.service))
            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
          t2.service = [];
          for (n2 = 0; n2 < e2.service.length; ++n2) {
            if ("object" != typeof e2.service[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
            t2.service[n2] = l.google.protobuf.ServiceDescriptorProto.fromObject(e2.service[n2]);
          }
        }
        if (e2.extension) {
          if (!Array.isArray(e2.extension))
            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
          t2.extension = [];
          for (n2 = 0; n2 < e2.extension.length; ++n2) {
            if ("object" != typeof e2.extension[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
            t2.extension[n2] = l.google.protobuf.FieldDescriptorProto.fromObject(e2.extension[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
          t2.options = l.google.protobuf.FileOptions.fromObject(e2.options);
        }
        if (null != e2.sourceCodeInfo) {
          if ("object" != typeof e2.sourceCodeInfo)
            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
          t2.sourceCodeInfo = l.google.protobuf.SourceCodeInfo.fromObject(e2.sourceCodeInfo);
        }
        return null != e2.syntax && (t2.syntax = String(e2.syntax)), t2;
      }, m.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.dependency = [], n2.messageType = [], n2.enumType = [], n2.service = [], n2.extension = [], n2.publicDependency = [], n2.weakDependency = []), t2.defaults && (n2.name = "", n2.package = "", n2.options = null, n2.sourceCodeInfo = null, n2.syntax = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.package && e2.hasOwnProperty("package") && (n2.package = e2.package), e2.dependency && e2.dependency.length) {
          n2.dependency = [];
          for (var o2 = 0; o2 < e2.dependency.length; ++o2)
            n2.dependency[o2] = e2.dependency[o2];
        }
        if (e2.messageType && e2.messageType.length) {
          n2.messageType = [];
          for (o2 = 0; o2 < e2.messageType.length; ++o2)
            n2.messageType[o2] = l.google.protobuf.DescriptorProto.toObject(e2.messageType[o2], t2);
        }
        if (e2.enumType && e2.enumType.length) {
          n2.enumType = [];
          for (o2 = 0; o2 < e2.enumType.length; ++o2)
            n2.enumType[o2] = l.google.protobuf.EnumDescriptorProto.toObject(e2.enumType[o2], t2);
        }
        if (e2.service && e2.service.length) {
          n2.service = [];
          for (o2 = 0; o2 < e2.service.length; ++o2)
            n2.service[o2] = l.google.protobuf.ServiceDescriptorProto.toObject(e2.service[o2], t2);
        }
        if (e2.extension && e2.extension.length) {
          n2.extension = [];
          for (o2 = 0; o2 < e2.extension.length; ++o2)
            n2.extension[o2] = l.google.protobuf.FieldDescriptorProto.toObject(e2.extension[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.FileOptions.toObject(e2.options, t2)), null != e2.sourceCodeInfo && e2.hasOwnProperty("sourceCodeInfo") && (n2.sourceCodeInfo = l.google.protobuf.SourceCodeInfo.toObject(e2.sourceCodeInfo, t2)), e2.publicDependency && e2.publicDependency.length) {
          n2.publicDependency = [];
          for (o2 = 0; o2 < e2.publicDependency.length; ++o2)
            n2.publicDependency[o2] = e2.publicDependency[o2];
        }
        if (e2.weakDependency && e2.weakDependency.length) {
          n2.weakDependency = [];
          for (o2 = 0; o2 < e2.weakDependency.length; ++o2)
            n2.weakDependency[o2] = e2.weakDependency[o2];
        }
        return null != e2.syntax && e2.hasOwnProperty("syntax") && (n2.syntax = e2.syntax), n2;
      }, m.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, m), n.DescriptorProto = (O.prototype.name = "", O.prototype.field = p.emptyArray, O.prototype.extension = p.emptyArray, O.prototype.nestedType = p.emptyArray, O.prototype.enumType = p.emptyArray, O.prototype.extensionRange = p.emptyArray, O.prototype.oneofDecl = p.emptyArray, O.prototype.options = null, O.prototype.reservedRange = p.emptyArray, O.prototype.reservedName = p.emptyArray, O.create = function(e2) {
        return new O(e2);
      }, O.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.field && e2.field.length)
          for (var n2 = 0; n2 < e2.field.length; ++n2)
            l.google.protobuf.FieldDescriptorProto.encode(e2.field[n2], t2.uint32(18).fork()).ldelim();
        if (null != e2.nestedType && e2.nestedType.length)
          for (n2 = 0; n2 < e2.nestedType.length; ++n2)
            l.google.protobuf.DescriptorProto.encode(e2.nestedType[n2], t2.uint32(26).fork()).ldelim();
        if (null != e2.enumType && e2.enumType.length)
          for (n2 = 0; n2 < e2.enumType.length; ++n2)
            l.google.protobuf.EnumDescriptorProto.encode(e2.enumType[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.extensionRange && e2.extensionRange.length)
          for (n2 = 0; n2 < e2.extensionRange.length; ++n2)
            l.google.protobuf.DescriptorProto.ExtensionRange.encode(e2.extensionRange[n2], t2.uint32(42).fork()).ldelim();
        if (null != e2.extension && e2.extension.length)
          for (n2 = 0; n2 < e2.extension.length; ++n2)
            l.google.protobuf.FieldDescriptorProto.encode(e2.extension[n2], t2.uint32(50).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.MessageOptions.encode(e2.options, t2.uint32(58).fork()).ldelim(), null != e2.oneofDecl && e2.oneofDecl.length)
          for (n2 = 0; n2 < e2.oneofDecl.length; ++n2)
            l.google.protobuf.OneofDescriptorProto.encode(e2.oneofDecl[n2], t2.uint32(66).fork()).ldelim();
        if (null != e2.reservedRange && e2.reservedRange.length)
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2)
            l.google.protobuf.DescriptorProto.ReservedRange.encode(e2.reservedRange[n2], t2.uint32(74).fork()).ldelim();
        if (null != e2.reservedName && e2.reservedName.length)
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.uint32(82).string(e2.reservedName[n2]);
        return t2;
      }, O.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, O.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.DescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.field && o2.field.length || (o2.field = []), o2.field.push(l.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 6:
              o2.extension && o2.extension.length || (o2.extension = []), o2.extension.push(l.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.nestedType && o2.nestedType.length || (o2.nestedType = []), o2.nestedType.push(l.google.protobuf.DescriptorProto.decode(e2, e2.uint32()));
              break;
            case 4:
              o2.enumType && o2.enumType.length || (o2.enumType = []), o2.enumType.push(l.google.protobuf.EnumDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.extensionRange && o2.extensionRange.length || (o2.extensionRange = []), o2.extensionRange.push(l.google.protobuf.DescriptorProto.ExtensionRange.decode(e2, e2.uint32()));
              break;
            case 8:
              o2.oneofDecl && o2.oneofDecl.length || (o2.oneofDecl = []), o2.oneofDecl.push(l.google.protobuf.OneofDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 7:
              o2.options = l.google.protobuf.MessageOptions.decode(e2, e2.uint32());
              break;
            case 9:
              o2.reservedRange && o2.reservedRange.length || (o2.reservedRange = []), o2.reservedRange.push(l.google.protobuf.DescriptorProto.ReservedRange.decode(e2, e2.uint32()));
              break;
            case 10:
              o2.reservedName && o2.reservedName.length || (o2.reservedName = []), o2.reservedName.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, O.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, O.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.field && e2.hasOwnProperty("field")) {
          if (!Array.isArray(e2.field))
            return "field: array expected";
          for (var t2 = 0; t2 < e2.field.length; ++t2)
            if (n2 = l.google.protobuf.FieldDescriptorProto.verify(e2.field[t2]))
              return "field." + n2;
        }
        if (null != e2.extension && e2.hasOwnProperty("extension")) {
          if (!Array.isArray(e2.extension))
            return "extension: array expected";
          for (t2 = 0; t2 < e2.extension.length; ++t2)
            if (n2 = l.google.protobuf.FieldDescriptorProto.verify(e2.extension[t2]))
              return "extension." + n2;
        }
        if (null != e2.nestedType && e2.hasOwnProperty("nestedType")) {
          if (!Array.isArray(e2.nestedType))
            return "nestedType: array expected";
          for (t2 = 0; t2 < e2.nestedType.length; ++t2)
            if (n2 = l.google.protobuf.DescriptorProto.verify(e2.nestedType[t2]))
              return "nestedType." + n2;
        }
        if (null != e2.enumType && e2.hasOwnProperty("enumType")) {
          if (!Array.isArray(e2.enumType))
            return "enumType: array expected";
          for (t2 = 0; t2 < e2.enumType.length; ++t2)
            if (n2 = l.google.protobuf.EnumDescriptorProto.verify(e2.enumType[t2]))
              return "enumType." + n2;
        }
        if (null != e2.extensionRange && e2.hasOwnProperty("extensionRange")) {
          if (!Array.isArray(e2.extensionRange))
            return "extensionRange: array expected";
          for (t2 = 0; t2 < e2.extensionRange.length; ++t2)
            if (n2 = l.google.protobuf.DescriptorProto.ExtensionRange.verify(e2.extensionRange[t2]))
              return "extensionRange." + n2;
        }
        if (null != e2.oneofDecl && e2.hasOwnProperty("oneofDecl")) {
          if (!Array.isArray(e2.oneofDecl))
            return "oneofDecl: array expected";
          for (t2 = 0; t2 < e2.oneofDecl.length; ++t2)
            if (n2 = l.google.protobuf.OneofDescriptorProto.verify(e2.oneofDecl[t2]))
              return "oneofDecl." + n2;
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = l.google.protobuf.MessageOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.reservedRange && e2.hasOwnProperty("reservedRange")) {
          if (!Array.isArray(e2.reservedRange))
            return "reservedRange: array expected";
          for (var n2, t2 = 0; t2 < e2.reservedRange.length; ++t2)
            if (n2 = l.google.protobuf.DescriptorProto.ReservedRange.verify(e2.reservedRange[t2]))
              return "reservedRange." + n2;
        }
        if (null != e2.reservedName && e2.hasOwnProperty("reservedName")) {
          if (!Array.isArray(e2.reservedName))
            return "reservedName: array expected";
          for (t2 = 0; t2 < e2.reservedName.length; ++t2)
            if (!p.isString(e2.reservedName[t2]))
              return "reservedName: string[] expected";
        }
        return null;
      }, O.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.DescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.DescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.field) {
          if (!Array.isArray(e2.field))
            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
          t2.field = [];
          for (var n2 = 0; n2 < e2.field.length; ++n2) {
            if ("object" != typeof e2.field[n2])
              throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
            t2.field[n2] = l.google.protobuf.FieldDescriptorProto.fromObject(e2.field[n2]);
          }
        }
        if (e2.extension) {
          if (!Array.isArray(e2.extension))
            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
          t2.extension = [];
          for (n2 = 0; n2 < e2.extension.length; ++n2) {
            if ("object" != typeof e2.extension[n2])
              throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
            t2.extension[n2] = l.google.protobuf.FieldDescriptorProto.fromObject(e2.extension[n2]);
          }
        }
        if (e2.nestedType) {
          if (!Array.isArray(e2.nestedType))
            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
          t2.nestedType = [];
          for (n2 = 0; n2 < e2.nestedType.length; ++n2) {
            if ("object" != typeof e2.nestedType[n2])
              throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
            t2.nestedType[n2] = l.google.protobuf.DescriptorProto.fromObject(e2.nestedType[n2]);
          }
        }
        if (e2.enumType) {
          if (!Array.isArray(e2.enumType))
            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
          t2.enumType = [];
          for (n2 = 0; n2 < e2.enumType.length; ++n2) {
            if ("object" != typeof e2.enumType[n2])
              throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
            t2.enumType[n2] = l.google.protobuf.EnumDescriptorProto.fromObject(e2.enumType[n2]);
          }
        }
        if (e2.extensionRange) {
          if (!Array.isArray(e2.extensionRange))
            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
          t2.extensionRange = [];
          for (n2 = 0; n2 < e2.extensionRange.length; ++n2) {
            if ("object" != typeof e2.extensionRange[n2])
              throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
            t2.extensionRange[n2] = l.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e2.extensionRange[n2]);
          }
        }
        if (e2.oneofDecl) {
          if (!Array.isArray(e2.oneofDecl))
            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
          t2.oneofDecl = [];
          for (n2 = 0; n2 < e2.oneofDecl.length; ++n2) {
            if ("object" != typeof e2.oneofDecl[n2])
              throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
            t2.oneofDecl[n2] = l.google.protobuf.OneofDescriptorProto.fromObject(e2.oneofDecl[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
          t2.options = l.google.protobuf.MessageOptions.fromObject(e2.options);
        }
        if (e2.reservedRange) {
          if (!Array.isArray(e2.reservedRange))
            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
          t2.reservedRange = [];
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2) {
            if ("object" != typeof e2.reservedRange[n2])
              throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
            t2.reservedRange[n2] = l.google.protobuf.DescriptorProto.ReservedRange.fromObject(e2.reservedRange[n2]);
          }
        }
        if (e2.reservedName) {
          if (!Array.isArray(e2.reservedName))
            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
          t2.reservedName = [];
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.reservedName[n2] = String(e2.reservedName[n2]);
        }
        return t2;
      }, O.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.field = [], n2.nestedType = [], n2.enumType = [], n2.extensionRange = [], n2.extension = [], n2.oneofDecl = [], n2.reservedRange = [], n2.reservedName = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.field && e2.field.length) {
          n2.field = [];
          for (var o2 = 0; o2 < e2.field.length; ++o2)
            n2.field[o2] = l.google.protobuf.FieldDescriptorProto.toObject(e2.field[o2], t2);
        }
        if (e2.nestedType && e2.nestedType.length) {
          n2.nestedType = [];
          for (o2 = 0; o2 < e2.nestedType.length; ++o2)
            n2.nestedType[o2] = l.google.protobuf.DescriptorProto.toObject(e2.nestedType[o2], t2);
        }
        if (e2.enumType && e2.enumType.length) {
          n2.enumType = [];
          for (o2 = 0; o2 < e2.enumType.length; ++o2)
            n2.enumType[o2] = l.google.protobuf.EnumDescriptorProto.toObject(e2.enumType[o2], t2);
        }
        if (e2.extensionRange && e2.extensionRange.length) {
          n2.extensionRange = [];
          for (o2 = 0; o2 < e2.extensionRange.length; ++o2)
            n2.extensionRange[o2] = l.google.protobuf.DescriptorProto.ExtensionRange.toObject(e2.extensionRange[o2], t2);
        }
        if (e2.extension && e2.extension.length) {
          n2.extension = [];
          for (o2 = 0; o2 < e2.extension.length; ++o2)
            n2.extension[o2] = l.google.protobuf.FieldDescriptorProto.toObject(e2.extension[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.MessageOptions.toObject(e2.options, t2)), e2.oneofDecl && e2.oneofDecl.length) {
          n2.oneofDecl = [];
          for (o2 = 0; o2 < e2.oneofDecl.length; ++o2)
            n2.oneofDecl[o2] = l.google.protobuf.OneofDescriptorProto.toObject(e2.oneofDecl[o2], t2);
        }
        if (e2.reservedRange && e2.reservedRange.length) {
          n2.reservedRange = [];
          for (o2 = 0; o2 < e2.reservedRange.length; ++o2)
            n2.reservedRange[o2] = l.google.protobuf.DescriptorProto.ReservedRange.toObject(e2.reservedRange[o2], t2);
        }
        if (e2.reservedName && e2.reservedName.length) {
          n2.reservedName = [];
          for (o2 = 0; o2 < e2.reservedName.length; ++o2)
            n2.reservedName[o2] = e2.reservedName[o2];
        }
        return n2;
      }, O.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, O.ExtensionRange = (v.prototype.start = 0, v.prototype.end = 0, v.prototype.options = null, v.create = function(e2) {
        return new v(e2);
      }, v.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.ExtensionRangeOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, v.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, v.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.DescriptorProto.ExtensionRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            case 3:
              o2.options = l.google.protobuf.ExtensionRangeOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, v.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, v.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.start && e2.hasOwnProperty("start") && !p.isInteger(e2.start))
          return "start: integer expected";
        if (null != e2.end && e2.hasOwnProperty("end") && !p.isInteger(e2.end))
          return "end: integer expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = l.google.protobuf.ExtensionRangeOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, v.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.DescriptorProto.ExtensionRange)
          return e2;
        var t2 = new l.google.protobuf.DescriptorProto.ExtensionRange();
        if (null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
          t2.options = l.google.protobuf.ExtensionRangeOptions.fromObject(e2.options);
        }
        return t2;
      }, v.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0, n2.options = null), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.ExtensionRangeOptions.toObject(e2.options, t2)), n2;
      }, v.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, v), O.ReservedRange = (Y.prototype.start = 0, Y.prototype.end = 0, Y.create = function(e2) {
        return new Y(e2);
      }, Y.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), t2;
      }, Y.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, Y.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.DescriptorProto.ReservedRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, Y.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, Y.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.start && e2.hasOwnProperty("start") && !p.isInteger(e2.start) ? "start: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !p.isInteger(e2.end) ? "end: integer expected" : null;
      }, Y.fromObject = function(e2) {
        var t2;
        return e2 instanceof l.google.protobuf.DescriptorProto.ReservedRange ? e2 : (t2 = new l.google.protobuf.DescriptorProto.ReservedRange(), null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), t2);
      }, Y.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, Y.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, Y), O), n.ExtensionRangeOptions = (z.prototype.uninterpretedOption = p.emptyArray, z.create = function(e2) {
        return new z(e2);
      }, z.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, z.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, z.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.ExtensionRangeOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 999 ? (o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, z.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, z.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, z.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.ExtensionRangeOptions)
          return e2;
        var t2 = new l.google.protobuf.ExtensionRangeOptions();
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, z.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, z.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, z), n.FieldDescriptorProto = (P.prototype.name = "", P.prototype.number = 0, P.prototype.label = 1, P.prototype.type = 1, P.prototype.typeName = "", P.prototype.extendee = "", P.prototype.defaultValue = "", P.prototype.oneofIndex = 0, P.prototype.jsonName = "", P.prototype.options = null, P.prototype.proto3Optional = false, P.create = function(e2) {
        return new P(e2);
      }, P.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.extendee && Object.hasOwnProperty.call(e2, "extendee") && t2.uint32(18).string(e2.extendee), null != e2.number && Object.hasOwnProperty.call(e2, "number") && t2.uint32(24).int32(e2.number), null != e2.label && Object.hasOwnProperty.call(e2, "label") && t2.uint32(32).int32(e2.label), null != e2.type && Object.hasOwnProperty.call(e2, "type") && t2.uint32(40).int32(e2.type), null != e2.typeName && Object.hasOwnProperty.call(e2, "typeName") && t2.uint32(50).string(e2.typeName), null != e2.defaultValue && Object.hasOwnProperty.call(e2, "defaultValue") && t2.uint32(58).string(e2.defaultValue), null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.FieldOptions.encode(e2.options, t2.uint32(66).fork()).ldelim(), null != e2.oneofIndex && Object.hasOwnProperty.call(e2, "oneofIndex") && t2.uint32(72).int32(e2.oneofIndex), null != e2.jsonName && Object.hasOwnProperty.call(e2, "jsonName") && t2.uint32(82).string(e2.jsonName), null != e2.proto3Optional && Object.hasOwnProperty.call(e2, "proto3Optional") && t2.uint32(136).bool(e2.proto3Optional), t2;
      }, P.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, P.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.FieldDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 3:
              o2.number = e2.int32();
              break;
            case 4:
              o2.label = e2.int32();
              break;
            case 5:
              o2.type = e2.int32();
              break;
            case 6:
              o2.typeName = e2.string();
              break;
            case 2:
              o2.extendee = e2.string();
              break;
            case 7:
              o2.defaultValue = e2.string();
              break;
            case 9:
              o2.oneofIndex = e2.int32();
              break;
            case 10:
              o2.jsonName = e2.string();
              break;
            case 8:
              o2.options = l.google.protobuf.FieldOptions.decode(e2, e2.uint32());
              break;
            case 17:
              o2.proto3Optional = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, P.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, P.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.number && e2.hasOwnProperty("number") && !p.isInteger(e2.number))
          return "number: integer expected";
        if (null != e2.label && e2.hasOwnProperty("label"))
          switch (e2.label) {
            default:
              return "label: enum value expected";
            case 1:
            case 2:
            case 3:
          }
        if (null != e2.type && e2.hasOwnProperty("type"))
          switch (e2.type) {
            default:
              return "type: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
          }
        if (null != e2.typeName && e2.hasOwnProperty("typeName") && !p.isString(e2.typeName))
          return "typeName: string expected";
        if (null != e2.extendee && e2.hasOwnProperty("extendee") && !p.isString(e2.extendee))
          return "extendee: string expected";
        if (null != e2.defaultValue && e2.hasOwnProperty("defaultValue") && !p.isString(e2.defaultValue))
          return "defaultValue: string expected";
        if (null != e2.oneofIndex && e2.hasOwnProperty("oneofIndex") && !p.isInteger(e2.oneofIndex))
          return "oneofIndex: integer expected";
        if (null != e2.jsonName && e2.hasOwnProperty("jsonName") && !p.isString(e2.jsonName))
          return "jsonName: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          var t2 = l.google.protobuf.FieldOptions.verify(e2.options);
          if (t2)
            return "options." + t2;
        }
        return null != e2.proto3Optional && e2.hasOwnProperty("proto3Optional") && "boolean" != typeof e2.proto3Optional ? "proto3Optional: boolean expected" : null;
      }, P.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.FieldDescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.FieldDescriptorProto();
        switch (null != e2.name && (t2.name = String(e2.name)), null != e2.number && (t2.number = 0 | e2.number), e2.label) {
          case "LABEL_OPTIONAL":
          case 1:
            t2.label = 1;
            break;
          case "LABEL_REQUIRED":
          case 2:
            t2.label = 2;
            break;
          case "LABEL_REPEATED":
          case 3:
            t2.label = 3;
        }
        switch (e2.type) {
          case "TYPE_DOUBLE":
          case 1:
            t2.type = 1;
            break;
          case "TYPE_FLOAT":
          case 2:
            t2.type = 2;
            break;
          case "TYPE_INT64":
          case 3:
            t2.type = 3;
            break;
          case "TYPE_UINT64":
          case 4:
            t2.type = 4;
            break;
          case "TYPE_INT32":
          case 5:
            t2.type = 5;
            break;
          case "TYPE_FIXED64":
          case 6:
            t2.type = 6;
            break;
          case "TYPE_FIXED32":
          case 7:
            t2.type = 7;
            break;
          case "TYPE_BOOL":
          case 8:
            t2.type = 8;
            break;
          case "TYPE_STRING":
          case 9:
            t2.type = 9;
            break;
          case "TYPE_GROUP":
          case 10:
            t2.type = 10;
            break;
          case "TYPE_MESSAGE":
          case 11:
            t2.type = 11;
            break;
          case "TYPE_BYTES":
          case 12:
            t2.type = 12;
            break;
          case "TYPE_UINT32":
          case 13:
            t2.type = 13;
            break;
          case "TYPE_ENUM":
          case 14:
            t2.type = 14;
            break;
          case "TYPE_SFIXED32":
          case 15:
            t2.type = 15;
            break;
          case "TYPE_SFIXED64":
          case 16:
            t2.type = 16;
            break;
          case "TYPE_SINT32":
          case 17:
            t2.type = 17;
            break;
          case "TYPE_SINT64":
          case 18:
            t2.type = 18;
        }
        if (null != e2.typeName && (t2.typeName = String(e2.typeName)), null != e2.extendee && (t2.extendee = String(e2.extendee)), null != e2.defaultValue && (t2.defaultValue = String(e2.defaultValue)), null != e2.oneofIndex && (t2.oneofIndex = 0 | e2.oneofIndex), null != e2.jsonName && (t2.jsonName = String(e2.jsonName)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
          t2.options = l.google.protobuf.FieldOptions.fromObject(e2.options);
        }
        return null != e2.proto3Optional && (t2.proto3Optional = Boolean(e2.proto3Optional)), t2;
      }, P.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.extendee = "", n2.number = 0, n2.label = t2.enums === String ? "LABEL_OPTIONAL" : 1, n2.type = t2.enums === String ? "TYPE_DOUBLE" : 1, n2.typeName = "", n2.defaultValue = "", n2.options = null, n2.oneofIndex = 0, n2.jsonName = "", n2.proto3Optional = false), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.extendee && e2.hasOwnProperty("extendee") && (n2.extendee = e2.extendee), null != e2.number && e2.hasOwnProperty("number") && (n2.number = e2.number), null != e2.label && e2.hasOwnProperty("label") && (n2.label = t2.enums === String ? l.google.protobuf.FieldDescriptorProto.Label[e2.label] : e2.label), null != e2.type && e2.hasOwnProperty("type") && (n2.type = t2.enums === String ? l.google.protobuf.FieldDescriptorProto.Type[e2.type] : e2.type), null != e2.typeName && e2.hasOwnProperty("typeName") && (n2.typeName = e2.typeName), null != e2.defaultValue && e2.hasOwnProperty("defaultValue") && (n2.defaultValue = e2.defaultValue), null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.FieldOptions.toObject(e2.options, t2)), null != e2.oneofIndex && e2.hasOwnProperty("oneofIndex") && (n2.oneofIndex = e2.oneofIndex), null != e2.jsonName && e2.hasOwnProperty("jsonName") && (n2.jsonName = e2.jsonName), null != e2.proto3Optional && e2.hasOwnProperty("proto3Optional") && (n2.proto3Optional = e2.proto3Optional), n2;
      }, P.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, P.Type = (e = {}, (t = Object.create(e))[e[1] = "TYPE_DOUBLE"] = 1, t[e[2] = "TYPE_FLOAT"] = 2, t[e[3] = "TYPE_INT64"] = 3, t[e[4] = "TYPE_UINT64"] = 4, t[e[5] = "TYPE_INT32"] = 5, t[e[6] = "TYPE_FIXED64"] = 6, t[e[7] = "TYPE_FIXED32"] = 7, t[e[8] = "TYPE_BOOL"] = 8, t[e[9] = "TYPE_STRING"] = 9, t[e[10] = "TYPE_GROUP"] = 10, t[e[11] = "TYPE_MESSAGE"] = 11, t[e[12] = "TYPE_BYTES"] = 12, t[e[13] = "TYPE_UINT32"] = 13, t[e[14] = "TYPE_ENUM"] = 14, t[e[15] = "TYPE_SFIXED32"] = 15, t[e[16] = "TYPE_SFIXED64"] = 16, t[e[17] = "TYPE_SINT32"] = 17, t[e[18] = "TYPE_SINT64"] = 18, t), P.Label = (e = {}, (t = Object.create(e))[e[1] = "LABEL_OPTIONAL"] = 1, t[e[2] = "LABEL_REQUIRED"] = 2, t[e[3] = "LABEL_REPEATED"] = 3, t), P), n.OneofDescriptorProto = (W.prototype.name = "", W.prototype.options = null, W.create = function(e2) {
        return new W(e2);
      }, W.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.OneofOptions.encode(e2.options, t2.uint32(18).fork()).ldelim(), t2;
      }, W.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, W.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.OneofDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.options = l.google.protobuf.OneofOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, W.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, W.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = l.google.protobuf.OneofOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, W.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.OneofDescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.OneofDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
          t2.options = l.google.protobuf.OneofOptions.fromObject(e2.options);
        }
        return t2;
      }, W.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.OneofOptions.toObject(e2.options, t2)), n2;
      }, W.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, W), n.EnumDescriptorProto = (w.prototype.name = "", w.prototype.value = p.emptyArray, w.prototype.options = null, w.prototype.reservedRange = p.emptyArray, w.prototype.reservedName = p.emptyArray, w.create = function(e2) {
        return new w(e2);
      }, w.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.value && e2.value.length)
          for (var n2 = 0; n2 < e2.value.length; ++n2)
            l.google.protobuf.EnumValueDescriptorProto.encode(e2.value[n2], t2.uint32(18).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.EnumOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), null != e2.reservedRange && e2.reservedRange.length)
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2)
            l.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e2.reservedRange[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.reservedName && e2.reservedName.length)
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.uint32(42).string(e2.reservedName[n2]);
        return t2;
      }, w.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, w.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.EnumDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.value && o2.value.length || (o2.value = []), o2.value.push(l.google.protobuf.EnumValueDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.options = l.google.protobuf.EnumOptions.decode(e2, e2.uint32());
              break;
            case 4:
              o2.reservedRange && o2.reservedRange.length || (o2.reservedRange = []), o2.reservedRange.push(l.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.reservedName && o2.reservedName.length || (o2.reservedName = []), o2.reservedName.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, w.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, w.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.value && e2.hasOwnProperty("value")) {
          if (!Array.isArray(e2.value))
            return "value: array expected";
          for (var t2 = 0; t2 < e2.value.length; ++t2)
            if (n2 = l.google.protobuf.EnumValueDescriptorProto.verify(e2.value[t2]))
              return "value." + n2;
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = l.google.protobuf.EnumOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.reservedRange && e2.hasOwnProperty("reservedRange")) {
          if (!Array.isArray(e2.reservedRange))
            return "reservedRange: array expected";
          for (var n2, t2 = 0; t2 < e2.reservedRange.length; ++t2)
            if (n2 = l.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e2.reservedRange[t2]))
              return "reservedRange." + n2;
        }
        if (null != e2.reservedName && e2.hasOwnProperty("reservedName")) {
          if (!Array.isArray(e2.reservedName))
            return "reservedName: array expected";
          for (t2 = 0; t2 < e2.reservedName.length; ++t2)
            if (!p.isString(e2.reservedName[t2]))
              return "reservedName: string[] expected";
        }
        return null;
      }, w.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.EnumDescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.EnumDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.value) {
          if (!Array.isArray(e2.value))
            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
          t2.value = [];
          for (var n2 = 0; n2 < e2.value.length; ++n2) {
            if ("object" != typeof e2.value[n2])
              throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
            t2.value[n2] = l.google.protobuf.EnumValueDescriptorProto.fromObject(e2.value[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
          t2.options = l.google.protobuf.EnumOptions.fromObject(e2.options);
        }
        if (e2.reservedRange) {
          if (!Array.isArray(e2.reservedRange))
            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
          t2.reservedRange = [];
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2) {
            if ("object" != typeof e2.reservedRange[n2])
              throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
            t2.reservedRange[n2] = l.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e2.reservedRange[n2]);
          }
        }
        if (e2.reservedName) {
          if (!Array.isArray(e2.reservedName))
            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
          t2.reservedName = [];
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.reservedName[n2] = String(e2.reservedName[n2]);
        }
        return t2;
      }, w.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.value = [], n2.reservedRange = [], n2.reservedName = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.value && e2.value.length) {
          n2.value = [];
          for (var o2 = 0; o2 < e2.value.length; ++o2)
            n2.value[o2] = l.google.protobuf.EnumValueDescriptorProto.toObject(e2.value[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.EnumOptions.toObject(e2.options, t2)), e2.reservedRange && e2.reservedRange.length) {
          n2.reservedRange = [];
          for (o2 = 0; o2 < e2.reservedRange.length; ++o2)
            n2.reservedRange[o2] = l.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e2.reservedRange[o2], t2);
        }
        if (e2.reservedName && e2.reservedName.length) {
          n2.reservedName = [];
          for (o2 = 0; o2 < e2.reservedName.length; ++o2)
            n2.reservedName[o2] = e2.reservedName[o2];
        }
        return n2;
      }, w.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, w.EnumReservedRange = (X.prototype.start = 0, X.prototype.end = 0, X.create = function(e2) {
        return new X(e2);
      }, X.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), t2;
      }, X.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, X.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.EnumDescriptorProto.EnumReservedRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, X.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, X.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.start && e2.hasOwnProperty("start") && !p.isInteger(e2.start) ? "start: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !p.isInteger(e2.end) ? "end: integer expected" : null;
      }, X.fromObject = function(e2) {
        var t2;
        return e2 instanceof l.google.protobuf.EnumDescriptorProto.EnumReservedRange ? e2 : (t2 = new l.google.protobuf.EnumDescriptorProto.EnumReservedRange(), null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), t2);
      }, X.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, X.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, X), w), n.EnumValueDescriptorProto = (j.prototype.name = "", j.prototype.number = 0, j.prototype.options = null, j.create = function(e2) {
        return new j(e2);
      }, j.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.number && Object.hasOwnProperty.call(e2, "number") && t2.uint32(16).int32(e2.number), null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.EnumValueOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, j.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, j.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.EnumValueDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.number = e2.int32();
              break;
            case 3:
              o2.options = l.google.protobuf.EnumValueOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, j.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, j.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.number && e2.hasOwnProperty("number") && !p.isInteger(e2.number))
          return "number: integer expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = l.google.protobuf.EnumValueOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, j.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.EnumValueDescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.EnumValueDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.number && (t2.number = 0 | e2.number), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
          t2.options = l.google.protobuf.EnumValueOptions.fromObject(e2.options);
        }
        return t2;
      }, j.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.number = 0, n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.number && e2.hasOwnProperty("number") && (n2.number = e2.number), null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.EnumValueOptions.toObject(e2.options, t2)), n2;
      }, j.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, j), n.ServiceDescriptorProto = (D.prototype.name = "", D.prototype.method = p.emptyArray, D.prototype.options = null, D.create = function(e2) {
        return new D(e2);
      }, D.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.method && e2.method.length)
          for (var n2 = 0; n2 < e2.method.length; ++n2)
            l.google.protobuf.MethodDescriptorProto.encode(e2.method[n2], t2.uint32(18).fork()).ldelim();
        return null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.ServiceOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, D.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, D.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.ServiceDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.method && o2.method.length || (o2.method = []), o2.method.push(l.google.protobuf.MethodDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.options = l.google.protobuf.ServiceOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, D.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, D.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.method && e2.hasOwnProperty("method")) {
          if (!Array.isArray(e2.method))
            return "method: array expected";
          for (var t2 = 0; t2 < e2.method.length; ++t2)
            if (n2 = l.google.protobuf.MethodDescriptorProto.verify(e2.method[t2]))
              return "method." + n2;
        }
        var n2;
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = l.google.protobuf.ServiceOptions.verify(e2.options)))
          return "options." + n2;
        return null;
      }, D.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.ServiceDescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.ServiceDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.method) {
          if (!Array.isArray(e2.method))
            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
          t2.method = [];
          for (var n2 = 0; n2 < e2.method.length; ++n2) {
            if ("object" != typeof e2.method[n2])
              throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
            t2.method[n2] = l.google.protobuf.MethodDescriptorProto.fromObject(e2.method[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
          t2.options = l.google.protobuf.ServiceOptions.fromObject(e2.options);
        }
        return t2;
      }, D.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.method = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.method && e2.method.length) {
          n2.method = [];
          for (var o2 = 0; o2 < e2.method.length; ++o2)
            n2.method[o2] = l.google.protobuf.MethodDescriptorProto.toObject(e2.method[o2], t2);
        }
        return null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.ServiceOptions.toObject(e2.options, t2)), n2;
      }, D.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, D), n.MethodDescriptorProto = (x.prototype.name = "", x.prototype.inputType = "", x.prototype.outputType = "", x.prototype.options = null, x.prototype.clientStreaming = false, x.prototype.serverStreaming = false, x.create = function(e2) {
        return new x(e2);
      }, x.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.inputType && Object.hasOwnProperty.call(e2, "inputType") && t2.uint32(18).string(e2.inputType), null != e2.outputType && Object.hasOwnProperty.call(e2, "outputType") && t2.uint32(26).string(e2.outputType), null != e2.options && Object.hasOwnProperty.call(e2, "options") && l.google.protobuf.MethodOptions.encode(e2.options, t2.uint32(34).fork()).ldelim(), null != e2.clientStreaming && Object.hasOwnProperty.call(e2, "clientStreaming") && t2.uint32(40).bool(e2.clientStreaming), null != e2.serverStreaming && Object.hasOwnProperty.call(e2, "serverStreaming") && t2.uint32(48).bool(e2.serverStreaming), t2;
      }, x.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, x.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.MethodDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.inputType = e2.string();
              break;
            case 3:
              o2.outputType = e2.string();
              break;
            case 4:
              o2.options = l.google.protobuf.MethodOptions.decode(e2, e2.uint32());
              break;
            case 5:
              o2.clientStreaming = e2.bool();
              break;
            case 6:
              o2.serverStreaming = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, x.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, x.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !p.isString(e2.name))
          return "name: string expected";
        if (null != e2.inputType && e2.hasOwnProperty("inputType") && !p.isString(e2.inputType))
          return "inputType: string expected";
        if (null != e2.outputType && e2.hasOwnProperty("outputType") && !p.isString(e2.outputType))
          return "outputType: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          var t2 = l.google.protobuf.MethodOptions.verify(e2.options);
          if (t2)
            return "options." + t2;
        }
        return null != e2.clientStreaming && e2.hasOwnProperty("clientStreaming") && "boolean" != typeof e2.clientStreaming ? "clientStreaming: boolean expected" : null != e2.serverStreaming && e2.hasOwnProperty("serverStreaming") && "boolean" != typeof e2.serverStreaming ? "serverStreaming: boolean expected" : null;
      }, x.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.MethodDescriptorProto)
          return e2;
        var t2 = new l.google.protobuf.MethodDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.inputType && (t2.inputType = String(e2.inputType)), null != e2.outputType && (t2.outputType = String(e2.outputType)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
          t2.options = l.google.protobuf.MethodOptions.fromObject(e2.options);
        }
        return null != e2.clientStreaming && (t2.clientStreaming = Boolean(e2.clientStreaming)), null != e2.serverStreaming && (t2.serverStreaming = Boolean(e2.serverStreaming)), t2;
      }, x.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.inputType = "", n2.outputType = "", n2.options = null, n2.clientStreaming = false, n2.serverStreaming = false), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.inputType && e2.hasOwnProperty("inputType") && (n2.inputType = e2.inputType), null != e2.outputType && e2.hasOwnProperty("outputType") && (n2.outputType = e2.outputType), null != e2.options && e2.hasOwnProperty("options") && (n2.options = l.google.protobuf.MethodOptions.toObject(e2.options, t2)), null != e2.clientStreaming && e2.hasOwnProperty("clientStreaming") && (n2.clientStreaming = e2.clientStreaming), null != e2.serverStreaming && e2.hasOwnProperty("serverStreaming") && (n2.serverStreaming = e2.serverStreaming), n2;
      }, x.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, x), n.FileOptions = (S.prototype.javaPackage = "", S.prototype.javaOuterClassname = "", S.prototype.javaMultipleFiles = false, S.prototype.javaGenerateEqualsAndHash = false, S.prototype.javaStringCheckUtf8 = false, S.prototype.optimizeFor = 1, S.prototype.goPackage = "", S.prototype.ccGenericServices = false, S.prototype.javaGenericServices = false, S.prototype.pyGenericServices = false, S.prototype.phpGenericServices = false, S.prototype.deprecated = false, S.prototype.ccEnableArenas = true, S.prototype.objcClassPrefix = "", S.prototype.csharpNamespace = "", S.prototype.swiftPrefix = "", S.prototype.phpClassPrefix = "", S.prototype.phpNamespace = "", S.prototype.phpMetadataNamespace = "", S.prototype.rubyPackage = "", S.prototype.uninterpretedOption = p.emptyArray, S.prototype[".google.api.resourceDefinition"] = p.emptyArray, S.create = function(e2) {
        return new S(e2);
      }, S.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.javaPackage && Object.hasOwnProperty.call(e2, "javaPackage") && t2.uint32(10).string(e2.javaPackage), null != e2.javaOuterClassname && Object.hasOwnProperty.call(e2, "javaOuterClassname") && t2.uint32(66).string(e2.javaOuterClassname), null != e2.optimizeFor && Object.hasOwnProperty.call(e2, "optimizeFor") && t2.uint32(72).int32(e2.optimizeFor), null != e2.javaMultipleFiles && Object.hasOwnProperty.call(e2, "javaMultipleFiles") && t2.uint32(80).bool(e2.javaMultipleFiles), null != e2.goPackage && Object.hasOwnProperty.call(e2, "goPackage") && t2.uint32(90).string(e2.goPackage), null != e2.ccGenericServices && Object.hasOwnProperty.call(e2, "ccGenericServices") && t2.uint32(128).bool(e2.ccGenericServices), null != e2.javaGenericServices && Object.hasOwnProperty.call(e2, "javaGenericServices") && t2.uint32(136).bool(e2.javaGenericServices), null != e2.pyGenericServices && Object.hasOwnProperty.call(e2, "pyGenericServices") && t2.uint32(144).bool(e2.pyGenericServices), null != e2.javaGenerateEqualsAndHash && Object.hasOwnProperty.call(e2, "javaGenerateEqualsAndHash") && t2.uint32(160).bool(e2.javaGenerateEqualsAndHash), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(184).bool(e2.deprecated), null != e2.javaStringCheckUtf8 && Object.hasOwnProperty.call(e2, "javaStringCheckUtf8") && t2.uint32(216).bool(e2.javaStringCheckUtf8), null != e2.ccEnableArenas && Object.hasOwnProperty.call(e2, "ccEnableArenas") && t2.uint32(248).bool(e2.ccEnableArenas), null != e2.objcClassPrefix && Object.hasOwnProperty.call(e2, "objcClassPrefix") && t2.uint32(290).string(e2.objcClassPrefix), null != e2.csharpNamespace && Object.hasOwnProperty.call(e2, "csharpNamespace") && t2.uint32(298).string(e2.csharpNamespace), null != e2.swiftPrefix && Object.hasOwnProperty.call(e2, "swiftPrefix") && t2.uint32(314).string(e2.swiftPrefix), null != e2.phpClassPrefix && Object.hasOwnProperty.call(e2, "phpClassPrefix") && t2.uint32(322).string(e2.phpClassPrefix), null != e2.phpNamespace && Object.hasOwnProperty.call(e2, "phpNamespace") && t2.uint32(330).string(e2.phpNamespace), null != e2.phpGenericServices && Object.hasOwnProperty.call(e2, "phpGenericServices") && t2.uint32(336).bool(e2.phpGenericServices), null != e2.phpMetadataNamespace && Object.hasOwnProperty.call(e2, "phpMetadataNamespace") && t2.uint32(354).string(e2.phpMetadataNamespace), null != e2.rubyPackage && Object.hasOwnProperty.call(e2, "rubyPackage") && t2.uint32(362).string(e2.rubyPackage), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        if (null != e2[".google.api.resourceDefinition"] && e2[".google.api.resourceDefinition"].length)
          for (n2 = 0; n2 < e2[".google.api.resourceDefinition"].length; ++n2)
            l.google.api.ResourceDescriptor.encode(e2[".google.api.resourceDefinition"][n2], t2.uint32(8426).fork()).ldelim();
        return t2;
      }, S.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, S.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.FileOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.javaPackage = e2.string();
              break;
            case 8:
              o2.javaOuterClassname = e2.string();
              break;
            case 10:
              o2.javaMultipleFiles = e2.bool();
              break;
            case 20:
              o2.javaGenerateEqualsAndHash = e2.bool();
              break;
            case 27:
              o2.javaStringCheckUtf8 = e2.bool();
              break;
            case 9:
              o2.optimizeFor = e2.int32();
              break;
            case 11:
              o2.goPackage = e2.string();
              break;
            case 16:
              o2.ccGenericServices = e2.bool();
              break;
            case 17:
              o2.javaGenericServices = e2.bool();
              break;
            case 18:
              o2.pyGenericServices = e2.bool();
              break;
            case 42:
              o2.phpGenericServices = e2.bool();
              break;
            case 23:
              o2.deprecated = e2.bool();
              break;
            case 31:
              o2.ccEnableArenas = e2.bool();
              break;
            case 36:
              o2.objcClassPrefix = e2.string();
              break;
            case 37:
              o2.csharpNamespace = e2.string();
              break;
            case 39:
              o2.swiftPrefix = e2.string();
              break;
            case 40:
              o2.phpClassPrefix = e2.string();
              break;
            case 41:
              o2.phpNamespace = e2.string();
              break;
            case 44:
              o2.phpMetadataNamespace = e2.string();
              break;
            case 45:
              o2.rubyPackage = e2.string();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 1053:
              o2[".google.api.resourceDefinition"] && o2[".google.api.resourceDefinition"].length || (o2[".google.api.resourceDefinition"] = []), o2[".google.api.resourceDefinition"].push(l.google.api.ResourceDescriptor.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, S.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, S.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.javaPackage && e2.hasOwnProperty("javaPackage") && !p.isString(e2.javaPackage))
          return "javaPackage: string expected";
        if (null != e2.javaOuterClassname && e2.hasOwnProperty("javaOuterClassname") && !p.isString(e2.javaOuterClassname))
          return "javaOuterClassname: string expected";
        if (null != e2.javaMultipleFiles && e2.hasOwnProperty("javaMultipleFiles") && "boolean" != typeof e2.javaMultipleFiles)
          return "javaMultipleFiles: boolean expected";
        if (null != e2.javaGenerateEqualsAndHash && e2.hasOwnProperty("javaGenerateEqualsAndHash") && "boolean" != typeof e2.javaGenerateEqualsAndHash)
          return "javaGenerateEqualsAndHash: boolean expected";
        if (null != e2.javaStringCheckUtf8 && e2.hasOwnProperty("javaStringCheckUtf8") && "boolean" != typeof e2.javaStringCheckUtf8)
          return "javaStringCheckUtf8: boolean expected";
        if (null != e2.optimizeFor && e2.hasOwnProperty("optimizeFor"))
          switch (e2.optimizeFor) {
            default:
              return "optimizeFor: enum value expected";
            case 1:
            case 2:
            case 3:
          }
        if (null != e2.goPackage && e2.hasOwnProperty("goPackage") && !p.isString(e2.goPackage))
          return "goPackage: string expected";
        if (null != e2.ccGenericServices && e2.hasOwnProperty("ccGenericServices") && "boolean" != typeof e2.ccGenericServices)
          return "ccGenericServices: boolean expected";
        if (null != e2.javaGenericServices && e2.hasOwnProperty("javaGenericServices") && "boolean" != typeof e2.javaGenericServices)
          return "javaGenericServices: boolean expected";
        if (null != e2.pyGenericServices && e2.hasOwnProperty("pyGenericServices") && "boolean" != typeof e2.pyGenericServices)
          return "pyGenericServices: boolean expected";
        if (null != e2.phpGenericServices && e2.hasOwnProperty("phpGenericServices") && "boolean" != typeof e2.phpGenericServices)
          return "phpGenericServices: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.ccEnableArenas && e2.hasOwnProperty("ccEnableArenas") && "boolean" != typeof e2.ccEnableArenas)
          return "ccEnableArenas: boolean expected";
        if (null != e2.objcClassPrefix && e2.hasOwnProperty("objcClassPrefix") && !p.isString(e2.objcClassPrefix))
          return "objcClassPrefix: string expected";
        if (null != e2.csharpNamespace && e2.hasOwnProperty("csharpNamespace") && !p.isString(e2.csharpNamespace))
          return "csharpNamespace: string expected";
        if (null != e2.swiftPrefix && e2.hasOwnProperty("swiftPrefix") && !p.isString(e2.swiftPrefix))
          return "swiftPrefix: string expected";
        if (null != e2.phpClassPrefix && e2.hasOwnProperty("phpClassPrefix") && !p.isString(e2.phpClassPrefix))
          return "phpClassPrefix: string expected";
        if (null != e2.phpNamespace && e2.hasOwnProperty("phpNamespace") && !p.isString(e2.phpNamespace))
          return "phpNamespace: string expected";
        if (null != e2.phpMetadataNamespace && e2.hasOwnProperty("phpMetadataNamespace") && !p.isString(e2.phpMetadataNamespace))
          return "phpMetadataNamespace: string expected";
        if (null != e2.rubyPackage && e2.hasOwnProperty("rubyPackage") && !p.isString(e2.rubyPackage))
          return "rubyPackage: string expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2)
            if (n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]))
              return "uninterpretedOption." + n2;
        }
        if (null != e2[".google.api.resourceDefinition"] && e2.hasOwnProperty(".google.api.resourceDefinition")) {
          if (!Array.isArray(e2[".google.api.resourceDefinition"]))
            return ".google.api.resourceDefinition: array expected";
          for (var n2, t2 = 0; t2 < e2[".google.api.resourceDefinition"].length; ++t2)
            if (n2 = l.google.api.ResourceDescriptor.verify(e2[".google.api.resourceDefinition"][t2]))
              return ".google.api.resourceDefinition." + n2;
        }
        return null;
      }, S.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.FileOptions)
          return e2;
        var t2 = new l.google.protobuf.FileOptions();
        switch (null != e2.javaPackage && (t2.javaPackage = String(e2.javaPackage)), null != e2.javaOuterClassname && (t2.javaOuterClassname = String(e2.javaOuterClassname)), null != e2.javaMultipleFiles && (t2.javaMultipleFiles = Boolean(e2.javaMultipleFiles)), null != e2.javaGenerateEqualsAndHash && (t2.javaGenerateEqualsAndHash = Boolean(e2.javaGenerateEqualsAndHash)), null != e2.javaStringCheckUtf8 && (t2.javaStringCheckUtf8 = Boolean(e2.javaStringCheckUtf8)), e2.optimizeFor) {
          case "SPEED":
          case 1:
            t2.optimizeFor = 1;
            break;
          case "CODE_SIZE":
          case 2:
            t2.optimizeFor = 2;
            break;
          case "LITE_RUNTIME":
          case 3:
            t2.optimizeFor = 3;
        }
        if (null != e2.goPackage && (t2.goPackage = String(e2.goPackage)), null != e2.ccGenericServices && (t2.ccGenericServices = Boolean(e2.ccGenericServices)), null != e2.javaGenericServices && (t2.javaGenericServices = Boolean(e2.javaGenericServices)), null != e2.pyGenericServices && (t2.pyGenericServices = Boolean(e2.pyGenericServices)), null != e2.phpGenericServices && (t2.phpGenericServices = Boolean(e2.phpGenericServices)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.ccEnableArenas && (t2.ccEnableArenas = Boolean(e2.ccEnableArenas)), null != e2.objcClassPrefix && (t2.objcClassPrefix = String(e2.objcClassPrefix)), null != e2.csharpNamespace && (t2.csharpNamespace = String(e2.csharpNamespace)), null != e2.swiftPrefix && (t2.swiftPrefix = String(e2.swiftPrefix)), null != e2.phpClassPrefix && (t2.phpClassPrefix = String(e2.phpClassPrefix)), null != e2.phpNamespace && (t2.phpNamespace = String(e2.phpNamespace)), null != e2.phpMetadataNamespace && (t2.phpMetadataNamespace = String(e2.phpMetadataNamespace)), null != e2.rubyPackage && (t2.rubyPackage = String(e2.rubyPackage)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        if (e2[".google.api.resourceDefinition"]) {
          if (!Array.isArray(e2[".google.api.resourceDefinition"]))
            throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
          t2[".google.api.resourceDefinition"] = [];
          for (n2 = 0; n2 < e2[".google.api.resourceDefinition"].length; ++n2) {
            if ("object" != typeof e2[".google.api.resourceDefinition"][n2])
              throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
            t2[".google.api.resourceDefinition"][n2] = l.google.api.ResourceDescriptor.fromObject(e2[".google.api.resourceDefinition"][n2]);
          }
        }
        return t2;
      }, S.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = [], n2[".google.api.resourceDefinition"] = []), t2.defaults && (n2.javaPackage = "", n2.javaOuterClassname = "", n2.optimizeFor = t2.enums === String ? "SPEED" : 1, n2.javaMultipleFiles = false, n2.goPackage = "", n2.ccGenericServices = false, n2.javaGenericServices = false, n2.pyGenericServices = false, n2.javaGenerateEqualsAndHash = false, n2.deprecated = false, n2.javaStringCheckUtf8 = false, n2.ccEnableArenas = true, n2.objcClassPrefix = "", n2.csharpNamespace = "", n2.swiftPrefix = "", n2.phpClassPrefix = "", n2.phpNamespace = "", n2.phpGenericServices = false, n2.phpMetadataNamespace = "", n2.rubyPackage = ""), null != e2.javaPackage && e2.hasOwnProperty("javaPackage") && (n2.javaPackage = e2.javaPackage), null != e2.javaOuterClassname && e2.hasOwnProperty("javaOuterClassname") && (n2.javaOuterClassname = e2.javaOuterClassname), null != e2.optimizeFor && e2.hasOwnProperty("optimizeFor") && (n2.optimizeFor = t2.enums === String ? l.google.protobuf.FileOptions.OptimizeMode[e2.optimizeFor] : e2.optimizeFor), null != e2.javaMultipleFiles && e2.hasOwnProperty("javaMultipleFiles") && (n2.javaMultipleFiles = e2.javaMultipleFiles), null != e2.goPackage && e2.hasOwnProperty("goPackage") && (n2.goPackage = e2.goPackage), null != e2.ccGenericServices && e2.hasOwnProperty("ccGenericServices") && (n2.ccGenericServices = e2.ccGenericServices), null != e2.javaGenericServices && e2.hasOwnProperty("javaGenericServices") && (n2.javaGenericServices = e2.javaGenericServices), null != e2.pyGenericServices && e2.hasOwnProperty("pyGenericServices") && (n2.pyGenericServices = e2.pyGenericServices), null != e2.javaGenerateEqualsAndHash && e2.hasOwnProperty("javaGenerateEqualsAndHash") && (n2.javaGenerateEqualsAndHash = e2.javaGenerateEqualsAndHash), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.javaStringCheckUtf8 && e2.hasOwnProperty("javaStringCheckUtf8") && (n2.javaStringCheckUtf8 = e2.javaStringCheckUtf8), null != e2.ccEnableArenas && e2.hasOwnProperty("ccEnableArenas") && (n2.ccEnableArenas = e2.ccEnableArenas), null != e2.objcClassPrefix && e2.hasOwnProperty("objcClassPrefix") && (n2.objcClassPrefix = e2.objcClassPrefix), null != e2.csharpNamespace && e2.hasOwnProperty("csharpNamespace") && (n2.csharpNamespace = e2.csharpNamespace), null != e2.swiftPrefix && e2.hasOwnProperty("swiftPrefix") && (n2.swiftPrefix = e2.swiftPrefix), null != e2.phpClassPrefix && e2.hasOwnProperty("phpClassPrefix") && (n2.phpClassPrefix = e2.phpClassPrefix), null != e2.phpNamespace && e2.hasOwnProperty("phpNamespace") && (n2.phpNamespace = e2.phpNamespace), null != e2.phpGenericServices && e2.hasOwnProperty("phpGenericServices") && (n2.phpGenericServices = e2.phpGenericServices), null != e2.phpMetadataNamespace && e2.hasOwnProperty("phpMetadataNamespace") && (n2.phpMetadataNamespace = e2.phpMetadataNamespace), null != e2.rubyPackage && e2.hasOwnProperty("rubyPackage") && (n2.rubyPackage = e2.rubyPackage), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        if (e2[".google.api.resourceDefinition"] && e2[".google.api.resourceDefinition"].length) {
          n2[".google.api.resourceDefinition"] = [];
          for (o2 = 0; o2 < e2[".google.api.resourceDefinition"].length; ++o2)
            n2[".google.api.resourceDefinition"][o2] = l.google.api.ResourceDescriptor.toObject(e2[".google.api.resourceDefinition"][o2], t2);
        }
        return n2;
      }, S.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, S.OptimizeMode = (e = {}, (t = Object.create(e))[e[1] = "SPEED"] = 1, t[e[2] = "CODE_SIZE"] = 2, t[e[3] = "LITE_RUNTIME"] = 3, t), S), n.MessageOptions = (k.prototype.messageSetWireFormat = false, k.prototype.noStandardDescriptorAccessor = false, k.prototype.deprecated = false, k.prototype.mapEntry = false, k.prototype.uninterpretedOption = p.emptyArray, k.prototype[".google.api.resource"] = null, k.create = function(e2) {
        return new k(e2);
      }, k.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.messageSetWireFormat && Object.hasOwnProperty.call(e2, "messageSetWireFormat") && t2.uint32(8).bool(e2.messageSetWireFormat), null != e2.noStandardDescriptorAccessor && Object.hasOwnProperty.call(e2, "noStandardDescriptorAccessor") && t2.uint32(16).bool(e2.noStandardDescriptorAccessor), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.mapEntry && Object.hasOwnProperty.call(e2, "mapEntry") && t2.uint32(56).bool(e2.mapEntry), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return null != e2[".google.api.resource"] && Object.hasOwnProperty.call(e2, ".google.api.resource") && l.google.api.ResourceDescriptor.encode(e2[".google.api.resource"], t2.uint32(8426).fork()).ldelim(), t2;
      }, k.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, k.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.MessageOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.messageSetWireFormat = e2.bool();
              break;
            case 2:
              o2.noStandardDescriptorAccessor = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 7:
              o2.mapEntry = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 1053:
              o2[".google.api.resource"] = l.google.api.ResourceDescriptor.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, k.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, k.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.messageSetWireFormat && e2.hasOwnProperty("messageSetWireFormat") && "boolean" != typeof e2.messageSetWireFormat)
          return "messageSetWireFormat: boolean expected";
        if (null != e2.noStandardDescriptorAccessor && e2.hasOwnProperty("noStandardDescriptorAccessor") && "boolean" != typeof e2.noStandardDescriptorAccessor)
          return "noStandardDescriptorAccessor: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.mapEntry && e2.hasOwnProperty("mapEntry") && "boolean" != typeof e2.mapEntry)
          return "mapEntry: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2)
            if (n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]))
              return "uninterpretedOption." + n2;
        }
        var n2;
        if (null != e2[".google.api.resource"] && e2.hasOwnProperty(".google.api.resource") && (n2 = l.google.api.ResourceDescriptor.verify(e2[".google.api.resource"])))
          return ".google.api.resource." + n2;
        return null;
      }, k.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.MessageOptions)
          return e2;
        var t2 = new l.google.protobuf.MessageOptions();
        if (null != e2.messageSetWireFormat && (t2.messageSetWireFormat = Boolean(e2.messageSetWireFormat)), null != e2.noStandardDescriptorAccessor && (t2.noStandardDescriptorAccessor = Boolean(e2.noStandardDescriptorAccessor)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.mapEntry && (t2.mapEntry = Boolean(e2.mapEntry)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        if (null != e2[".google.api.resource"]) {
          if ("object" != typeof e2[".google.api.resource"])
            throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
          t2[".google.api.resource"] = l.google.api.ResourceDescriptor.fromObject(e2[".google.api.resource"]);
        }
        return t2;
      }, k.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.messageSetWireFormat = false, n2.noStandardDescriptorAccessor = false, n2.deprecated = false, n2.mapEntry = false, n2[".google.api.resource"] = null), null != e2.messageSetWireFormat && e2.hasOwnProperty("messageSetWireFormat") && (n2.messageSetWireFormat = e2.messageSetWireFormat), null != e2.noStandardDescriptorAccessor && e2.hasOwnProperty("noStandardDescriptorAccessor") && (n2.noStandardDescriptorAccessor = e2.noStandardDescriptorAccessor), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.mapEntry && e2.hasOwnProperty("mapEntry") && (n2.mapEntry = e2.mapEntry), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return null != e2[".google.api.resource"] && e2.hasOwnProperty(".google.api.resource") && (n2[".google.api.resource"] = l.google.api.ResourceDescriptor.toObject(e2[".google.api.resource"], t2)), n2;
      }, k.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, k), n.FieldOptions = (T.prototype.ctype = 0, T.prototype.packed = false, T.prototype.jstype = 0, T.prototype.lazy = false, T.prototype.deprecated = false, T.prototype.weak = false, T.prototype.uninterpretedOption = p.emptyArray, T.prototype[".google.api.fieldBehavior"] = p.emptyArray, T.prototype[".google.api.resourceReference"] = null, T.create = function(e2) {
        return new T(e2);
      }, T.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.ctype && Object.hasOwnProperty.call(e2, "ctype") && t2.uint32(8).int32(e2.ctype), null != e2.packed && Object.hasOwnProperty.call(e2, "packed") && t2.uint32(16).bool(e2.packed), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.lazy && Object.hasOwnProperty.call(e2, "lazy") && t2.uint32(40).bool(e2.lazy), null != e2.jstype && Object.hasOwnProperty.call(e2, "jstype") && t2.uint32(48).int32(e2.jstype), null != e2.weak && Object.hasOwnProperty.call(e2, "weak") && t2.uint32(80).bool(e2.weak), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        if (null != e2[".google.api.fieldBehavior"] && e2[".google.api.fieldBehavior"].length) {
          t2.uint32(8418).fork();
          for (n2 = 0; n2 < e2[".google.api.fieldBehavior"].length; ++n2)
            t2.int32(e2[".google.api.fieldBehavior"][n2]);
          t2.ldelim();
        }
        return null != e2[".google.api.resourceReference"] && Object.hasOwnProperty.call(e2, ".google.api.resourceReference") && l.google.api.ResourceReference.encode(e2[".google.api.resourceReference"], t2.uint32(8442).fork()).ldelim(), t2;
      }, T.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, T.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.FieldOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.ctype = e2.int32();
              break;
            case 2:
              o2.packed = e2.bool();
              break;
            case 6:
              o2.jstype = e2.int32();
              break;
            case 5:
              o2.lazy = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 10:
              o2.weak = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 1052:
              if (o2[".google.api.fieldBehavior"] && o2[".google.api.fieldBehavior"].length || (o2[".google.api.fieldBehavior"] = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2[".google.api.fieldBehavior"].push(e2.int32());
              else
                o2[".google.api.fieldBehavior"].push(e2.int32());
              break;
            case 1055:
              o2[".google.api.resourceReference"] = l.google.api.ResourceReference.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, T.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, T.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.ctype && e2.hasOwnProperty("ctype"))
          switch (e2.ctype) {
            default:
              return "ctype: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.packed && e2.hasOwnProperty("packed") && "boolean" != typeof e2.packed)
          return "packed: boolean expected";
        if (null != e2.jstype && e2.hasOwnProperty("jstype"))
          switch (e2.jstype) {
            default:
              return "jstype: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.lazy && e2.hasOwnProperty("lazy") && "boolean" != typeof e2.lazy)
          return "lazy: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.weak && e2.hasOwnProperty("weak") && "boolean" != typeof e2.weak)
          return "weak: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2)
            if (n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]))
              return "uninterpretedOption." + n2;
        }
        if (null != e2[".google.api.fieldBehavior"] && e2.hasOwnProperty(".google.api.fieldBehavior")) {
          if (!Array.isArray(e2[".google.api.fieldBehavior"]))
            return ".google.api.fieldBehavior: array expected";
          for (t2 = 0; t2 < e2[".google.api.fieldBehavior"].length; ++t2)
            switch (e2[".google.api.fieldBehavior"][t2]) {
              default:
                return ".google.api.fieldBehavior: enum value[] expected";
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
            }
        }
        var n2;
        if (null != e2[".google.api.resourceReference"] && e2.hasOwnProperty(".google.api.resourceReference") && (n2 = l.google.api.ResourceReference.verify(e2[".google.api.resourceReference"])))
          return ".google.api.resourceReference." + n2;
        return null;
      }, T.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.FieldOptions)
          return e2;
        var t2 = new l.google.protobuf.FieldOptions();
        switch (e2.ctype) {
          case "STRING":
          case 0:
            t2.ctype = 0;
            break;
          case "CORD":
          case 1:
            t2.ctype = 1;
            break;
          case "STRING_PIECE":
          case 2:
            t2.ctype = 2;
        }
        switch (null != e2.packed && (t2.packed = Boolean(e2.packed)), e2.jstype) {
          case "JS_NORMAL":
          case 0:
            t2.jstype = 0;
            break;
          case "JS_STRING":
          case 1:
            t2.jstype = 1;
            break;
          case "JS_NUMBER":
          case 2:
            t2.jstype = 2;
        }
        if (null != e2.lazy && (t2.lazy = Boolean(e2.lazy)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.weak && (t2.weak = Boolean(e2.weak)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        if (e2[".google.api.fieldBehavior"]) {
          if (!Array.isArray(e2[".google.api.fieldBehavior"]))
            throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
          t2[".google.api.fieldBehavior"] = [];
          for (n2 = 0; n2 < e2[".google.api.fieldBehavior"].length; ++n2)
            switch (e2[".google.api.fieldBehavior"][n2]) {
              default:
              case "FIELD_BEHAVIOR_UNSPECIFIED":
              case 0:
                t2[".google.api.fieldBehavior"][n2] = 0;
                break;
              case "OPTIONAL":
              case 1:
                t2[".google.api.fieldBehavior"][n2] = 1;
                break;
              case "REQUIRED":
              case 2:
                t2[".google.api.fieldBehavior"][n2] = 2;
                break;
              case "OUTPUT_ONLY":
              case 3:
                t2[".google.api.fieldBehavior"][n2] = 3;
                break;
              case "INPUT_ONLY":
              case 4:
                t2[".google.api.fieldBehavior"][n2] = 4;
                break;
              case "IMMUTABLE":
              case 5:
                t2[".google.api.fieldBehavior"][n2] = 5;
            }
        }
        if (null != e2[".google.api.resourceReference"]) {
          if ("object" != typeof e2[".google.api.resourceReference"])
            throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
          t2[".google.api.resourceReference"] = l.google.api.ResourceReference.fromObject(e2[".google.api.resourceReference"]);
        }
        return t2;
      }, T.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = [], n2[".google.api.fieldBehavior"] = []), t2.defaults && (n2.ctype = t2.enums === String ? "STRING" : 0, n2.packed = false, n2.deprecated = false, n2.lazy = false, n2.jstype = t2.enums === String ? "JS_NORMAL" : 0, n2.weak = false, n2[".google.api.resourceReference"] = null), null != e2.ctype && e2.hasOwnProperty("ctype") && (n2.ctype = t2.enums === String ? l.google.protobuf.FieldOptions.CType[e2.ctype] : e2.ctype), null != e2.packed && e2.hasOwnProperty("packed") && (n2.packed = e2.packed), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.lazy && e2.hasOwnProperty("lazy") && (n2.lazy = e2.lazy), null != e2.jstype && e2.hasOwnProperty("jstype") && (n2.jstype = t2.enums === String ? l.google.protobuf.FieldOptions.JSType[e2.jstype] : e2.jstype), null != e2.weak && e2.hasOwnProperty("weak") && (n2.weak = e2.weak), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        if (e2[".google.api.fieldBehavior"] && e2[".google.api.fieldBehavior"].length) {
          n2[".google.api.fieldBehavior"] = [];
          for (o2 = 0; o2 < e2[".google.api.fieldBehavior"].length; ++o2)
            n2[".google.api.fieldBehavior"][o2] = t2.enums === String ? l.google.api.FieldBehavior[e2[".google.api.fieldBehavior"][o2]] : e2[".google.api.fieldBehavior"][o2];
        }
        return null != e2[".google.api.resourceReference"] && e2.hasOwnProperty(".google.api.resourceReference") && (n2[".google.api.resourceReference"] = l.google.api.ResourceReference.toObject(e2[".google.api.resourceReference"], t2)), n2;
      }, T.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, T.CType = (e = {}, (t = Object.create(e))[e[0] = "STRING"] = 0, t[e[1] = "CORD"] = 1, t[e[2] = "STRING_PIECE"] = 2, t), T.JSType = (e = {}, (t = Object.create(e))[e[0] = "JS_NORMAL"] = 0, t[e[1] = "JS_STRING"] = 1, t[e[2] = "JS_NUMBER"] = 2, t), T), n.OneofOptions = (Q.prototype.uninterpretedOption = p.emptyArray, Q.create = function(e2) {
        return new Q(e2);
      }, Q.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, Q.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, Q.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.OneofOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 999 ? (o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, Q.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, Q.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, Q.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.OneofOptions)
          return e2;
        var t2 = new l.google.protobuf.OneofOptions();
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, Q.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, Q.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, Q), n.EnumOptions = (E.prototype.allowAlias = false, E.prototype.deprecated = false, E.prototype.uninterpretedOption = p.emptyArray, E.create = function(e2) {
        return new E(e2);
      }, E.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.allowAlias && Object.hasOwnProperty.call(e2, "allowAlias") && t2.uint32(16).bool(e2.allowAlias), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, E.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, E.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.EnumOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 2:
              o2.allowAlias = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, E.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, E.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.allowAlias && e2.hasOwnProperty("allowAlias") && "boolean" != typeof e2.allowAlias)
          return "allowAlias: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, E.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.EnumOptions)
          return e2;
        var t2 = new l.google.protobuf.EnumOptions();
        if (null != e2.allowAlias && (t2.allowAlias = Boolean(e2.allowAlias)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, E.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.allowAlias = false, n2.deprecated = false), null != e2.allowAlias && e2.hasOwnProperty("allowAlias") && (n2.allowAlias = e2.allowAlias), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, E.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, E), n.EnumValueOptions = (K.prototype.deprecated = false, K.prototype.uninterpretedOption = p.emptyArray, K.create = function(e2) {
        return new K(e2);
      }, K.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(8).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, K.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, K.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.EnumValueOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, K.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, K.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, K.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.EnumValueOptions)
          return e2;
        var t2 = new l.google.protobuf.EnumValueOptions();
        if (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, K.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.deprecated = false), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, K.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, K), n.ServiceOptions = (A.prototype.deprecated = false, A.prototype.uninterpretedOption = p.emptyArray, A.prototype[".google.api.defaultHost"] = "", A.prototype[".google.api.oauthScopes"] = "", A.create = function(e2) {
        return new A(e2);
      }, A.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(264).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return null != e2[".google.api.defaultHost"] && Object.hasOwnProperty.call(e2, ".google.api.defaultHost") && t2.uint32(8394).string(e2[".google.api.defaultHost"]), null != e2[".google.api.oauthScopes"] && Object.hasOwnProperty.call(e2, ".google.api.oauthScopes") && t2.uint32(8402).string(e2[".google.api.oauthScopes"]), t2;
      }, A.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, A.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.ServiceOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 33:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 1049:
              o2[".google.api.defaultHost"] = e2.string();
              break;
            case 1050:
              o2[".google.api.oauthScopes"] = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, A.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, A.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null != e2[".google.api.defaultHost"] && e2.hasOwnProperty(".google.api.defaultHost") && !p.isString(e2[".google.api.defaultHost"]) ? ".google.api.defaultHost: string expected" : null != e2[".google.api.oauthScopes"] && e2.hasOwnProperty(".google.api.oauthScopes") && !p.isString(e2[".google.api.oauthScopes"]) ? ".google.api.oauthScopes: string expected" : null;
      }, A.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.ServiceOptions)
          return e2;
        var t2 = new l.google.protobuf.ServiceOptions();
        if (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return null != e2[".google.api.defaultHost"] && (t2[".google.api.defaultHost"] = String(e2[".google.api.defaultHost"])), null != e2[".google.api.oauthScopes"] && (t2[".google.api.oauthScopes"] = String(e2[".google.api.oauthScopes"])), t2;
      }, A.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.deprecated = false, n2[".google.api.defaultHost"] = "", n2[".google.api.oauthScopes"] = ""), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return null != e2[".google.api.defaultHost"] && e2.hasOwnProperty(".google.api.defaultHost") && (n2[".google.api.defaultHost"] = e2[".google.api.defaultHost"]), null != e2[".google.api.oauthScopes"] && e2.hasOwnProperty(".google.api.oauthScopes") && (n2[".google.api.oauthScopes"] = e2[".google.api.oauthScopes"]), n2;
      }, A.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, A), n.MethodOptions = (N.prototype.deprecated = false, N.prototype.idempotencyLevel = 0, N.prototype.uninterpretedOption = p.emptyArray, N.prototype[".google.api.http"] = null, N.prototype[".google.api.methodSignature"] = p.emptyArray, N.create = function(e2) {
        return new N(e2);
      }, N.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(264).bool(e2.deprecated), null != e2.idempotencyLevel && Object.hasOwnProperty.call(e2, "idempotencyLevel") && t2.uint32(272).int32(e2.idempotencyLevel), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            l.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        if (null != e2[".google.api.methodSignature"] && e2[".google.api.methodSignature"].length)
          for (n2 = 0; n2 < e2[".google.api.methodSignature"].length; ++n2)
            t2.uint32(8410).string(e2[".google.api.methodSignature"][n2]);
        return null != e2[".google.api.http"] && Object.hasOwnProperty.call(e2, ".google.api.http") && l.google.api.HttpRule.encode(e2[".google.api.http"], t2.uint32(578365826).fork()).ldelim(), t2;
      }, N.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, N.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.MethodOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 33:
              o2.deprecated = e2.bool();
              break;
            case 34:
              o2.idempotencyLevel = e2.int32();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(l.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 72295728:
              o2[".google.api.http"] = l.google.api.HttpRule.decode(e2, e2.uint32());
              break;
            case 1051:
              o2[".google.api.methodSignature"] && o2[".google.api.methodSignature"].length || (o2[".google.api.methodSignature"] = []), o2[".google.api.methodSignature"].push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, N.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, N.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.idempotencyLevel && e2.hasOwnProperty("idempotencyLevel"))
          switch (e2.idempotencyLevel) {
            default:
              return "idempotencyLevel: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2)
            if (n2 = l.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]))
              return "uninterpretedOption." + n2;
        }
        var n2;
        if (null != e2[".google.api.http"] && e2.hasOwnProperty(".google.api.http") && (n2 = l.google.api.HttpRule.verify(e2[".google.api.http"])))
          return ".google.api.http." + n2;
        if (null != e2[".google.api.methodSignature"] && e2.hasOwnProperty(".google.api.methodSignature")) {
          if (!Array.isArray(e2[".google.api.methodSignature"]))
            return ".google.api.methodSignature: array expected";
          for (t2 = 0; t2 < e2[".google.api.methodSignature"].length; ++t2)
            if (!p.isString(e2[".google.api.methodSignature"][t2]))
              return ".google.api.methodSignature: string[] expected";
        }
        return null;
      }, N.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.MethodOptions)
          return e2;
        var t2 = new l.google.protobuf.MethodOptions();
        switch (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.idempotencyLevel) {
          case "IDEMPOTENCY_UNKNOWN":
          case 0:
            t2.idempotencyLevel = 0;
            break;
          case "NO_SIDE_EFFECTS":
          case 1:
            t2.idempotencyLevel = 1;
            break;
          case "IDEMPOTENT":
          case 2:
            t2.idempotencyLevel = 2;
        }
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = l.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        if (null != e2[".google.api.http"]) {
          if ("object" != typeof e2[".google.api.http"])
            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
          t2[".google.api.http"] = l.google.api.HttpRule.fromObject(e2[".google.api.http"]);
        }
        if (e2[".google.api.methodSignature"]) {
          if (!Array.isArray(e2[".google.api.methodSignature"]))
            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
          t2[".google.api.methodSignature"] = [];
          for (n2 = 0; n2 < e2[".google.api.methodSignature"].length; ++n2)
            t2[".google.api.methodSignature"][n2] = String(e2[".google.api.methodSignature"][n2]);
        }
        return t2;
      }, N.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = [], n2[".google.api.methodSignature"] = []), t2.defaults && (n2.deprecated = false, n2.idempotencyLevel = t2.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0, n2[".google.api.http"] = null), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.idempotencyLevel && e2.hasOwnProperty("idempotencyLevel") && (n2.idempotencyLevel = t2.enums === String ? l.google.protobuf.MethodOptions.IdempotencyLevel[e2.idempotencyLevel] : e2.idempotencyLevel), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = l.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        if (e2[".google.api.methodSignature"] && e2[".google.api.methodSignature"].length) {
          n2[".google.api.methodSignature"] = [];
          for (o2 = 0; o2 < e2[".google.api.methodSignature"].length; ++o2)
            n2[".google.api.methodSignature"][o2] = e2[".google.api.methodSignature"][o2];
        }
        return null != e2[".google.api.http"] && e2.hasOwnProperty(".google.api.http") && (n2[".google.api.http"] = l.google.api.HttpRule.toObject(e2[".google.api.http"], t2)), n2;
      }, N.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, N.IdempotencyLevel = (e = {}, (t = Object.create(e))[e[0] = "IDEMPOTENCY_UNKNOWN"] = 0, t[e[1] = "NO_SIDE_EFFECTS"] = 1, t[e[2] = "IDEMPOTENT"] = 2, t), N), n.UninterpretedOption = (R.prototype.name = p.emptyArray, R.prototype.identifierValue = "", R.prototype.positiveIntValue = p.Long ? p.Long.fromBits(0, 0, true) : 0, R.prototype.negativeIntValue = p.Long ? p.Long.fromBits(0, 0, false) : 0, R.prototype.doubleValue = 0, R.prototype.stringValue = p.newBuffer([]), R.prototype.aggregateValue = "", R.create = function(e2) {
        return new R(e2);
      }, R.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.name && e2.name.length)
          for (var n2 = 0; n2 < e2.name.length; ++n2)
            l.google.protobuf.UninterpretedOption.NamePart.encode(e2.name[n2], t2.uint32(18).fork()).ldelim();
        return null != e2.identifierValue && Object.hasOwnProperty.call(e2, "identifierValue") && t2.uint32(26).string(e2.identifierValue), null != e2.positiveIntValue && Object.hasOwnProperty.call(e2, "positiveIntValue") && t2.uint32(32).uint64(e2.positiveIntValue), null != e2.negativeIntValue && Object.hasOwnProperty.call(e2, "negativeIntValue") && t2.uint32(40).int64(e2.negativeIntValue), null != e2.doubleValue && Object.hasOwnProperty.call(e2, "doubleValue") && t2.uint32(49).double(e2.doubleValue), null != e2.stringValue && Object.hasOwnProperty.call(e2, "stringValue") && t2.uint32(58).bytes(e2.stringValue), null != e2.aggregateValue && Object.hasOwnProperty.call(e2, "aggregateValue") && t2.uint32(66).string(e2.aggregateValue), t2;
      }, R.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, R.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.UninterpretedOption(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 2:
              o2.name && o2.name.length || (o2.name = []), o2.name.push(l.google.protobuf.UninterpretedOption.NamePart.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.identifierValue = e2.string();
              break;
            case 4:
              o2.positiveIntValue = e2.uint64();
              break;
            case 5:
              o2.negativeIntValue = e2.int64();
              break;
            case 6:
              o2.doubleValue = e2.double();
              break;
            case 7:
              o2.stringValue = e2.bytes();
              break;
            case 8:
              o2.aggregateValue = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, R.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, R.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name")) {
          if (!Array.isArray(e2.name))
            return "name: array expected";
          for (var t2 = 0; t2 < e2.name.length; ++t2) {
            var n2 = l.google.protobuf.UninterpretedOption.NamePart.verify(e2.name[t2]);
            if (n2)
              return "name." + n2;
          }
        }
        return null != e2.identifierValue && e2.hasOwnProperty("identifierValue") && !p.isString(e2.identifierValue) ? "identifierValue: string expected" : null != e2.positiveIntValue && e2.hasOwnProperty("positiveIntValue") && !(p.isInteger(e2.positiveIntValue) || e2.positiveIntValue && p.isInteger(e2.positiveIntValue.low) && p.isInteger(e2.positiveIntValue.high)) ? "positiveIntValue: integer|Long expected" : null != e2.negativeIntValue && e2.hasOwnProperty("negativeIntValue") && !(p.isInteger(e2.negativeIntValue) || e2.negativeIntValue && p.isInteger(e2.negativeIntValue.low) && p.isInteger(e2.negativeIntValue.high)) ? "negativeIntValue: integer|Long expected" : null != e2.doubleValue && e2.hasOwnProperty("doubleValue") && "number" != typeof e2.doubleValue ? "doubleValue: number expected" : null != e2.stringValue && e2.hasOwnProperty("stringValue") && !(e2.stringValue && "number" == typeof e2.stringValue.length || p.isString(e2.stringValue)) ? "stringValue: buffer expected" : null != e2.aggregateValue && e2.hasOwnProperty("aggregateValue") && !p.isString(e2.aggregateValue) ? "aggregateValue: string expected" : null;
      }, R.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.UninterpretedOption)
          return e2;
        var t2 = new l.google.protobuf.UninterpretedOption();
        if (e2.name) {
          if (!Array.isArray(e2.name))
            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
          t2.name = [];
          for (var n2 = 0; n2 < e2.name.length; ++n2) {
            if ("object" != typeof e2.name[n2])
              throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
            t2.name[n2] = l.google.protobuf.UninterpretedOption.NamePart.fromObject(e2.name[n2]);
          }
        }
        return null != e2.identifierValue && (t2.identifierValue = String(e2.identifierValue)), null != e2.positiveIntValue && (p.Long ? (t2.positiveIntValue = p.Long.fromValue(e2.positiveIntValue)).unsigned = true : "string" == typeof e2.positiveIntValue ? t2.positiveIntValue = parseInt(e2.positiveIntValue, 10) : "number" == typeof e2.positiveIntValue ? t2.positiveIntValue = e2.positiveIntValue : "object" == typeof e2.positiveIntValue && (t2.positiveIntValue = new p.LongBits(e2.positiveIntValue.low >>> 0, e2.positiveIntValue.high >>> 0).toNumber(true))), null != e2.negativeIntValue && (p.Long ? (t2.negativeIntValue = p.Long.fromValue(e2.negativeIntValue)).unsigned = false : "string" == typeof e2.negativeIntValue ? t2.negativeIntValue = parseInt(e2.negativeIntValue, 10) : "number" == typeof e2.negativeIntValue ? t2.negativeIntValue = e2.negativeIntValue : "object" == typeof e2.negativeIntValue && (t2.negativeIntValue = new p.LongBits(e2.negativeIntValue.low >>> 0, e2.negativeIntValue.high >>> 0).toNumber())), null != e2.doubleValue && (t2.doubleValue = Number(e2.doubleValue)), null != e2.stringValue && ("string" == typeof e2.stringValue ? p.base64.decode(e2.stringValue, t2.stringValue = p.newBuffer(p.base64.length(e2.stringValue)), 0) : e2.stringValue.length && (t2.stringValue = e2.stringValue)), null != e2.aggregateValue && (t2.aggregateValue = String(e2.aggregateValue)), t2;
      }, R.toObject = function(e2, t2) {
        var n2, o2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (o2.name = []), t2.defaults && (o2.identifierValue = "", p.Long ? (n2 = new p.Long(0, 0, true), o2.positiveIntValue = t2.longs === String ? n2.toString() : t2.longs === Number ? n2.toNumber() : n2) : o2.positiveIntValue = t2.longs === String ? "0" : 0, p.Long ? (n2 = new p.Long(0, 0, false), o2.negativeIntValue = t2.longs === String ? n2.toString() : t2.longs === Number ? n2.toNumber() : n2) : o2.negativeIntValue = t2.longs === String ? "0" : 0, o2.doubleValue = 0, t2.bytes === String ? o2.stringValue = "" : (o2.stringValue = [], t2.bytes !== Array && (o2.stringValue = p.newBuffer(o2.stringValue))), o2.aggregateValue = ""), e2.name && e2.name.length) {
          o2.name = [];
          for (var r2 = 0; r2 < e2.name.length; ++r2)
            o2.name[r2] = l.google.protobuf.UninterpretedOption.NamePart.toObject(e2.name[r2], t2);
        }
        return null != e2.identifierValue && e2.hasOwnProperty("identifierValue") && (o2.identifierValue = e2.identifierValue), null != e2.positiveIntValue && e2.hasOwnProperty("positiveIntValue") && ("number" == typeof e2.positiveIntValue ? o2.positiveIntValue = t2.longs === String ? String(e2.positiveIntValue) : e2.positiveIntValue : o2.positiveIntValue = t2.longs === String ? p.Long.prototype.toString.call(e2.positiveIntValue) : t2.longs === Number ? new p.LongBits(e2.positiveIntValue.low >>> 0, e2.positiveIntValue.high >>> 0).toNumber(true) : e2.positiveIntValue), null != e2.negativeIntValue && e2.hasOwnProperty("negativeIntValue") && ("number" == typeof e2.negativeIntValue ? o2.negativeIntValue = t2.longs === String ? String(e2.negativeIntValue) : e2.negativeIntValue : o2.negativeIntValue = t2.longs === String ? p.Long.prototype.toString.call(e2.negativeIntValue) : t2.longs === Number ? new p.LongBits(e2.negativeIntValue.low >>> 0, e2.negativeIntValue.high >>> 0).toNumber() : e2.negativeIntValue), null != e2.doubleValue && e2.hasOwnProperty("doubleValue") && (o2.doubleValue = t2.json && !isFinite(e2.doubleValue) ? String(e2.doubleValue) : e2.doubleValue), null != e2.stringValue && e2.hasOwnProperty("stringValue") && (o2.stringValue = t2.bytes === String ? p.base64.encode(e2.stringValue, 0, e2.stringValue.length) : t2.bytes === Array ? Array.prototype.slice.call(e2.stringValue) : e2.stringValue), null != e2.aggregateValue && e2.hasOwnProperty("aggregateValue") && (o2.aggregateValue = e2.aggregateValue), o2;
      }, R.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, R.NamePart = (Z.prototype.namePart = "", Z.prototype.isExtension = false, Z.create = function(e2) {
        return new Z(e2);
      }, Z.encode = function(e2, t2) {
        return (t2 = t2 || i.create()).uint32(10).string(e2.namePart), t2.uint32(16).bool(e2.isExtension), t2;
      }, Z.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, Z.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.UninterpretedOption.NamePart(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.namePart = e2.string();
              break;
            case 2:
              o2.isExtension = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        if (!o2.hasOwnProperty("namePart"))
          throw p.ProtocolError("missing required 'namePart'", { instance: o2 });
        if (o2.hasOwnProperty("isExtension"))
          return o2;
        throw p.ProtocolError("missing required 'isExtension'", { instance: o2 });
      }, Z.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, Z.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : p.isString(e2.namePart) ? "boolean" != typeof e2.isExtension ? "isExtension: boolean expected" : null : "namePart: string expected";
      }, Z.fromObject = function(e2) {
        var t2;
        return e2 instanceof l.google.protobuf.UninterpretedOption.NamePart ? e2 : (t2 = new l.google.protobuf.UninterpretedOption.NamePart(), null != e2.namePart && (t2.namePart = String(e2.namePart)), null != e2.isExtension && (t2.isExtension = Boolean(e2.isExtension)), t2);
      }, Z.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.namePart = "", n2.isExtension = false), null != e2.namePart && e2.hasOwnProperty("namePart") && (n2.namePart = e2.namePart), null != e2.isExtension && e2.hasOwnProperty("isExtension") && (n2.isExtension = e2.isExtension), n2;
      }, Z.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, Z), R), n.SourceCodeInfo = ($.prototype.location = p.emptyArray, $.create = function(e2) {
        return new $(e2);
      }, $.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.location && e2.location.length)
          for (var n2 = 0; n2 < e2.location.length; ++n2)
            l.google.protobuf.SourceCodeInfo.Location.encode(e2.location[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, $.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, $.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.SourceCodeInfo(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.location && o2.location.length || (o2.location = []), o2.location.push(l.google.protobuf.SourceCodeInfo.Location.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, $.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, $.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.location && e2.hasOwnProperty("location")) {
          if (!Array.isArray(e2.location))
            return "location: array expected";
          for (var t2 = 0; t2 < e2.location.length; ++t2) {
            var n2 = l.google.protobuf.SourceCodeInfo.Location.verify(e2.location[t2]);
            if (n2)
              return "location." + n2;
          }
        }
        return null;
      }, $.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.SourceCodeInfo)
          return e2;
        var t2 = new l.google.protobuf.SourceCodeInfo();
        if (e2.location) {
          if (!Array.isArray(e2.location))
            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
          t2.location = [];
          for (var n2 = 0; n2 < e2.location.length; ++n2) {
            if ("object" != typeof e2.location[n2])
              throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
            t2.location[n2] = l.google.protobuf.SourceCodeInfo.Location.fromObject(e2.location[n2]);
          }
        }
        return t2;
      }, $.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.location = []), e2.location && e2.location.length) {
          n2.location = [];
          for (var o2 = 0; o2 < e2.location.length; ++o2)
            n2.location[o2] = l.google.protobuf.SourceCodeInfo.Location.toObject(e2.location[o2], t2);
        }
        return n2;
      }, $.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, $.Location = (I.prototype.path = p.emptyArray, I.prototype.span = p.emptyArray, I.prototype.leadingComments = "", I.prototype.trailingComments = "", I.prototype.leadingDetachedComments = p.emptyArray, I.create = function(e2) {
        return new I(e2);
      }, I.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.path && e2.path.length) {
          t2.uint32(10).fork();
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.int32(e2.path[n2]);
          t2.ldelim();
        }
        if (null != e2.span && e2.span.length) {
          t2.uint32(18).fork();
          for (n2 = 0; n2 < e2.span.length; ++n2)
            t2.int32(e2.span[n2]);
          t2.ldelim();
        }
        if (null != e2.leadingComments && Object.hasOwnProperty.call(e2, "leadingComments") && t2.uint32(26).string(e2.leadingComments), null != e2.trailingComments && Object.hasOwnProperty.call(e2, "trailingComments") && t2.uint32(34).string(e2.trailingComments), null != e2.leadingDetachedComments && e2.leadingDetachedComments.length)
          for (n2 = 0; n2 < e2.leadingDetachedComments.length; ++n2)
            t2.uint32(50).string(e2.leadingDetachedComments[n2]);
        return t2;
      }, I.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, I.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.SourceCodeInfo.Location(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              if (o2.path && o2.path.length || (o2.path = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.path.push(e2.int32());
              else
                o2.path.push(e2.int32());
              break;
            case 2:
              if (o2.span && o2.span.length || (o2.span = []), 2 == (7 & r2))
                for (i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.span.push(e2.int32());
              else
                o2.span.push(e2.int32());
              break;
            case 3:
              o2.leadingComments = e2.string();
              break;
            case 4:
              o2.trailingComments = e2.string();
              break;
            case 6:
              o2.leadingDetachedComments && o2.leadingDetachedComments.length || (o2.leadingDetachedComments = []), o2.leadingDetachedComments.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, I.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, I.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.path && e2.hasOwnProperty("path")) {
          if (!Array.isArray(e2.path))
            return "path: array expected";
          for (var t2 = 0; t2 < e2.path.length; ++t2)
            if (!p.isInteger(e2.path[t2]))
              return "path: integer[] expected";
        }
        if (null != e2.span && e2.hasOwnProperty("span")) {
          if (!Array.isArray(e2.span))
            return "span: array expected";
          for (t2 = 0; t2 < e2.span.length; ++t2)
            if (!p.isInteger(e2.span[t2]))
              return "span: integer[] expected";
        }
        if (null != e2.leadingComments && e2.hasOwnProperty("leadingComments") && !p.isString(e2.leadingComments))
          return "leadingComments: string expected";
        if (null != e2.trailingComments && e2.hasOwnProperty("trailingComments") && !p.isString(e2.trailingComments))
          return "trailingComments: string expected";
        if (null != e2.leadingDetachedComments && e2.hasOwnProperty("leadingDetachedComments")) {
          if (!Array.isArray(e2.leadingDetachedComments))
            return "leadingDetachedComments: array expected";
          for (t2 = 0; t2 < e2.leadingDetachedComments.length; ++t2)
            if (!p.isString(e2.leadingDetachedComments[t2]))
              return "leadingDetachedComments: string[] expected";
        }
        return null;
      }, I.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.SourceCodeInfo.Location)
          return e2;
        var t2 = new l.google.protobuf.SourceCodeInfo.Location();
        if (e2.path) {
          if (!Array.isArray(e2.path))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
          t2.path = [];
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.path[n2] = 0 | e2.path[n2];
        }
        if (e2.span) {
          if (!Array.isArray(e2.span))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
          t2.span = [];
          for (n2 = 0; n2 < e2.span.length; ++n2)
            t2.span[n2] = 0 | e2.span[n2];
        }
        if (null != e2.leadingComments && (t2.leadingComments = String(e2.leadingComments)), null != e2.trailingComments && (t2.trailingComments = String(e2.trailingComments)), e2.leadingDetachedComments) {
          if (!Array.isArray(e2.leadingDetachedComments))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
          t2.leadingDetachedComments = [];
          for (n2 = 0; n2 < e2.leadingDetachedComments.length; ++n2)
            t2.leadingDetachedComments[n2] = String(e2.leadingDetachedComments[n2]);
        }
        return t2;
      }, I.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.path = [], n2.span = [], n2.leadingDetachedComments = []), t2.defaults && (n2.leadingComments = "", n2.trailingComments = ""), e2.path && e2.path.length) {
          n2.path = [];
          for (var o2 = 0; o2 < e2.path.length; ++o2)
            n2.path[o2] = e2.path[o2];
        }
        if (e2.span && e2.span.length) {
          n2.span = [];
          for (o2 = 0; o2 < e2.span.length; ++o2)
            n2.span[o2] = e2.span[o2];
        }
        if (null != e2.leadingComments && e2.hasOwnProperty("leadingComments") && (n2.leadingComments = e2.leadingComments), null != e2.trailingComments && e2.hasOwnProperty("trailingComments") && (n2.trailingComments = e2.trailingComments), e2.leadingDetachedComments && e2.leadingDetachedComments.length) {
          n2.leadingDetachedComments = [];
          for (o2 = 0; o2 < e2.leadingDetachedComments.length; ++o2)
            n2.leadingDetachedComments[o2] = e2.leadingDetachedComments[o2];
        }
        return n2;
      }, I.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, I), $), n.GeneratedCodeInfo = (ee.prototype.annotation = p.emptyArray, ee.create = function(e2) {
        return new ee(e2);
      }, ee.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.annotation && e2.annotation.length)
          for (var n2 = 0; n2 < e2.annotation.length; ++n2)
            l.google.protobuf.GeneratedCodeInfo.Annotation.encode(e2.annotation[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, ee.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, ee.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.GeneratedCodeInfo(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.annotation && o2.annotation.length || (o2.annotation = []), o2.annotation.push(l.google.protobuf.GeneratedCodeInfo.Annotation.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, ee.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, ee.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.annotation && e2.hasOwnProperty("annotation")) {
          if (!Array.isArray(e2.annotation))
            return "annotation: array expected";
          for (var t2 = 0; t2 < e2.annotation.length; ++t2) {
            var n2 = l.google.protobuf.GeneratedCodeInfo.Annotation.verify(e2.annotation[t2]);
            if (n2)
              return "annotation." + n2;
          }
        }
        return null;
      }, ee.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.GeneratedCodeInfo)
          return e2;
        var t2 = new l.google.protobuf.GeneratedCodeInfo();
        if (e2.annotation) {
          if (!Array.isArray(e2.annotation))
            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
          t2.annotation = [];
          for (var n2 = 0; n2 < e2.annotation.length; ++n2) {
            if ("object" != typeof e2.annotation[n2])
              throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
            t2.annotation[n2] = l.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e2.annotation[n2]);
          }
        }
        return t2;
      }, ee.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.annotation = []), e2.annotation && e2.annotation.length) {
          n2.annotation = [];
          for (var o2 = 0; o2 < e2.annotation.length; ++o2)
            n2.annotation[o2] = l.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e2.annotation[o2], t2);
        }
        return n2;
      }, ee.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, ee.Annotation = (C.prototype.path = p.emptyArray, C.prototype.sourceFile = "", C.prototype.begin = 0, C.prototype.end = 0, C.create = function(e2) {
        return new C(e2);
      }, C.encode = function(e2, t2) {
        if (t2 = t2 || i.create(), null != e2.path && e2.path.length) {
          t2.uint32(10).fork();
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.int32(e2.path[n2]);
          t2.ldelim();
        }
        return null != e2.sourceFile && Object.hasOwnProperty.call(e2, "sourceFile") && t2.uint32(18).string(e2.sourceFile), null != e2.begin && Object.hasOwnProperty.call(e2, "begin") && t2.uint32(24).int32(e2.begin), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(32).int32(e2.end), t2;
      }, C.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, C.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.protobuf.GeneratedCodeInfo.Annotation(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              if (o2.path && o2.path.length || (o2.path = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.path.push(e2.int32());
              else
                o2.path.push(e2.int32());
              break;
            case 2:
              o2.sourceFile = e2.string();
              break;
            case 3:
              o2.begin = e2.int32();
              break;
            case 4:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, C.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, C.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.path && e2.hasOwnProperty("path")) {
          if (!Array.isArray(e2.path))
            return "path: array expected";
          for (var t2 = 0; t2 < e2.path.length; ++t2)
            if (!p.isInteger(e2.path[t2]))
              return "path: integer[] expected";
        }
        return null != e2.sourceFile && e2.hasOwnProperty("sourceFile") && !p.isString(e2.sourceFile) ? "sourceFile: string expected" : null != e2.begin && e2.hasOwnProperty("begin") && !p.isInteger(e2.begin) ? "begin: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !p.isInteger(e2.end) ? "end: integer expected" : null;
      }, C.fromObject = function(e2) {
        if (e2 instanceof l.google.protobuf.GeneratedCodeInfo.Annotation)
          return e2;
        var t2 = new l.google.protobuf.GeneratedCodeInfo.Annotation();
        if (e2.path) {
          if (!Array.isArray(e2.path))
            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
          t2.path = [];
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.path[n2] = 0 | e2.path[n2];
        }
        return null != e2.sourceFile && (t2.sourceFile = String(e2.sourceFile)), null != e2.begin && (t2.begin = 0 | e2.begin), null != e2.end && (t2.end = 0 | e2.end), t2;
      }, C.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.path = []), t2.defaults && (n2.sourceFile = "", n2.begin = 0, n2.end = 0), e2.path && e2.path.length) {
          n2.path = [];
          for (var o2 = 0; o2 < e2.path.length; ++o2)
            n2.path[o2] = e2.path[o2];
        }
        return null != e2.sourceFile && e2.hasOwnProperty("sourceFile") && (n2.sourceFile = e2.sourceFile), null != e2.begin && e2.hasOwnProperty("begin") && (n2.begin = e2.begin), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, C.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, C), ee), n), F.type = ((r = {}).Expr = (V.prototype.expression = "", V.prototype.title = "", V.prototype.description = "", V.prototype.location = "", V.create = function(e2) {
        return new V(e2);
      }, V.encode = function(e2, t2) {
        return t2 = t2 || i.create(), null != e2.expression && Object.hasOwnProperty.call(e2, "expression") && t2.uint32(10).string(e2.expression), null != e2.title && Object.hasOwnProperty.call(e2, "title") && t2.uint32(18).string(e2.title), null != e2.description && Object.hasOwnProperty.call(e2, "description") && t2.uint32(26).string(e2.description), null != e2.location && Object.hasOwnProperty.call(e2, "location") && t2.uint32(34).string(e2.location), t2;
      }, V.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, V.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new l.google.type.Expr(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.expression = e2.string();
              break;
            case 2:
              o2.title = e2.string();
              break;
            case 3:
              o2.description = e2.string();
              break;
            case 4:
              o2.location = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, V.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, V.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.expression && e2.hasOwnProperty("expression") && !p.isString(e2.expression) ? "expression: string expected" : null != e2.title && e2.hasOwnProperty("title") && !p.isString(e2.title) ? "title: string expected" : null != e2.description && e2.hasOwnProperty("description") && !p.isString(e2.description) ? "description: string expected" : null != e2.location && e2.hasOwnProperty("location") && !p.isString(e2.location) ? "location: string expected" : null;
      }, V.fromObject = function(e2) {
        var t2;
        return e2 instanceof l.google.type.Expr ? e2 : (t2 = new l.google.type.Expr(), null != e2.expression && (t2.expression = String(e2.expression)), null != e2.title && (t2.title = String(e2.title)), null != e2.description && (t2.description = String(e2.description)), null != e2.location && (t2.location = String(e2.location)), t2);
      }, V.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.expression = "", n2.title = "", n2.description = "", n2.location = ""), null != e2.expression && e2.hasOwnProperty("expression") && (n2.expression = e2.expression), null != e2.title && e2.hasOwnProperty("title") && (n2.title = e2.title), null != e2.description && e2.hasOwnProperty("description") && (n2.description = e2.description), null != e2.location && e2.hasOwnProperty("location") && (n2.location = e2.location), n2;
      }, V.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, V), r), F), l;
    });
  }
});

// node_modules/google-gax/build/protos/locations.js
var require_locations = __commonJS({
  "node_modules/google-gax/build/protos/locations.js"(exports2, module2) {
    !function(e) {
      "function" == typeof define && define.amd ? define(["protobufjs/minimal"], e) : "function" == typeof require && "object" == typeof module2 && module2 && module2.exports && (module2.exports = e(require_minimal2()));
    }(function(o) {
      "use strict";
      var e, t, n, F, s = o.Reader, r = o.Writer, u = o.util, c = o.roots.locations_protos || (o.roots.locations_protos = {});
      function L(e2, t2, n2) {
        o.rpc.Service.call(this, e2, t2, n2);
      }
      function i(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function a(e2) {
        if (this.locations = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function G(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function p(e2) {
        if (this.labels = {}, e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function l(e2) {
        if (this.rules = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function d(e2) {
        if (this.additionalBindings = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function g(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function B(e2) {
        if (this.file = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function f(e2) {
        if (this.dependency = [], this.publicDependency = [], this.weakDependency = [], this.messageType = [], this.enumType = [], this.service = [], this.extension = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function y(e2) {
        if (this.field = [], this.extension = [], this.nestedType = [], this.enumType = [], this.extensionRange = [], this.oneofDecl = [], this.reservedRange = [], this.reservedName = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function h(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function b(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function U(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function O(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function m(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function v(e2) {
        if (this.value = [], this.reservedRange = [], this.reservedName = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function P(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function w(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function j(e2) {
        if (this.method = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function x(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function S(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function k(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function D(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function M(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function T(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function E(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function A(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function N(e2) {
        if (this.uninterpretedOption = [], this[".google.api.methodSignature"] = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function I(e2) {
        if (this.name = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function R(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function _(e2) {
        if (this.location = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function C(e2) {
        if (this.path = [], this.span = [], this.leadingDetachedComments = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function J(e2) {
        if (this.annotation = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function V(e2) {
        if (this.path = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function H(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      return c.google = ((F = {}).cloud = ((n = {}).location = ((e = {}).Locations = (((L.prototype = Object.create(o.rpc.Service.prototype)).constructor = L).create = function(e2, t2, n2) {
        return new this(e2, t2, n2);
      }, Object.defineProperty(L.prototype.listLocations = function e2(t2, n2) {
        return this.rpcCall(e2, c.google.cloud.location.ListLocationsRequest, c.google.cloud.location.ListLocationsResponse, t2, n2);
      }, "name", { value: "ListLocations" }), Object.defineProperty(L.prototype.getLocation = function e2(t2, n2) {
        return this.rpcCall(e2, c.google.cloud.location.GetLocationRequest, c.google.cloud.location.Location, t2, n2);
      }, "name", { value: "GetLocation" }), L), e.ListLocationsRequest = (i.prototype.name = "", i.prototype.filter = "", i.prototype.pageSize = 0, i.prototype.pageToken = "", i.create = function(e2) {
        return new i(e2);
      }, i.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.filter && Object.hasOwnProperty.call(e2, "filter") && t2.uint32(18).string(e2.filter), null != e2.pageSize && Object.hasOwnProperty.call(e2, "pageSize") && t2.uint32(24).int32(e2.pageSize), null != e2.pageToken && Object.hasOwnProperty.call(e2, "pageToken") && t2.uint32(34).string(e2.pageToken), t2;
      }, i.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, i.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.cloud.location.ListLocationsRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.filter = e2.string();
              break;
            case 3:
              o2.pageSize = e2.int32();
              break;
            case 4:
              o2.pageToken = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, i.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, i.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name) ? "name: string expected" : null != e2.filter && e2.hasOwnProperty("filter") && !u.isString(e2.filter) ? "filter: string expected" : null != e2.pageSize && e2.hasOwnProperty("pageSize") && !u.isInteger(e2.pageSize) ? "pageSize: integer expected" : null != e2.pageToken && e2.hasOwnProperty("pageToken") && !u.isString(e2.pageToken) ? "pageToken: string expected" : null;
      }, i.fromObject = function(e2) {
        var t2;
        return e2 instanceof c.google.cloud.location.ListLocationsRequest ? e2 : (t2 = new c.google.cloud.location.ListLocationsRequest(), null != e2.name && (t2.name = String(e2.name)), null != e2.filter && (t2.filter = String(e2.filter)), null != e2.pageSize && (t2.pageSize = 0 | e2.pageSize), null != e2.pageToken && (t2.pageToken = String(e2.pageToken)), t2);
      }, i.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.filter = "", n2.pageSize = 0, n2.pageToken = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.filter && e2.hasOwnProperty("filter") && (n2.filter = e2.filter), null != e2.pageSize && e2.hasOwnProperty("pageSize") && (n2.pageSize = e2.pageSize), null != e2.pageToken && e2.hasOwnProperty("pageToken") && (n2.pageToken = e2.pageToken), n2;
      }, i.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, i), e.ListLocationsResponse = (a.prototype.locations = u.emptyArray, a.prototype.nextPageToken = "", a.create = function(e2) {
        return new a(e2);
      }, a.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.locations && e2.locations.length)
          for (var n2 = 0; n2 < e2.locations.length; ++n2)
            c.google.cloud.location.Location.encode(e2.locations[n2], t2.uint32(10).fork()).ldelim();
        return null != e2.nextPageToken && Object.hasOwnProperty.call(e2, "nextPageToken") && t2.uint32(18).string(e2.nextPageToken), t2;
      }, a.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, a.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.cloud.location.ListLocationsResponse(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.locations && o2.locations.length || (o2.locations = []), o2.locations.push(c.google.cloud.location.Location.decode(e2, e2.uint32()));
              break;
            case 2:
              o2.nextPageToken = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, a.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, a.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.locations && e2.hasOwnProperty("locations")) {
          if (!Array.isArray(e2.locations))
            return "locations: array expected";
          for (var t2 = 0; t2 < e2.locations.length; ++t2) {
            var n2 = c.google.cloud.location.Location.verify(e2.locations[t2]);
            if (n2)
              return "locations." + n2;
          }
        }
        return null != e2.nextPageToken && e2.hasOwnProperty("nextPageToken") && !u.isString(e2.nextPageToken) ? "nextPageToken: string expected" : null;
      }, a.fromObject = function(e2) {
        if (e2 instanceof c.google.cloud.location.ListLocationsResponse)
          return e2;
        var t2 = new c.google.cloud.location.ListLocationsResponse();
        if (e2.locations) {
          if (!Array.isArray(e2.locations))
            throw TypeError(".google.cloud.location.ListLocationsResponse.locations: array expected");
          t2.locations = [];
          for (var n2 = 0; n2 < e2.locations.length; ++n2) {
            if ("object" != typeof e2.locations[n2])
              throw TypeError(".google.cloud.location.ListLocationsResponse.locations: object expected");
            t2.locations[n2] = c.google.cloud.location.Location.fromObject(e2.locations[n2]);
          }
        }
        return null != e2.nextPageToken && (t2.nextPageToken = String(e2.nextPageToken)), t2;
      }, a.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.locations = []), t2.defaults && (n2.nextPageToken = ""), e2.locations && e2.locations.length) {
          n2.locations = [];
          for (var o2 = 0; o2 < e2.locations.length; ++o2)
            n2.locations[o2] = c.google.cloud.location.Location.toObject(e2.locations[o2], t2);
        }
        return null != e2.nextPageToken && e2.hasOwnProperty("nextPageToken") && (n2.nextPageToken = e2.nextPageToken), n2;
      }, a.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, a), e.GetLocationRequest = (G.prototype.name = "", G.create = function(e2) {
        return new G(e2);
      }, G.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), t2;
      }, G.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, G.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.cloud.location.GetLocationRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? o2.name = e2.string() : e2.skipType(7 & r2);
        }
        return o2;
      }, G.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, G.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name) ? "name: string expected" : null;
      }, G.fromObject = function(e2) {
        var t2;
        return e2 instanceof c.google.cloud.location.GetLocationRequest ? e2 : (t2 = new c.google.cloud.location.GetLocationRequest(), null != e2.name && (t2.name = String(e2.name)), t2);
      }, G.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), n2;
      }, G.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, G), e.Location = (p.prototype.name = "", p.prototype.locationId = "", p.prototype.displayName = "", p.prototype.labels = u.emptyObject, p.prototype.metadata = null, p.create = function(e2) {
        return new p(e2);
      }, p.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.labels && Object.hasOwnProperty.call(e2, "labels"))
          for (var n2 = Object.keys(e2.labels), o2 = 0; o2 < n2.length; ++o2)
            t2.uint32(18).fork().uint32(10).string(n2[o2]).uint32(18).string(e2.labels[n2[o2]]).ldelim();
        return null != e2.metadata && Object.hasOwnProperty.call(e2, "metadata") && c.google.protobuf.Any.encode(e2.metadata, t2.uint32(26).fork()).ldelim(), null != e2.locationId && Object.hasOwnProperty.call(e2, "locationId") && t2.uint32(34).string(e2.locationId), null != e2.displayName && Object.hasOwnProperty.call(e2, "displayName") && t2.uint32(42).string(e2.displayName), t2;
      }, p.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, p.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.cloud.location.Location(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 4:
              o2.locationId = e2.string();
              break;
            case 5:
              o2.displayName = e2.string();
              break;
            case 2:
              o2.labels === u.emptyObject && (o2.labels = {});
              for (var i2 = e2.uint32() + e2.pos, a2 = "", p2 = ""; e2.pos < i2; ) {
                var l2 = e2.uint32();
                switch (l2 >>> 3) {
                  case 1:
                    a2 = e2.string();
                    break;
                  case 2:
                    p2 = e2.string();
                    break;
                  default:
                    e2.skipType(7 & l2);
                }
              }
              o2.labels[a2] = p2;
              break;
            case 3:
              o2.metadata = c.google.protobuf.Any.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, p.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, p.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.locationId && e2.hasOwnProperty("locationId") && !u.isString(e2.locationId))
          return "locationId: string expected";
        if (null != e2.displayName && e2.hasOwnProperty("displayName") && !u.isString(e2.displayName))
          return "displayName: string expected";
        if (null != e2.labels && e2.hasOwnProperty("labels")) {
          if (!u.isObject(e2.labels))
            return "labels: object expected";
          for (var t2 = Object.keys(e2.labels), n2 = 0; n2 < t2.length; ++n2)
            if (!u.isString(e2.labels[t2[n2]]))
              return "labels: string{k:string} expected";
        }
        if (null != e2.metadata && e2.hasOwnProperty("metadata")) {
          var o2 = c.google.protobuf.Any.verify(e2.metadata);
          if (o2)
            return "metadata." + o2;
        }
        return null;
      }, p.fromObject = function(e2) {
        if (e2 instanceof c.google.cloud.location.Location)
          return e2;
        var t2 = new c.google.cloud.location.Location();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.locationId && (t2.locationId = String(e2.locationId)), null != e2.displayName && (t2.displayName = String(e2.displayName)), e2.labels) {
          if ("object" != typeof e2.labels)
            throw TypeError(".google.cloud.location.Location.labels: object expected");
          t2.labels = {};
          for (var n2 = Object.keys(e2.labels), o2 = 0; o2 < n2.length; ++o2)
            t2.labels[n2[o2]] = String(e2.labels[n2[o2]]);
        }
        if (null != e2.metadata) {
          if ("object" != typeof e2.metadata)
            throw TypeError(".google.cloud.location.Location.metadata: object expected");
          t2.metadata = c.google.protobuf.Any.fromObject(e2.metadata);
        }
        return t2;
      }, p.toObject = function(e2, t2) {
        var n2, o2 = {};
        if (((t2 = t2 || {}).objects || t2.defaults) && (o2.labels = {}), t2.defaults && (o2.name = "", o2.metadata = null, o2.locationId = "", o2.displayName = ""), null != e2.name && e2.hasOwnProperty("name") && (o2.name = e2.name), e2.labels && (n2 = Object.keys(e2.labels)).length) {
          o2.labels = {};
          for (var r2 = 0; r2 < n2.length; ++r2)
            o2.labels[n2[r2]] = e2.labels[n2[r2]];
        }
        return null != e2.metadata && e2.hasOwnProperty("metadata") && (o2.metadata = c.google.protobuf.Any.toObject(e2.metadata, t2)), null != e2.locationId && e2.hasOwnProperty("locationId") && (o2.locationId = e2.locationId), null != e2.displayName && e2.hasOwnProperty("displayName") && (o2.displayName = e2.displayName), o2;
      }, p.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, p), e), n), F.api = ((e = {}).Http = (l.prototype.rules = u.emptyArray, l.prototype.fullyDecodeReservedExpansion = false, l.create = function(e2) {
        return new l(e2);
      }, l.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.rules && e2.rules.length)
          for (var n2 = 0; n2 < e2.rules.length; ++n2)
            c.google.api.HttpRule.encode(e2.rules[n2], t2.uint32(10).fork()).ldelim();
        return null != e2.fullyDecodeReservedExpansion && Object.hasOwnProperty.call(e2, "fullyDecodeReservedExpansion") && t2.uint32(16).bool(e2.fullyDecodeReservedExpansion), t2;
      }, l.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, l.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.api.Http(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.rules && o2.rules.length || (o2.rules = []), o2.rules.push(c.google.api.HttpRule.decode(e2, e2.uint32()));
              break;
            case 2:
              o2.fullyDecodeReservedExpansion = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, l.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, l.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.rules && e2.hasOwnProperty("rules")) {
          if (!Array.isArray(e2.rules))
            return "rules: array expected";
          for (var t2 = 0; t2 < e2.rules.length; ++t2) {
            var n2 = c.google.api.HttpRule.verify(e2.rules[t2]);
            if (n2)
              return "rules." + n2;
          }
        }
        return null != e2.fullyDecodeReservedExpansion && e2.hasOwnProperty("fullyDecodeReservedExpansion") && "boolean" != typeof e2.fullyDecodeReservedExpansion ? "fullyDecodeReservedExpansion: boolean expected" : null;
      }, l.fromObject = function(e2) {
        if (e2 instanceof c.google.api.Http)
          return e2;
        var t2 = new c.google.api.Http();
        if (e2.rules) {
          if (!Array.isArray(e2.rules))
            throw TypeError(".google.api.Http.rules: array expected");
          t2.rules = [];
          for (var n2 = 0; n2 < e2.rules.length; ++n2) {
            if ("object" != typeof e2.rules[n2])
              throw TypeError(".google.api.Http.rules: object expected");
            t2.rules[n2] = c.google.api.HttpRule.fromObject(e2.rules[n2]);
          }
        }
        return null != e2.fullyDecodeReservedExpansion && (t2.fullyDecodeReservedExpansion = Boolean(e2.fullyDecodeReservedExpansion)), t2;
      }, l.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.rules = []), t2.defaults && (n2.fullyDecodeReservedExpansion = false), e2.rules && e2.rules.length) {
          n2.rules = [];
          for (var o2 = 0; o2 < e2.rules.length; ++o2)
            n2.rules[o2] = c.google.api.HttpRule.toObject(e2.rules[o2], t2);
        }
        return null != e2.fullyDecodeReservedExpansion && e2.hasOwnProperty("fullyDecodeReservedExpansion") && (n2.fullyDecodeReservedExpansion = e2.fullyDecodeReservedExpansion), n2;
      }, l.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, l), e.HttpRule = (d.prototype.selector = "", d.prototype.get = null, d.prototype.put = null, d.prototype.post = null, d.prototype.delete = null, d.prototype.patch = null, d.prototype.custom = null, d.prototype.body = "", d.prototype.responseBody = "", d.prototype.additionalBindings = u.emptyArray, Object.defineProperty(d.prototype, "pattern", { get: u.oneOfGetter(n = ["get", "put", "post", "delete", "patch", "custom"]), set: u.oneOfSetter(n) }), d.create = function(e2) {
        return new d(e2);
      }, d.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.selector && Object.hasOwnProperty.call(e2, "selector") && t2.uint32(10).string(e2.selector), null != e2.get && Object.hasOwnProperty.call(e2, "get") && t2.uint32(18).string(e2.get), null != e2.put && Object.hasOwnProperty.call(e2, "put") && t2.uint32(26).string(e2.put), null != e2.post && Object.hasOwnProperty.call(e2, "post") && t2.uint32(34).string(e2.post), null != e2.delete && Object.hasOwnProperty.call(e2, "delete") && t2.uint32(42).string(e2.delete), null != e2.patch && Object.hasOwnProperty.call(e2, "patch") && t2.uint32(50).string(e2.patch), null != e2.body && Object.hasOwnProperty.call(e2, "body") && t2.uint32(58).string(e2.body), null != e2.custom && Object.hasOwnProperty.call(e2, "custom") && c.google.api.CustomHttpPattern.encode(e2.custom, t2.uint32(66).fork()).ldelim(), null != e2.additionalBindings && e2.additionalBindings.length)
          for (var n2 = 0; n2 < e2.additionalBindings.length; ++n2)
            c.google.api.HttpRule.encode(e2.additionalBindings[n2], t2.uint32(90).fork()).ldelim();
        return null != e2.responseBody && Object.hasOwnProperty.call(e2, "responseBody") && t2.uint32(98).string(e2.responseBody), t2;
      }, d.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, d.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.api.HttpRule(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.selector = e2.string();
              break;
            case 2:
              o2.get = e2.string();
              break;
            case 3:
              o2.put = e2.string();
              break;
            case 4:
              o2.post = e2.string();
              break;
            case 5:
              o2.delete = e2.string();
              break;
            case 6:
              o2.patch = e2.string();
              break;
            case 8:
              o2.custom = c.google.api.CustomHttpPattern.decode(e2, e2.uint32());
              break;
            case 7:
              o2.body = e2.string();
              break;
            case 12:
              o2.responseBody = e2.string();
              break;
            case 11:
              o2.additionalBindings && o2.additionalBindings.length || (o2.additionalBindings = []), o2.additionalBindings.push(c.google.api.HttpRule.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, d.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, d.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        var t2 = {};
        if (null != e2.selector && e2.hasOwnProperty("selector") && !u.isString(e2.selector))
          return "selector: string expected";
        if (null != e2.get && e2.hasOwnProperty("get") && (t2.pattern = 1, !u.isString(e2.get)))
          return "get: string expected";
        if (null != e2.put && e2.hasOwnProperty("put")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !u.isString(e2.put))
            return "put: string expected";
        }
        if (null != e2.post && e2.hasOwnProperty("post")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !u.isString(e2.post))
            return "post: string expected";
        }
        if (null != e2.delete && e2.hasOwnProperty("delete")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !u.isString(e2.delete))
            return "delete: string expected";
        }
        if (null != e2.patch && e2.hasOwnProperty("patch")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !u.isString(e2.patch))
            return "patch: string expected";
        }
        if (null != e2.custom && e2.hasOwnProperty("custom")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, n2 = c.google.api.CustomHttpPattern.verify(e2.custom))
            return "custom." + n2;
        }
        if (null != e2.body && e2.hasOwnProperty("body") && !u.isString(e2.body))
          return "body: string expected";
        if (null != e2.responseBody && e2.hasOwnProperty("responseBody") && !u.isString(e2.responseBody))
          return "responseBody: string expected";
        if (null != e2.additionalBindings && e2.hasOwnProperty("additionalBindings")) {
          if (!Array.isArray(e2.additionalBindings))
            return "additionalBindings: array expected";
          for (var n2, o2 = 0; o2 < e2.additionalBindings.length; ++o2)
            if (n2 = c.google.api.HttpRule.verify(e2.additionalBindings[o2]))
              return "additionalBindings." + n2;
        }
        return null;
      }, d.fromObject = function(e2) {
        if (e2 instanceof c.google.api.HttpRule)
          return e2;
        var t2 = new c.google.api.HttpRule();
        if (null != e2.selector && (t2.selector = String(e2.selector)), null != e2.get && (t2.get = String(e2.get)), null != e2.put && (t2.put = String(e2.put)), null != e2.post && (t2.post = String(e2.post)), null != e2.delete && (t2.delete = String(e2.delete)), null != e2.patch && (t2.patch = String(e2.patch)), null != e2.custom) {
          if ("object" != typeof e2.custom)
            throw TypeError(".google.api.HttpRule.custom: object expected");
          t2.custom = c.google.api.CustomHttpPattern.fromObject(e2.custom);
        }
        if (null != e2.body && (t2.body = String(e2.body)), null != e2.responseBody && (t2.responseBody = String(e2.responseBody)), e2.additionalBindings) {
          if (!Array.isArray(e2.additionalBindings))
            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
          t2.additionalBindings = [];
          for (var n2 = 0; n2 < e2.additionalBindings.length; ++n2) {
            if ("object" != typeof e2.additionalBindings[n2])
              throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
            t2.additionalBindings[n2] = c.google.api.HttpRule.fromObject(e2.additionalBindings[n2]);
          }
        }
        return t2;
      }, d.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.additionalBindings = []), t2.defaults && (n2.selector = "", n2.body = "", n2.responseBody = ""), null != e2.selector && e2.hasOwnProperty("selector") && (n2.selector = e2.selector), null != e2.get && e2.hasOwnProperty("get") && (n2.get = e2.get, t2.oneofs) && (n2.pattern = "get"), null != e2.put && e2.hasOwnProperty("put") && (n2.put = e2.put, t2.oneofs) && (n2.pattern = "put"), null != e2.post && e2.hasOwnProperty("post") && (n2.post = e2.post, t2.oneofs) && (n2.pattern = "post"), null != e2.delete && e2.hasOwnProperty("delete") && (n2.delete = e2.delete, t2.oneofs) && (n2.pattern = "delete"), null != e2.patch && e2.hasOwnProperty("patch") && (n2.patch = e2.patch, t2.oneofs) && (n2.pattern = "patch"), null != e2.body && e2.hasOwnProperty("body") && (n2.body = e2.body), null != e2.custom && e2.hasOwnProperty("custom") && (n2.custom = c.google.api.CustomHttpPattern.toObject(e2.custom, t2), t2.oneofs) && (n2.pattern = "custom"), e2.additionalBindings && e2.additionalBindings.length) {
          n2.additionalBindings = [];
          for (var o2 = 0; o2 < e2.additionalBindings.length; ++o2)
            n2.additionalBindings[o2] = c.google.api.HttpRule.toObject(e2.additionalBindings[o2], t2);
        }
        return null != e2.responseBody && e2.hasOwnProperty("responseBody") && (n2.responseBody = e2.responseBody), n2;
      }, d.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, d), e.CustomHttpPattern = (g.prototype.kind = "", g.prototype.path = "", g.create = function(e2) {
        return new g(e2);
      }, g.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.kind && Object.hasOwnProperty.call(e2, "kind") && t2.uint32(10).string(e2.kind), null != e2.path && Object.hasOwnProperty.call(e2, "path") && t2.uint32(18).string(e2.path), t2;
      }, g.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, g.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.api.CustomHttpPattern(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.kind = e2.string();
              break;
            case 2:
              o2.path = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, g.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, g.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.kind && e2.hasOwnProperty("kind") && !u.isString(e2.kind) ? "kind: string expected" : null != e2.path && e2.hasOwnProperty("path") && !u.isString(e2.path) ? "path: string expected" : null;
      }, g.fromObject = function(e2) {
        var t2;
        return e2 instanceof c.google.api.CustomHttpPattern ? e2 : (t2 = new c.google.api.CustomHttpPattern(), null != e2.kind && (t2.kind = String(e2.kind)), null != e2.path && (t2.path = String(e2.path)), t2);
      }, g.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.kind = "", n2.path = ""), null != e2.kind && e2.hasOwnProperty("kind") && (n2.kind = e2.kind), null != e2.path && e2.hasOwnProperty("path") && (n2.path = e2.path), n2;
      }, g.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, g), e), F.protobuf = ((n = {}).FileDescriptorSet = (B.prototype.file = u.emptyArray, B.create = function(e2) {
        return new B(e2);
      }, B.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.file && e2.file.length)
          for (var n2 = 0; n2 < e2.file.length; ++n2)
            c.google.protobuf.FileDescriptorProto.encode(e2.file[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, B.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, B.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.FileDescriptorSet(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.file && o2.file.length || (o2.file = []), o2.file.push(c.google.protobuf.FileDescriptorProto.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, B.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, B.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.file && e2.hasOwnProperty("file")) {
          if (!Array.isArray(e2.file))
            return "file: array expected";
          for (var t2 = 0; t2 < e2.file.length; ++t2) {
            var n2 = c.google.protobuf.FileDescriptorProto.verify(e2.file[t2]);
            if (n2)
              return "file." + n2;
          }
        }
        return null;
      }, B.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.FileDescriptorSet)
          return e2;
        var t2 = new c.google.protobuf.FileDescriptorSet();
        if (e2.file) {
          if (!Array.isArray(e2.file))
            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
          t2.file = [];
          for (var n2 = 0; n2 < e2.file.length; ++n2) {
            if ("object" != typeof e2.file[n2])
              throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
            t2.file[n2] = c.google.protobuf.FileDescriptorProto.fromObject(e2.file[n2]);
          }
        }
        return t2;
      }, B.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.file = []), e2.file && e2.file.length) {
          n2.file = [];
          for (var o2 = 0; o2 < e2.file.length; ++o2)
            n2.file[o2] = c.google.protobuf.FileDescriptorProto.toObject(e2.file[o2], t2);
        }
        return n2;
      }, B.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, B), n.FileDescriptorProto = (f.prototype.name = "", f.prototype.package = "", f.prototype.dependency = u.emptyArray, f.prototype.publicDependency = u.emptyArray, f.prototype.weakDependency = u.emptyArray, f.prototype.messageType = u.emptyArray, f.prototype.enumType = u.emptyArray, f.prototype.service = u.emptyArray, f.prototype.extension = u.emptyArray, f.prototype.options = null, f.prototype.sourceCodeInfo = null, f.prototype.syntax = "", f.create = function(e2) {
        return new f(e2);
      }, f.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.package && Object.hasOwnProperty.call(e2, "package") && t2.uint32(18).string(e2.package), null != e2.dependency && e2.dependency.length)
          for (var n2 = 0; n2 < e2.dependency.length; ++n2)
            t2.uint32(26).string(e2.dependency[n2]);
        if (null != e2.messageType && e2.messageType.length)
          for (n2 = 0; n2 < e2.messageType.length; ++n2)
            c.google.protobuf.DescriptorProto.encode(e2.messageType[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.enumType && e2.enumType.length)
          for (n2 = 0; n2 < e2.enumType.length; ++n2)
            c.google.protobuf.EnumDescriptorProto.encode(e2.enumType[n2], t2.uint32(42).fork()).ldelim();
        if (null != e2.service && e2.service.length)
          for (n2 = 0; n2 < e2.service.length; ++n2)
            c.google.protobuf.ServiceDescriptorProto.encode(e2.service[n2], t2.uint32(50).fork()).ldelim();
        if (null != e2.extension && e2.extension.length)
          for (n2 = 0; n2 < e2.extension.length; ++n2)
            c.google.protobuf.FieldDescriptorProto.encode(e2.extension[n2], t2.uint32(58).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.FileOptions.encode(e2.options, t2.uint32(66).fork()).ldelim(), null != e2.sourceCodeInfo && Object.hasOwnProperty.call(e2, "sourceCodeInfo") && c.google.protobuf.SourceCodeInfo.encode(e2.sourceCodeInfo, t2.uint32(74).fork()).ldelim(), null != e2.publicDependency && e2.publicDependency.length)
          for (n2 = 0; n2 < e2.publicDependency.length; ++n2)
            t2.uint32(80).int32(e2.publicDependency[n2]);
        if (null != e2.weakDependency && e2.weakDependency.length)
          for (n2 = 0; n2 < e2.weakDependency.length; ++n2)
            t2.uint32(88).int32(e2.weakDependency[n2]);
        return null != e2.syntax && Object.hasOwnProperty.call(e2, "syntax") && t2.uint32(98).string(e2.syntax), t2;
      }, f.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, f.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.FileDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.package = e2.string();
              break;
            case 3:
              o2.dependency && o2.dependency.length || (o2.dependency = []), o2.dependency.push(e2.string());
              break;
            case 10:
              if (o2.publicDependency && o2.publicDependency.length || (o2.publicDependency = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.publicDependency.push(e2.int32());
              else
                o2.publicDependency.push(e2.int32());
              break;
            case 11:
              if (o2.weakDependency && o2.weakDependency.length || (o2.weakDependency = []), 2 == (7 & r2))
                for (i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.weakDependency.push(e2.int32());
              else
                o2.weakDependency.push(e2.int32());
              break;
            case 4:
              o2.messageType && o2.messageType.length || (o2.messageType = []), o2.messageType.push(c.google.protobuf.DescriptorProto.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.enumType && o2.enumType.length || (o2.enumType = []), o2.enumType.push(c.google.protobuf.EnumDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 6:
              o2.service && o2.service.length || (o2.service = []), o2.service.push(c.google.protobuf.ServiceDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 7:
              o2.extension && o2.extension.length || (o2.extension = []), o2.extension.push(c.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 8:
              o2.options = c.google.protobuf.FileOptions.decode(e2, e2.uint32());
              break;
            case 9:
              o2.sourceCodeInfo = c.google.protobuf.SourceCodeInfo.decode(e2, e2.uint32());
              break;
            case 12:
              o2.syntax = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, f.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, f.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.package && e2.hasOwnProperty("package") && !u.isString(e2.package))
          return "package: string expected";
        if (null != e2.dependency && e2.hasOwnProperty("dependency")) {
          if (!Array.isArray(e2.dependency))
            return "dependency: array expected";
          for (var t2 = 0; t2 < e2.dependency.length; ++t2)
            if (!u.isString(e2.dependency[t2]))
              return "dependency: string[] expected";
        }
        if (null != e2.publicDependency && e2.hasOwnProperty("publicDependency")) {
          if (!Array.isArray(e2.publicDependency))
            return "publicDependency: array expected";
          for (t2 = 0; t2 < e2.publicDependency.length; ++t2)
            if (!u.isInteger(e2.publicDependency[t2]))
              return "publicDependency: integer[] expected";
        }
        if (null != e2.weakDependency && e2.hasOwnProperty("weakDependency")) {
          if (!Array.isArray(e2.weakDependency))
            return "weakDependency: array expected";
          for (t2 = 0; t2 < e2.weakDependency.length; ++t2)
            if (!u.isInteger(e2.weakDependency[t2]))
              return "weakDependency: integer[] expected";
        }
        if (null != e2.messageType && e2.hasOwnProperty("messageType")) {
          if (!Array.isArray(e2.messageType))
            return "messageType: array expected";
          for (t2 = 0; t2 < e2.messageType.length; ++t2)
            if (n2 = c.google.protobuf.DescriptorProto.verify(e2.messageType[t2]))
              return "messageType." + n2;
        }
        if (null != e2.enumType && e2.hasOwnProperty("enumType")) {
          if (!Array.isArray(e2.enumType))
            return "enumType: array expected";
          for (t2 = 0; t2 < e2.enumType.length; ++t2)
            if (n2 = c.google.protobuf.EnumDescriptorProto.verify(e2.enumType[t2]))
              return "enumType." + n2;
        }
        if (null != e2.service && e2.hasOwnProperty("service")) {
          if (!Array.isArray(e2.service))
            return "service: array expected";
          for (t2 = 0; t2 < e2.service.length; ++t2)
            if (n2 = c.google.protobuf.ServiceDescriptorProto.verify(e2.service[t2]))
              return "service." + n2;
        }
        if (null != e2.extension && e2.hasOwnProperty("extension")) {
          if (!Array.isArray(e2.extension))
            return "extension: array expected";
          for (t2 = 0; t2 < e2.extension.length; ++t2)
            if (n2 = c.google.protobuf.FieldDescriptorProto.verify(e2.extension[t2]))
              return "extension." + n2;
        }
        var n2;
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = c.google.protobuf.FileOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.sourceCodeInfo && e2.hasOwnProperty("sourceCodeInfo") && (n2 = c.google.protobuf.SourceCodeInfo.verify(e2.sourceCodeInfo)))
          return "sourceCodeInfo." + n2;
        return null != e2.syntax && e2.hasOwnProperty("syntax") && !u.isString(e2.syntax) ? "syntax: string expected" : null;
      }, f.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.FileDescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.FileDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.package && (t2.package = String(e2.package)), e2.dependency) {
          if (!Array.isArray(e2.dependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
          t2.dependency = [];
          for (var n2 = 0; n2 < e2.dependency.length; ++n2)
            t2.dependency[n2] = String(e2.dependency[n2]);
        }
        if (e2.publicDependency) {
          if (!Array.isArray(e2.publicDependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
          t2.publicDependency = [];
          for (n2 = 0; n2 < e2.publicDependency.length; ++n2)
            t2.publicDependency[n2] = 0 | e2.publicDependency[n2];
        }
        if (e2.weakDependency) {
          if (!Array.isArray(e2.weakDependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
          t2.weakDependency = [];
          for (n2 = 0; n2 < e2.weakDependency.length; ++n2)
            t2.weakDependency[n2] = 0 | e2.weakDependency[n2];
        }
        if (e2.messageType) {
          if (!Array.isArray(e2.messageType))
            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
          t2.messageType = [];
          for (n2 = 0; n2 < e2.messageType.length; ++n2) {
            if ("object" != typeof e2.messageType[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
            t2.messageType[n2] = c.google.protobuf.DescriptorProto.fromObject(e2.messageType[n2]);
          }
        }
        if (e2.enumType) {
          if (!Array.isArray(e2.enumType))
            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
          t2.enumType = [];
          for (n2 = 0; n2 < e2.enumType.length; ++n2) {
            if ("object" != typeof e2.enumType[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
            t2.enumType[n2] = c.google.protobuf.EnumDescriptorProto.fromObject(e2.enumType[n2]);
          }
        }
        if (e2.service) {
          if (!Array.isArray(e2.service))
            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
          t2.service = [];
          for (n2 = 0; n2 < e2.service.length; ++n2) {
            if ("object" != typeof e2.service[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
            t2.service[n2] = c.google.protobuf.ServiceDescriptorProto.fromObject(e2.service[n2]);
          }
        }
        if (e2.extension) {
          if (!Array.isArray(e2.extension))
            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
          t2.extension = [];
          for (n2 = 0; n2 < e2.extension.length; ++n2) {
            if ("object" != typeof e2.extension[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
            t2.extension[n2] = c.google.protobuf.FieldDescriptorProto.fromObject(e2.extension[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
          t2.options = c.google.protobuf.FileOptions.fromObject(e2.options);
        }
        if (null != e2.sourceCodeInfo) {
          if ("object" != typeof e2.sourceCodeInfo)
            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
          t2.sourceCodeInfo = c.google.protobuf.SourceCodeInfo.fromObject(e2.sourceCodeInfo);
        }
        return null != e2.syntax && (t2.syntax = String(e2.syntax)), t2;
      }, f.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.dependency = [], n2.messageType = [], n2.enumType = [], n2.service = [], n2.extension = [], n2.publicDependency = [], n2.weakDependency = []), t2.defaults && (n2.name = "", n2.package = "", n2.options = null, n2.sourceCodeInfo = null, n2.syntax = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.package && e2.hasOwnProperty("package") && (n2.package = e2.package), e2.dependency && e2.dependency.length) {
          n2.dependency = [];
          for (var o2 = 0; o2 < e2.dependency.length; ++o2)
            n2.dependency[o2] = e2.dependency[o2];
        }
        if (e2.messageType && e2.messageType.length) {
          n2.messageType = [];
          for (o2 = 0; o2 < e2.messageType.length; ++o2)
            n2.messageType[o2] = c.google.protobuf.DescriptorProto.toObject(e2.messageType[o2], t2);
        }
        if (e2.enumType && e2.enumType.length) {
          n2.enumType = [];
          for (o2 = 0; o2 < e2.enumType.length; ++o2)
            n2.enumType[o2] = c.google.protobuf.EnumDescriptorProto.toObject(e2.enumType[o2], t2);
        }
        if (e2.service && e2.service.length) {
          n2.service = [];
          for (o2 = 0; o2 < e2.service.length; ++o2)
            n2.service[o2] = c.google.protobuf.ServiceDescriptorProto.toObject(e2.service[o2], t2);
        }
        if (e2.extension && e2.extension.length) {
          n2.extension = [];
          for (o2 = 0; o2 < e2.extension.length; ++o2)
            n2.extension[o2] = c.google.protobuf.FieldDescriptorProto.toObject(e2.extension[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.FileOptions.toObject(e2.options, t2)), null != e2.sourceCodeInfo && e2.hasOwnProperty("sourceCodeInfo") && (n2.sourceCodeInfo = c.google.protobuf.SourceCodeInfo.toObject(e2.sourceCodeInfo, t2)), e2.publicDependency && e2.publicDependency.length) {
          n2.publicDependency = [];
          for (o2 = 0; o2 < e2.publicDependency.length; ++o2)
            n2.publicDependency[o2] = e2.publicDependency[o2];
        }
        if (e2.weakDependency && e2.weakDependency.length) {
          n2.weakDependency = [];
          for (o2 = 0; o2 < e2.weakDependency.length; ++o2)
            n2.weakDependency[o2] = e2.weakDependency[o2];
        }
        return null != e2.syntax && e2.hasOwnProperty("syntax") && (n2.syntax = e2.syntax), n2;
      }, f.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, f), n.DescriptorProto = (y.prototype.name = "", y.prototype.field = u.emptyArray, y.prototype.extension = u.emptyArray, y.prototype.nestedType = u.emptyArray, y.prototype.enumType = u.emptyArray, y.prototype.extensionRange = u.emptyArray, y.prototype.oneofDecl = u.emptyArray, y.prototype.options = null, y.prototype.reservedRange = u.emptyArray, y.prototype.reservedName = u.emptyArray, y.create = function(e2) {
        return new y(e2);
      }, y.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.field && e2.field.length)
          for (var n2 = 0; n2 < e2.field.length; ++n2)
            c.google.protobuf.FieldDescriptorProto.encode(e2.field[n2], t2.uint32(18).fork()).ldelim();
        if (null != e2.nestedType && e2.nestedType.length)
          for (n2 = 0; n2 < e2.nestedType.length; ++n2)
            c.google.protobuf.DescriptorProto.encode(e2.nestedType[n2], t2.uint32(26).fork()).ldelim();
        if (null != e2.enumType && e2.enumType.length)
          for (n2 = 0; n2 < e2.enumType.length; ++n2)
            c.google.protobuf.EnumDescriptorProto.encode(e2.enumType[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.extensionRange && e2.extensionRange.length)
          for (n2 = 0; n2 < e2.extensionRange.length; ++n2)
            c.google.protobuf.DescriptorProto.ExtensionRange.encode(e2.extensionRange[n2], t2.uint32(42).fork()).ldelim();
        if (null != e2.extension && e2.extension.length)
          for (n2 = 0; n2 < e2.extension.length; ++n2)
            c.google.protobuf.FieldDescriptorProto.encode(e2.extension[n2], t2.uint32(50).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.MessageOptions.encode(e2.options, t2.uint32(58).fork()).ldelim(), null != e2.oneofDecl && e2.oneofDecl.length)
          for (n2 = 0; n2 < e2.oneofDecl.length; ++n2)
            c.google.protobuf.OneofDescriptorProto.encode(e2.oneofDecl[n2], t2.uint32(66).fork()).ldelim();
        if (null != e2.reservedRange && e2.reservedRange.length)
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2)
            c.google.protobuf.DescriptorProto.ReservedRange.encode(e2.reservedRange[n2], t2.uint32(74).fork()).ldelim();
        if (null != e2.reservedName && e2.reservedName.length)
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.uint32(82).string(e2.reservedName[n2]);
        return t2;
      }, y.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, y.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.DescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.field && o2.field.length || (o2.field = []), o2.field.push(c.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 6:
              o2.extension && o2.extension.length || (o2.extension = []), o2.extension.push(c.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.nestedType && o2.nestedType.length || (o2.nestedType = []), o2.nestedType.push(c.google.protobuf.DescriptorProto.decode(e2, e2.uint32()));
              break;
            case 4:
              o2.enumType && o2.enumType.length || (o2.enumType = []), o2.enumType.push(c.google.protobuf.EnumDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.extensionRange && o2.extensionRange.length || (o2.extensionRange = []), o2.extensionRange.push(c.google.protobuf.DescriptorProto.ExtensionRange.decode(e2, e2.uint32()));
              break;
            case 8:
              o2.oneofDecl && o2.oneofDecl.length || (o2.oneofDecl = []), o2.oneofDecl.push(c.google.protobuf.OneofDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 7:
              o2.options = c.google.protobuf.MessageOptions.decode(e2, e2.uint32());
              break;
            case 9:
              o2.reservedRange && o2.reservedRange.length || (o2.reservedRange = []), o2.reservedRange.push(c.google.protobuf.DescriptorProto.ReservedRange.decode(e2, e2.uint32()));
              break;
            case 10:
              o2.reservedName && o2.reservedName.length || (o2.reservedName = []), o2.reservedName.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, y.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, y.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.field && e2.hasOwnProperty("field")) {
          if (!Array.isArray(e2.field))
            return "field: array expected";
          for (var t2 = 0; t2 < e2.field.length; ++t2)
            if (n2 = c.google.protobuf.FieldDescriptorProto.verify(e2.field[t2]))
              return "field." + n2;
        }
        if (null != e2.extension && e2.hasOwnProperty("extension")) {
          if (!Array.isArray(e2.extension))
            return "extension: array expected";
          for (t2 = 0; t2 < e2.extension.length; ++t2)
            if (n2 = c.google.protobuf.FieldDescriptorProto.verify(e2.extension[t2]))
              return "extension." + n2;
        }
        if (null != e2.nestedType && e2.hasOwnProperty("nestedType")) {
          if (!Array.isArray(e2.nestedType))
            return "nestedType: array expected";
          for (t2 = 0; t2 < e2.nestedType.length; ++t2)
            if (n2 = c.google.protobuf.DescriptorProto.verify(e2.nestedType[t2]))
              return "nestedType." + n2;
        }
        if (null != e2.enumType && e2.hasOwnProperty("enumType")) {
          if (!Array.isArray(e2.enumType))
            return "enumType: array expected";
          for (t2 = 0; t2 < e2.enumType.length; ++t2)
            if (n2 = c.google.protobuf.EnumDescriptorProto.verify(e2.enumType[t2]))
              return "enumType." + n2;
        }
        if (null != e2.extensionRange && e2.hasOwnProperty("extensionRange")) {
          if (!Array.isArray(e2.extensionRange))
            return "extensionRange: array expected";
          for (t2 = 0; t2 < e2.extensionRange.length; ++t2)
            if (n2 = c.google.protobuf.DescriptorProto.ExtensionRange.verify(e2.extensionRange[t2]))
              return "extensionRange." + n2;
        }
        if (null != e2.oneofDecl && e2.hasOwnProperty("oneofDecl")) {
          if (!Array.isArray(e2.oneofDecl))
            return "oneofDecl: array expected";
          for (t2 = 0; t2 < e2.oneofDecl.length; ++t2)
            if (n2 = c.google.protobuf.OneofDescriptorProto.verify(e2.oneofDecl[t2]))
              return "oneofDecl." + n2;
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = c.google.protobuf.MessageOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.reservedRange && e2.hasOwnProperty("reservedRange")) {
          if (!Array.isArray(e2.reservedRange))
            return "reservedRange: array expected";
          for (var n2, t2 = 0; t2 < e2.reservedRange.length; ++t2)
            if (n2 = c.google.protobuf.DescriptorProto.ReservedRange.verify(e2.reservedRange[t2]))
              return "reservedRange." + n2;
        }
        if (null != e2.reservedName && e2.hasOwnProperty("reservedName")) {
          if (!Array.isArray(e2.reservedName))
            return "reservedName: array expected";
          for (t2 = 0; t2 < e2.reservedName.length; ++t2)
            if (!u.isString(e2.reservedName[t2]))
              return "reservedName: string[] expected";
        }
        return null;
      }, y.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.DescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.DescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.field) {
          if (!Array.isArray(e2.field))
            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
          t2.field = [];
          for (var n2 = 0; n2 < e2.field.length; ++n2) {
            if ("object" != typeof e2.field[n2])
              throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
            t2.field[n2] = c.google.protobuf.FieldDescriptorProto.fromObject(e2.field[n2]);
          }
        }
        if (e2.extension) {
          if (!Array.isArray(e2.extension))
            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
          t2.extension = [];
          for (n2 = 0; n2 < e2.extension.length; ++n2) {
            if ("object" != typeof e2.extension[n2])
              throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
            t2.extension[n2] = c.google.protobuf.FieldDescriptorProto.fromObject(e2.extension[n2]);
          }
        }
        if (e2.nestedType) {
          if (!Array.isArray(e2.nestedType))
            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
          t2.nestedType = [];
          for (n2 = 0; n2 < e2.nestedType.length; ++n2) {
            if ("object" != typeof e2.nestedType[n2])
              throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
            t2.nestedType[n2] = c.google.protobuf.DescriptorProto.fromObject(e2.nestedType[n2]);
          }
        }
        if (e2.enumType) {
          if (!Array.isArray(e2.enumType))
            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
          t2.enumType = [];
          for (n2 = 0; n2 < e2.enumType.length; ++n2) {
            if ("object" != typeof e2.enumType[n2])
              throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
            t2.enumType[n2] = c.google.protobuf.EnumDescriptorProto.fromObject(e2.enumType[n2]);
          }
        }
        if (e2.extensionRange) {
          if (!Array.isArray(e2.extensionRange))
            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
          t2.extensionRange = [];
          for (n2 = 0; n2 < e2.extensionRange.length; ++n2) {
            if ("object" != typeof e2.extensionRange[n2])
              throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
            t2.extensionRange[n2] = c.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e2.extensionRange[n2]);
          }
        }
        if (e2.oneofDecl) {
          if (!Array.isArray(e2.oneofDecl))
            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
          t2.oneofDecl = [];
          for (n2 = 0; n2 < e2.oneofDecl.length; ++n2) {
            if ("object" != typeof e2.oneofDecl[n2])
              throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
            t2.oneofDecl[n2] = c.google.protobuf.OneofDescriptorProto.fromObject(e2.oneofDecl[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
          t2.options = c.google.protobuf.MessageOptions.fromObject(e2.options);
        }
        if (e2.reservedRange) {
          if (!Array.isArray(e2.reservedRange))
            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
          t2.reservedRange = [];
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2) {
            if ("object" != typeof e2.reservedRange[n2])
              throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
            t2.reservedRange[n2] = c.google.protobuf.DescriptorProto.ReservedRange.fromObject(e2.reservedRange[n2]);
          }
        }
        if (e2.reservedName) {
          if (!Array.isArray(e2.reservedName))
            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
          t2.reservedName = [];
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.reservedName[n2] = String(e2.reservedName[n2]);
        }
        return t2;
      }, y.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.field = [], n2.nestedType = [], n2.enumType = [], n2.extensionRange = [], n2.extension = [], n2.oneofDecl = [], n2.reservedRange = [], n2.reservedName = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.field && e2.field.length) {
          n2.field = [];
          for (var o2 = 0; o2 < e2.field.length; ++o2)
            n2.field[o2] = c.google.protobuf.FieldDescriptorProto.toObject(e2.field[o2], t2);
        }
        if (e2.nestedType && e2.nestedType.length) {
          n2.nestedType = [];
          for (o2 = 0; o2 < e2.nestedType.length; ++o2)
            n2.nestedType[o2] = c.google.protobuf.DescriptorProto.toObject(e2.nestedType[o2], t2);
        }
        if (e2.enumType && e2.enumType.length) {
          n2.enumType = [];
          for (o2 = 0; o2 < e2.enumType.length; ++o2)
            n2.enumType[o2] = c.google.protobuf.EnumDescriptorProto.toObject(e2.enumType[o2], t2);
        }
        if (e2.extensionRange && e2.extensionRange.length) {
          n2.extensionRange = [];
          for (o2 = 0; o2 < e2.extensionRange.length; ++o2)
            n2.extensionRange[o2] = c.google.protobuf.DescriptorProto.ExtensionRange.toObject(e2.extensionRange[o2], t2);
        }
        if (e2.extension && e2.extension.length) {
          n2.extension = [];
          for (o2 = 0; o2 < e2.extension.length; ++o2)
            n2.extension[o2] = c.google.protobuf.FieldDescriptorProto.toObject(e2.extension[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.MessageOptions.toObject(e2.options, t2)), e2.oneofDecl && e2.oneofDecl.length) {
          n2.oneofDecl = [];
          for (o2 = 0; o2 < e2.oneofDecl.length; ++o2)
            n2.oneofDecl[o2] = c.google.protobuf.OneofDescriptorProto.toObject(e2.oneofDecl[o2], t2);
        }
        if (e2.reservedRange && e2.reservedRange.length) {
          n2.reservedRange = [];
          for (o2 = 0; o2 < e2.reservedRange.length; ++o2)
            n2.reservedRange[o2] = c.google.protobuf.DescriptorProto.ReservedRange.toObject(e2.reservedRange[o2], t2);
        }
        if (e2.reservedName && e2.reservedName.length) {
          n2.reservedName = [];
          for (o2 = 0; o2 < e2.reservedName.length; ++o2)
            n2.reservedName[o2] = e2.reservedName[o2];
        }
        return n2;
      }, y.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, y.ExtensionRange = (h.prototype.start = 0, h.prototype.end = 0, h.prototype.options = null, h.create = function(e2) {
        return new h(e2);
      }, h.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.ExtensionRangeOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, h.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, h.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.DescriptorProto.ExtensionRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            case 3:
              o2.options = c.google.protobuf.ExtensionRangeOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, h.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, h.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.start && e2.hasOwnProperty("start") && !u.isInteger(e2.start))
          return "start: integer expected";
        if (null != e2.end && e2.hasOwnProperty("end") && !u.isInteger(e2.end))
          return "end: integer expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = c.google.protobuf.ExtensionRangeOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, h.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.DescriptorProto.ExtensionRange)
          return e2;
        var t2 = new c.google.protobuf.DescriptorProto.ExtensionRange();
        if (null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
          t2.options = c.google.protobuf.ExtensionRangeOptions.fromObject(e2.options);
        }
        return t2;
      }, h.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0, n2.options = null), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.ExtensionRangeOptions.toObject(e2.options, t2)), n2;
      }, h.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, h), y.ReservedRange = (b.prototype.start = 0, b.prototype.end = 0, b.create = function(e2) {
        return new b(e2);
      }, b.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), t2;
      }, b.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, b.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.DescriptorProto.ReservedRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, b.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, b.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.start && e2.hasOwnProperty("start") && !u.isInteger(e2.start) ? "start: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !u.isInteger(e2.end) ? "end: integer expected" : null;
      }, b.fromObject = function(e2) {
        var t2;
        return e2 instanceof c.google.protobuf.DescriptorProto.ReservedRange ? e2 : (t2 = new c.google.protobuf.DescriptorProto.ReservedRange(), null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), t2);
      }, b.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, b.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, b), y), n.ExtensionRangeOptions = (U.prototype.uninterpretedOption = u.emptyArray, U.create = function(e2) {
        return new U(e2);
      }, U.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, U.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, U.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.ExtensionRangeOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 999 ? (o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, U.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, U.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, U.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.ExtensionRangeOptions)
          return e2;
        var t2 = new c.google.protobuf.ExtensionRangeOptions();
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, U.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, U.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, U), n.FieldDescriptorProto = (O.prototype.name = "", O.prototype.number = 0, O.prototype.label = 1, O.prototype.type = 1, O.prototype.typeName = "", O.prototype.extendee = "", O.prototype.defaultValue = "", O.prototype.oneofIndex = 0, O.prototype.jsonName = "", O.prototype.options = null, O.prototype.proto3Optional = false, O.create = function(e2) {
        return new O(e2);
      }, O.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.extendee && Object.hasOwnProperty.call(e2, "extendee") && t2.uint32(18).string(e2.extendee), null != e2.number && Object.hasOwnProperty.call(e2, "number") && t2.uint32(24).int32(e2.number), null != e2.label && Object.hasOwnProperty.call(e2, "label") && t2.uint32(32).int32(e2.label), null != e2.type && Object.hasOwnProperty.call(e2, "type") && t2.uint32(40).int32(e2.type), null != e2.typeName && Object.hasOwnProperty.call(e2, "typeName") && t2.uint32(50).string(e2.typeName), null != e2.defaultValue && Object.hasOwnProperty.call(e2, "defaultValue") && t2.uint32(58).string(e2.defaultValue), null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.FieldOptions.encode(e2.options, t2.uint32(66).fork()).ldelim(), null != e2.oneofIndex && Object.hasOwnProperty.call(e2, "oneofIndex") && t2.uint32(72).int32(e2.oneofIndex), null != e2.jsonName && Object.hasOwnProperty.call(e2, "jsonName") && t2.uint32(82).string(e2.jsonName), null != e2.proto3Optional && Object.hasOwnProperty.call(e2, "proto3Optional") && t2.uint32(136).bool(e2.proto3Optional), t2;
      }, O.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, O.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.FieldDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 3:
              o2.number = e2.int32();
              break;
            case 4:
              o2.label = e2.int32();
              break;
            case 5:
              o2.type = e2.int32();
              break;
            case 6:
              o2.typeName = e2.string();
              break;
            case 2:
              o2.extendee = e2.string();
              break;
            case 7:
              o2.defaultValue = e2.string();
              break;
            case 9:
              o2.oneofIndex = e2.int32();
              break;
            case 10:
              o2.jsonName = e2.string();
              break;
            case 8:
              o2.options = c.google.protobuf.FieldOptions.decode(e2, e2.uint32());
              break;
            case 17:
              o2.proto3Optional = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, O.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, O.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.number && e2.hasOwnProperty("number") && !u.isInteger(e2.number))
          return "number: integer expected";
        if (null != e2.label && e2.hasOwnProperty("label"))
          switch (e2.label) {
            default:
              return "label: enum value expected";
            case 1:
            case 2:
            case 3:
          }
        if (null != e2.type && e2.hasOwnProperty("type"))
          switch (e2.type) {
            default:
              return "type: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
          }
        if (null != e2.typeName && e2.hasOwnProperty("typeName") && !u.isString(e2.typeName))
          return "typeName: string expected";
        if (null != e2.extendee && e2.hasOwnProperty("extendee") && !u.isString(e2.extendee))
          return "extendee: string expected";
        if (null != e2.defaultValue && e2.hasOwnProperty("defaultValue") && !u.isString(e2.defaultValue))
          return "defaultValue: string expected";
        if (null != e2.oneofIndex && e2.hasOwnProperty("oneofIndex") && !u.isInteger(e2.oneofIndex))
          return "oneofIndex: integer expected";
        if (null != e2.jsonName && e2.hasOwnProperty("jsonName") && !u.isString(e2.jsonName))
          return "jsonName: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          var t2 = c.google.protobuf.FieldOptions.verify(e2.options);
          if (t2)
            return "options." + t2;
        }
        return null != e2.proto3Optional && e2.hasOwnProperty("proto3Optional") && "boolean" != typeof e2.proto3Optional ? "proto3Optional: boolean expected" : null;
      }, O.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.FieldDescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.FieldDescriptorProto();
        switch (null != e2.name && (t2.name = String(e2.name)), null != e2.number && (t2.number = 0 | e2.number), e2.label) {
          case "LABEL_OPTIONAL":
          case 1:
            t2.label = 1;
            break;
          case "LABEL_REQUIRED":
          case 2:
            t2.label = 2;
            break;
          case "LABEL_REPEATED":
          case 3:
            t2.label = 3;
        }
        switch (e2.type) {
          case "TYPE_DOUBLE":
          case 1:
            t2.type = 1;
            break;
          case "TYPE_FLOAT":
          case 2:
            t2.type = 2;
            break;
          case "TYPE_INT64":
          case 3:
            t2.type = 3;
            break;
          case "TYPE_UINT64":
          case 4:
            t2.type = 4;
            break;
          case "TYPE_INT32":
          case 5:
            t2.type = 5;
            break;
          case "TYPE_FIXED64":
          case 6:
            t2.type = 6;
            break;
          case "TYPE_FIXED32":
          case 7:
            t2.type = 7;
            break;
          case "TYPE_BOOL":
          case 8:
            t2.type = 8;
            break;
          case "TYPE_STRING":
          case 9:
            t2.type = 9;
            break;
          case "TYPE_GROUP":
          case 10:
            t2.type = 10;
            break;
          case "TYPE_MESSAGE":
          case 11:
            t2.type = 11;
            break;
          case "TYPE_BYTES":
          case 12:
            t2.type = 12;
            break;
          case "TYPE_UINT32":
          case 13:
            t2.type = 13;
            break;
          case "TYPE_ENUM":
          case 14:
            t2.type = 14;
            break;
          case "TYPE_SFIXED32":
          case 15:
            t2.type = 15;
            break;
          case "TYPE_SFIXED64":
          case 16:
            t2.type = 16;
            break;
          case "TYPE_SINT32":
          case 17:
            t2.type = 17;
            break;
          case "TYPE_SINT64":
          case 18:
            t2.type = 18;
        }
        if (null != e2.typeName && (t2.typeName = String(e2.typeName)), null != e2.extendee && (t2.extendee = String(e2.extendee)), null != e2.defaultValue && (t2.defaultValue = String(e2.defaultValue)), null != e2.oneofIndex && (t2.oneofIndex = 0 | e2.oneofIndex), null != e2.jsonName && (t2.jsonName = String(e2.jsonName)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
          t2.options = c.google.protobuf.FieldOptions.fromObject(e2.options);
        }
        return null != e2.proto3Optional && (t2.proto3Optional = Boolean(e2.proto3Optional)), t2;
      }, O.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.extendee = "", n2.number = 0, n2.label = t2.enums === String ? "LABEL_OPTIONAL" : 1, n2.type = t2.enums === String ? "TYPE_DOUBLE" : 1, n2.typeName = "", n2.defaultValue = "", n2.options = null, n2.oneofIndex = 0, n2.jsonName = "", n2.proto3Optional = false), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.extendee && e2.hasOwnProperty("extendee") && (n2.extendee = e2.extendee), null != e2.number && e2.hasOwnProperty("number") && (n2.number = e2.number), null != e2.label && e2.hasOwnProperty("label") && (n2.label = t2.enums === String ? c.google.protobuf.FieldDescriptorProto.Label[e2.label] : e2.label), null != e2.type && e2.hasOwnProperty("type") && (n2.type = t2.enums === String ? c.google.protobuf.FieldDescriptorProto.Type[e2.type] : e2.type), null != e2.typeName && e2.hasOwnProperty("typeName") && (n2.typeName = e2.typeName), null != e2.defaultValue && e2.hasOwnProperty("defaultValue") && (n2.defaultValue = e2.defaultValue), null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.FieldOptions.toObject(e2.options, t2)), null != e2.oneofIndex && e2.hasOwnProperty("oneofIndex") && (n2.oneofIndex = e2.oneofIndex), null != e2.jsonName && e2.hasOwnProperty("jsonName") && (n2.jsonName = e2.jsonName), null != e2.proto3Optional && e2.hasOwnProperty("proto3Optional") && (n2.proto3Optional = e2.proto3Optional), n2;
      }, O.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, O.Type = (e = {}, (t = Object.create(e))[e[1] = "TYPE_DOUBLE"] = 1, t[e[2] = "TYPE_FLOAT"] = 2, t[e[3] = "TYPE_INT64"] = 3, t[e[4] = "TYPE_UINT64"] = 4, t[e[5] = "TYPE_INT32"] = 5, t[e[6] = "TYPE_FIXED64"] = 6, t[e[7] = "TYPE_FIXED32"] = 7, t[e[8] = "TYPE_BOOL"] = 8, t[e[9] = "TYPE_STRING"] = 9, t[e[10] = "TYPE_GROUP"] = 10, t[e[11] = "TYPE_MESSAGE"] = 11, t[e[12] = "TYPE_BYTES"] = 12, t[e[13] = "TYPE_UINT32"] = 13, t[e[14] = "TYPE_ENUM"] = 14, t[e[15] = "TYPE_SFIXED32"] = 15, t[e[16] = "TYPE_SFIXED64"] = 16, t[e[17] = "TYPE_SINT32"] = 17, t[e[18] = "TYPE_SINT64"] = 18, t), O.Label = (e = {}, (t = Object.create(e))[e[1] = "LABEL_OPTIONAL"] = 1, t[e[2] = "LABEL_REQUIRED"] = 2, t[e[3] = "LABEL_REPEATED"] = 3, t), O), n.OneofDescriptorProto = (m.prototype.name = "", m.prototype.options = null, m.create = function(e2) {
        return new m(e2);
      }, m.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.OneofOptions.encode(e2.options, t2.uint32(18).fork()).ldelim(), t2;
      }, m.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, m.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.OneofDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.options = c.google.protobuf.OneofOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, m.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, m.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = c.google.protobuf.OneofOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, m.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.OneofDescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.OneofDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
          t2.options = c.google.protobuf.OneofOptions.fromObject(e2.options);
        }
        return t2;
      }, m.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.OneofOptions.toObject(e2.options, t2)), n2;
      }, m.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, m), n.EnumDescriptorProto = (v.prototype.name = "", v.prototype.value = u.emptyArray, v.prototype.options = null, v.prototype.reservedRange = u.emptyArray, v.prototype.reservedName = u.emptyArray, v.create = function(e2) {
        return new v(e2);
      }, v.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.value && e2.value.length)
          for (var n2 = 0; n2 < e2.value.length; ++n2)
            c.google.protobuf.EnumValueDescriptorProto.encode(e2.value[n2], t2.uint32(18).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.EnumOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), null != e2.reservedRange && e2.reservedRange.length)
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2)
            c.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e2.reservedRange[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.reservedName && e2.reservedName.length)
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.uint32(42).string(e2.reservedName[n2]);
        return t2;
      }, v.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, v.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.EnumDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.value && o2.value.length || (o2.value = []), o2.value.push(c.google.protobuf.EnumValueDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.options = c.google.protobuf.EnumOptions.decode(e2, e2.uint32());
              break;
            case 4:
              o2.reservedRange && o2.reservedRange.length || (o2.reservedRange = []), o2.reservedRange.push(c.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.reservedName && o2.reservedName.length || (o2.reservedName = []), o2.reservedName.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, v.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, v.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.value && e2.hasOwnProperty("value")) {
          if (!Array.isArray(e2.value))
            return "value: array expected";
          for (var t2 = 0; t2 < e2.value.length; ++t2)
            if (n2 = c.google.protobuf.EnumValueDescriptorProto.verify(e2.value[t2]))
              return "value." + n2;
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = c.google.protobuf.EnumOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.reservedRange && e2.hasOwnProperty("reservedRange")) {
          if (!Array.isArray(e2.reservedRange))
            return "reservedRange: array expected";
          for (var n2, t2 = 0; t2 < e2.reservedRange.length; ++t2)
            if (n2 = c.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e2.reservedRange[t2]))
              return "reservedRange." + n2;
        }
        if (null != e2.reservedName && e2.hasOwnProperty("reservedName")) {
          if (!Array.isArray(e2.reservedName))
            return "reservedName: array expected";
          for (t2 = 0; t2 < e2.reservedName.length; ++t2)
            if (!u.isString(e2.reservedName[t2]))
              return "reservedName: string[] expected";
        }
        return null;
      }, v.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.EnumDescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.EnumDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.value) {
          if (!Array.isArray(e2.value))
            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
          t2.value = [];
          for (var n2 = 0; n2 < e2.value.length; ++n2) {
            if ("object" != typeof e2.value[n2])
              throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
            t2.value[n2] = c.google.protobuf.EnumValueDescriptorProto.fromObject(e2.value[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
          t2.options = c.google.protobuf.EnumOptions.fromObject(e2.options);
        }
        if (e2.reservedRange) {
          if (!Array.isArray(e2.reservedRange))
            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
          t2.reservedRange = [];
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2) {
            if ("object" != typeof e2.reservedRange[n2])
              throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
            t2.reservedRange[n2] = c.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e2.reservedRange[n2]);
          }
        }
        if (e2.reservedName) {
          if (!Array.isArray(e2.reservedName))
            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
          t2.reservedName = [];
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.reservedName[n2] = String(e2.reservedName[n2]);
        }
        return t2;
      }, v.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.value = [], n2.reservedRange = [], n2.reservedName = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.value && e2.value.length) {
          n2.value = [];
          for (var o2 = 0; o2 < e2.value.length; ++o2)
            n2.value[o2] = c.google.protobuf.EnumValueDescriptorProto.toObject(e2.value[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.EnumOptions.toObject(e2.options, t2)), e2.reservedRange && e2.reservedRange.length) {
          n2.reservedRange = [];
          for (o2 = 0; o2 < e2.reservedRange.length; ++o2)
            n2.reservedRange[o2] = c.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e2.reservedRange[o2], t2);
        }
        if (e2.reservedName && e2.reservedName.length) {
          n2.reservedName = [];
          for (o2 = 0; o2 < e2.reservedName.length; ++o2)
            n2.reservedName[o2] = e2.reservedName[o2];
        }
        return n2;
      }, v.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, v.EnumReservedRange = (P.prototype.start = 0, P.prototype.end = 0, P.create = function(e2) {
        return new P(e2);
      }, P.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), t2;
      }, P.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, P.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.EnumDescriptorProto.EnumReservedRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, P.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, P.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.start && e2.hasOwnProperty("start") && !u.isInteger(e2.start) ? "start: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !u.isInteger(e2.end) ? "end: integer expected" : null;
      }, P.fromObject = function(e2) {
        var t2;
        return e2 instanceof c.google.protobuf.EnumDescriptorProto.EnumReservedRange ? e2 : (t2 = new c.google.protobuf.EnumDescriptorProto.EnumReservedRange(), null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), t2);
      }, P.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, P.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, P), v), n.EnumValueDescriptorProto = (w.prototype.name = "", w.prototype.number = 0, w.prototype.options = null, w.create = function(e2) {
        return new w(e2);
      }, w.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.number && Object.hasOwnProperty.call(e2, "number") && t2.uint32(16).int32(e2.number), null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.EnumValueOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, w.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, w.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.EnumValueDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.number = e2.int32();
              break;
            case 3:
              o2.options = c.google.protobuf.EnumValueOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, w.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, w.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.number && e2.hasOwnProperty("number") && !u.isInteger(e2.number))
          return "number: integer expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = c.google.protobuf.EnumValueOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, w.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.EnumValueDescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.EnumValueDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.number && (t2.number = 0 | e2.number), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
          t2.options = c.google.protobuf.EnumValueOptions.fromObject(e2.options);
        }
        return t2;
      }, w.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.number = 0, n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.number && e2.hasOwnProperty("number") && (n2.number = e2.number), null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.EnumValueOptions.toObject(e2.options, t2)), n2;
      }, w.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, w), n.ServiceDescriptorProto = (j.prototype.name = "", j.prototype.method = u.emptyArray, j.prototype.options = null, j.create = function(e2) {
        return new j(e2);
      }, j.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.method && e2.method.length)
          for (var n2 = 0; n2 < e2.method.length; ++n2)
            c.google.protobuf.MethodDescriptorProto.encode(e2.method[n2], t2.uint32(18).fork()).ldelim();
        return null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.ServiceOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, j.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, j.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.ServiceDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.method && o2.method.length || (o2.method = []), o2.method.push(c.google.protobuf.MethodDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.options = c.google.protobuf.ServiceOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, j.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, j.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.method && e2.hasOwnProperty("method")) {
          if (!Array.isArray(e2.method))
            return "method: array expected";
          for (var t2 = 0; t2 < e2.method.length; ++t2)
            if (n2 = c.google.protobuf.MethodDescriptorProto.verify(e2.method[t2]))
              return "method." + n2;
        }
        var n2;
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = c.google.protobuf.ServiceOptions.verify(e2.options)))
          return "options." + n2;
        return null;
      }, j.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.ServiceDescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.ServiceDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.method) {
          if (!Array.isArray(e2.method))
            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
          t2.method = [];
          for (var n2 = 0; n2 < e2.method.length; ++n2) {
            if ("object" != typeof e2.method[n2])
              throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
            t2.method[n2] = c.google.protobuf.MethodDescriptorProto.fromObject(e2.method[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
          t2.options = c.google.protobuf.ServiceOptions.fromObject(e2.options);
        }
        return t2;
      }, j.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.method = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.method && e2.method.length) {
          n2.method = [];
          for (var o2 = 0; o2 < e2.method.length; ++o2)
            n2.method[o2] = c.google.protobuf.MethodDescriptorProto.toObject(e2.method[o2], t2);
        }
        return null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.ServiceOptions.toObject(e2.options, t2)), n2;
      }, j.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, j), n.MethodDescriptorProto = (x.prototype.name = "", x.prototype.inputType = "", x.prototype.outputType = "", x.prototype.options = null, x.prototype.clientStreaming = false, x.prototype.serverStreaming = false, x.create = function(e2) {
        return new x(e2);
      }, x.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.inputType && Object.hasOwnProperty.call(e2, "inputType") && t2.uint32(18).string(e2.inputType), null != e2.outputType && Object.hasOwnProperty.call(e2, "outputType") && t2.uint32(26).string(e2.outputType), null != e2.options && Object.hasOwnProperty.call(e2, "options") && c.google.protobuf.MethodOptions.encode(e2.options, t2.uint32(34).fork()).ldelim(), null != e2.clientStreaming && Object.hasOwnProperty.call(e2, "clientStreaming") && t2.uint32(40).bool(e2.clientStreaming), null != e2.serverStreaming && Object.hasOwnProperty.call(e2, "serverStreaming") && t2.uint32(48).bool(e2.serverStreaming), t2;
      }, x.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, x.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.MethodDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.inputType = e2.string();
              break;
            case 3:
              o2.outputType = e2.string();
              break;
            case 4:
              o2.options = c.google.protobuf.MethodOptions.decode(e2, e2.uint32());
              break;
            case 5:
              o2.clientStreaming = e2.bool();
              break;
            case 6:
              o2.serverStreaming = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, x.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, x.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !u.isString(e2.name))
          return "name: string expected";
        if (null != e2.inputType && e2.hasOwnProperty("inputType") && !u.isString(e2.inputType))
          return "inputType: string expected";
        if (null != e2.outputType && e2.hasOwnProperty("outputType") && !u.isString(e2.outputType))
          return "outputType: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          var t2 = c.google.protobuf.MethodOptions.verify(e2.options);
          if (t2)
            return "options." + t2;
        }
        return null != e2.clientStreaming && e2.hasOwnProperty("clientStreaming") && "boolean" != typeof e2.clientStreaming ? "clientStreaming: boolean expected" : null != e2.serverStreaming && e2.hasOwnProperty("serverStreaming") && "boolean" != typeof e2.serverStreaming ? "serverStreaming: boolean expected" : null;
      }, x.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.MethodDescriptorProto)
          return e2;
        var t2 = new c.google.protobuf.MethodDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.inputType && (t2.inputType = String(e2.inputType)), null != e2.outputType && (t2.outputType = String(e2.outputType)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
          t2.options = c.google.protobuf.MethodOptions.fromObject(e2.options);
        }
        return null != e2.clientStreaming && (t2.clientStreaming = Boolean(e2.clientStreaming)), null != e2.serverStreaming && (t2.serverStreaming = Boolean(e2.serverStreaming)), t2;
      }, x.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.inputType = "", n2.outputType = "", n2.options = null, n2.clientStreaming = false, n2.serverStreaming = false), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.inputType && e2.hasOwnProperty("inputType") && (n2.inputType = e2.inputType), null != e2.outputType && e2.hasOwnProperty("outputType") && (n2.outputType = e2.outputType), null != e2.options && e2.hasOwnProperty("options") && (n2.options = c.google.protobuf.MethodOptions.toObject(e2.options, t2)), null != e2.clientStreaming && e2.hasOwnProperty("clientStreaming") && (n2.clientStreaming = e2.clientStreaming), null != e2.serverStreaming && e2.hasOwnProperty("serverStreaming") && (n2.serverStreaming = e2.serverStreaming), n2;
      }, x.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, x), n.FileOptions = (S.prototype.javaPackage = "", S.prototype.javaOuterClassname = "", S.prototype.javaMultipleFiles = false, S.prototype.javaGenerateEqualsAndHash = false, S.prototype.javaStringCheckUtf8 = false, S.prototype.optimizeFor = 1, S.prototype.goPackage = "", S.prototype.ccGenericServices = false, S.prototype.javaGenericServices = false, S.prototype.pyGenericServices = false, S.prototype.phpGenericServices = false, S.prototype.deprecated = false, S.prototype.ccEnableArenas = true, S.prototype.objcClassPrefix = "", S.prototype.csharpNamespace = "", S.prototype.swiftPrefix = "", S.prototype.phpClassPrefix = "", S.prototype.phpNamespace = "", S.prototype.phpMetadataNamespace = "", S.prototype.rubyPackage = "", S.prototype.uninterpretedOption = u.emptyArray, S.create = function(e2) {
        return new S(e2);
      }, S.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.javaPackage && Object.hasOwnProperty.call(e2, "javaPackage") && t2.uint32(10).string(e2.javaPackage), null != e2.javaOuterClassname && Object.hasOwnProperty.call(e2, "javaOuterClassname") && t2.uint32(66).string(e2.javaOuterClassname), null != e2.optimizeFor && Object.hasOwnProperty.call(e2, "optimizeFor") && t2.uint32(72).int32(e2.optimizeFor), null != e2.javaMultipleFiles && Object.hasOwnProperty.call(e2, "javaMultipleFiles") && t2.uint32(80).bool(e2.javaMultipleFiles), null != e2.goPackage && Object.hasOwnProperty.call(e2, "goPackage") && t2.uint32(90).string(e2.goPackage), null != e2.ccGenericServices && Object.hasOwnProperty.call(e2, "ccGenericServices") && t2.uint32(128).bool(e2.ccGenericServices), null != e2.javaGenericServices && Object.hasOwnProperty.call(e2, "javaGenericServices") && t2.uint32(136).bool(e2.javaGenericServices), null != e2.pyGenericServices && Object.hasOwnProperty.call(e2, "pyGenericServices") && t2.uint32(144).bool(e2.pyGenericServices), null != e2.javaGenerateEqualsAndHash && Object.hasOwnProperty.call(e2, "javaGenerateEqualsAndHash") && t2.uint32(160).bool(e2.javaGenerateEqualsAndHash), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(184).bool(e2.deprecated), null != e2.javaStringCheckUtf8 && Object.hasOwnProperty.call(e2, "javaStringCheckUtf8") && t2.uint32(216).bool(e2.javaStringCheckUtf8), null != e2.ccEnableArenas && Object.hasOwnProperty.call(e2, "ccEnableArenas") && t2.uint32(248).bool(e2.ccEnableArenas), null != e2.objcClassPrefix && Object.hasOwnProperty.call(e2, "objcClassPrefix") && t2.uint32(290).string(e2.objcClassPrefix), null != e2.csharpNamespace && Object.hasOwnProperty.call(e2, "csharpNamespace") && t2.uint32(298).string(e2.csharpNamespace), null != e2.swiftPrefix && Object.hasOwnProperty.call(e2, "swiftPrefix") && t2.uint32(314).string(e2.swiftPrefix), null != e2.phpClassPrefix && Object.hasOwnProperty.call(e2, "phpClassPrefix") && t2.uint32(322).string(e2.phpClassPrefix), null != e2.phpNamespace && Object.hasOwnProperty.call(e2, "phpNamespace") && t2.uint32(330).string(e2.phpNamespace), null != e2.phpGenericServices && Object.hasOwnProperty.call(e2, "phpGenericServices") && t2.uint32(336).bool(e2.phpGenericServices), null != e2.phpMetadataNamespace && Object.hasOwnProperty.call(e2, "phpMetadataNamespace") && t2.uint32(354).string(e2.phpMetadataNamespace), null != e2.rubyPackage && Object.hasOwnProperty.call(e2, "rubyPackage") && t2.uint32(362).string(e2.rubyPackage), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, S.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, S.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.FileOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.javaPackage = e2.string();
              break;
            case 8:
              o2.javaOuterClassname = e2.string();
              break;
            case 10:
              o2.javaMultipleFiles = e2.bool();
              break;
            case 20:
              o2.javaGenerateEqualsAndHash = e2.bool();
              break;
            case 27:
              o2.javaStringCheckUtf8 = e2.bool();
              break;
            case 9:
              o2.optimizeFor = e2.int32();
              break;
            case 11:
              o2.goPackage = e2.string();
              break;
            case 16:
              o2.ccGenericServices = e2.bool();
              break;
            case 17:
              o2.javaGenericServices = e2.bool();
              break;
            case 18:
              o2.pyGenericServices = e2.bool();
              break;
            case 42:
              o2.phpGenericServices = e2.bool();
              break;
            case 23:
              o2.deprecated = e2.bool();
              break;
            case 31:
              o2.ccEnableArenas = e2.bool();
              break;
            case 36:
              o2.objcClassPrefix = e2.string();
              break;
            case 37:
              o2.csharpNamespace = e2.string();
              break;
            case 39:
              o2.swiftPrefix = e2.string();
              break;
            case 40:
              o2.phpClassPrefix = e2.string();
              break;
            case 41:
              o2.phpNamespace = e2.string();
              break;
            case 44:
              o2.phpMetadataNamespace = e2.string();
              break;
            case 45:
              o2.rubyPackage = e2.string();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, S.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, S.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.javaPackage && e2.hasOwnProperty("javaPackage") && !u.isString(e2.javaPackage))
          return "javaPackage: string expected";
        if (null != e2.javaOuterClassname && e2.hasOwnProperty("javaOuterClassname") && !u.isString(e2.javaOuterClassname))
          return "javaOuterClassname: string expected";
        if (null != e2.javaMultipleFiles && e2.hasOwnProperty("javaMultipleFiles") && "boolean" != typeof e2.javaMultipleFiles)
          return "javaMultipleFiles: boolean expected";
        if (null != e2.javaGenerateEqualsAndHash && e2.hasOwnProperty("javaGenerateEqualsAndHash") && "boolean" != typeof e2.javaGenerateEqualsAndHash)
          return "javaGenerateEqualsAndHash: boolean expected";
        if (null != e2.javaStringCheckUtf8 && e2.hasOwnProperty("javaStringCheckUtf8") && "boolean" != typeof e2.javaStringCheckUtf8)
          return "javaStringCheckUtf8: boolean expected";
        if (null != e2.optimizeFor && e2.hasOwnProperty("optimizeFor"))
          switch (e2.optimizeFor) {
            default:
              return "optimizeFor: enum value expected";
            case 1:
            case 2:
            case 3:
          }
        if (null != e2.goPackage && e2.hasOwnProperty("goPackage") && !u.isString(e2.goPackage))
          return "goPackage: string expected";
        if (null != e2.ccGenericServices && e2.hasOwnProperty("ccGenericServices") && "boolean" != typeof e2.ccGenericServices)
          return "ccGenericServices: boolean expected";
        if (null != e2.javaGenericServices && e2.hasOwnProperty("javaGenericServices") && "boolean" != typeof e2.javaGenericServices)
          return "javaGenericServices: boolean expected";
        if (null != e2.pyGenericServices && e2.hasOwnProperty("pyGenericServices") && "boolean" != typeof e2.pyGenericServices)
          return "pyGenericServices: boolean expected";
        if (null != e2.phpGenericServices && e2.hasOwnProperty("phpGenericServices") && "boolean" != typeof e2.phpGenericServices)
          return "phpGenericServices: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.ccEnableArenas && e2.hasOwnProperty("ccEnableArenas") && "boolean" != typeof e2.ccEnableArenas)
          return "ccEnableArenas: boolean expected";
        if (null != e2.objcClassPrefix && e2.hasOwnProperty("objcClassPrefix") && !u.isString(e2.objcClassPrefix))
          return "objcClassPrefix: string expected";
        if (null != e2.csharpNamespace && e2.hasOwnProperty("csharpNamespace") && !u.isString(e2.csharpNamespace))
          return "csharpNamespace: string expected";
        if (null != e2.swiftPrefix && e2.hasOwnProperty("swiftPrefix") && !u.isString(e2.swiftPrefix))
          return "swiftPrefix: string expected";
        if (null != e2.phpClassPrefix && e2.hasOwnProperty("phpClassPrefix") && !u.isString(e2.phpClassPrefix))
          return "phpClassPrefix: string expected";
        if (null != e2.phpNamespace && e2.hasOwnProperty("phpNamespace") && !u.isString(e2.phpNamespace))
          return "phpNamespace: string expected";
        if (null != e2.phpMetadataNamespace && e2.hasOwnProperty("phpMetadataNamespace") && !u.isString(e2.phpMetadataNamespace))
          return "phpMetadataNamespace: string expected";
        if (null != e2.rubyPackage && e2.hasOwnProperty("rubyPackage") && !u.isString(e2.rubyPackage))
          return "rubyPackage: string expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, S.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.FileOptions)
          return e2;
        var t2 = new c.google.protobuf.FileOptions();
        switch (null != e2.javaPackage && (t2.javaPackage = String(e2.javaPackage)), null != e2.javaOuterClassname && (t2.javaOuterClassname = String(e2.javaOuterClassname)), null != e2.javaMultipleFiles && (t2.javaMultipleFiles = Boolean(e2.javaMultipleFiles)), null != e2.javaGenerateEqualsAndHash && (t2.javaGenerateEqualsAndHash = Boolean(e2.javaGenerateEqualsAndHash)), null != e2.javaStringCheckUtf8 && (t2.javaStringCheckUtf8 = Boolean(e2.javaStringCheckUtf8)), e2.optimizeFor) {
          case "SPEED":
          case 1:
            t2.optimizeFor = 1;
            break;
          case "CODE_SIZE":
          case 2:
            t2.optimizeFor = 2;
            break;
          case "LITE_RUNTIME":
          case 3:
            t2.optimizeFor = 3;
        }
        if (null != e2.goPackage && (t2.goPackage = String(e2.goPackage)), null != e2.ccGenericServices && (t2.ccGenericServices = Boolean(e2.ccGenericServices)), null != e2.javaGenericServices && (t2.javaGenericServices = Boolean(e2.javaGenericServices)), null != e2.pyGenericServices && (t2.pyGenericServices = Boolean(e2.pyGenericServices)), null != e2.phpGenericServices && (t2.phpGenericServices = Boolean(e2.phpGenericServices)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.ccEnableArenas && (t2.ccEnableArenas = Boolean(e2.ccEnableArenas)), null != e2.objcClassPrefix && (t2.objcClassPrefix = String(e2.objcClassPrefix)), null != e2.csharpNamespace && (t2.csharpNamespace = String(e2.csharpNamespace)), null != e2.swiftPrefix && (t2.swiftPrefix = String(e2.swiftPrefix)), null != e2.phpClassPrefix && (t2.phpClassPrefix = String(e2.phpClassPrefix)), null != e2.phpNamespace && (t2.phpNamespace = String(e2.phpNamespace)), null != e2.phpMetadataNamespace && (t2.phpMetadataNamespace = String(e2.phpMetadataNamespace)), null != e2.rubyPackage && (t2.rubyPackage = String(e2.rubyPackage)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, S.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.javaPackage = "", n2.javaOuterClassname = "", n2.optimizeFor = t2.enums === String ? "SPEED" : 1, n2.javaMultipleFiles = false, n2.goPackage = "", n2.ccGenericServices = false, n2.javaGenericServices = false, n2.pyGenericServices = false, n2.javaGenerateEqualsAndHash = false, n2.deprecated = false, n2.javaStringCheckUtf8 = false, n2.ccEnableArenas = true, n2.objcClassPrefix = "", n2.csharpNamespace = "", n2.swiftPrefix = "", n2.phpClassPrefix = "", n2.phpNamespace = "", n2.phpGenericServices = false, n2.phpMetadataNamespace = "", n2.rubyPackage = ""), null != e2.javaPackage && e2.hasOwnProperty("javaPackage") && (n2.javaPackage = e2.javaPackage), null != e2.javaOuterClassname && e2.hasOwnProperty("javaOuterClassname") && (n2.javaOuterClassname = e2.javaOuterClassname), null != e2.optimizeFor && e2.hasOwnProperty("optimizeFor") && (n2.optimizeFor = t2.enums === String ? c.google.protobuf.FileOptions.OptimizeMode[e2.optimizeFor] : e2.optimizeFor), null != e2.javaMultipleFiles && e2.hasOwnProperty("javaMultipleFiles") && (n2.javaMultipleFiles = e2.javaMultipleFiles), null != e2.goPackage && e2.hasOwnProperty("goPackage") && (n2.goPackage = e2.goPackage), null != e2.ccGenericServices && e2.hasOwnProperty("ccGenericServices") && (n2.ccGenericServices = e2.ccGenericServices), null != e2.javaGenericServices && e2.hasOwnProperty("javaGenericServices") && (n2.javaGenericServices = e2.javaGenericServices), null != e2.pyGenericServices && e2.hasOwnProperty("pyGenericServices") && (n2.pyGenericServices = e2.pyGenericServices), null != e2.javaGenerateEqualsAndHash && e2.hasOwnProperty("javaGenerateEqualsAndHash") && (n2.javaGenerateEqualsAndHash = e2.javaGenerateEqualsAndHash), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.javaStringCheckUtf8 && e2.hasOwnProperty("javaStringCheckUtf8") && (n2.javaStringCheckUtf8 = e2.javaStringCheckUtf8), null != e2.ccEnableArenas && e2.hasOwnProperty("ccEnableArenas") && (n2.ccEnableArenas = e2.ccEnableArenas), null != e2.objcClassPrefix && e2.hasOwnProperty("objcClassPrefix") && (n2.objcClassPrefix = e2.objcClassPrefix), null != e2.csharpNamespace && e2.hasOwnProperty("csharpNamespace") && (n2.csharpNamespace = e2.csharpNamespace), null != e2.swiftPrefix && e2.hasOwnProperty("swiftPrefix") && (n2.swiftPrefix = e2.swiftPrefix), null != e2.phpClassPrefix && e2.hasOwnProperty("phpClassPrefix") && (n2.phpClassPrefix = e2.phpClassPrefix), null != e2.phpNamespace && e2.hasOwnProperty("phpNamespace") && (n2.phpNamespace = e2.phpNamespace), null != e2.phpGenericServices && e2.hasOwnProperty("phpGenericServices") && (n2.phpGenericServices = e2.phpGenericServices), null != e2.phpMetadataNamespace && e2.hasOwnProperty("phpMetadataNamespace") && (n2.phpMetadataNamespace = e2.phpMetadataNamespace), null != e2.rubyPackage && e2.hasOwnProperty("rubyPackage") && (n2.rubyPackage = e2.rubyPackage), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, S.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, S.OptimizeMode = (e = {}, (t = Object.create(e))[e[1] = "SPEED"] = 1, t[e[2] = "CODE_SIZE"] = 2, t[e[3] = "LITE_RUNTIME"] = 3, t), S), n.MessageOptions = (k.prototype.messageSetWireFormat = false, k.prototype.noStandardDescriptorAccessor = false, k.prototype.deprecated = false, k.prototype.mapEntry = false, k.prototype.uninterpretedOption = u.emptyArray, k.create = function(e2) {
        return new k(e2);
      }, k.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.messageSetWireFormat && Object.hasOwnProperty.call(e2, "messageSetWireFormat") && t2.uint32(8).bool(e2.messageSetWireFormat), null != e2.noStandardDescriptorAccessor && Object.hasOwnProperty.call(e2, "noStandardDescriptorAccessor") && t2.uint32(16).bool(e2.noStandardDescriptorAccessor), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.mapEntry && Object.hasOwnProperty.call(e2, "mapEntry") && t2.uint32(56).bool(e2.mapEntry), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, k.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, k.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.MessageOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.messageSetWireFormat = e2.bool();
              break;
            case 2:
              o2.noStandardDescriptorAccessor = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 7:
              o2.mapEntry = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, k.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, k.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.messageSetWireFormat && e2.hasOwnProperty("messageSetWireFormat") && "boolean" != typeof e2.messageSetWireFormat)
          return "messageSetWireFormat: boolean expected";
        if (null != e2.noStandardDescriptorAccessor && e2.hasOwnProperty("noStandardDescriptorAccessor") && "boolean" != typeof e2.noStandardDescriptorAccessor)
          return "noStandardDescriptorAccessor: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.mapEntry && e2.hasOwnProperty("mapEntry") && "boolean" != typeof e2.mapEntry)
          return "mapEntry: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, k.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.MessageOptions)
          return e2;
        var t2 = new c.google.protobuf.MessageOptions();
        if (null != e2.messageSetWireFormat && (t2.messageSetWireFormat = Boolean(e2.messageSetWireFormat)), null != e2.noStandardDescriptorAccessor && (t2.noStandardDescriptorAccessor = Boolean(e2.noStandardDescriptorAccessor)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.mapEntry && (t2.mapEntry = Boolean(e2.mapEntry)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, k.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.messageSetWireFormat = false, n2.noStandardDescriptorAccessor = false, n2.deprecated = false, n2.mapEntry = false), null != e2.messageSetWireFormat && e2.hasOwnProperty("messageSetWireFormat") && (n2.messageSetWireFormat = e2.messageSetWireFormat), null != e2.noStandardDescriptorAccessor && e2.hasOwnProperty("noStandardDescriptorAccessor") && (n2.noStandardDescriptorAccessor = e2.noStandardDescriptorAccessor), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.mapEntry && e2.hasOwnProperty("mapEntry") && (n2.mapEntry = e2.mapEntry), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, k.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, k), n.FieldOptions = (D.prototype.ctype = 0, D.prototype.packed = false, D.prototype.jstype = 0, D.prototype.lazy = false, D.prototype.deprecated = false, D.prototype.weak = false, D.prototype.uninterpretedOption = u.emptyArray, D.create = function(e2) {
        return new D(e2);
      }, D.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.ctype && Object.hasOwnProperty.call(e2, "ctype") && t2.uint32(8).int32(e2.ctype), null != e2.packed && Object.hasOwnProperty.call(e2, "packed") && t2.uint32(16).bool(e2.packed), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.lazy && Object.hasOwnProperty.call(e2, "lazy") && t2.uint32(40).bool(e2.lazy), null != e2.jstype && Object.hasOwnProperty.call(e2, "jstype") && t2.uint32(48).int32(e2.jstype), null != e2.weak && Object.hasOwnProperty.call(e2, "weak") && t2.uint32(80).bool(e2.weak), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, D.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, D.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.FieldOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.ctype = e2.int32();
              break;
            case 2:
              o2.packed = e2.bool();
              break;
            case 6:
              o2.jstype = e2.int32();
              break;
            case 5:
              o2.lazy = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 10:
              o2.weak = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, D.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, D.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.ctype && e2.hasOwnProperty("ctype"))
          switch (e2.ctype) {
            default:
              return "ctype: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.packed && e2.hasOwnProperty("packed") && "boolean" != typeof e2.packed)
          return "packed: boolean expected";
        if (null != e2.jstype && e2.hasOwnProperty("jstype"))
          switch (e2.jstype) {
            default:
              return "jstype: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.lazy && e2.hasOwnProperty("lazy") && "boolean" != typeof e2.lazy)
          return "lazy: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.weak && e2.hasOwnProperty("weak") && "boolean" != typeof e2.weak)
          return "weak: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, D.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.FieldOptions)
          return e2;
        var t2 = new c.google.protobuf.FieldOptions();
        switch (e2.ctype) {
          case "STRING":
          case 0:
            t2.ctype = 0;
            break;
          case "CORD":
          case 1:
            t2.ctype = 1;
            break;
          case "STRING_PIECE":
          case 2:
            t2.ctype = 2;
        }
        switch (null != e2.packed && (t2.packed = Boolean(e2.packed)), e2.jstype) {
          case "JS_NORMAL":
          case 0:
            t2.jstype = 0;
            break;
          case "JS_STRING":
          case 1:
            t2.jstype = 1;
            break;
          case "JS_NUMBER":
          case 2:
            t2.jstype = 2;
        }
        if (null != e2.lazy && (t2.lazy = Boolean(e2.lazy)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.weak && (t2.weak = Boolean(e2.weak)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, D.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.ctype = t2.enums === String ? "STRING" : 0, n2.packed = false, n2.deprecated = false, n2.lazy = false, n2.jstype = t2.enums === String ? "JS_NORMAL" : 0, n2.weak = false), null != e2.ctype && e2.hasOwnProperty("ctype") && (n2.ctype = t2.enums === String ? c.google.protobuf.FieldOptions.CType[e2.ctype] : e2.ctype), null != e2.packed && e2.hasOwnProperty("packed") && (n2.packed = e2.packed), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.lazy && e2.hasOwnProperty("lazy") && (n2.lazy = e2.lazy), null != e2.jstype && e2.hasOwnProperty("jstype") && (n2.jstype = t2.enums === String ? c.google.protobuf.FieldOptions.JSType[e2.jstype] : e2.jstype), null != e2.weak && e2.hasOwnProperty("weak") && (n2.weak = e2.weak), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, D.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, D.CType = (e = {}, (t = Object.create(e))[e[0] = "STRING"] = 0, t[e[1] = "CORD"] = 1, t[e[2] = "STRING_PIECE"] = 2, t), D.JSType = (e = {}, (t = Object.create(e))[e[0] = "JS_NORMAL"] = 0, t[e[1] = "JS_STRING"] = 1, t[e[2] = "JS_NUMBER"] = 2, t), D), n.OneofOptions = (M.prototype.uninterpretedOption = u.emptyArray, M.create = function(e2) {
        return new M(e2);
      }, M.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, M.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, M.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.OneofOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 999 ? (o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, M.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, M.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, M.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.OneofOptions)
          return e2;
        var t2 = new c.google.protobuf.OneofOptions();
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, M.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, M.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, M), n.EnumOptions = (T.prototype.allowAlias = false, T.prototype.deprecated = false, T.prototype.uninterpretedOption = u.emptyArray, T.create = function(e2) {
        return new T(e2);
      }, T.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.allowAlias && Object.hasOwnProperty.call(e2, "allowAlias") && t2.uint32(16).bool(e2.allowAlias), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, T.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, T.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.EnumOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 2:
              o2.allowAlias = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, T.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, T.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.allowAlias && e2.hasOwnProperty("allowAlias") && "boolean" != typeof e2.allowAlias)
          return "allowAlias: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, T.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.EnumOptions)
          return e2;
        var t2 = new c.google.protobuf.EnumOptions();
        if (null != e2.allowAlias && (t2.allowAlias = Boolean(e2.allowAlias)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, T.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.allowAlias = false, n2.deprecated = false), null != e2.allowAlias && e2.hasOwnProperty("allowAlias") && (n2.allowAlias = e2.allowAlias), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, T.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, T), n.EnumValueOptions = (E.prototype.deprecated = false, E.prototype.uninterpretedOption = u.emptyArray, E.create = function(e2) {
        return new E(e2);
      }, E.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(8).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, E.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, E.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.EnumValueOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, E.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, E.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, E.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.EnumValueOptions)
          return e2;
        var t2 = new c.google.protobuf.EnumValueOptions();
        if (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, E.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.deprecated = false), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, E.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, E), n.ServiceOptions = (A.prototype.deprecated = false, A.prototype.uninterpretedOption = u.emptyArray, A.prototype[".google.api.defaultHost"] = "", A.prototype[".google.api.oauthScopes"] = "", A.create = function(e2) {
        return new A(e2);
      }, A.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(264).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return null != e2[".google.api.defaultHost"] && Object.hasOwnProperty.call(e2, ".google.api.defaultHost") && t2.uint32(8394).string(e2[".google.api.defaultHost"]), null != e2[".google.api.oauthScopes"] && Object.hasOwnProperty.call(e2, ".google.api.oauthScopes") && t2.uint32(8402).string(e2[".google.api.oauthScopes"]), t2;
      }, A.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, A.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.ServiceOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 33:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 1049:
              o2[".google.api.defaultHost"] = e2.string();
              break;
            case 1050:
              o2[".google.api.oauthScopes"] = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, A.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, A.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null != e2[".google.api.defaultHost"] && e2.hasOwnProperty(".google.api.defaultHost") && !u.isString(e2[".google.api.defaultHost"]) ? ".google.api.defaultHost: string expected" : null != e2[".google.api.oauthScopes"] && e2.hasOwnProperty(".google.api.oauthScopes") && !u.isString(e2[".google.api.oauthScopes"]) ? ".google.api.oauthScopes: string expected" : null;
      }, A.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.ServiceOptions)
          return e2;
        var t2 = new c.google.protobuf.ServiceOptions();
        if (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return null != e2[".google.api.defaultHost"] && (t2[".google.api.defaultHost"] = String(e2[".google.api.defaultHost"])), null != e2[".google.api.oauthScopes"] && (t2[".google.api.oauthScopes"] = String(e2[".google.api.oauthScopes"])), t2;
      }, A.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.deprecated = false, n2[".google.api.defaultHost"] = "", n2[".google.api.oauthScopes"] = ""), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return null != e2[".google.api.defaultHost"] && e2.hasOwnProperty(".google.api.defaultHost") && (n2[".google.api.defaultHost"] = e2[".google.api.defaultHost"]), null != e2[".google.api.oauthScopes"] && e2.hasOwnProperty(".google.api.oauthScopes") && (n2[".google.api.oauthScopes"] = e2[".google.api.oauthScopes"]), n2;
      }, A.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, A), n.MethodOptions = (N.prototype.deprecated = false, N.prototype.idempotencyLevel = 0, N.prototype.uninterpretedOption = u.emptyArray, N.prototype[".google.api.http"] = null, N.prototype[".google.api.methodSignature"] = u.emptyArray, N.create = function(e2) {
        return new N(e2);
      }, N.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(264).bool(e2.deprecated), null != e2.idempotencyLevel && Object.hasOwnProperty.call(e2, "idempotencyLevel") && t2.uint32(272).int32(e2.idempotencyLevel), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            c.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        if (null != e2[".google.api.methodSignature"] && e2[".google.api.methodSignature"].length)
          for (n2 = 0; n2 < e2[".google.api.methodSignature"].length; ++n2)
            t2.uint32(8410).string(e2[".google.api.methodSignature"][n2]);
        return null != e2[".google.api.http"] && Object.hasOwnProperty.call(e2, ".google.api.http") && c.google.api.HttpRule.encode(e2[".google.api.http"], t2.uint32(578365826).fork()).ldelim(), t2;
      }, N.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, N.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.MethodOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 33:
              o2.deprecated = e2.bool();
              break;
            case 34:
              o2.idempotencyLevel = e2.int32();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(c.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 72295728:
              o2[".google.api.http"] = c.google.api.HttpRule.decode(e2, e2.uint32());
              break;
            case 1051:
              o2[".google.api.methodSignature"] && o2[".google.api.methodSignature"].length || (o2[".google.api.methodSignature"] = []), o2[".google.api.methodSignature"].push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, N.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, N.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.idempotencyLevel && e2.hasOwnProperty("idempotencyLevel"))
          switch (e2.idempotencyLevel) {
            default:
              return "idempotencyLevel: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2)
            if (n2 = c.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]))
              return "uninterpretedOption." + n2;
        }
        var n2;
        if (null != e2[".google.api.http"] && e2.hasOwnProperty(".google.api.http") && (n2 = c.google.api.HttpRule.verify(e2[".google.api.http"])))
          return ".google.api.http." + n2;
        if (null != e2[".google.api.methodSignature"] && e2.hasOwnProperty(".google.api.methodSignature")) {
          if (!Array.isArray(e2[".google.api.methodSignature"]))
            return ".google.api.methodSignature: array expected";
          for (t2 = 0; t2 < e2[".google.api.methodSignature"].length; ++t2)
            if (!u.isString(e2[".google.api.methodSignature"][t2]))
              return ".google.api.methodSignature: string[] expected";
        }
        return null;
      }, N.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.MethodOptions)
          return e2;
        var t2 = new c.google.protobuf.MethodOptions();
        switch (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.idempotencyLevel) {
          case "IDEMPOTENCY_UNKNOWN":
          case 0:
            t2.idempotencyLevel = 0;
            break;
          case "NO_SIDE_EFFECTS":
          case 1:
            t2.idempotencyLevel = 1;
            break;
          case "IDEMPOTENT":
          case 2:
            t2.idempotencyLevel = 2;
        }
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = c.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        if (null != e2[".google.api.http"]) {
          if ("object" != typeof e2[".google.api.http"])
            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
          t2[".google.api.http"] = c.google.api.HttpRule.fromObject(e2[".google.api.http"]);
        }
        if (e2[".google.api.methodSignature"]) {
          if (!Array.isArray(e2[".google.api.methodSignature"]))
            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
          t2[".google.api.methodSignature"] = [];
          for (n2 = 0; n2 < e2[".google.api.methodSignature"].length; ++n2)
            t2[".google.api.methodSignature"][n2] = String(e2[".google.api.methodSignature"][n2]);
        }
        return t2;
      }, N.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = [], n2[".google.api.methodSignature"] = []), t2.defaults && (n2.deprecated = false, n2.idempotencyLevel = t2.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0, n2[".google.api.http"] = null), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.idempotencyLevel && e2.hasOwnProperty("idempotencyLevel") && (n2.idempotencyLevel = t2.enums === String ? c.google.protobuf.MethodOptions.IdempotencyLevel[e2.idempotencyLevel] : e2.idempotencyLevel), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = c.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        if (e2[".google.api.methodSignature"] && e2[".google.api.methodSignature"].length) {
          n2[".google.api.methodSignature"] = [];
          for (o2 = 0; o2 < e2[".google.api.methodSignature"].length; ++o2)
            n2[".google.api.methodSignature"][o2] = e2[".google.api.methodSignature"][o2];
        }
        return null != e2[".google.api.http"] && e2.hasOwnProperty(".google.api.http") && (n2[".google.api.http"] = c.google.api.HttpRule.toObject(e2[".google.api.http"], t2)), n2;
      }, N.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, N.IdempotencyLevel = (e = {}, (t = Object.create(e))[e[0] = "IDEMPOTENCY_UNKNOWN"] = 0, t[e[1] = "NO_SIDE_EFFECTS"] = 1, t[e[2] = "IDEMPOTENT"] = 2, t), N), n.UninterpretedOption = (I.prototype.name = u.emptyArray, I.prototype.identifierValue = "", I.prototype.positiveIntValue = u.Long ? u.Long.fromBits(0, 0, true) : 0, I.prototype.negativeIntValue = u.Long ? u.Long.fromBits(0, 0, false) : 0, I.prototype.doubleValue = 0, I.prototype.stringValue = u.newBuffer([]), I.prototype.aggregateValue = "", I.create = function(e2) {
        return new I(e2);
      }, I.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && e2.name.length)
          for (var n2 = 0; n2 < e2.name.length; ++n2)
            c.google.protobuf.UninterpretedOption.NamePart.encode(e2.name[n2], t2.uint32(18).fork()).ldelim();
        return null != e2.identifierValue && Object.hasOwnProperty.call(e2, "identifierValue") && t2.uint32(26).string(e2.identifierValue), null != e2.positiveIntValue && Object.hasOwnProperty.call(e2, "positiveIntValue") && t2.uint32(32).uint64(e2.positiveIntValue), null != e2.negativeIntValue && Object.hasOwnProperty.call(e2, "negativeIntValue") && t2.uint32(40).int64(e2.negativeIntValue), null != e2.doubleValue && Object.hasOwnProperty.call(e2, "doubleValue") && t2.uint32(49).double(e2.doubleValue), null != e2.stringValue && Object.hasOwnProperty.call(e2, "stringValue") && t2.uint32(58).bytes(e2.stringValue), null != e2.aggregateValue && Object.hasOwnProperty.call(e2, "aggregateValue") && t2.uint32(66).string(e2.aggregateValue), t2;
      }, I.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, I.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.UninterpretedOption(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 2:
              o2.name && o2.name.length || (o2.name = []), o2.name.push(c.google.protobuf.UninterpretedOption.NamePart.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.identifierValue = e2.string();
              break;
            case 4:
              o2.positiveIntValue = e2.uint64();
              break;
            case 5:
              o2.negativeIntValue = e2.int64();
              break;
            case 6:
              o2.doubleValue = e2.double();
              break;
            case 7:
              o2.stringValue = e2.bytes();
              break;
            case 8:
              o2.aggregateValue = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, I.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, I.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name")) {
          if (!Array.isArray(e2.name))
            return "name: array expected";
          for (var t2 = 0; t2 < e2.name.length; ++t2) {
            var n2 = c.google.protobuf.UninterpretedOption.NamePart.verify(e2.name[t2]);
            if (n2)
              return "name." + n2;
          }
        }
        return null != e2.identifierValue && e2.hasOwnProperty("identifierValue") && !u.isString(e2.identifierValue) ? "identifierValue: string expected" : null != e2.positiveIntValue && e2.hasOwnProperty("positiveIntValue") && !(u.isInteger(e2.positiveIntValue) || e2.positiveIntValue && u.isInteger(e2.positiveIntValue.low) && u.isInteger(e2.positiveIntValue.high)) ? "positiveIntValue: integer|Long expected" : null != e2.negativeIntValue && e2.hasOwnProperty("negativeIntValue") && !(u.isInteger(e2.negativeIntValue) || e2.negativeIntValue && u.isInteger(e2.negativeIntValue.low) && u.isInteger(e2.negativeIntValue.high)) ? "negativeIntValue: integer|Long expected" : null != e2.doubleValue && e2.hasOwnProperty("doubleValue") && "number" != typeof e2.doubleValue ? "doubleValue: number expected" : null != e2.stringValue && e2.hasOwnProperty("stringValue") && !(e2.stringValue && "number" == typeof e2.stringValue.length || u.isString(e2.stringValue)) ? "stringValue: buffer expected" : null != e2.aggregateValue && e2.hasOwnProperty("aggregateValue") && !u.isString(e2.aggregateValue) ? "aggregateValue: string expected" : null;
      }, I.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.UninterpretedOption)
          return e2;
        var t2 = new c.google.protobuf.UninterpretedOption();
        if (e2.name) {
          if (!Array.isArray(e2.name))
            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
          t2.name = [];
          for (var n2 = 0; n2 < e2.name.length; ++n2) {
            if ("object" != typeof e2.name[n2])
              throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
            t2.name[n2] = c.google.protobuf.UninterpretedOption.NamePart.fromObject(e2.name[n2]);
          }
        }
        return null != e2.identifierValue && (t2.identifierValue = String(e2.identifierValue)), null != e2.positiveIntValue && (u.Long ? (t2.positiveIntValue = u.Long.fromValue(e2.positiveIntValue)).unsigned = true : "string" == typeof e2.positiveIntValue ? t2.positiveIntValue = parseInt(e2.positiveIntValue, 10) : "number" == typeof e2.positiveIntValue ? t2.positiveIntValue = e2.positiveIntValue : "object" == typeof e2.positiveIntValue && (t2.positiveIntValue = new u.LongBits(e2.positiveIntValue.low >>> 0, e2.positiveIntValue.high >>> 0).toNumber(true))), null != e2.negativeIntValue && (u.Long ? (t2.negativeIntValue = u.Long.fromValue(e2.negativeIntValue)).unsigned = false : "string" == typeof e2.negativeIntValue ? t2.negativeIntValue = parseInt(e2.negativeIntValue, 10) : "number" == typeof e2.negativeIntValue ? t2.negativeIntValue = e2.negativeIntValue : "object" == typeof e2.negativeIntValue && (t2.negativeIntValue = new u.LongBits(e2.negativeIntValue.low >>> 0, e2.negativeIntValue.high >>> 0).toNumber())), null != e2.doubleValue && (t2.doubleValue = Number(e2.doubleValue)), null != e2.stringValue && ("string" == typeof e2.stringValue ? u.base64.decode(e2.stringValue, t2.stringValue = u.newBuffer(u.base64.length(e2.stringValue)), 0) : e2.stringValue.length && (t2.stringValue = e2.stringValue)), null != e2.aggregateValue && (t2.aggregateValue = String(e2.aggregateValue)), t2;
      }, I.toObject = function(e2, t2) {
        var n2, o2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (o2.name = []), t2.defaults && (o2.identifierValue = "", u.Long ? (n2 = new u.Long(0, 0, true), o2.positiveIntValue = t2.longs === String ? n2.toString() : t2.longs === Number ? n2.toNumber() : n2) : o2.positiveIntValue = t2.longs === String ? "0" : 0, u.Long ? (n2 = new u.Long(0, 0, false), o2.negativeIntValue = t2.longs === String ? n2.toString() : t2.longs === Number ? n2.toNumber() : n2) : o2.negativeIntValue = t2.longs === String ? "0" : 0, o2.doubleValue = 0, t2.bytes === String ? o2.stringValue = "" : (o2.stringValue = [], t2.bytes !== Array && (o2.stringValue = u.newBuffer(o2.stringValue))), o2.aggregateValue = ""), e2.name && e2.name.length) {
          o2.name = [];
          for (var r2 = 0; r2 < e2.name.length; ++r2)
            o2.name[r2] = c.google.protobuf.UninterpretedOption.NamePart.toObject(e2.name[r2], t2);
        }
        return null != e2.identifierValue && e2.hasOwnProperty("identifierValue") && (o2.identifierValue = e2.identifierValue), null != e2.positiveIntValue && e2.hasOwnProperty("positiveIntValue") && ("number" == typeof e2.positiveIntValue ? o2.positiveIntValue = t2.longs === String ? String(e2.positiveIntValue) : e2.positiveIntValue : o2.positiveIntValue = t2.longs === String ? u.Long.prototype.toString.call(e2.positiveIntValue) : t2.longs === Number ? new u.LongBits(e2.positiveIntValue.low >>> 0, e2.positiveIntValue.high >>> 0).toNumber(true) : e2.positiveIntValue), null != e2.negativeIntValue && e2.hasOwnProperty("negativeIntValue") && ("number" == typeof e2.negativeIntValue ? o2.negativeIntValue = t2.longs === String ? String(e2.negativeIntValue) : e2.negativeIntValue : o2.negativeIntValue = t2.longs === String ? u.Long.prototype.toString.call(e2.negativeIntValue) : t2.longs === Number ? new u.LongBits(e2.negativeIntValue.low >>> 0, e2.negativeIntValue.high >>> 0).toNumber() : e2.negativeIntValue), null != e2.doubleValue && e2.hasOwnProperty("doubleValue") && (o2.doubleValue = t2.json && !isFinite(e2.doubleValue) ? String(e2.doubleValue) : e2.doubleValue), null != e2.stringValue && e2.hasOwnProperty("stringValue") && (o2.stringValue = t2.bytes === String ? u.base64.encode(e2.stringValue, 0, e2.stringValue.length) : t2.bytes === Array ? Array.prototype.slice.call(e2.stringValue) : e2.stringValue), null != e2.aggregateValue && e2.hasOwnProperty("aggregateValue") && (o2.aggregateValue = e2.aggregateValue), o2;
      }, I.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, I.NamePart = (R.prototype.namePart = "", R.prototype.isExtension = false, R.create = function(e2) {
        return new R(e2);
      }, R.encode = function(e2, t2) {
        return (t2 = t2 || r.create()).uint32(10).string(e2.namePart), t2.uint32(16).bool(e2.isExtension), t2;
      }, R.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, R.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.UninterpretedOption.NamePart(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.namePart = e2.string();
              break;
            case 2:
              o2.isExtension = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        if (!o2.hasOwnProperty("namePart"))
          throw u.ProtocolError("missing required 'namePart'", { instance: o2 });
        if (o2.hasOwnProperty("isExtension"))
          return o2;
        throw u.ProtocolError("missing required 'isExtension'", { instance: o2 });
      }, R.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, R.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : u.isString(e2.namePart) ? "boolean" != typeof e2.isExtension ? "isExtension: boolean expected" : null : "namePart: string expected";
      }, R.fromObject = function(e2) {
        var t2;
        return e2 instanceof c.google.protobuf.UninterpretedOption.NamePart ? e2 : (t2 = new c.google.protobuf.UninterpretedOption.NamePart(), null != e2.namePart && (t2.namePart = String(e2.namePart)), null != e2.isExtension && (t2.isExtension = Boolean(e2.isExtension)), t2);
      }, R.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.namePart = "", n2.isExtension = false), null != e2.namePart && e2.hasOwnProperty("namePart") && (n2.namePart = e2.namePart), null != e2.isExtension && e2.hasOwnProperty("isExtension") && (n2.isExtension = e2.isExtension), n2;
      }, R.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, R), I), n.SourceCodeInfo = (_.prototype.location = u.emptyArray, _.create = function(e2) {
        return new _(e2);
      }, _.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.location && e2.location.length)
          for (var n2 = 0; n2 < e2.location.length; ++n2)
            c.google.protobuf.SourceCodeInfo.Location.encode(e2.location[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, _.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, _.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.SourceCodeInfo(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.location && o2.location.length || (o2.location = []), o2.location.push(c.google.protobuf.SourceCodeInfo.Location.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, _.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, _.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.location && e2.hasOwnProperty("location")) {
          if (!Array.isArray(e2.location))
            return "location: array expected";
          for (var t2 = 0; t2 < e2.location.length; ++t2) {
            var n2 = c.google.protobuf.SourceCodeInfo.Location.verify(e2.location[t2]);
            if (n2)
              return "location." + n2;
          }
        }
        return null;
      }, _.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.SourceCodeInfo)
          return e2;
        var t2 = new c.google.protobuf.SourceCodeInfo();
        if (e2.location) {
          if (!Array.isArray(e2.location))
            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
          t2.location = [];
          for (var n2 = 0; n2 < e2.location.length; ++n2) {
            if ("object" != typeof e2.location[n2])
              throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
            t2.location[n2] = c.google.protobuf.SourceCodeInfo.Location.fromObject(e2.location[n2]);
          }
        }
        return t2;
      }, _.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.location = []), e2.location && e2.location.length) {
          n2.location = [];
          for (var o2 = 0; o2 < e2.location.length; ++o2)
            n2.location[o2] = c.google.protobuf.SourceCodeInfo.Location.toObject(e2.location[o2], t2);
        }
        return n2;
      }, _.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, _.Location = (C.prototype.path = u.emptyArray, C.prototype.span = u.emptyArray, C.prototype.leadingComments = "", C.prototype.trailingComments = "", C.prototype.leadingDetachedComments = u.emptyArray, C.create = function(e2) {
        return new C(e2);
      }, C.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.path && e2.path.length) {
          t2.uint32(10).fork();
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.int32(e2.path[n2]);
          t2.ldelim();
        }
        if (null != e2.span && e2.span.length) {
          t2.uint32(18).fork();
          for (n2 = 0; n2 < e2.span.length; ++n2)
            t2.int32(e2.span[n2]);
          t2.ldelim();
        }
        if (null != e2.leadingComments && Object.hasOwnProperty.call(e2, "leadingComments") && t2.uint32(26).string(e2.leadingComments), null != e2.trailingComments && Object.hasOwnProperty.call(e2, "trailingComments") && t2.uint32(34).string(e2.trailingComments), null != e2.leadingDetachedComments && e2.leadingDetachedComments.length)
          for (n2 = 0; n2 < e2.leadingDetachedComments.length; ++n2)
            t2.uint32(50).string(e2.leadingDetachedComments[n2]);
        return t2;
      }, C.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, C.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.SourceCodeInfo.Location(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              if (o2.path && o2.path.length || (o2.path = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.path.push(e2.int32());
              else
                o2.path.push(e2.int32());
              break;
            case 2:
              if (o2.span && o2.span.length || (o2.span = []), 2 == (7 & r2))
                for (i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.span.push(e2.int32());
              else
                o2.span.push(e2.int32());
              break;
            case 3:
              o2.leadingComments = e2.string();
              break;
            case 4:
              o2.trailingComments = e2.string();
              break;
            case 6:
              o2.leadingDetachedComments && o2.leadingDetachedComments.length || (o2.leadingDetachedComments = []), o2.leadingDetachedComments.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, C.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, C.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.path && e2.hasOwnProperty("path")) {
          if (!Array.isArray(e2.path))
            return "path: array expected";
          for (var t2 = 0; t2 < e2.path.length; ++t2)
            if (!u.isInteger(e2.path[t2]))
              return "path: integer[] expected";
        }
        if (null != e2.span && e2.hasOwnProperty("span")) {
          if (!Array.isArray(e2.span))
            return "span: array expected";
          for (t2 = 0; t2 < e2.span.length; ++t2)
            if (!u.isInteger(e2.span[t2]))
              return "span: integer[] expected";
        }
        if (null != e2.leadingComments && e2.hasOwnProperty("leadingComments") && !u.isString(e2.leadingComments))
          return "leadingComments: string expected";
        if (null != e2.trailingComments && e2.hasOwnProperty("trailingComments") && !u.isString(e2.trailingComments))
          return "trailingComments: string expected";
        if (null != e2.leadingDetachedComments && e2.hasOwnProperty("leadingDetachedComments")) {
          if (!Array.isArray(e2.leadingDetachedComments))
            return "leadingDetachedComments: array expected";
          for (t2 = 0; t2 < e2.leadingDetachedComments.length; ++t2)
            if (!u.isString(e2.leadingDetachedComments[t2]))
              return "leadingDetachedComments: string[] expected";
        }
        return null;
      }, C.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.SourceCodeInfo.Location)
          return e2;
        var t2 = new c.google.protobuf.SourceCodeInfo.Location();
        if (e2.path) {
          if (!Array.isArray(e2.path))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
          t2.path = [];
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.path[n2] = 0 | e2.path[n2];
        }
        if (e2.span) {
          if (!Array.isArray(e2.span))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
          t2.span = [];
          for (n2 = 0; n2 < e2.span.length; ++n2)
            t2.span[n2] = 0 | e2.span[n2];
        }
        if (null != e2.leadingComments && (t2.leadingComments = String(e2.leadingComments)), null != e2.trailingComments && (t2.trailingComments = String(e2.trailingComments)), e2.leadingDetachedComments) {
          if (!Array.isArray(e2.leadingDetachedComments))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
          t2.leadingDetachedComments = [];
          for (n2 = 0; n2 < e2.leadingDetachedComments.length; ++n2)
            t2.leadingDetachedComments[n2] = String(e2.leadingDetachedComments[n2]);
        }
        return t2;
      }, C.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.path = [], n2.span = [], n2.leadingDetachedComments = []), t2.defaults && (n2.leadingComments = "", n2.trailingComments = ""), e2.path && e2.path.length) {
          n2.path = [];
          for (var o2 = 0; o2 < e2.path.length; ++o2)
            n2.path[o2] = e2.path[o2];
        }
        if (e2.span && e2.span.length) {
          n2.span = [];
          for (o2 = 0; o2 < e2.span.length; ++o2)
            n2.span[o2] = e2.span[o2];
        }
        if (null != e2.leadingComments && e2.hasOwnProperty("leadingComments") && (n2.leadingComments = e2.leadingComments), null != e2.trailingComments && e2.hasOwnProperty("trailingComments") && (n2.trailingComments = e2.trailingComments), e2.leadingDetachedComments && e2.leadingDetachedComments.length) {
          n2.leadingDetachedComments = [];
          for (o2 = 0; o2 < e2.leadingDetachedComments.length; ++o2)
            n2.leadingDetachedComments[o2] = e2.leadingDetachedComments[o2];
        }
        return n2;
      }, C.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, C), _), n.GeneratedCodeInfo = (J.prototype.annotation = u.emptyArray, J.create = function(e2) {
        return new J(e2);
      }, J.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.annotation && e2.annotation.length)
          for (var n2 = 0; n2 < e2.annotation.length; ++n2)
            c.google.protobuf.GeneratedCodeInfo.Annotation.encode(e2.annotation[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, J.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, J.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.GeneratedCodeInfo(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.annotation && o2.annotation.length || (o2.annotation = []), o2.annotation.push(c.google.protobuf.GeneratedCodeInfo.Annotation.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, J.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, J.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.annotation && e2.hasOwnProperty("annotation")) {
          if (!Array.isArray(e2.annotation))
            return "annotation: array expected";
          for (var t2 = 0; t2 < e2.annotation.length; ++t2) {
            var n2 = c.google.protobuf.GeneratedCodeInfo.Annotation.verify(e2.annotation[t2]);
            if (n2)
              return "annotation." + n2;
          }
        }
        return null;
      }, J.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.GeneratedCodeInfo)
          return e2;
        var t2 = new c.google.protobuf.GeneratedCodeInfo();
        if (e2.annotation) {
          if (!Array.isArray(e2.annotation))
            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
          t2.annotation = [];
          for (var n2 = 0; n2 < e2.annotation.length; ++n2) {
            if ("object" != typeof e2.annotation[n2])
              throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
            t2.annotation[n2] = c.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e2.annotation[n2]);
          }
        }
        return t2;
      }, J.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.annotation = []), e2.annotation && e2.annotation.length) {
          n2.annotation = [];
          for (var o2 = 0; o2 < e2.annotation.length; ++o2)
            n2.annotation[o2] = c.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e2.annotation[o2], t2);
        }
        return n2;
      }, J.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, J.Annotation = (V.prototype.path = u.emptyArray, V.prototype.sourceFile = "", V.prototype.begin = 0, V.prototype.end = 0, V.create = function(e2) {
        return new V(e2);
      }, V.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.path && e2.path.length) {
          t2.uint32(10).fork();
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.int32(e2.path[n2]);
          t2.ldelim();
        }
        return null != e2.sourceFile && Object.hasOwnProperty.call(e2, "sourceFile") && t2.uint32(18).string(e2.sourceFile), null != e2.begin && Object.hasOwnProperty.call(e2, "begin") && t2.uint32(24).int32(e2.begin), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(32).int32(e2.end), t2;
      }, V.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, V.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.GeneratedCodeInfo.Annotation(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              if (o2.path && o2.path.length || (o2.path = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.path.push(e2.int32());
              else
                o2.path.push(e2.int32());
              break;
            case 2:
              o2.sourceFile = e2.string();
              break;
            case 3:
              o2.begin = e2.int32();
              break;
            case 4:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, V.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, V.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.path && e2.hasOwnProperty("path")) {
          if (!Array.isArray(e2.path))
            return "path: array expected";
          for (var t2 = 0; t2 < e2.path.length; ++t2)
            if (!u.isInteger(e2.path[t2]))
              return "path: integer[] expected";
        }
        return null != e2.sourceFile && e2.hasOwnProperty("sourceFile") && !u.isString(e2.sourceFile) ? "sourceFile: string expected" : null != e2.begin && e2.hasOwnProperty("begin") && !u.isInteger(e2.begin) ? "begin: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !u.isInteger(e2.end) ? "end: integer expected" : null;
      }, V.fromObject = function(e2) {
        if (e2 instanceof c.google.protobuf.GeneratedCodeInfo.Annotation)
          return e2;
        var t2 = new c.google.protobuf.GeneratedCodeInfo.Annotation();
        if (e2.path) {
          if (!Array.isArray(e2.path))
            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
          t2.path = [];
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.path[n2] = 0 | e2.path[n2];
        }
        return null != e2.sourceFile && (t2.sourceFile = String(e2.sourceFile)), null != e2.begin && (t2.begin = 0 | e2.begin), null != e2.end && (t2.end = 0 | e2.end), t2;
      }, V.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.path = []), t2.defaults && (n2.sourceFile = "", n2.begin = 0, n2.end = 0), e2.path && e2.path.length) {
          n2.path = [];
          for (var o2 = 0; o2 < e2.path.length; ++o2)
            n2.path[o2] = e2.path[o2];
        }
        return null != e2.sourceFile && e2.hasOwnProperty("sourceFile") && (n2.sourceFile = e2.sourceFile), null != e2.begin && e2.hasOwnProperty("begin") && (n2.begin = e2.begin), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, V.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, V), J), n.Any = (H.prototype.type_url = "", H.prototype.value = u.newBuffer([]), H.create = function(e2) {
        return new H(e2);
      }, H.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.type_url && Object.hasOwnProperty.call(e2, "type_url") && t2.uint32(10).string(e2.type_url), null != e2.value && Object.hasOwnProperty.call(e2, "value") && t2.uint32(18).bytes(e2.value), t2;
      }, H.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, H.decode = function(e2, t2) {
        e2 instanceof s || (e2 = s.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new c.google.protobuf.Any(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.type_url = e2.string();
              break;
            case 2:
              o2.value = e2.bytes();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, H.decodeDelimited = function(e2) {
        return e2 instanceof s || (e2 = new s(e2)), this.decode(e2, e2.uint32());
      }, H.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.type_url && e2.hasOwnProperty("type_url") && !u.isString(e2.type_url) ? "type_url: string expected" : null != e2.value && e2.hasOwnProperty("value") && !(e2.value && "number" == typeof e2.value.length || u.isString(e2.value)) ? "value: buffer expected" : null;
      }, H.fromObject = function(e2) {
        var t2;
        return e2 instanceof c.google.protobuf.Any ? e2 : (t2 = new c.google.protobuf.Any(), null != e2.type_url && (t2.type_url = String(e2.type_url)), null != e2.value && ("string" == typeof e2.value ? u.base64.decode(e2.value, t2.value = u.newBuffer(u.base64.length(e2.value)), 0) : e2.value.length && (t2.value = e2.value)), t2);
      }, H.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.type_url = "", t2.bytes === String ? n2.value = "" : (n2.value = [], t2.bytes !== Array && (n2.value = u.newBuffer(n2.value)))), null != e2.type_url && e2.hasOwnProperty("type_url") && (n2.type_url = e2.type_url), null != e2.value && e2.hasOwnProperty("value") && (n2.value = t2.bytes === String ? u.base64.encode(e2.value, 0, e2.value.length) : t2.bytes === Array ? Array.prototype.slice.call(e2.value) : e2.value), n2;
      }, H.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, H), n), F), c;
    });
  }
});

// node_modules/google-gax/build/protos/operations.js
var require_operations = __commonJS({
  "node_modules/google-gax/build/protos/operations.js"(exports2, module2) {
    !function(e) {
      "function" == typeof define && define.amd ? define(["protobufjs/minimal"], e) : "function" == typeof require && "object" == typeof module2 && module2 && module2.exports && (module2.exports = e(require_minimal2()));
    }(function(o) {
      "use strict";
      var e, t, n, F, a = o.Reader, r = o.Writer, i = o.util, p = o.roots.operations_protos || (o.roots.operations_protos = {});
      function G(e2, t2, n2) {
        o.rpc.Service.call(this, e2, t2, n2);
      }
      function l(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function B(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function s(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function u(e2) {
        if (this.operations = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function L(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function U(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function c(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function d(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function g(e2) {
        if (this.rules = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function f(e2) {
        if (this.additionalBindings = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function y(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function J(e2) {
        if (this.file = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function h(e2) {
        if (this.dependency = [], this.publicDependency = [], this.weakDependency = [], this.messageType = [], this.enumType = [], this.service = [], this.extension = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function O(e2) {
        if (this.field = [], this.extension = [], this.nestedType = [], this.enumType = [], this.extensionRange = [], this.oneofDecl = [], this.reservedRange = [], this.reservedName = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function b(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function m(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function M(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function v(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function w(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function P(e2) {
        if (this.value = [], this.reservedRange = [], this.reservedName = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function _(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function j(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function S(e2) {
        if (this.method = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function x(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function k(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function D(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function T(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function H(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function E(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function z(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function A(e2) {
        if (this.uninterpretedOption = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function N(e2) {
        if (this.uninterpretedOption = [], this[".google.api.methodSignature"] = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function I(e2) {
        if (this.name = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function q(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function Y(e2) {
        if (this.location = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function R(e2) {
        if (this.path = [], this.span = [], this.leadingDetachedComments = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function W(e2) {
        if (this.annotation = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function C(e2) {
        if (this.path = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function X(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function K(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function Q(e2) {
        if (e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      function V(e2) {
        if (this.details = [], e2)
          for (var t2 = Object.keys(e2), n2 = 0; n2 < t2.length; ++n2)
            null != e2[t2[n2]] && (this[t2[n2]] = e2[t2[n2]]);
      }
      return p.google = ((F = {}).longrunning = ((t = {}).Operations = (((G.prototype = Object.create(o.rpc.Service.prototype)).constructor = G).create = function(e2, t2, n2) {
        return new this(e2, t2, n2);
      }, Object.defineProperty(G.prototype.listOperations = function e2(t2, n2) {
        return this.rpcCall(e2, p.google.longrunning.ListOperationsRequest, p.google.longrunning.ListOperationsResponse, t2, n2);
      }, "name", { value: "ListOperations" }), Object.defineProperty(G.prototype.getOperation = function e2(t2, n2) {
        return this.rpcCall(e2, p.google.longrunning.GetOperationRequest, p.google.longrunning.Operation, t2, n2);
      }, "name", { value: "GetOperation" }), Object.defineProperty(G.prototype.deleteOperation = function e2(t2, n2) {
        return this.rpcCall(e2, p.google.longrunning.DeleteOperationRequest, p.google.protobuf.Empty, t2, n2);
      }, "name", { value: "DeleteOperation" }), Object.defineProperty(G.prototype.cancelOperation = function e2(t2, n2) {
        return this.rpcCall(e2, p.google.longrunning.CancelOperationRequest, p.google.protobuf.Empty, t2, n2);
      }, "name", { value: "CancelOperation" }), Object.defineProperty(G.prototype.waitOperation = function e2(t2, n2) {
        return this.rpcCall(e2, p.google.longrunning.WaitOperationRequest, p.google.longrunning.Operation, t2, n2);
      }, "name", { value: "WaitOperation" }), G), t.Operation = (l.prototype.name = "", l.prototype.metadata = null, l.prototype.done = false, l.prototype.error = null, l.prototype.response = null, Object.defineProperty(l.prototype, "result", { get: i.oneOfGetter(n = ["error", "response"]), set: i.oneOfSetter(n) }), l.create = function(e2) {
        return new l(e2);
      }, l.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.metadata && Object.hasOwnProperty.call(e2, "metadata") && p.google.protobuf.Any.encode(e2.metadata, t2.uint32(18).fork()).ldelim(), null != e2.done && Object.hasOwnProperty.call(e2, "done") && t2.uint32(24).bool(e2.done), null != e2.error && Object.hasOwnProperty.call(e2, "error") && p.google.rpc.Status.encode(e2.error, t2.uint32(34).fork()).ldelim(), null != e2.response && Object.hasOwnProperty.call(e2, "response") && p.google.protobuf.Any.encode(e2.response, t2.uint32(42).fork()).ldelim(), t2;
      }, l.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, l.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.Operation(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.metadata = p.google.protobuf.Any.decode(e2, e2.uint32());
              break;
            case 3:
              o2.done = e2.bool();
              break;
            case 4:
              o2.error = p.google.rpc.Status.decode(e2, e2.uint32());
              break;
            case 5:
              o2.response = p.google.protobuf.Any.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, l.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, l.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        var t2, n2 = {};
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.metadata && e2.hasOwnProperty("metadata") && (t2 = p.google.protobuf.Any.verify(e2.metadata)))
          return "metadata." + t2;
        if (null != e2.done && e2.hasOwnProperty("done") && "boolean" != typeof e2.done)
          return "done: boolean expected";
        if (null != e2.error && e2.hasOwnProperty("error") && (n2.result = 1, t2 = p.google.rpc.Status.verify(e2.error)))
          return "error." + t2;
        if (null != e2.response && e2.hasOwnProperty("response")) {
          if (1 === n2.result)
            return "result: multiple values";
          if (n2.result = 1, t2 = p.google.protobuf.Any.verify(e2.response))
            return "response." + t2;
        }
        return null;
      }, l.fromObject = function(e2) {
        if (e2 instanceof p.google.longrunning.Operation)
          return e2;
        var t2 = new p.google.longrunning.Operation();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.metadata) {
          if ("object" != typeof e2.metadata)
            throw TypeError(".google.longrunning.Operation.metadata: object expected");
          t2.metadata = p.google.protobuf.Any.fromObject(e2.metadata);
        }
        if (null != e2.done && (t2.done = Boolean(e2.done)), null != e2.error) {
          if ("object" != typeof e2.error)
            throw TypeError(".google.longrunning.Operation.error: object expected");
          t2.error = p.google.rpc.Status.fromObject(e2.error);
        }
        if (null != e2.response) {
          if ("object" != typeof e2.response)
            throw TypeError(".google.longrunning.Operation.response: object expected");
          t2.response = p.google.protobuf.Any.fromObject(e2.response);
        }
        return t2;
      }, l.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.metadata = null, n2.done = false), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.metadata && e2.hasOwnProperty("metadata") && (n2.metadata = p.google.protobuf.Any.toObject(e2.metadata, t2)), null != e2.done && e2.hasOwnProperty("done") && (n2.done = e2.done), null != e2.error && e2.hasOwnProperty("error") && (n2.error = p.google.rpc.Status.toObject(e2.error, t2), t2.oneofs) && (n2.result = "error"), null != e2.response && e2.hasOwnProperty("response") && (n2.response = p.google.protobuf.Any.toObject(e2.response, t2), t2.oneofs) && (n2.result = "response"), n2;
      }, l.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, l), t.GetOperationRequest = (B.prototype.name = "", B.create = function(e2) {
        return new B(e2);
      }, B.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), t2;
      }, B.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, B.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.GetOperationRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? o2.name = e2.string() : e2.skipType(7 & r2);
        }
        return o2;
      }, B.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, B.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name) ? "name: string expected" : null;
      }, B.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.longrunning.GetOperationRequest ? e2 : (t2 = new p.google.longrunning.GetOperationRequest(), null != e2.name && (t2.name = String(e2.name)), t2);
      }, B.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), n2;
      }, B.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, B), t.ListOperationsRequest = (s.prototype.name = "", s.prototype.filter = "", s.prototype.pageSize = 0, s.prototype.pageToken = "", s.create = function(e2) {
        return new s(e2);
      }, s.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.filter && Object.hasOwnProperty.call(e2, "filter") && t2.uint32(10).string(e2.filter), null != e2.pageSize && Object.hasOwnProperty.call(e2, "pageSize") && t2.uint32(16).int32(e2.pageSize), null != e2.pageToken && Object.hasOwnProperty.call(e2, "pageToken") && t2.uint32(26).string(e2.pageToken), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(34).string(e2.name), t2;
      }, s.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, s.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.ListOperationsRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 4:
              o2.name = e2.string();
              break;
            case 1:
              o2.filter = e2.string();
              break;
            case 2:
              o2.pageSize = e2.int32();
              break;
            case 3:
              o2.pageToken = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, s.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, s.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name) ? "name: string expected" : null != e2.filter && e2.hasOwnProperty("filter") && !i.isString(e2.filter) ? "filter: string expected" : null != e2.pageSize && e2.hasOwnProperty("pageSize") && !i.isInteger(e2.pageSize) ? "pageSize: integer expected" : null != e2.pageToken && e2.hasOwnProperty("pageToken") && !i.isString(e2.pageToken) ? "pageToken: string expected" : null;
      }, s.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.longrunning.ListOperationsRequest ? e2 : (t2 = new p.google.longrunning.ListOperationsRequest(), null != e2.name && (t2.name = String(e2.name)), null != e2.filter && (t2.filter = String(e2.filter)), null != e2.pageSize && (t2.pageSize = 0 | e2.pageSize), null != e2.pageToken && (t2.pageToken = String(e2.pageToken)), t2);
      }, s.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.filter = "", n2.pageSize = 0, n2.pageToken = "", n2.name = ""), null != e2.filter && e2.hasOwnProperty("filter") && (n2.filter = e2.filter), null != e2.pageSize && e2.hasOwnProperty("pageSize") && (n2.pageSize = e2.pageSize), null != e2.pageToken && e2.hasOwnProperty("pageToken") && (n2.pageToken = e2.pageToken), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), n2;
      }, s.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, s), t.ListOperationsResponse = (u.prototype.operations = i.emptyArray, u.prototype.nextPageToken = "", u.create = function(e2) {
        return new u(e2);
      }, u.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.operations && e2.operations.length)
          for (var n2 = 0; n2 < e2.operations.length; ++n2)
            p.google.longrunning.Operation.encode(e2.operations[n2], t2.uint32(10).fork()).ldelim();
        return null != e2.nextPageToken && Object.hasOwnProperty.call(e2, "nextPageToken") && t2.uint32(18).string(e2.nextPageToken), t2;
      }, u.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, u.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.ListOperationsResponse(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.operations && o2.operations.length || (o2.operations = []), o2.operations.push(p.google.longrunning.Operation.decode(e2, e2.uint32()));
              break;
            case 2:
              o2.nextPageToken = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, u.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, u.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.operations && e2.hasOwnProperty("operations")) {
          if (!Array.isArray(e2.operations))
            return "operations: array expected";
          for (var t2 = 0; t2 < e2.operations.length; ++t2) {
            var n2 = p.google.longrunning.Operation.verify(e2.operations[t2]);
            if (n2)
              return "operations." + n2;
          }
        }
        return null != e2.nextPageToken && e2.hasOwnProperty("nextPageToken") && !i.isString(e2.nextPageToken) ? "nextPageToken: string expected" : null;
      }, u.fromObject = function(e2) {
        if (e2 instanceof p.google.longrunning.ListOperationsResponse)
          return e2;
        var t2 = new p.google.longrunning.ListOperationsResponse();
        if (e2.operations) {
          if (!Array.isArray(e2.operations))
            throw TypeError(".google.longrunning.ListOperationsResponse.operations: array expected");
          t2.operations = [];
          for (var n2 = 0; n2 < e2.operations.length; ++n2) {
            if ("object" != typeof e2.operations[n2])
              throw TypeError(".google.longrunning.ListOperationsResponse.operations: object expected");
            t2.operations[n2] = p.google.longrunning.Operation.fromObject(e2.operations[n2]);
          }
        }
        return null != e2.nextPageToken && (t2.nextPageToken = String(e2.nextPageToken)), t2;
      }, u.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.operations = []), t2.defaults && (n2.nextPageToken = ""), e2.operations && e2.operations.length) {
          n2.operations = [];
          for (var o2 = 0; o2 < e2.operations.length; ++o2)
            n2.operations[o2] = p.google.longrunning.Operation.toObject(e2.operations[o2], t2);
        }
        return null != e2.nextPageToken && e2.hasOwnProperty("nextPageToken") && (n2.nextPageToken = e2.nextPageToken), n2;
      }, u.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, u), t.CancelOperationRequest = (L.prototype.name = "", L.create = function(e2) {
        return new L(e2);
      }, L.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), t2;
      }, L.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, L.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.CancelOperationRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? o2.name = e2.string() : e2.skipType(7 & r2);
        }
        return o2;
      }, L.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, L.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name) ? "name: string expected" : null;
      }, L.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.longrunning.CancelOperationRequest ? e2 : (t2 = new p.google.longrunning.CancelOperationRequest(), null != e2.name && (t2.name = String(e2.name)), t2);
      }, L.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), n2;
      }, L.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, L), t.DeleteOperationRequest = (U.prototype.name = "", U.create = function(e2) {
        return new U(e2);
      }, U.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), t2;
      }, U.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, U.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.DeleteOperationRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? o2.name = e2.string() : e2.skipType(7 & r2);
        }
        return o2;
      }, U.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, U.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name) ? "name: string expected" : null;
      }, U.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.longrunning.DeleteOperationRequest ? e2 : (t2 = new p.google.longrunning.DeleteOperationRequest(), null != e2.name && (t2.name = String(e2.name)), t2);
      }, U.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), n2;
      }, U.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, U), t.WaitOperationRequest = (c.prototype.name = "", c.prototype.timeout = null, c.create = function(e2) {
        return new c(e2);
      }, c.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.timeout && Object.hasOwnProperty.call(e2, "timeout") && p.google.protobuf.Duration.encode(e2.timeout, t2.uint32(18).fork()).ldelim(), t2;
      }, c.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, c.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.WaitOperationRequest(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.timeout = p.google.protobuf.Duration.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, c.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, c.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.timeout && e2.hasOwnProperty("timeout")) {
          e2 = p.google.protobuf.Duration.verify(e2.timeout);
          if (e2)
            return "timeout." + e2;
        }
        return null;
      }, c.fromObject = function(e2) {
        if (e2 instanceof p.google.longrunning.WaitOperationRequest)
          return e2;
        var t2 = new p.google.longrunning.WaitOperationRequest();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.timeout) {
          if ("object" != typeof e2.timeout)
            throw TypeError(".google.longrunning.WaitOperationRequest.timeout: object expected");
          t2.timeout = p.google.protobuf.Duration.fromObject(e2.timeout);
        }
        return t2;
      }, c.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.timeout = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.timeout && e2.hasOwnProperty("timeout") && (n2.timeout = p.google.protobuf.Duration.toObject(e2.timeout, t2)), n2;
      }, c.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, c), t.OperationInfo = (d.prototype.responseType = "", d.prototype.metadataType = "", d.create = function(e2) {
        return new d(e2);
      }, d.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.responseType && Object.hasOwnProperty.call(e2, "responseType") && t2.uint32(10).string(e2.responseType), null != e2.metadataType && Object.hasOwnProperty.call(e2, "metadataType") && t2.uint32(18).string(e2.metadataType), t2;
      }, d.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, d.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.longrunning.OperationInfo(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.responseType = e2.string();
              break;
            case 2:
              o2.metadataType = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, d.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, d.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.responseType && e2.hasOwnProperty("responseType") && !i.isString(e2.responseType) ? "responseType: string expected" : null != e2.metadataType && e2.hasOwnProperty("metadataType") && !i.isString(e2.metadataType) ? "metadataType: string expected" : null;
      }, d.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.longrunning.OperationInfo ? e2 : (t2 = new p.google.longrunning.OperationInfo(), null != e2.responseType && (t2.responseType = String(e2.responseType)), null != e2.metadataType && (t2.metadataType = String(e2.metadataType)), t2);
      }, d.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.responseType = "", n2.metadataType = ""), null != e2.responseType && e2.hasOwnProperty("responseType") && (n2.responseType = e2.responseType), null != e2.metadataType && e2.hasOwnProperty("metadataType") && (n2.metadataType = e2.metadataType), n2;
      }, d.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, d), t), F.api = ((n = {}).Http = (g.prototype.rules = i.emptyArray, g.prototype.fullyDecodeReservedExpansion = false, g.create = function(e2) {
        return new g(e2);
      }, g.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.rules && e2.rules.length)
          for (var n2 = 0; n2 < e2.rules.length; ++n2)
            p.google.api.HttpRule.encode(e2.rules[n2], t2.uint32(10).fork()).ldelim();
        return null != e2.fullyDecodeReservedExpansion && Object.hasOwnProperty.call(e2, "fullyDecodeReservedExpansion") && t2.uint32(16).bool(e2.fullyDecodeReservedExpansion), t2;
      }, g.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, g.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.api.Http(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.rules && o2.rules.length || (o2.rules = []), o2.rules.push(p.google.api.HttpRule.decode(e2, e2.uint32()));
              break;
            case 2:
              o2.fullyDecodeReservedExpansion = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, g.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, g.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.rules && e2.hasOwnProperty("rules")) {
          if (!Array.isArray(e2.rules))
            return "rules: array expected";
          for (var t2 = 0; t2 < e2.rules.length; ++t2) {
            var n2 = p.google.api.HttpRule.verify(e2.rules[t2]);
            if (n2)
              return "rules." + n2;
          }
        }
        return null != e2.fullyDecodeReservedExpansion && e2.hasOwnProperty("fullyDecodeReservedExpansion") && "boolean" != typeof e2.fullyDecodeReservedExpansion ? "fullyDecodeReservedExpansion: boolean expected" : null;
      }, g.fromObject = function(e2) {
        if (e2 instanceof p.google.api.Http)
          return e2;
        var t2 = new p.google.api.Http();
        if (e2.rules) {
          if (!Array.isArray(e2.rules))
            throw TypeError(".google.api.Http.rules: array expected");
          t2.rules = [];
          for (var n2 = 0; n2 < e2.rules.length; ++n2) {
            if ("object" != typeof e2.rules[n2])
              throw TypeError(".google.api.Http.rules: object expected");
            t2.rules[n2] = p.google.api.HttpRule.fromObject(e2.rules[n2]);
          }
        }
        return null != e2.fullyDecodeReservedExpansion && (t2.fullyDecodeReservedExpansion = Boolean(e2.fullyDecodeReservedExpansion)), t2;
      }, g.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.rules = []), t2.defaults && (n2.fullyDecodeReservedExpansion = false), e2.rules && e2.rules.length) {
          n2.rules = [];
          for (var o2 = 0; o2 < e2.rules.length; ++o2)
            n2.rules[o2] = p.google.api.HttpRule.toObject(e2.rules[o2], t2);
        }
        return null != e2.fullyDecodeReservedExpansion && e2.hasOwnProperty("fullyDecodeReservedExpansion") && (n2.fullyDecodeReservedExpansion = e2.fullyDecodeReservedExpansion), n2;
      }, g.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, g), n.HttpRule = (f.prototype.selector = "", f.prototype.get = "", f.prototype.put = "", f.prototype.post = "", f.prototype.delete = "", f.prototype.patch = "", f.prototype.custom = null, f.prototype.body = "", f.prototype.responseBody = "", f.prototype.additionalBindings = i.emptyArray, Object.defineProperty(f.prototype, "pattern", { get: i.oneOfGetter(t = ["get", "put", "post", "delete", "patch", "custom"]), set: i.oneOfSetter(t) }), f.create = function(e2) {
        return new f(e2);
      }, f.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.selector && Object.hasOwnProperty.call(e2, "selector") && t2.uint32(10).string(e2.selector), null != e2.get && Object.hasOwnProperty.call(e2, "get") && t2.uint32(18).string(e2.get), null != e2.put && Object.hasOwnProperty.call(e2, "put") && t2.uint32(26).string(e2.put), null != e2.post && Object.hasOwnProperty.call(e2, "post") && t2.uint32(34).string(e2.post), null != e2.delete && Object.hasOwnProperty.call(e2, "delete") && t2.uint32(42).string(e2.delete), null != e2.patch && Object.hasOwnProperty.call(e2, "patch") && t2.uint32(50).string(e2.patch), null != e2.body && Object.hasOwnProperty.call(e2, "body") && t2.uint32(58).string(e2.body), null != e2.custom && Object.hasOwnProperty.call(e2, "custom") && p.google.api.CustomHttpPattern.encode(e2.custom, t2.uint32(66).fork()).ldelim(), null != e2.additionalBindings && e2.additionalBindings.length)
          for (var n2 = 0; n2 < e2.additionalBindings.length; ++n2)
            p.google.api.HttpRule.encode(e2.additionalBindings[n2], t2.uint32(90).fork()).ldelim();
        return null != e2.responseBody && Object.hasOwnProperty.call(e2, "responseBody") && t2.uint32(98).string(e2.responseBody), t2;
      }, f.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, f.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.api.HttpRule(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.selector = e2.string();
              break;
            case 2:
              o2.get = e2.string();
              break;
            case 3:
              o2.put = e2.string();
              break;
            case 4:
              o2.post = e2.string();
              break;
            case 5:
              o2.delete = e2.string();
              break;
            case 6:
              o2.patch = e2.string();
              break;
            case 8:
              o2.custom = p.google.api.CustomHttpPattern.decode(e2, e2.uint32());
              break;
            case 7:
              o2.body = e2.string();
              break;
            case 12:
              o2.responseBody = e2.string();
              break;
            case 11:
              o2.additionalBindings && o2.additionalBindings.length || (o2.additionalBindings = []), o2.additionalBindings.push(p.google.api.HttpRule.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, f.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, f.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        var t2 = {};
        if (null != e2.selector && e2.hasOwnProperty("selector") && !i.isString(e2.selector))
          return "selector: string expected";
        if (null != e2.get && e2.hasOwnProperty("get") && (t2.pattern = 1, !i.isString(e2.get)))
          return "get: string expected";
        if (null != e2.put && e2.hasOwnProperty("put")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !i.isString(e2.put))
            return "put: string expected";
        }
        if (null != e2.post && e2.hasOwnProperty("post")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !i.isString(e2.post))
            return "post: string expected";
        }
        if (null != e2.delete && e2.hasOwnProperty("delete")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !i.isString(e2.delete))
            return "delete: string expected";
        }
        if (null != e2.patch && e2.hasOwnProperty("patch")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, !i.isString(e2.patch))
            return "patch: string expected";
        }
        if (null != e2.custom && e2.hasOwnProperty("custom")) {
          if (1 === t2.pattern)
            return "pattern: multiple values";
          if (t2.pattern = 1, n2 = p.google.api.CustomHttpPattern.verify(e2.custom))
            return "custom." + n2;
        }
        if (null != e2.body && e2.hasOwnProperty("body") && !i.isString(e2.body))
          return "body: string expected";
        if (null != e2.responseBody && e2.hasOwnProperty("responseBody") && !i.isString(e2.responseBody))
          return "responseBody: string expected";
        if (null != e2.additionalBindings && e2.hasOwnProperty("additionalBindings")) {
          if (!Array.isArray(e2.additionalBindings))
            return "additionalBindings: array expected";
          for (var n2, o2 = 0; o2 < e2.additionalBindings.length; ++o2)
            if (n2 = p.google.api.HttpRule.verify(e2.additionalBindings[o2]))
              return "additionalBindings." + n2;
        }
        return null;
      }, f.fromObject = function(e2) {
        if (e2 instanceof p.google.api.HttpRule)
          return e2;
        var t2 = new p.google.api.HttpRule();
        if (null != e2.selector && (t2.selector = String(e2.selector)), null != e2.get && (t2.get = String(e2.get)), null != e2.put && (t2.put = String(e2.put)), null != e2.post && (t2.post = String(e2.post)), null != e2.delete && (t2.delete = String(e2.delete)), null != e2.patch && (t2.patch = String(e2.patch)), null != e2.custom) {
          if ("object" != typeof e2.custom)
            throw TypeError(".google.api.HttpRule.custom: object expected");
          t2.custom = p.google.api.CustomHttpPattern.fromObject(e2.custom);
        }
        if (null != e2.body && (t2.body = String(e2.body)), null != e2.responseBody && (t2.responseBody = String(e2.responseBody)), e2.additionalBindings) {
          if (!Array.isArray(e2.additionalBindings))
            throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
          t2.additionalBindings = [];
          for (var n2 = 0; n2 < e2.additionalBindings.length; ++n2) {
            if ("object" != typeof e2.additionalBindings[n2])
              throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
            t2.additionalBindings[n2] = p.google.api.HttpRule.fromObject(e2.additionalBindings[n2]);
          }
        }
        return t2;
      }, f.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.additionalBindings = []), t2.defaults && (n2.selector = "", n2.body = "", n2.responseBody = ""), null != e2.selector && e2.hasOwnProperty("selector") && (n2.selector = e2.selector), null != e2.get && e2.hasOwnProperty("get") && (n2.get = e2.get, t2.oneofs) && (n2.pattern = "get"), null != e2.put && e2.hasOwnProperty("put") && (n2.put = e2.put, t2.oneofs) && (n2.pattern = "put"), null != e2.post && e2.hasOwnProperty("post") && (n2.post = e2.post, t2.oneofs) && (n2.pattern = "post"), null != e2.delete && e2.hasOwnProperty("delete") && (n2.delete = e2.delete, t2.oneofs) && (n2.pattern = "delete"), null != e2.patch && e2.hasOwnProperty("patch") && (n2.patch = e2.patch, t2.oneofs) && (n2.pattern = "patch"), null != e2.body && e2.hasOwnProperty("body") && (n2.body = e2.body), null != e2.custom && e2.hasOwnProperty("custom") && (n2.custom = p.google.api.CustomHttpPattern.toObject(e2.custom, t2), t2.oneofs) && (n2.pattern = "custom"), e2.additionalBindings && e2.additionalBindings.length) {
          n2.additionalBindings = [];
          for (var o2 = 0; o2 < e2.additionalBindings.length; ++o2)
            n2.additionalBindings[o2] = p.google.api.HttpRule.toObject(e2.additionalBindings[o2], t2);
        }
        return null != e2.responseBody && e2.hasOwnProperty("responseBody") && (n2.responseBody = e2.responseBody), n2;
      }, f.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, f), n.CustomHttpPattern = (y.prototype.kind = "", y.prototype.path = "", y.create = function(e2) {
        return new y(e2);
      }, y.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.kind && Object.hasOwnProperty.call(e2, "kind") && t2.uint32(10).string(e2.kind), null != e2.path && Object.hasOwnProperty.call(e2, "path") && t2.uint32(18).string(e2.path), t2;
      }, y.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, y.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.api.CustomHttpPattern(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.kind = e2.string();
              break;
            case 2:
              o2.path = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, y.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, y.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.kind && e2.hasOwnProperty("kind") && !i.isString(e2.kind) ? "kind: string expected" : null != e2.path && e2.hasOwnProperty("path") && !i.isString(e2.path) ? "path: string expected" : null;
      }, y.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.api.CustomHttpPattern ? e2 : (t2 = new p.google.api.CustomHttpPattern(), null != e2.kind && (t2.kind = String(e2.kind)), null != e2.path && (t2.path = String(e2.path)), t2);
      }, y.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.kind = "", n2.path = ""), null != e2.kind && e2.hasOwnProperty("kind") && (n2.kind = e2.kind), null != e2.path && e2.hasOwnProperty("path") && (n2.path = e2.path), n2;
      }, y.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, y), n), F.protobuf = ((t = {}).FileDescriptorSet = (J.prototype.file = i.emptyArray, J.create = function(e2) {
        return new J(e2);
      }, J.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.file && e2.file.length)
          for (var n2 = 0; n2 < e2.file.length; ++n2)
            p.google.protobuf.FileDescriptorProto.encode(e2.file[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, J.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, J.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.FileDescriptorSet(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.file && o2.file.length || (o2.file = []), o2.file.push(p.google.protobuf.FileDescriptorProto.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, J.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, J.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.file && e2.hasOwnProperty("file")) {
          if (!Array.isArray(e2.file))
            return "file: array expected";
          for (var t2 = 0; t2 < e2.file.length; ++t2) {
            var n2 = p.google.protobuf.FileDescriptorProto.verify(e2.file[t2]);
            if (n2)
              return "file." + n2;
          }
        }
        return null;
      }, J.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.FileDescriptorSet)
          return e2;
        var t2 = new p.google.protobuf.FileDescriptorSet();
        if (e2.file) {
          if (!Array.isArray(e2.file))
            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
          t2.file = [];
          for (var n2 = 0; n2 < e2.file.length; ++n2) {
            if ("object" != typeof e2.file[n2])
              throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
            t2.file[n2] = p.google.protobuf.FileDescriptorProto.fromObject(e2.file[n2]);
          }
        }
        return t2;
      }, J.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.file = []), e2.file && e2.file.length) {
          n2.file = [];
          for (var o2 = 0; o2 < e2.file.length; ++o2)
            n2.file[o2] = p.google.protobuf.FileDescriptorProto.toObject(e2.file[o2], t2);
        }
        return n2;
      }, J.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, J), t.FileDescriptorProto = (h.prototype.name = "", h.prototype.package = "", h.prototype.dependency = i.emptyArray, h.prototype.publicDependency = i.emptyArray, h.prototype.weakDependency = i.emptyArray, h.prototype.messageType = i.emptyArray, h.prototype.enumType = i.emptyArray, h.prototype.service = i.emptyArray, h.prototype.extension = i.emptyArray, h.prototype.options = null, h.prototype.sourceCodeInfo = null, h.prototype.syntax = "", h.create = function(e2) {
        return new h(e2);
      }, h.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.package && Object.hasOwnProperty.call(e2, "package") && t2.uint32(18).string(e2.package), null != e2.dependency && e2.dependency.length)
          for (var n2 = 0; n2 < e2.dependency.length; ++n2)
            t2.uint32(26).string(e2.dependency[n2]);
        if (null != e2.messageType && e2.messageType.length)
          for (n2 = 0; n2 < e2.messageType.length; ++n2)
            p.google.protobuf.DescriptorProto.encode(e2.messageType[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.enumType && e2.enumType.length)
          for (n2 = 0; n2 < e2.enumType.length; ++n2)
            p.google.protobuf.EnumDescriptorProto.encode(e2.enumType[n2], t2.uint32(42).fork()).ldelim();
        if (null != e2.service && e2.service.length)
          for (n2 = 0; n2 < e2.service.length; ++n2)
            p.google.protobuf.ServiceDescriptorProto.encode(e2.service[n2], t2.uint32(50).fork()).ldelim();
        if (null != e2.extension && e2.extension.length)
          for (n2 = 0; n2 < e2.extension.length; ++n2)
            p.google.protobuf.FieldDescriptorProto.encode(e2.extension[n2], t2.uint32(58).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.FileOptions.encode(e2.options, t2.uint32(66).fork()).ldelim(), null != e2.sourceCodeInfo && Object.hasOwnProperty.call(e2, "sourceCodeInfo") && p.google.protobuf.SourceCodeInfo.encode(e2.sourceCodeInfo, t2.uint32(74).fork()).ldelim(), null != e2.publicDependency && e2.publicDependency.length)
          for (n2 = 0; n2 < e2.publicDependency.length; ++n2)
            t2.uint32(80).int32(e2.publicDependency[n2]);
        if (null != e2.weakDependency && e2.weakDependency.length)
          for (n2 = 0; n2 < e2.weakDependency.length; ++n2)
            t2.uint32(88).int32(e2.weakDependency[n2]);
        return null != e2.syntax && Object.hasOwnProperty.call(e2, "syntax") && t2.uint32(98).string(e2.syntax), t2;
      }, h.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, h.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.FileDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.package = e2.string();
              break;
            case 3:
              o2.dependency && o2.dependency.length || (o2.dependency = []), o2.dependency.push(e2.string());
              break;
            case 10:
              if (o2.publicDependency && o2.publicDependency.length || (o2.publicDependency = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.publicDependency.push(e2.int32());
              else
                o2.publicDependency.push(e2.int32());
              break;
            case 11:
              if (o2.weakDependency && o2.weakDependency.length || (o2.weakDependency = []), 2 == (7 & r2))
                for (i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.weakDependency.push(e2.int32());
              else
                o2.weakDependency.push(e2.int32());
              break;
            case 4:
              o2.messageType && o2.messageType.length || (o2.messageType = []), o2.messageType.push(p.google.protobuf.DescriptorProto.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.enumType && o2.enumType.length || (o2.enumType = []), o2.enumType.push(p.google.protobuf.EnumDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 6:
              o2.service && o2.service.length || (o2.service = []), o2.service.push(p.google.protobuf.ServiceDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 7:
              o2.extension && o2.extension.length || (o2.extension = []), o2.extension.push(p.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 8:
              o2.options = p.google.protobuf.FileOptions.decode(e2, e2.uint32());
              break;
            case 9:
              o2.sourceCodeInfo = p.google.protobuf.SourceCodeInfo.decode(e2, e2.uint32());
              break;
            case 12:
              o2.syntax = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, h.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, h.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.package && e2.hasOwnProperty("package") && !i.isString(e2.package))
          return "package: string expected";
        if (null != e2.dependency && e2.hasOwnProperty("dependency")) {
          if (!Array.isArray(e2.dependency))
            return "dependency: array expected";
          for (var t2 = 0; t2 < e2.dependency.length; ++t2)
            if (!i.isString(e2.dependency[t2]))
              return "dependency: string[] expected";
        }
        if (null != e2.publicDependency && e2.hasOwnProperty("publicDependency")) {
          if (!Array.isArray(e2.publicDependency))
            return "publicDependency: array expected";
          for (t2 = 0; t2 < e2.publicDependency.length; ++t2)
            if (!i.isInteger(e2.publicDependency[t2]))
              return "publicDependency: integer[] expected";
        }
        if (null != e2.weakDependency && e2.hasOwnProperty("weakDependency")) {
          if (!Array.isArray(e2.weakDependency))
            return "weakDependency: array expected";
          for (t2 = 0; t2 < e2.weakDependency.length; ++t2)
            if (!i.isInteger(e2.weakDependency[t2]))
              return "weakDependency: integer[] expected";
        }
        if (null != e2.messageType && e2.hasOwnProperty("messageType")) {
          if (!Array.isArray(e2.messageType))
            return "messageType: array expected";
          for (t2 = 0; t2 < e2.messageType.length; ++t2)
            if (n2 = p.google.protobuf.DescriptorProto.verify(e2.messageType[t2]))
              return "messageType." + n2;
        }
        if (null != e2.enumType && e2.hasOwnProperty("enumType")) {
          if (!Array.isArray(e2.enumType))
            return "enumType: array expected";
          for (t2 = 0; t2 < e2.enumType.length; ++t2)
            if (n2 = p.google.protobuf.EnumDescriptorProto.verify(e2.enumType[t2]))
              return "enumType." + n2;
        }
        if (null != e2.service && e2.hasOwnProperty("service")) {
          if (!Array.isArray(e2.service))
            return "service: array expected";
          for (t2 = 0; t2 < e2.service.length; ++t2)
            if (n2 = p.google.protobuf.ServiceDescriptorProto.verify(e2.service[t2]))
              return "service." + n2;
        }
        if (null != e2.extension && e2.hasOwnProperty("extension")) {
          if (!Array.isArray(e2.extension))
            return "extension: array expected";
          for (t2 = 0; t2 < e2.extension.length; ++t2)
            if (n2 = p.google.protobuf.FieldDescriptorProto.verify(e2.extension[t2]))
              return "extension." + n2;
        }
        var n2;
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = p.google.protobuf.FileOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.sourceCodeInfo && e2.hasOwnProperty("sourceCodeInfo") && (n2 = p.google.protobuf.SourceCodeInfo.verify(e2.sourceCodeInfo)))
          return "sourceCodeInfo." + n2;
        return null != e2.syntax && e2.hasOwnProperty("syntax") && !i.isString(e2.syntax) ? "syntax: string expected" : null;
      }, h.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.FileDescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.FileDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.package && (t2.package = String(e2.package)), e2.dependency) {
          if (!Array.isArray(e2.dependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
          t2.dependency = [];
          for (var n2 = 0; n2 < e2.dependency.length; ++n2)
            t2.dependency[n2] = String(e2.dependency[n2]);
        }
        if (e2.publicDependency) {
          if (!Array.isArray(e2.publicDependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
          t2.publicDependency = [];
          for (n2 = 0; n2 < e2.publicDependency.length; ++n2)
            t2.publicDependency[n2] = 0 | e2.publicDependency[n2];
        }
        if (e2.weakDependency) {
          if (!Array.isArray(e2.weakDependency))
            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
          t2.weakDependency = [];
          for (n2 = 0; n2 < e2.weakDependency.length; ++n2)
            t2.weakDependency[n2] = 0 | e2.weakDependency[n2];
        }
        if (e2.messageType) {
          if (!Array.isArray(e2.messageType))
            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
          t2.messageType = [];
          for (n2 = 0; n2 < e2.messageType.length; ++n2) {
            if ("object" != typeof e2.messageType[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
            t2.messageType[n2] = p.google.protobuf.DescriptorProto.fromObject(e2.messageType[n2]);
          }
        }
        if (e2.enumType) {
          if (!Array.isArray(e2.enumType))
            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
          t2.enumType = [];
          for (n2 = 0; n2 < e2.enumType.length; ++n2) {
            if ("object" != typeof e2.enumType[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
            t2.enumType[n2] = p.google.protobuf.EnumDescriptorProto.fromObject(e2.enumType[n2]);
          }
        }
        if (e2.service) {
          if (!Array.isArray(e2.service))
            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
          t2.service = [];
          for (n2 = 0; n2 < e2.service.length; ++n2) {
            if ("object" != typeof e2.service[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
            t2.service[n2] = p.google.protobuf.ServiceDescriptorProto.fromObject(e2.service[n2]);
          }
        }
        if (e2.extension) {
          if (!Array.isArray(e2.extension))
            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
          t2.extension = [];
          for (n2 = 0; n2 < e2.extension.length; ++n2) {
            if ("object" != typeof e2.extension[n2])
              throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
            t2.extension[n2] = p.google.protobuf.FieldDescriptorProto.fromObject(e2.extension[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
          t2.options = p.google.protobuf.FileOptions.fromObject(e2.options);
        }
        if (null != e2.sourceCodeInfo) {
          if ("object" != typeof e2.sourceCodeInfo)
            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
          t2.sourceCodeInfo = p.google.protobuf.SourceCodeInfo.fromObject(e2.sourceCodeInfo);
        }
        return null != e2.syntax && (t2.syntax = String(e2.syntax)), t2;
      }, h.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.dependency = [], n2.messageType = [], n2.enumType = [], n2.service = [], n2.extension = [], n2.publicDependency = [], n2.weakDependency = []), t2.defaults && (n2.name = "", n2.package = "", n2.options = null, n2.sourceCodeInfo = null, n2.syntax = ""), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.package && e2.hasOwnProperty("package") && (n2.package = e2.package), e2.dependency && e2.dependency.length) {
          n2.dependency = [];
          for (var o2 = 0; o2 < e2.dependency.length; ++o2)
            n2.dependency[o2] = e2.dependency[o2];
        }
        if (e2.messageType && e2.messageType.length) {
          n2.messageType = [];
          for (o2 = 0; o2 < e2.messageType.length; ++o2)
            n2.messageType[o2] = p.google.protobuf.DescriptorProto.toObject(e2.messageType[o2], t2);
        }
        if (e2.enumType && e2.enumType.length) {
          n2.enumType = [];
          for (o2 = 0; o2 < e2.enumType.length; ++o2)
            n2.enumType[o2] = p.google.protobuf.EnumDescriptorProto.toObject(e2.enumType[o2], t2);
        }
        if (e2.service && e2.service.length) {
          n2.service = [];
          for (o2 = 0; o2 < e2.service.length; ++o2)
            n2.service[o2] = p.google.protobuf.ServiceDescriptorProto.toObject(e2.service[o2], t2);
        }
        if (e2.extension && e2.extension.length) {
          n2.extension = [];
          for (o2 = 0; o2 < e2.extension.length; ++o2)
            n2.extension[o2] = p.google.protobuf.FieldDescriptorProto.toObject(e2.extension[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.FileOptions.toObject(e2.options, t2)), null != e2.sourceCodeInfo && e2.hasOwnProperty("sourceCodeInfo") && (n2.sourceCodeInfo = p.google.protobuf.SourceCodeInfo.toObject(e2.sourceCodeInfo, t2)), e2.publicDependency && e2.publicDependency.length) {
          n2.publicDependency = [];
          for (o2 = 0; o2 < e2.publicDependency.length; ++o2)
            n2.publicDependency[o2] = e2.publicDependency[o2];
        }
        if (e2.weakDependency && e2.weakDependency.length) {
          n2.weakDependency = [];
          for (o2 = 0; o2 < e2.weakDependency.length; ++o2)
            n2.weakDependency[o2] = e2.weakDependency[o2];
        }
        return null != e2.syntax && e2.hasOwnProperty("syntax") && (n2.syntax = e2.syntax), n2;
      }, h.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, h), t.DescriptorProto = (O.prototype.name = "", O.prototype.field = i.emptyArray, O.prototype.extension = i.emptyArray, O.prototype.nestedType = i.emptyArray, O.prototype.enumType = i.emptyArray, O.prototype.extensionRange = i.emptyArray, O.prototype.oneofDecl = i.emptyArray, O.prototype.options = null, O.prototype.reservedRange = i.emptyArray, O.prototype.reservedName = i.emptyArray, O.create = function(e2) {
        return new O(e2);
      }, O.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.field && e2.field.length)
          for (var n2 = 0; n2 < e2.field.length; ++n2)
            p.google.protobuf.FieldDescriptorProto.encode(e2.field[n2], t2.uint32(18).fork()).ldelim();
        if (null != e2.nestedType && e2.nestedType.length)
          for (n2 = 0; n2 < e2.nestedType.length; ++n2)
            p.google.protobuf.DescriptorProto.encode(e2.nestedType[n2], t2.uint32(26).fork()).ldelim();
        if (null != e2.enumType && e2.enumType.length)
          for (n2 = 0; n2 < e2.enumType.length; ++n2)
            p.google.protobuf.EnumDescriptorProto.encode(e2.enumType[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.extensionRange && e2.extensionRange.length)
          for (n2 = 0; n2 < e2.extensionRange.length; ++n2)
            p.google.protobuf.DescriptorProto.ExtensionRange.encode(e2.extensionRange[n2], t2.uint32(42).fork()).ldelim();
        if (null != e2.extension && e2.extension.length)
          for (n2 = 0; n2 < e2.extension.length; ++n2)
            p.google.protobuf.FieldDescriptorProto.encode(e2.extension[n2], t2.uint32(50).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.MessageOptions.encode(e2.options, t2.uint32(58).fork()).ldelim(), null != e2.oneofDecl && e2.oneofDecl.length)
          for (n2 = 0; n2 < e2.oneofDecl.length; ++n2)
            p.google.protobuf.OneofDescriptorProto.encode(e2.oneofDecl[n2], t2.uint32(66).fork()).ldelim();
        if (null != e2.reservedRange && e2.reservedRange.length)
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2)
            p.google.protobuf.DescriptorProto.ReservedRange.encode(e2.reservedRange[n2], t2.uint32(74).fork()).ldelim();
        if (null != e2.reservedName && e2.reservedName.length)
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.uint32(82).string(e2.reservedName[n2]);
        return t2;
      }, O.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, O.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.DescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.field && o2.field.length || (o2.field = []), o2.field.push(p.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 6:
              o2.extension && o2.extension.length || (o2.extension = []), o2.extension.push(p.google.protobuf.FieldDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.nestedType && o2.nestedType.length || (o2.nestedType = []), o2.nestedType.push(p.google.protobuf.DescriptorProto.decode(e2, e2.uint32()));
              break;
            case 4:
              o2.enumType && o2.enumType.length || (o2.enumType = []), o2.enumType.push(p.google.protobuf.EnumDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.extensionRange && o2.extensionRange.length || (o2.extensionRange = []), o2.extensionRange.push(p.google.protobuf.DescriptorProto.ExtensionRange.decode(e2, e2.uint32()));
              break;
            case 8:
              o2.oneofDecl && o2.oneofDecl.length || (o2.oneofDecl = []), o2.oneofDecl.push(p.google.protobuf.OneofDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 7:
              o2.options = p.google.protobuf.MessageOptions.decode(e2, e2.uint32());
              break;
            case 9:
              o2.reservedRange && o2.reservedRange.length || (o2.reservedRange = []), o2.reservedRange.push(p.google.protobuf.DescriptorProto.ReservedRange.decode(e2, e2.uint32()));
              break;
            case 10:
              o2.reservedName && o2.reservedName.length || (o2.reservedName = []), o2.reservedName.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, O.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, O.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.field && e2.hasOwnProperty("field")) {
          if (!Array.isArray(e2.field))
            return "field: array expected";
          for (var t2 = 0; t2 < e2.field.length; ++t2)
            if (n2 = p.google.protobuf.FieldDescriptorProto.verify(e2.field[t2]))
              return "field." + n2;
        }
        if (null != e2.extension && e2.hasOwnProperty("extension")) {
          if (!Array.isArray(e2.extension))
            return "extension: array expected";
          for (t2 = 0; t2 < e2.extension.length; ++t2)
            if (n2 = p.google.protobuf.FieldDescriptorProto.verify(e2.extension[t2]))
              return "extension." + n2;
        }
        if (null != e2.nestedType && e2.hasOwnProperty("nestedType")) {
          if (!Array.isArray(e2.nestedType))
            return "nestedType: array expected";
          for (t2 = 0; t2 < e2.nestedType.length; ++t2)
            if (n2 = p.google.protobuf.DescriptorProto.verify(e2.nestedType[t2]))
              return "nestedType." + n2;
        }
        if (null != e2.enumType && e2.hasOwnProperty("enumType")) {
          if (!Array.isArray(e2.enumType))
            return "enumType: array expected";
          for (t2 = 0; t2 < e2.enumType.length; ++t2)
            if (n2 = p.google.protobuf.EnumDescriptorProto.verify(e2.enumType[t2]))
              return "enumType." + n2;
        }
        if (null != e2.extensionRange && e2.hasOwnProperty("extensionRange")) {
          if (!Array.isArray(e2.extensionRange))
            return "extensionRange: array expected";
          for (t2 = 0; t2 < e2.extensionRange.length; ++t2)
            if (n2 = p.google.protobuf.DescriptorProto.ExtensionRange.verify(e2.extensionRange[t2]))
              return "extensionRange." + n2;
        }
        if (null != e2.oneofDecl && e2.hasOwnProperty("oneofDecl")) {
          if (!Array.isArray(e2.oneofDecl))
            return "oneofDecl: array expected";
          for (t2 = 0; t2 < e2.oneofDecl.length; ++t2)
            if (n2 = p.google.protobuf.OneofDescriptorProto.verify(e2.oneofDecl[t2]))
              return "oneofDecl." + n2;
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = p.google.protobuf.MessageOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.reservedRange && e2.hasOwnProperty("reservedRange")) {
          if (!Array.isArray(e2.reservedRange))
            return "reservedRange: array expected";
          for (var n2, t2 = 0; t2 < e2.reservedRange.length; ++t2)
            if (n2 = p.google.protobuf.DescriptorProto.ReservedRange.verify(e2.reservedRange[t2]))
              return "reservedRange." + n2;
        }
        if (null != e2.reservedName && e2.hasOwnProperty("reservedName")) {
          if (!Array.isArray(e2.reservedName))
            return "reservedName: array expected";
          for (t2 = 0; t2 < e2.reservedName.length; ++t2)
            if (!i.isString(e2.reservedName[t2]))
              return "reservedName: string[] expected";
        }
        return null;
      }, O.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.DescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.DescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.field) {
          if (!Array.isArray(e2.field))
            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
          t2.field = [];
          for (var n2 = 0; n2 < e2.field.length; ++n2) {
            if ("object" != typeof e2.field[n2])
              throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
            t2.field[n2] = p.google.protobuf.FieldDescriptorProto.fromObject(e2.field[n2]);
          }
        }
        if (e2.extension) {
          if (!Array.isArray(e2.extension))
            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
          t2.extension = [];
          for (n2 = 0; n2 < e2.extension.length; ++n2) {
            if ("object" != typeof e2.extension[n2])
              throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
            t2.extension[n2] = p.google.protobuf.FieldDescriptorProto.fromObject(e2.extension[n2]);
          }
        }
        if (e2.nestedType) {
          if (!Array.isArray(e2.nestedType))
            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
          t2.nestedType = [];
          for (n2 = 0; n2 < e2.nestedType.length; ++n2) {
            if ("object" != typeof e2.nestedType[n2])
              throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
            t2.nestedType[n2] = p.google.protobuf.DescriptorProto.fromObject(e2.nestedType[n2]);
          }
        }
        if (e2.enumType) {
          if (!Array.isArray(e2.enumType))
            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
          t2.enumType = [];
          for (n2 = 0; n2 < e2.enumType.length; ++n2) {
            if ("object" != typeof e2.enumType[n2])
              throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
            t2.enumType[n2] = p.google.protobuf.EnumDescriptorProto.fromObject(e2.enumType[n2]);
          }
        }
        if (e2.extensionRange) {
          if (!Array.isArray(e2.extensionRange))
            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
          t2.extensionRange = [];
          for (n2 = 0; n2 < e2.extensionRange.length; ++n2) {
            if ("object" != typeof e2.extensionRange[n2])
              throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
            t2.extensionRange[n2] = p.google.protobuf.DescriptorProto.ExtensionRange.fromObject(e2.extensionRange[n2]);
          }
        }
        if (e2.oneofDecl) {
          if (!Array.isArray(e2.oneofDecl))
            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
          t2.oneofDecl = [];
          for (n2 = 0; n2 < e2.oneofDecl.length; ++n2) {
            if ("object" != typeof e2.oneofDecl[n2])
              throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
            t2.oneofDecl[n2] = p.google.protobuf.OneofDescriptorProto.fromObject(e2.oneofDecl[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
          t2.options = p.google.protobuf.MessageOptions.fromObject(e2.options);
        }
        if (e2.reservedRange) {
          if (!Array.isArray(e2.reservedRange))
            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
          t2.reservedRange = [];
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2) {
            if ("object" != typeof e2.reservedRange[n2])
              throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
            t2.reservedRange[n2] = p.google.protobuf.DescriptorProto.ReservedRange.fromObject(e2.reservedRange[n2]);
          }
        }
        if (e2.reservedName) {
          if (!Array.isArray(e2.reservedName))
            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
          t2.reservedName = [];
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.reservedName[n2] = String(e2.reservedName[n2]);
        }
        return t2;
      }, O.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.field = [], n2.nestedType = [], n2.enumType = [], n2.extensionRange = [], n2.extension = [], n2.oneofDecl = [], n2.reservedRange = [], n2.reservedName = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.field && e2.field.length) {
          n2.field = [];
          for (var o2 = 0; o2 < e2.field.length; ++o2)
            n2.field[o2] = p.google.protobuf.FieldDescriptorProto.toObject(e2.field[o2], t2);
        }
        if (e2.nestedType && e2.nestedType.length) {
          n2.nestedType = [];
          for (o2 = 0; o2 < e2.nestedType.length; ++o2)
            n2.nestedType[o2] = p.google.protobuf.DescriptorProto.toObject(e2.nestedType[o2], t2);
        }
        if (e2.enumType && e2.enumType.length) {
          n2.enumType = [];
          for (o2 = 0; o2 < e2.enumType.length; ++o2)
            n2.enumType[o2] = p.google.protobuf.EnumDescriptorProto.toObject(e2.enumType[o2], t2);
        }
        if (e2.extensionRange && e2.extensionRange.length) {
          n2.extensionRange = [];
          for (o2 = 0; o2 < e2.extensionRange.length; ++o2)
            n2.extensionRange[o2] = p.google.protobuf.DescriptorProto.ExtensionRange.toObject(e2.extensionRange[o2], t2);
        }
        if (e2.extension && e2.extension.length) {
          n2.extension = [];
          for (o2 = 0; o2 < e2.extension.length; ++o2)
            n2.extension[o2] = p.google.protobuf.FieldDescriptorProto.toObject(e2.extension[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.MessageOptions.toObject(e2.options, t2)), e2.oneofDecl && e2.oneofDecl.length) {
          n2.oneofDecl = [];
          for (o2 = 0; o2 < e2.oneofDecl.length; ++o2)
            n2.oneofDecl[o2] = p.google.protobuf.OneofDescriptorProto.toObject(e2.oneofDecl[o2], t2);
        }
        if (e2.reservedRange && e2.reservedRange.length) {
          n2.reservedRange = [];
          for (o2 = 0; o2 < e2.reservedRange.length; ++o2)
            n2.reservedRange[o2] = p.google.protobuf.DescriptorProto.ReservedRange.toObject(e2.reservedRange[o2], t2);
        }
        if (e2.reservedName && e2.reservedName.length) {
          n2.reservedName = [];
          for (o2 = 0; o2 < e2.reservedName.length; ++o2)
            n2.reservedName[o2] = e2.reservedName[o2];
        }
        return n2;
      }, O.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, O.ExtensionRange = (b.prototype.start = 0, b.prototype.end = 0, b.prototype.options = null, b.create = function(e2) {
        return new b(e2);
      }, b.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.ExtensionRangeOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, b.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, b.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.DescriptorProto.ExtensionRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            case 3:
              o2.options = p.google.protobuf.ExtensionRangeOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, b.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, b.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.start && e2.hasOwnProperty("start") && !i.isInteger(e2.start))
          return "start: integer expected";
        if (null != e2.end && e2.hasOwnProperty("end") && !i.isInteger(e2.end))
          return "end: integer expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = p.google.protobuf.ExtensionRangeOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, b.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.DescriptorProto.ExtensionRange)
          return e2;
        var t2 = new p.google.protobuf.DescriptorProto.ExtensionRange();
        if (null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
          t2.options = p.google.protobuf.ExtensionRangeOptions.fromObject(e2.options);
        }
        return t2;
      }, b.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0, n2.options = null), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.ExtensionRangeOptions.toObject(e2.options, t2)), n2;
      }, b.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, b), O.ReservedRange = (m.prototype.start = 0, m.prototype.end = 0, m.create = function(e2) {
        return new m(e2);
      }, m.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), t2;
      }, m.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, m.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.DescriptorProto.ReservedRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, m.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, m.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.start && e2.hasOwnProperty("start") && !i.isInteger(e2.start) ? "start: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !i.isInteger(e2.end) ? "end: integer expected" : null;
      }, m.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.protobuf.DescriptorProto.ReservedRange ? e2 : (t2 = new p.google.protobuf.DescriptorProto.ReservedRange(), null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), t2);
      }, m.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, m.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, m), O), t.ExtensionRangeOptions = (M.prototype.uninterpretedOption = i.emptyArray, M.create = function(e2) {
        return new M(e2);
      }, M.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, M.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, M.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.ExtensionRangeOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 999 ? (o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, M.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, M.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, M.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.ExtensionRangeOptions)
          return e2;
        var t2 = new p.google.protobuf.ExtensionRangeOptions();
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, M.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, M.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, M), t.FieldDescriptorProto = (v.prototype.name = "", v.prototype.number = 0, v.prototype.label = 1, v.prototype.type = 1, v.prototype.typeName = "", v.prototype.extendee = "", v.prototype.defaultValue = "", v.prototype.oneofIndex = 0, v.prototype.jsonName = "", v.prototype.options = null, v.prototype.proto3Optional = false, v.create = function(e2) {
        return new v(e2);
      }, v.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.extendee && Object.hasOwnProperty.call(e2, "extendee") && t2.uint32(18).string(e2.extendee), null != e2.number && Object.hasOwnProperty.call(e2, "number") && t2.uint32(24).int32(e2.number), null != e2.label && Object.hasOwnProperty.call(e2, "label") && t2.uint32(32).int32(e2.label), null != e2.type && Object.hasOwnProperty.call(e2, "type") && t2.uint32(40).int32(e2.type), null != e2.typeName && Object.hasOwnProperty.call(e2, "typeName") && t2.uint32(50).string(e2.typeName), null != e2.defaultValue && Object.hasOwnProperty.call(e2, "defaultValue") && t2.uint32(58).string(e2.defaultValue), null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.FieldOptions.encode(e2.options, t2.uint32(66).fork()).ldelim(), null != e2.oneofIndex && Object.hasOwnProperty.call(e2, "oneofIndex") && t2.uint32(72).int32(e2.oneofIndex), null != e2.jsonName && Object.hasOwnProperty.call(e2, "jsonName") && t2.uint32(82).string(e2.jsonName), null != e2.proto3Optional && Object.hasOwnProperty.call(e2, "proto3Optional") && t2.uint32(136).bool(e2.proto3Optional), t2;
      }, v.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, v.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.FieldDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 3:
              o2.number = e2.int32();
              break;
            case 4:
              o2.label = e2.int32();
              break;
            case 5:
              o2.type = e2.int32();
              break;
            case 6:
              o2.typeName = e2.string();
              break;
            case 2:
              o2.extendee = e2.string();
              break;
            case 7:
              o2.defaultValue = e2.string();
              break;
            case 9:
              o2.oneofIndex = e2.int32();
              break;
            case 10:
              o2.jsonName = e2.string();
              break;
            case 8:
              o2.options = p.google.protobuf.FieldOptions.decode(e2, e2.uint32());
              break;
            case 17:
              o2.proto3Optional = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, v.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, v.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.number && e2.hasOwnProperty("number") && !i.isInteger(e2.number))
          return "number: integer expected";
        if (null != e2.label && e2.hasOwnProperty("label"))
          switch (e2.label) {
            default:
              return "label: enum value expected";
            case 1:
            case 2:
            case 3:
          }
        if (null != e2.type && e2.hasOwnProperty("type"))
          switch (e2.type) {
            default:
              return "type: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
          }
        if (null != e2.typeName && e2.hasOwnProperty("typeName") && !i.isString(e2.typeName))
          return "typeName: string expected";
        if (null != e2.extendee && e2.hasOwnProperty("extendee") && !i.isString(e2.extendee))
          return "extendee: string expected";
        if (null != e2.defaultValue && e2.hasOwnProperty("defaultValue") && !i.isString(e2.defaultValue))
          return "defaultValue: string expected";
        if (null != e2.oneofIndex && e2.hasOwnProperty("oneofIndex") && !i.isInteger(e2.oneofIndex))
          return "oneofIndex: integer expected";
        if (null != e2.jsonName && e2.hasOwnProperty("jsonName") && !i.isString(e2.jsonName))
          return "jsonName: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          var t2 = p.google.protobuf.FieldOptions.verify(e2.options);
          if (t2)
            return "options." + t2;
        }
        return null != e2.proto3Optional && e2.hasOwnProperty("proto3Optional") && "boolean" != typeof e2.proto3Optional ? "proto3Optional: boolean expected" : null;
      }, v.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.FieldDescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.FieldDescriptorProto();
        switch (null != e2.name && (t2.name = String(e2.name)), null != e2.number && (t2.number = 0 | e2.number), e2.label) {
          case "LABEL_OPTIONAL":
          case 1:
            t2.label = 1;
            break;
          case "LABEL_REQUIRED":
          case 2:
            t2.label = 2;
            break;
          case "LABEL_REPEATED":
          case 3:
            t2.label = 3;
        }
        switch (e2.type) {
          case "TYPE_DOUBLE":
          case 1:
            t2.type = 1;
            break;
          case "TYPE_FLOAT":
          case 2:
            t2.type = 2;
            break;
          case "TYPE_INT64":
          case 3:
            t2.type = 3;
            break;
          case "TYPE_UINT64":
          case 4:
            t2.type = 4;
            break;
          case "TYPE_INT32":
          case 5:
            t2.type = 5;
            break;
          case "TYPE_FIXED64":
          case 6:
            t2.type = 6;
            break;
          case "TYPE_FIXED32":
          case 7:
            t2.type = 7;
            break;
          case "TYPE_BOOL":
          case 8:
            t2.type = 8;
            break;
          case "TYPE_STRING":
          case 9:
            t2.type = 9;
            break;
          case "TYPE_GROUP":
          case 10:
            t2.type = 10;
            break;
          case "TYPE_MESSAGE":
          case 11:
            t2.type = 11;
            break;
          case "TYPE_BYTES":
          case 12:
            t2.type = 12;
            break;
          case "TYPE_UINT32":
          case 13:
            t2.type = 13;
            break;
          case "TYPE_ENUM":
          case 14:
            t2.type = 14;
            break;
          case "TYPE_SFIXED32":
          case 15:
            t2.type = 15;
            break;
          case "TYPE_SFIXED64":
          case 16:
            t2.type = 16;
            break;
          case "TYPE_SINT32":
          case 17:
            t2.type = 17;
            break;
          case "TYPE_SINT64":
          case 18:
            t2.type = 18;
        }
        if (null != e2.typeName && (t2.typeName = String(e2.typeName)), null != e2.extendee && (t2.extendee = String(e2.extendee)), null != e2.defaultValue && (t2.defaultValue = String(e2.defaultValue)), null != e2.oneofIndex && (t2.oneofIndex = 0 | e2.oneofIndex), null != e2.jsonName && (t2.jsonName = String(e2.jsonName)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
          t2.options = p.google.protobuf.FieldOptions.fromObject(e2.options);
        }
        return null != e2.proto3Optional && (t2.proto3Optional = Boolean(e2.proto3Optional)), t2;
      }, v.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.extendee = "", n2.number = 0, n2.label = t2.enums === String ? "LABEL_OPTIONAL" : 1, n2.type = t2.enums === String ? "TYPE_DOUBLE" : 1, n2.typeName = "", n2.defaultValue = "", n2.options = null, n2.oneofIndex = 0, n2.jsonName = "", n2.proto3Optional = false), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.extendee && e2.hasOwnProperty("extendee") && (n2.extendee = e2.extendee), null != e2.number && e2.hasOwnProperty("number") && (n2.number = e2.number), null != e2.label && e2.hasOwnProperty("label") && (n2.label = t2.enums === String ? p.google.protobuf.FieldDescriptorProto.Label[e2.label] : e2.label), null != e2.type && e2.hasOwnProperty("type") && (n2.type = t2.enums === String ? p.google.protobuf.FieldDescriptorProto.Type[e2.type] : e2.type), null != e2.typeName && e2.hasOwnProperty("typeName") && (n2.typeName = e2.typeName), null != e2.defaultValue && e2.hasOwnProperty("defaultValue") && (n2.defaultValue = e2.defaultValue), null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.FieldOptions.toObject(e2.options, t2)), null != e2.oneofIndex && e2.hasOwnProperty("oneofIndex") && (n2.oneofIndex = e2.oneofIndex), null != e2.jsonName && e2.hasOwnProperty("jsonName") && (n2.jsonName = e2.jsonName), null != e2.proto3Optional && e2.hasOwnProperty("proto3Optional") && (n2.proto3Optional = e2.proto3Optional), n2;
      }, v.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, v.Type = (n = {}, (e = Object.create(n))[n[1] = "TYPE_DOUBLE"] = 1, e[n[2] = "TYPE_FLOAT"] = 2, e[n[3] = "TYPE_INT64"] = 3, e[n[4] = "TYPE_UINT64"] = 4, e[n[5] = "TYPE_INT32"] = 5, e[n[6] = "TYPE_FIXED64"] = 6, e[n[7] = "TYPE_FIXED32"] = 7, e[n[8] = "TYPE_BOOL"] = 8, e[n[9] = "TYPE_STRING"] = 9, e[n[10] = "TYPE_GROUP"] = 10, e[n[11] = "TYPE_MESSAGE"] = 11, e[n[12] = "TYPE_BYTES"] = 12, e[n[13] = "TYPE_UINT32"] = 13, e[n[14] = "TYPE_ENUM"] = 14, e[n[15] = "TYPE_SFIXED32"] = 15, e[n[16] = "TYPE_SFIXED64"] = 16, e[n[17] = "TYPE_SINT32"] = 17, e[n[18] = "TYPE_SINT64"] = 18, e), v.Label = (n = {}, (e = Object.create(n))[n[1] = "LABEL_OPTIONAL"] = 1, e[n[2] = "LABEL_REQUIRED"] = 2, e[n[3] = "LABEL_REPEATED"] = 3, e), v), t.OneofDescriptorProto = (w.prototype.name = "", w.prototype.options = null, w.create = function(e2) {
        return new w(e2);
      }, w.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.OneofOptions.encode(e2.options, t2.uint32(18).fork()).ldelim(), t2;
      }, w.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, w.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.OneofDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.options = p.google.protobuf.OneofOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, w.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, w.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = p.google.protobuf.OneofOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, w.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.OneofDescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.OneofDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
          t2.options = p.google.protobuf.OneofOptions.fromObject(e2.options);
        }
        return t2;
      }, w.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.OneofOptions.toObject(e2.options, t2)), n2;
      }, w.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, w), t.EnumDescriptorProto = (P.prototype.name = "", P.prototype.value = i.emptyArray, P.prototype.options = null, P.prototype.reservedRange = i.emptyArray, P.prototype.reservedName = i.emptyArray, P.create = function(e2) {
        return new P(e2);
      }, P.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.value && e2.value.length)
          for (var n2 = 0; n2 < e2.value.length; ++n2)
            p.google.protobuf.EnumValueDescriptorProto.encode(e2.value[n2], t2.uint32(18).fork()).ldelim();
        if (null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.EnumOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), null != e2.reservedRange && e2.reservedRange.length)
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2)
            p.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(e2.reservedRange[n2], t2.uint32(34).fork()).ldelim();
        if (null != e2.reservedName && e2.reservedName.length)
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.uint32(42).string(e2.reservedName[n2]);
        return t2;
      }, P.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, P.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.EnumDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.value && o2.value.length || (o2.value = []), o2.value.push(p.google.protobuf.EnumValueDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.options = p.google.protobuf.EnumOptions.decode(e2, e2.uint32());
              break;
            case 4:
              o2.reservedRange && o2.reservedRange.length || (o2.reservedRange = []), o2.reservedRange.push(p.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(e2, e2.uint32()));
              break;
            case 5:
              o2.reservedName && o2.reservedName.length || (o2.reservedName = []), o2.reservedName.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, P.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, P.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.value && e2.hasOwnProperty("value")) {
          if (!Array.isArray(e2.value))
            return "value: array expected";
          for (var t2 = 0; t2 < e2.value.length; ++t2)
            if (n2 = p.google.protobuf.EnumValueDescriptorProto.verify(e2.value[t2]))
              return "value." + n2;
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = p.google.protobuf.EnumOptions.verify(e2.options)))
          return "options." + n2;
        if (null != e2.reservedRange && e2.hasOwnProperty("reservedRange")) {
          if (!Array.isArray(e2.reservedRange))
            return "reservedRange: array expected";
          for (var n2, t2 = 0; t2 < e2.reservedRange.length; ++t2)
            if (n2 = p.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(e2.reservedRange[t2]))
              return "reservedRange." + n2;
        }
        if (null != e2.reservedName && e2.hasOwnProperty("reservedName")) {
          if (!Array.isArray(e2.reservedName))
            return "reservedName: array expected";
          for (t2 = 0; t2 < e2.reservedName.length; ++t2)
            if (!i.isString(e2.reservedName[t2]))
              return "reservedName: string[] expected";
        }
        return null;
      }, P.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.EnumDescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.EnumDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.value) {
          if (!Array.isArray(e2.value))
            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
          t2.value = [];
          for (var n2 = 0; n2 < e2.value.length; ++n2) {
            if ("object" != typeof e2.value[n2])
              throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
            t2.value[n2] = p.google.protobuf.EnumValueDescriptorProto.fromObject(e2.value[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
          t2.options = p.google.protobuf.EnumOptions.fromObject(e2.options);
        }
        if (e2.reservedRange) {
          if (!Array.isArray(e2.reservedRange))
            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
          t2.reservedRange = [];
          for (n2 = 0; n2 < e2.reservedRange.length; ++n2) {
            if ("object" != typeof e2.reservedRange[n2])
              throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
            t2.reservedRange[n2] = p.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(e2.reservedRange[n2]);
          }
        }
        if (e2.reservedName) {
          if (!Array.isArray(e2.reservedName))
            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
          t2.reservedName = [];
          for (n2 = 0; n2 < e2.reservedName.length; ++n2)
            t2.reservedName[n2] = String(e2.reservedName[n2]);
        }
        return t2;
      }, P.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.value = [], n2.reservedRange = [], n2.reservedName = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.value && e2.value.length) {
          n2.value = [];
          for (var o2 = 0; o2 < e2.value.length; ++o2)
            n2.value[o2] = p.google.protobuf.EnumValueDescriptorProto.toObject(e2.value[o2], t2);
        }
        if (null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.EnumOptions.toObject(e2.options, t2)), e2.reservedRange && e2.reservedRange.length) {
          n2.reservedRange = [];
          for (o2 = 0; o2 < e2.reservedRange.length; ++o2)
            n2.reservedRange[o2] = p.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(e2.reservedRange[o2], t2);
        }
        if (e2.reservedName && e2.reservedName.length) {
          n2.reservedName = [];
          for (o2 = 0; o2 < e2.reservedName.length; ++o2)
            n2.reservedName[o2] = e2.reservedName[o2];
        }
        return n2;
      }, P.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, P.EnumReservedRange = (_.prototype.start = 0, _.prototype.end = 0, _.create = function(e2) {
        return new _(e2);
      }, _.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.start && Object.hasOwnProperty.call(e2, "start") && t2.uint32(8).int32(e2.start), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(16).int32(e2.end), t2;
      }, _.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, _.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.EnumDescriptorProto.EnumReservedRange(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.start = e2.int32();
              break;
            case 2:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, _.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, _.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.start && e2.hasOwnProperty("start") && !i.isInteger(e2.start) ? "start: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !i.isInteger(e2.end) ? "end: integer expected" : null;
      }, _.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.protobuf.EnumDescriptorProto.EnumReservedRange ? e2 : (t2 = new p.google.protobuf.EnumDescriptorProto.EnumReservedRange(), null != e2.start && (t2.start = 0 | e2.start), null != e2.end && (t2.end = 0 | e2.end), t2);
      }, _.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.start = 0, n2.end = 0), null != e2.start && e2.hasOwnProperty("start") && (n2.start = e2.start), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, _.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, _), P), t.EnumValueDescriptorProto = (j.prototype.name = "", j.prototype.number = 0, j.prototype.options = null, j.create = function(e2) {
        return new j(e2);
      }, j.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.number && Object.hasOwnProperty.call(e2, "number") && t2.uint32(16).int32(e2.number), null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.EnumValueOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, j.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, j.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.EnumValueDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.number = e2.int32();
              break;
            case 3:
              o2.options = p.google.protobuf.EnumValueOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, j.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, j.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.number && e2.hasOwnProperty("number") && !i.isInteger(e2.number))
          return "number: integer expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          e2 = p.google.protobuf.EnumValueOptions.verify(e2.options);
          if (e2)
            return "options." + e2;
        }
        return null;
      }, j.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.EnumValueDescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.EnumValueDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.number && (t2.number = 0 | e2.number), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
          t2.options = p.google.protobuf.EnumValueOptions.fromObject(e2.options);
        }
        return t2;
      }, j.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.number = 0, n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.number && e2.hasOwnProperty("number") && (n2.number = e2.number), null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.EnumValueOptions.toObject(e2.options, t2)), n2;
      }, j.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, j), t.ServiceDescriptorProto = (S.prototype.name = "", S.prototype.method = i.emptyArray, S.prototype.options = null, S.create = function(e2) {
        return new S(e2);
      }, S.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.method && e2.method.length)
          for (var n2 = 0; n2 < e2.method.length; ++n2)
            p.google.protobuf.MethodDescriptorProto.encode(e2.method[n2], t2.uint32(18).fork()).ldelim();
        return null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.ServiceOptions.encode(e2.options, t2.uint32(26).fork()).ldelim(), t2;
      }, S.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, S.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.ServiceDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.method && o2.method.length || (o2.method = []), o2.method.push(p.google.protobuf.MethodDescriptorProto.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.options = p.google.protobuf.ServiceOptions.decode(e2, e2.uint32());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, S.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, S.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.method && e2.hasOwnProperty("method")) {
          if (!Array.isArray(e2.method))
            return "method: array expected";
          for (var t2 = 0; t2 < e2.method.length; ++t2)
            if (n2 = p.google.protobuf.MethodDescriptorProto.verify(e2.method[t2]))
              return "method." + n2;
        }
        var n2;
        if (null != e2.options && e2.hasOwnProperty("options") && (n2 = p.google.protobuf.ServiceOptions.verify(e2.options)))
          return "options." + n2;
        return null;
      }, S.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.ServiceDescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.ServiceDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), e2.method) {
          if (!Array.isArray(e2.method))
            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
          t2.method = [];
          for (var n2 = 0; n2 < e2.method.length; ++n2) {
            if ("object" != typeof e2.method[n2])
              throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
            t2.method[n2] = p.google.protobuf.MethodDescriptorProto.fromObject(e2.method[n2]);
          }
        }
        if (null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
          t2.options = p.google.protobuf.ServiceOptions.fromObject(e2.options);
        }
        return t2;
      }, S.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.method = []), t2.defaults && (n2.name = "", n2.options = null), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), e2.method && e2.method.length) {
          n2.method = [];
          for (var o2 = 0; o2 < e2.method.length; ++o2)
            n2.method[o2] = p.google.protobuf.MethodDescriptorProto.toObject(e2.method[o2], t2);
        }
        return null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.ServiceOptions.toObject(e2.options, t2)), n2;
      }, S.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, S), t.MethodDescriptorProto = (x.prototype.name = "", x.prototype.inputType = "", x.prototype.outputType = "", x.prototype.options = null, x.prototype.clientStreaming = false, x.prototype.serverStreaming = false, x.create = function(e2) {
        return new x(e2);
      }, x.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.name && Object.hasOwnProperty.call(e2, "name") && t2.uint32(10).string(e2.name), null != e2.inputType && Object.hasOwnProperty.call(e2, "inputType") && t2.uint32(18).string(e2.inputType), null != e2.outputType && Object.hasOwnProperty.call(e2, "outputType") && t2.uint32(26).string(e2.outputType), null != e2.options && Object.hasOwnProperty.call(e2, "options") && p.google.protobuf.MethodOptions.encode(e2.options, t2.uint32(34).fork()).ldelim(), null != e2.clientStreaming && Object.hasOwnProperty.call(e2, "clientStreaming") && t2.uint32(40).bool(e2.clientStreaming), null != e2.serverStreaming && Object.hasOwnProperty.call(e2, "serverStreaming") && t2.uint32(48).bool(e2.serverStreaming), t2;
      }, x.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, x.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.MethodDescriptorProto(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.name = e2.string();
              break;
            case 2:
              o2.inputType = e2.string();
              break;
            case 3:
              o2.outputType = e2.string();
              break;
            case 4:
              o2.options = p.google.protobuf.MethodOptions.decode(e2, e2.uint32());
              break;
            case 5:
              o2.clientStreaming = e2.bool();
              break;
            case 6:
              o2.serverStreaming = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, x.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, x.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name") && !i.isString(e2.name))
          return "name: string expected";
        if (null != e2.inputType && e2.hasOwnProperty("inputType") && !i.isString(e2.inputType))
          return "inputType: string expected";
        if (null != e2.outputType && e2.hasOwnProperty("outputType") && !i.isString(e2.outputType))
          return "outputType: string expected";
        if (null != e2.options && e2.hasOwnProperty("options")) {
          var t2 = p.google.protobuf.MethodOptions.verify(e2.options);
          if (t2)
            return "options." + t2;
        }
        return null != e2.clientStreaming && e2.hasOwnProperty("clientStreaming") && "boolean" != typeof e2.clientStreaming ? "clientStreaming: boolean expected" : null != e2.serverStreaming && e2.hasOwnProperty("serverStreaming") && "boolean" != typeof e2.serverStreaming ? "serverStreaming: boolean expected" : null;
      }, x.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.MethodDescriptorProto)
          return e2;
        var t2 = new p.google.protobuf.MethodDescriptorProto();
        if (null != e2.name && (t2.name = String(e2.name)), null != e2.inputType && (t2.inputType = String(e2.inputType)), null != e2.outputType && (t2.outputType = String(e2.outputType)), null != e2.options) {
          if ("object" != typeof e2.options)
            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
          t2.options = p.google.protobuf.MethodOptions.fromObject(e2.options);
        }
        return null != e2.clientStreaming && (t2.clientStreaming = Boolean(e2.clientStreaming)), null != e2.serverStreaming && (t2.serverStreaming = Boolean(e2.serverStreaming)), t2;
      }, x.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.name = "", n2.inputType = "", n2.outputType = "", n2.options = null, n2.clientStreaming = false, n2.serverStreaming = false), null != e2.name && e2.hasOwnProperty("name") && (n2.name = e2.name), null != e2.inputType && e2.hasOwnProperty("inputType") && (n2.inputType = e2.inputType), null != e2.outputType && e2.hasOwnProperty("outputType") && (n2.outputType = e2.outputType), null != e2.options && e2.hasOwnProperty("options") && (n2.options = p.google.protobuf.MethodOptions.toObject(e2.options, t2)), null != e2.clientStreaming && e2.hasOwnProperty("clientStreaming") && (n2.clientStreaming = e2.clientStreaming), null != e2.serverStreaming && e2.hasOwnProperty("serverStreaming") && (n2.serverStreaming = e2.serverStreaming), n2;
      }, x.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, x), t.FileOptions = (k.prototype.javaPackage = "", k.prototype.javaOuterClassname = "", k.prototype.javaMultipleFiles = false, k.prototype.javaGenerateEqualsAndHash = false, k.prototype.javaStringCheckUtf8 = false, k.prototype.optimizeFor = 1, k.prototype.goPackage = "", k.prototype.ccGenericServices = false, k.prototype.javaGenericServices = false, k.prototype.pyGenericServices = false, k.prototype.phpGenericServices = false, k.prototype.deprecated = false, k.prototype.ccEnableArenas = true, k.prototype.objcClassPrefix = "", k.prototype.csharpNamespace = "", k.prototype.swiftPrefix = "", k.prototype.phpClassPrefix = "", k.prototype.phpNamespace = "", k.prototype.phpMetadataNamespace = "", k.prototype.rubyPackage = "", k.prototype.uninterpretedOption = i.emptyArray, k.create = function(e2) {
        return new k(e2);
      }, k.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.javaPackage && Object.hasOwnProperty.call(e2, "javaPackage") && t2.uint32(10).string(e2.javaPackage), null != e2.javaOuterClassname && Object.hasOwnProperty.call(e2, "javaOuterClassname") && t2.uint32(66).string(e2.javaOuterClassname), null != e2.optimizeFor && Object.hasOwnProperty.call(e2, "optimizeFor") && t2.uint32(72).int32(e2.optimizeFor), null != e2.javaMultipleFiles && Object.hasOwnProperty.call(e2, "javaMultipleFiles") && t2.uint32(80).bool(e2.javaMultipleFiles), null != e2.goPackage && Object.hasOwnProperty.call(e2, "goPackage") && t2.uint32(90).string(e2.goPackage), null != e2.ccGenericServices && Object.hasOwnProperty.call(e2, "ccGenericServices") && t2.uint32(128).bool(e2.ccGenericServices), null != e2.javaGenericServices && Object.hasOwnProperty.call(e2, "javaGenericServices") && t2.uint32(136).bool(e2.javaGenericServices), null != e2.pyGenericServices && Object.hasOwnProperty.call(e2, "pyGenericServices") && t2.uint32(144).bool(e2.pyGenericServices), null != e2.javaGenerateEqualsAndHash && Object.hasOwnProperty.call(e2, "javaGenerateEqualsAndHash") && t2.uint32(160).bool(e2.javaGenerateEqualsAndHash), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(184).bool(e2.deprecated), null != e2.javaStringCheckUtf8 && Object.hasOwnProperty.call(e2, "javaStringCheckUtf8") && t2.uint32(216).bool(e2.javaStringCheckUtf8), null != e2.ccEnableArenas && Object.hasOwnProperty.call(e2, "ccEnableArenas") && t2.uint32(248).bool(e2.ccEnableArenas), null != e2.objcClassPrefix && Object.hasOwnProperty.call(e2, "objcClassPrefix") && t2.uint32(290).string(e2.objcClassPrefix), null != e2.csharpNamespace && Object.hasOwnProperty.call(e2, "csharpNamespace") && t2.uint32(298).string(e2.csharpNamespace), null != e2.swiftPrefix && Object.hasOwnProperty.call(e2, "swiftPrefix") && t2.uint32(314).string(e2.swiftPrefix), null != e2.phpClassPrefix && Object.hasOwnProperty.call(e2, "phpClassPrefix") && t2.uint32(322).string(e2.phpClassPrefix), null != e2.phpNamespace && Object.hasOwnProperty.call(e2, "phpNamespace") && t2.uint32(330).string(e2.phpNamespace), null != e2.phpGenericServices && Object.hasOwnProperty.call(e2, "phpGenericServices") && t2.uint32(336).bool(e2.phpGenericServices), null != e2.phpMetadataNamespace && Object.hasOwnProperty.call(e2, "phpMetadataNamespace") && t2.uint32(354).string(e2.phpMetadataNamespace), null != e2.rubyPackage && Object.hasOwnProperty.call(e2, "rubyPackage") && t2.uint32(362).string(e2.rubyPackage), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, k.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, k.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.FileOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.javaPackage = e2.string();
              break;
            case 8:
              o2.javaOuterClassname = e2.string();
              break;
            case 10:
              o2.javaMultipleFiles = e2.bool();
              break;
            case 20:
              o2.javaGenerateEqualsAndHash = e2.bool();
              break;
            case 27:
              o2.javaStringCheckUtf8 = e2.bool();
              break;
            case 9:
              o2.optimizeFor = e2.int32();
              break;
            case 11:
              o2.goPackage = e2.string();
              break;
            case 16:
              o2.ccGenericServices = e2.bool();
              break;
            case 17:
              o2.javaGenericServices = e2.bool();
              break;
            case 18:
              o2.pyGenericServices = e2.bool();
              break;
            case 42:
              o2.phpGenericServices = e2.bool();
              break;
            case 23:
              o2.deprecated = e2.bool();
              break;
            case 31:
              o2.ccEnableArenas = e2.bool();
              break;
            case 36:
              o2.objcClassPrefix = e2.string();
              break;
            case 37:
              o2.csharpNamespace = e2.string();
              break;
            case 39:
              o2.swiftPrefix = e2.string();
              break;
            case 40:
              o2.phpClassPrefix = e2.string();
              break;
            case 41:
              o2.phpNamespace = e2.string();
              break;
            case 44:
              o2.phpMetadataNamespace = e2.string();
              break;
            case 45:
              o2.rubyPackage = e2.string();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, k.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, k.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.javaPackage && e2.hasOwnProperty("javaPackage") && !i.isString(e2.javaPackage))
          return "javaPackage: string expected";
        if (null != e2.javaOuterClassname && e2.hasOwnProperty("javaOuterClassname") && !i.isString(e2.javaOuterClassname))
          return "javaOuterClassname: string expected";
        if (null != e2.javaMultipleFiles && e2.hasOwnProperty("javaMultipleFiles") && "boolean" != typeof e2.javaMultipleFiles)
          return "javaMultipleFiles: boolean expected";
        if (null != e2.javaGenerateEqualsAndHash && e2.hasOwnProperty("javaGenerateEqualsAndHash") && "boolean" != typeof e2.javaGenerateEqualsAndHash)
          return "javaGenerateEqualsAndHash: boolean expected";
        if (null != e2.javaStringCheckUtf8 && e2.hasOwnProperty("javaStringCheckUtf8") && "boolean" != typeof e2.javaStringCheckUtf8)
          return "javaStringCheckUtf8: boolean expected";
        if (null != e2.optimizeFor && e2.hasOwnProperty("optimizeFor"))
          switch (e2.optimizeFor) {
            default:
              return "optimizeFor: enum value expected";
            case 1:
            case 2:
            case 3:
          }
        if (null != e2.goPackage && e2.hasOwnProperty("goPackage") && !i.isString(e2.goPackage))
          return "goPackage: string expected";
        if (null != e2.ccGenericServices && e2.hasOwnProperty("ccGenericServices") && "boolean" != typeof e2.ccGenericServices)
          return "ccGenericServices: boolean expected";
        if (null != e2.javaGenericServices && e2.hasOwnProperty("javaGenericServices") && "boolean" != typeof e2.javaGenericServices)
          return "javaGenericServices: boolean expected";
        if (null != e2.pyGenericServices && e2.hasOwnProperty("pyGenericServices") && "boolean" != typeof e2.pyGenericServices)
          return "pyGenericServices: boolean expected";
        if (null != e2.phpGenericServices && e2.hasOwnProperty("phpGenericServices") && "boolean" != typeof e2.phpGenericServices)
          return "phpGenericServices: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.ccEnableArenas && e2.hasOwnProperty("ccEnableArenas") && "boolean" != typeof e2.ccEnableArenas)
          return "ccEnableArenas: boolean expected";
        if (null != e2.objcClassPrefix && e2.hasOwnProperty("objcClassPrefix") && !i.isString(e2.objcClassPrefix))
          return "objcClassPrefix: string expected";
        if (null != e2.csharpNamespace && e2.hasOwnProperty("csharpNamespace") && !i.isString(e2.csharpNamespace))
          return "csharpNamespace: string expected";
        if (null != e2.swiftPrefix && e2.hasOwnProperty("swiftPrefix") && !i.isString(e2.swiftPrefix))
          return "swiftPrefix: string expected";
        if (null != e2.phpClassPrefix && e2.hasOwnProperty("phpClassPrefix") && !i.isString(e2.phpClassPrefix))
          return "phpClassPrefix: string expected";
        if (null != e2.phpNamespace && e2.hasOwnProperty("phpNamespace") && !i.isString(e2.phpNamespace))
          return "phpNamespace: string expected";
        if (null != e2.phpMetadataNamespace && e2.hasOwnProperty("phpMetadataNamespace") && !i.isString(e2.phpMetadataNamespace))
          return "phpMetadataNamespace: string expected";
        if (null != e2.rubyPackage && e2.hasOwnProperty("rubyPackage") && !i.isString(e2.rubyPackage))
          return "rubyPackage: string expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, k.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.FileOptions)
          return e2;
        var t2 = new p.google.protobuf.FileOptions();
        switch (null != e2.javaPackage && (t2.javaPackage = String(e2.javaPackage)), null != e2.javaOuterClassname && (t2.javaOuterClassname = String(e2.javaOuterClassname)), null != e2.javaMultipleFiles && (t2.javaMultipleFiles = Boolean(e2.javaMultipleFiles)), null != e2.javaGenerateEqualsAndHash && (t2.javaGenerateEqualsAndHash = Boolean(e2.javaGenerateEqualsAndHash)), null != e2.javaStringCheckUtf8 && (t2.javaStringCheckUtf8 = Boolean(e2.javaStringCheckUtf8)), e2.optimizeFor) {
          case "SPEED":
          case 1:
            t2.optimizeFor = 1;
            break;
          case "CODE_SIZE":
          case 2:
            t2.optimizeFor = 2;
            break;
          case "LITE_RUNTIME":
          case 3:
            t2.optimizeFor = 3;
        }
        if (null != e2.goPackage && (t2.goPackage = String(e2.goPackage)), null != e2.ccGenericServices && (t2.ccGenericServices = Boolean(e2.ccGenericServices)), null != e2.javaGenericServices && (t2.javaGenericServices = Boolean(e2.javaGenericServices)), null != e2.pyGenericServices && (t2.pyGenericServices = Boolean(e2.pyGenericServices)), null != e2.phpGenericServices && (t2.phpGenericServices = Boolean(e2.phpGenericServices)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.ccEnableArenas && (t2.ccEnableArenas = Boolean(e2.ccEnableArenas)), null != e2.objcClassPrefix && (t2.objcClassPrefix = String(e2.objcClassPrefix)), null != e2.csharpNamespace && (t2.csharpNamespace = String(e2.csharpNamespace)), null != e2.swiftPrefix && (t2.swiftPrefix = String(e2.swiftPrefix)), null != e2.phpClassPrefix && (t2.phpClassPrefix = String(e2.phpClassPrefix)), null != e2.phpNamespace && (t2.phpNamespace = String(e2.phpNamespace)), null != e2.phpMetadataNamespace && (t2.phpMetadataNamespace = String(e2.phpMetadataNamespace)), null != e2.rubyPackage && (t2.rubyPackage = String(e2.rubyPackage)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, k.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.javaPackage = "", n2.javaOuterClassname = "", n2.optimizeFor = t2.enums === String ? "SPEED" : 1, n2.javaMultipleFiles = false, n2.goPackage = "", n2.ccGenericServices = false, n2.javaGenericServices = false, n2.pyGenericServices = false, n2.javaGenerateEqualsAndHash = false, n2.deprecated = false, n2.javaStringCheckUtf8 = false, n2.ccEnableArenas = true, n2.objcClassPrefix = "", n2.csharpNamespace = "", n2.swiftPrefix = "", n2.phpClassPrefix = "", n2.phpNamespace = "", n2.phpGenericServices = false, n2.phpMetadataNamespace = "", n2.rubyPackage = ""), null != e2.javaPackage && e2.hasOwnProperty("javaPackage") && (n2.javaPackage = e2.javaPackage), null != e2.javaOuterClassname && e2.hasOwnProperty("javaOuterClassname") && (n2.javaOuterClassname = e2.javaOuterClassname), null != e2.optimizeFor && e2.hasOwnProperty("optimizeFor") && (n2.optimizeFor = t2.enums === String ? p.google.protobuf.FileOptions.OptimizeMode[e2.optimizeFor] : e2.optimizeFor), null != e2.javaMultipleFiles && e2.hasOwnProperty("javaMultipleFiles") && (n2.javaMultipleFiles = e2.javaMultipleFiles), null != e2.goPackage && e2.hasOwnProperty("goPackage") && (n2.goPackage = e2.goPackage), null != e2.ccGenericServices && e2.hasOwnProperty("ccGenericServices") && (n2.ccGenericServices = e2.ccGenericServices), null != e2.javaGenericServices && e2.hasOwnProperty("javaGenericServices") && (n2.javaGenericServices = e2.javaGenericServices), null != e2.pyGenericServices && e2.hasOwnProperty("pyGenericServices") && (n2.pyGenericServices = e2.pyGenericServices), null != e2.javaGenerateEqualsAndHash && e2.hasOwnProperty("javaGenerateEqualsAndHash") && (n2.javaGenerateEqualsAndHash = e2.javaGenerateEqualsAndHash), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.javaStringCheckUtf8 && e2.hasOwnProperty("javaStringCheckUtf8") && (n2.javaStringCheckUtf8 = e2.javaStringCheckUtf8), null != e2.ccEnableArenas && e2.hasOwnProperty("ccEnableArenas") && (n2.ccEnableArenas = e2.ccEnableArenas), null != e2.objcClassPrefix && e2.hasOwnProperty("objcClassPrefix") && (n2.objcClassPrefix = e2.objcClassPrefix), null != e2.csharpNamespace && e2.hasOwnProperty("csharpNamespace") && (n2.csharpNamespace = e2.csharpNamespace), null != e2.swiftPrefix && e2.hasOwnProperty("swiftPrefix") && (n2.swiftPrefix = e2.swiftPrefix), null != e2.phpClassPrefix && e2.hasOwnProperty("phpClassPrefix") && (n2.phpClassPrefix = e2.phpClassPrefix), null != e2.phpNamespace && e2.hasOwnProperty("phpNamespace") && (n2.phpNamespace = e2.phpNamespace), null != e2.phpGenericServices && e2.hasOwnProperty("phpGenericServices") && (n2.phpGenericServices = e2.phpGenericServices), null != e2.phpMetadataNamespace && e2.hasOwnProperty("phpMetadataNamespace") && (n2.phpMetadataNamespace = e2.phpMetadataNamespace), null != e2.rubyPackage && e2.hasOwnProperty("rubyPackage") && (n2.rubyPackage = e2.rubyPackage), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, k.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, k.OptimizeMode = (n = {}, (e = Object.create(n))[n[1] = "SPEED"] = 1, e[n[2] = "CODE_SIZE"] = 2, e[n[3] = "LITE_RUNTIME"] = 3, e), k), t.MessageOptions = (D.prototype.messageSetWireFormat = false, D.prototype.noStandardDescriptorAccessor = false, D.prototype.deprecated = false, D.prototype.mapEntry = false, D.prototype.uninterpretedOption = i.emptyArray, D.create = function(e2) {
        return new D(e2);
      }, D.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.messageSetWireFormat && Object.hasOwnProperty.call(e2, "messageSetWireFormat") && t2.uint32(8).bool(e2.messageSetWireFormat), null != e2.noStandardDescriptorAccessor && Object.hasOwnProperty.call(e2, "noStandardDescriptorAccessor") && t2.uint32(16).bool(e2.noStandardDescriptorAccessor), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.mapEntry && Object.hasOwnProperty.call(e2, "mapEntry") && t2.uint32(56).bool(e2.mapEntry), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, D.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, D.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.MessageOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.messageSetWireFormat = e2.bool();
              break;
            case 2:
              o2.noStandardDescriptorAccessor = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 7:
              o2.mapEntry = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, D.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, D.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.messageSetWireFormat && e2.hasOwnProperty("messageSetWireFormat") && "boolean" != typeof e2.messageSetWireFormat)
          return "messageSetWireFormat: boolean expected";
        if (null != e2.noStandardDescriptorAccessor && e2.hasOwnProperty("noStandardDescriptorAccessor") && "boolean" != typeof e2.noStandardDescriptorAccessor)
          return "noStandardDescriptorAccessor: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.mapEntry && e2.hasOwnProperty("mapEntry") && "boolean" != typeof e2.mapEntry)
          return "mapEntry: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, D.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.MessageOptions)
          return e2;
        var t2 = new p.google.protobuf.MessageOptions();
        if (null != e2.messageSetWireFormat && (t2.messageSetWireFormat = Boolean(e2.messageSetWireFormat)), null != e2.noStandardDescriptorAccessor && (t2.noStandardDescriptorAccessor = Boolean(e2.noStandardDescriptorAccessor)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.mapEntry && (t2.mapEntry = Boolean(e2.mapEntry)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, D.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.messageSetWireFormat = false, n2.noStandardDescriptorAccessor = false, n2.deprecated = false, n2.mapEntry = false), null != e2.messageSetWireFormat && e2.hasOwnProperty("messageSetWireFormat") && (n2.messageSetWireFormat = e2.messageSetWireFormat), null != e2.noStandardDescriptorAccessor && e2.hasOwnProperty("noStandardDescriptorAccessor") && (n2.noStandardDescriptorAccessor = e2.noStandardDescriptorAccessor), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.mapEntry && e2.hasOwnProperty("mapEntry") && (n2.mapEntry = e2.mapEntry), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, D.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, D), t.FieldOptions = (T.prototype.ctype = 0, T.prototype.packed = false, T.prototype.jstype = 0, T.prototype.lazy = false, T.prototype.deprecated = false, T.prototype.weak = false, T.prototype.uninterpretedOption = i.emptyArray, T.create = function(e2) {
        return new T(e2);
      }, T.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.ctype && Object.hasOwnProperty.call(e2, "ctype") && t2.uint32(8).int32(e2.ctype), null != e2.packed && Object.hasOwnProperty.call(e2, "packed") && t2.uint32(16).bool(e2.packed), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.lazy && Object.hasOwnProperty.call(e2, "lazy") && t2.uint32(40).bool(e2.lazy), null != e2.jstype && Object.hasOwnProperty.call(e2, "jstype") && t2.uint32(48).int32(e2.jstype), null != e2.weak && Object.hasOwnProperty.call(e2, "weak") && t2.uint32(80).bool(e2.weak), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, T.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, T.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.FieldOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.ctype = e2.int32();
              break;
            case 2:
              o2.packed = e2.bool();
              break;
            case 6:
              o2.jstype = e2.int32();
              break;
            case 5:
              o2.lazy = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 10:
              o2.weak = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, T.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, T.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.ctype && e2.hasOwnProperty("ctype"))
          switch (e2.ctype) {
            default:
              return "ctype: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.packed && e2.hasOwnProperty("packed") && "boolean" != typeof e2.packed)
          return "packed: boolean expected";
        if (null != e2.jstype && e2.hasOwnProperty("jstype"))
          switch (e2.jstype) {
            default:
              return "jstype: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.lazy && e2.hasOwnProperty("lazy") && "boolean" != typeof e2.lazy)
          return "lazy: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.weak && e2.hasOwnProperty("weak") && "boolean" != typeof e2.weak)
          return "weak: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, T.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.FieldOptions)
          return e2;
        var t2 = new p.google.protobuf.FieldOptions();
        switch (e2.ctype) {
          case "STRING":
          case 0:
            t2.ctype = 0;
            break;
          case "CORD":
          case 1:
            t2.ctype = 1;
            break;
          case "STRING_PIECE":
          case 2:
            t2.ctype = 2;
        }
        switch (null != e2.packed && (t2.packed = Boolean(e2.packed)), e2.jstype) {
          case "JS_NORMAL":
          case 0:
            t2.jstype = 0;
            break;
          case "JS_STRING":
          case 1:
            t2.jstype = 1;
            break;
          case "JS_NUMBER":
          case 2:
            t2.jstype = 2;
        }
        if (null != e2.lazy && (t2.lazy = Boolean(e2.lazy)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), null != e2.weak && (t2.weak = Boolean(e2.weak)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, T.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.ctype = t2.enums === String ? "STRING" : 0, n2.packed = false, n2.deprecated = false, n2.lazy = false, n2.jstype = t2.enums === String ? "JS_NORMAL" : 0, n2.weak = false), null != e2.ctype && e2.hasOwnProperty("ctype") && (n2.ctype = t2.enums === String ? p.google.protobuf.FieldOptions.CType[e2.ctype] : e2.ctype), null != e2.packed && e2.hasOwnProperty("packed") && (n2.packed = e2.packed), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.lazy && e2.hasOwnProperty("lazy") && (n2.lazy = e2.lazy), null != e2.jstype && e2.hasOwnProperty("jstype") && (n2.jstype = t2.enums === String ? p.google.protobuf.FieldOptions.JSType[e2.jstype] : e2.jstype), null != e2.weak && e2.hasOwnProperty("weak") && (n2.weak = e2.weak), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, T.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, T.CType = (n = {}, (e = Object.create(n))[n[0] = "STRING"] = 0, e[n[1] = "CORD"] = 1, e[n[2] = "STRING_PIECE"] = 2, e), T.JSType = (n = {}, (e = Object.create(n))[n[0] = "JS_NORMAL"] = 0, e[n[1] = "JS_STRING"] = 1, e[n[2] = "JS_NUMBER"] = 2, e), T), t.OneofOptions = (H.prototype.uninterpretedOption = i.emptyArray, H.create = function(e2) {
        return new H(e2);
      }, H.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, H.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, H.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.OneofOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 999 ? (o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, H.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, H.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, H.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.OneofOptions)
          return e2;
        var t2 = new p.google.protobuf.OneofOptions();
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, H.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, H.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, H), t.EnumOptions = (E.prototype.allowAlias = false, E.prototype.deprecated = false, E.prototype.uninterpretedOption = i.emptyArray, E.create = function(e2) {
        return new E(e2);
      }, E.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.allowAlias && Object.hasOwnProperty.call(e2, "allowAlias") && t2.uint32(16).bool(e2.allowAlias), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(24).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, E.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, E.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.EnumOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 2:
              o2.allowAlias = e2.bool();
              break;
            case 3:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, E.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, E.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.allowAlias && e2.hasOwnProperty("allowAlias") && "boolean" != typeof e2.allowAlias)
          return "allowAlias: boolean expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, E.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.EnumOptions)
          return e2;
        var t2 = new p.google.protobuf.EnumOptions();
        if (null != e2.allowAlias && (t2.allowAlias = Boolean(e2.allowAlias)), null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, E.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.allowAlias = false, n2.deprecated = false), null != e2.allowAlias && e2.hasOwnProperty("allowAlias") && (n2.allowAlias = e2.allowAlias), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, E.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, E), t.EnumValueOptions = (z.prototype.deprecated = false, z.prototype.uninterpretedOption = i.emptyArray, z.create = function(e2) {
        return new z(e2);
      }, z.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(8).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return t2;
      }, z.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, z.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.EnumValueOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, z.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, z.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null;
      }, z.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.EnumValueOptions)
          return e2;
        var t2 = new p.google.protobuf.EnumValueOptions();
        if (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return t2;
      }, z.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.deprecated = false), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return n2;
      }, z.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, z), t.ServiceOptions = (A.prototype.deprecated = false, A.prototype.uninterpretedOption = i.emptyArray, A.prototype[".google.api.defaultHost"] = "", A.prototype[".google.api.oauthScopes"] = "", A.create = function(e2) {
        return new A(e2);
      }, A.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(264).bool(e2.deprecated), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        return null != e2[".google.api.defaultHost"] && Object.hasOwnProperty.call(e2, ".google.api.defaultHost") && t2.uint32(8394).string(e2[".google.api.defaultHost"]), null != e2[".google.api.oauthScopes"] && Object.hasOwnProperty.call(e2, ".google.api.oauthScopes") && t2.uint32(8402).string(e2[".google.api.oauthScopes"]), t2;
      }, A.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, A.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.ServiceOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 33:
              o2.deprecated = e2.bool();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 1049:
              o2[".google.api.defaultHost"] = e2.string();
              break;
            case 1050:
              o2[".google.api.oauthScopes"] = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, A.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, A.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]);
            if (n2)
              return "uninterpretedOption." + n2;
          }
        }
        return null != e2[".google.api.defaultHost"] && e2.hasOwnProperty(".google.api.defaultHost") && !i.isString(e2[".google.api.defaultHost"]) ? ".google.api.defaultHost: string expected" : null != e2[".google.api.oauthScopes"] && e2.hasOwnProperty(".google.api.oauthScopes") && !i.isString(e2[".google.api.oauthScopes"]) ? ".google.api.oauthScopes: string expected" : null;
      }, A.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.ServiceOptions)
          return e2;
        var t2 = new p.google.protobuf.ServiceOptions();
        if (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        return null != e2[".google.api.defaultHost"] && (t2[".google.api.defaultHost"] = String(e2[".google.api.defaultHost"])), null != e2[".google.api.oauthScopes"] && (t2[".google.api.oauthScopes"] = String(e2[".google.api.oauthScopes"])), t2;
      }, A.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = []), t2.defaults && (n2.deprecated = false, n2[".google.api.defaultHost"] = "", n2[".google.api.oauthScopes"] = ""), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        return null != e2[".google.api.defaultHost"] && e2.hasOwnProperty(".google.api.defaultHost") && (n2[".google.api.defaultHost"] = e2[".google.api.defaultHost"]), null != e2[".google.api.oauthScopes"] && e2.hasOwnProperty(".google.api.oauthScopes") && (n2[".google.api.oauthScopes"] = e2[".google.api.oauthScopes"]), n2;
      }, A.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, A), t.MethodOptions = (N.prototype.deprecated = false, N.prototype.idempotencyLevel = 0, N.prototype.uninterpretedOption = i.emptyArray, N.prototype[".google.longrunning.operationInfo"] = null, N.prototype[".google.api.http"] = null, N.prototype[".google.api.methodSignature"] = i.emptyArray, N.create = function(e2) {
        return new N(e2);
      }, N.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.deprecated && Object.hasOwnProperty.call(e2, "deprecated") && t2.uint32(264).bool(e2.deprecated), null != e2.idempotencyLevel && Object.hasOwnProperty.call(e2, "idempotencyLevel") && t2.uint32(272).int32(e2.idempotencyLevel), null != e2.uninterpretedOption && e2.uninterpretedOption.length)
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2)
            p.google.protobuf.UninterpretedOption.encode(e2.uninterpretedOption[n2], t2.uint32(7994).fork()).ldelim();
        if (null != e2[".google.longrunning.operationInfo"] && Object.hasOwnProperty.call(e2, ".google.longrunning.operationInfo") && p.google.longrunning.OperationInfo.encode(e2[".google.longrunning.operationInfo"], t2.uint32(8394).fork()).ldelim(), null != e2[".google.api.methodSignature"] && e2[".google.api.methodSignature"].length)
          for (n2 = 0; n2 < e2[".google.api.methodSignature"].length; ++n2)
            t2.uint32(8410).string(e2[".google.api.methodSignature"][n2]);
        return null != e2[".google.api.http"] && Object.hasOwnProperty.call(e2, ".google.api.http") && p.google.api.HttpRule.encode(e2[".google.api.http"], t2.uint32(578365826).fork()).ldelim(), t2;
      }, N.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, N.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.MethodOptions(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 33:
              o2.deprecated = e2.bool();
              break;
            case 34:
              o2.idempotencyLevel = e2.int32();
              break;
            case 999:
              o2.uninterpretedOption && o2.uninterpretedOption.length || (o2.uninterpretedOption = []), o2.uninterpretedOption.push(p.google.protobuf.UninterpretedOption.decode(e2, e2.uint32()));
              break;
            case 1049:
              o2[".google.longrunning.operationInfo"] = p.google.longrunning.OperationInfo.decode(e2, e2.uint32());
              break;
            case 72295728:
              o2[".google.api.http"] = p.google.api.HttpRule.decode(e2, e2.uint32());
              break;
            case 1051:
              o2[".google.api.methodSignature"] && o2[".google.api.methodSignature"].length || (o2[".google.api.methodSignature"] = []), o2[".google.api.methodSignature"].push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, N.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, N.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.deprecated && e2.hasOwnProperty("deprecated") && "boolean" != typeof e2.deprecated)
          return "deprecated: boolean expected";
        if (null != e2.idempotencyLevel && e2.hasOwnProperty("idempotencyLevel"))
          switch (e2.idempotencyLevel) {
            default:
              return "idempotencyLevel: enum value expected";
            case 0:
            case 1:
            case 2:
          }
        if (null != e2.uninterpretedOption && e2.hasOwnProperty("uninterpretedOption")) {
          if (!Array.isArray(e2.uninterpretedOption))
            return "uninterpretedOption: array expected";
          for (var t2 = 0; t2 < e2.uninterpretedOption.length; ++t2)
            if (n2 = p.google.protobuf.UninterpretedOption.verify(e2.uninterpretedOption[t2]))
              return "uninterpretedOption." + n2;
        }
        var n2;
        if (null != e2[".google.longrunning.operationInfo"] && e2.hasOwnProperty(".google.longrunning.operationInfo") && (n2 = p.google.longrunning.OperationInfo.verify(e2[".google.longrunning.operationInfo"])))
          return ".google.longrunning.operationInfo." + n2;
        if (null != e2[".google.api.http"] && e2.hasOwnProperty(".google.api.http") && (n2 = p.google.api.HttpRule.verify(e2[".google.api.http"])))
          return ".google.api.http." + n2;
        if (null != e2[".google.api.methodSignature"] && e2.hasOwnProperty(".google.api.methodSignature")) {
          if (!Array.isArray(e2[".google.api.methodSignature"]))
            return ".google.api.methodSignature: array expected";
          for (t2 = 0; t2 < e2[".google.api.methodSignature"].length; ++t2)
            if (!i.isString(e2[".google.api.methodSignature"][t2]))
              return ".google.api.methodSignature: string[] expected";
        }
        return null;
      }, N.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.MethodOptions)
          return e2;
        var t2 = new p.google.protobuf.MethodOptions();
        switch (null != e2.deprecated && (t2.deprecated = Boolean(e2.deprecated)), e2.idempotencyLevel) {
          case "IDEMPOTENCY_UNKNOWN":
          case 0:
            t2.idempotencyLevel = 0;
            break;
          case "NO_SIDE_EFFECTS":
          case 1:
            t2.idempotencyLevel = 1;
            break;
          case "IDEMPOTENT":
          case 2:
            t2.idempotencyLevel = 2;
        }
        if (e2.uninterpretedOption) {
          if (!Array.isArray(e2.uninterpretedOption))
            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
          t2.uninterpretedOption = [];
          for (var n2 = 0; n2 < e2.uninterpretedOption.length; ++n2) {
            if ("object" != typeof e2.uninterpretedOption[n2])
              throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
            t2.uninterpretedOption[n2] = p.google.protobuf.UninterpretedOption.fromObject(e2.uninterpretedOption[n2]);
          }
        }
        if (null != e2[".google.longrunning.operationInfo"]) {
          if ("object" != typeof e2[".google.longrunning.operationInfo"])
            throw TypeError(".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected");
          t2[".google.longrunning.operationInfo"] = p.google.longrunning.OperationInfo.fromObject(e2[".google.longrunning.operationInfo"]);
        }
        if (null != e2[".google.api.http"]) {
          if ("object" != typeof e2[".google.api.http"])
            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
          t2[".google.api.http"] = p.google.api.HttpRule.fromObject(e2[".google.api.http"]);
        }
        if (e2[".google.api.methodSignature"]) {
          if (!Array.isArray(e2[".google.api.methodSignature"]))
            throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
          t2[".google.api.methodSignature"] = [];
          for (n2 = 0; n2 < e2[".google.api.methodSignature"].length; ++n2)
            t2[".google.api.methodSignature"][n2] = String(e2[".google.api.methodSignature"][n2]);
        }
        return t2;
      }, N.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.uninterpretedOption = [], n2[".google.api.methodSignature"] = []), t2.defaults && (n2.deprecated = false, n2.idempotencyLevel = t2.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0, n2[".google.longrunning.operationInfo"] = null, n2[".google.api.http"] = null), null != e2.deprecated && e2.hasOwnProperty("deprecated") && (n2.deprecated = e2.deprecated), null != e2.idempotencyLevel && e2.hasOwnProperty("idempotencyLevel") && (n2.idempotencyLevel = t2.enums === String ? p.google.protobuf.MethodOptions.IdempotencyLevel[e2.idempotencyLevel] : e2.idempotencyLevel), e2.uninterpretedOption && e2.uninterpretedOption.length) {
          n2.uninterpretedOption = [];
          for (var o2 = 0; o2 < e2.uninterpretedOption.length; ++o2)
            n2.uninterpretedOption[o2] = p.google.protobuf.UninterpretedOption.toObject(e2.uninterpretedOption[o2], t2);
        }
        if (null != e2[".google.longrunning.operationInfo"] && e2.hasOwnProperty(".google.longrunning.operationInfo") && (n2[".google.longrunning.operationInfo"] = p.google.longrunning.OperationInfo.toObject(e2[".google.longrunning.operationInfo"], t2)), e2[".google.api.methodSignature"] && e2[".google.api.methodSignature"].length) {
          n2[".google.api.methodSignature"] = [];
          for (o2 = 0; o2 < e2[".google.api.methodSignature"].length; ++o2)
            n2[".google.api.methodSignature"][o2] = e2[".google.api.methodSignature"][o2];
        }
        return null != e2[".google.api.http"] && e2.hasOwnProperty(".google.api.http") && (n2[".google.api.http"] = p.google.api.HttpRule.toObject(e2[".google.api.http"], t2)), n2;
      }, N.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, N.IdempotencyLevel = (n = {}, (e = Object.create(n))[n[0] = "IDEMPOTENCY_UNKNOWN"] = 0, e[n[1] = "NO_SIDE_EFFECTS"] = 1, e[n[2] = "IDEMPOTENT"] = 2, e), N), t.UninterpretedOption = (I.prototype.name = i.emptyArray, I.prototype.identifierValue = "", I.prototype.positiveIntValue = i.Long ? i.Long.fromBits(0, 0, true) : 0, I.prototype.negativeIntValue = i.Long ? i.Long.fromBits(0, 0, false) : 0, I.prototype.doubleValue = 0, I.prototype.stringValue = i.newBuffer([]), I.prototype.aggregateValue = "", I.create = function(e2) {
        return new I(e2);
      }, I.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.name && e2.name.length)
          for (var n2 = 0; n2 < e2.name.length; ++n2)
            p.google.protobuf.UninterpretedOption.NamePart.encode(e2.name[n2], t2.uint32(18).fork()).ldelim();
        return null != e2.identifierValue && Object.hasOwnProperty.call(e2, "identifierValue") && t2.uint32(26).string(e2.identifierValue), null != e2.positiveIntValue && Object.hasOwnProperty.call(e2, "positiveIntValue") && t2.uint32(32).uint64(e2.positiveIntValue), null != e2.negativeIntValue && Object.hasOwnProperty.call(e2, "negativeIntValue") && t2.uint32(40).int64(e2.negativeIntValue), null != e2.doubleValue && Object.hasOwnProperty.call(e2, "doubleValue") && t2.uint32(49).double(e2.doubleValue), null != e2.stringValue && Object.hasOwnProperty.call(e2, "stringValue") && t2.uint32(58).bytes(e2.stringValue), null != e2.aggregateValue && Object.hasOwnProperty.call(e2, "aggregateValue") && t2.uint32(66).string(e2.aggregateValue), t2;
      }, I.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, I.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.UninterpretedOption(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 2:
              o2.name && o2.name.length || (o2.name = []), o2.name.push(p.google.protobuf.UninterpretedOption.NamePart.decode(e2, e2.uint32()));
              break;
            case 3:
              o2.identifierValue = e2.string();
              break;
            case 4:
              o2.positiveIntValue = e2.uint64();
              break;
            case 5:
              o2.negativeIntValue = e2.int64();
              break;
            case 6:
              o2.doubleValue = e2.double();
              break;
            case 7:
              o2.stringValue = e2.bytes();
              break;
            case 8:
              o2.aggregateValue = e2.string();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, I.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, I.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.name && e2.hasOwnProperty("name")) {
          if (!Array.isArray(e2.name))
            return "name: array expected";
          for (var t2 = 0; t2 < e2.name.length; ++t2) {
            var n2 = p.google.protobuf.UninterpretedOption.NamePart.verify(e2.name[t2]);
            if (n2)
              return "name." + n2;
          }
        }
        return null != e2.identifierValue && e2.hasOwnProperty("identifierValue") && !i.isString(e2.identifierValue) ? "identifierValue: string expected" : null != e2.positiveIntValue && e2.hasOwnProperty("positiveIntValue") && !(i.isInteger(e2.positiveIntValue) || e2.positiveIntValue && i.isInteger(e2.positiveIntValue.low) && i.isInteger(e2.positiveIntValue.high)) ? "positiveIntValue: integer|Long expected" : null != e2.negativeIntValue && e2.hasOwnProperty("negativeIntValue") && !(i.isInteger(e2.negativeIntValue) || e2.negativeIntValue && i.isInteger(e2.negativeIntValue.low) && i.isInteger(e2.negativeIntValue.high)) ? "negativeIntValue: integer|Long expected" : null != e2.doubleValue && e2.hasOwnProperty("doubleValue") && "number" != typeof e2.doubleValue ? "doubleValue: number expected" : null != e2.stringValue && e2.hasOwnProperty("stringValue") && !(e2.stringValue && "number" == typeof e2.stringValue.length || i.isString(e2.stringValue)) ? "stringValue: buffer expected" : null != e2.aggregateValue && e2.hasOwnProperty("aggregateValue") && !i.isString(e2.aggregateValue) ? "aggregateValue: string expected" : null;
      }, I.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.UninterpretedOption)
          return e2;
        var t2 = new p.google.protobuf.UninterpretedOption();
        if (e2.name) {
          if (!Array.isArray(e2.name))
            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
          t2.name = [];
          for (var n2 = 0; n2 < e2.name.length; ++n2) {
            if ("object" != typeof e2.name[n2])
              throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
            t2.name[n2] = p.google.protobuf.UninterpretedOption.NamePart.fromObject(e2.name[n2]);
          }
        }
        return null != e2.identifierValue && (t2.identifierValue = String(e2.identifierValue)), null != e2.positiveIntValue && (i.Long ? (t2.positiveIntValue = i.Long.fromValue(e2.positiveIntValue)).unsigned = true : "string" == typeof e2.positiveIntValue ? t2.positiveIntValue = parseInt(e2.positiveIntValue, 10) : "number" == typeof e2.positiveIntValue ? t2.positiveIntValue = e2.positiveIntValue : "object" == typeof e2.positiveIntValue && (t2.positiveIntValue = new i.LongBits(e2.positiveIntValue.low >>> 0, e2.positiveIntValue.high >>> 0).toNumber(true))), null != e2.negativeIntValue && (i.Long ? (t2.negativeIntValue = i.Long.fromValue(e2.negativeIntValue)).unsigned = false : "string" == typeof e2.negativeIntValue ? t2.negativeIntValue = parseInt(e2.negativeIntValue, 10) : "number" == typeof e2.negativeIntValue ? t2.negativeIntValue = e2.negativeIntValue : "object" == typeof e2.negativeIntValue && (t2.negativeIntValue = new i.LongBits(e2.negativeIntValue.low >>> 0, e2.negativeIntValue.high >>> 0).toNumber())), null != e2.doubleValue && (t2.doubleValue = Number(e2.doubleValue)), null != e2.stringValue && ("string" == typeof e2.stringValue ? i.base64.decode(e2.stringValue, t2.stringValue = i.newBuffer(i.base64.length(e2.stringValue)), 0) : e2.stringValue.length && (t2.stringValue = e2.stringValue)), null != e2.aggregateValue && (t2.aggregateValue = String(e2.aggregateValue)), t2;
      }, I.toObject = function(e2, t2) {
        var n2, o2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (o2.name = []), t2.defaults && (o2.identifierValue = "", i.Long ? (n2 = new i.Long(0, 0, true), o2.positiveIntValue = t2.longs === String ? n2.toString() : t2.longs === Number ? n2.toNumber() : n2) : o2.positiveIntValue = t2.longs === String ? "0" : 0, i.Long ? (n2 = new i.Long(0, 0, false), o2.negativeIntValue = t2.longs === String ? n2.toString() : t2.longs === Number ? n2.toNumber() : n2) : o2.negativeIntValue = t2.longs === String ? "0" : 0, o2.doubleValue = 0, t2.bytes === String ? o2.stringValue = "" : (o2.stringValue = [], t2.bytes !== Array && (o2.stringValue = i.newBuffer(o2.stringValue))), o2.aggregateValue = ""), e2.name && e2.name.length) {
          o2.name = [];
          for (var r2 = 0; r2 < e2.name.length; ++r2)
            o2.name[r2] = p.google.protobuf.UninterpretedOption.NamePart.toObject(e2.name[r2], t2);
        }
        return null != e2.identifierValue && e2.hasOwnProperty("identifierValue") && (o2.identifierValue = e2.identifierValue), null != e2.positiveIntValue && e2.hasOwnProperty("positiveIntValue") && ("number" == typeof e2.positiveIntValue ? o2.positiveIntValue = t2.longs === String ? String(e2.positiveIntValue) : e2.positiveIntValue : o2.positiveIntValue = t2.longs === String ? i.Long.prototype.toString.call(e2.positiveIntValue) : t2.longs === Number ? new i.LongBits(e2.positiveIntValue.low >>> 0, e2.positiveIntValue.high >>> 0).toNumber(true) : e2.positiveIntValue), null != e2.negativeIntValue && e2.hasOwnProperty("negativeIntValue") && ("number" == typeof e2.negativeIntValue ? o2.negativeIntValue = t2.longs === String ? String(e2.negativeIntValue) : e2.negativeIntValue : o2.negativeIntValue = t2.longs === String ? i.Long.prototype.toString.call(e2.negativeIntValue) : t2.longs === Number ? new i.LongBits(e2.negativeIntValue.low >>> 0, e2.negativeIntValue.high >>> 0).toNumber() : e2.negativeIntValue), null != e2.doubleValue && e2.hasOwnProperty("doubleValue") && (o2.doubleValue = t2.json && !isFinite(e2.doubleValue) ? String(e2.doubleValue) : e2.doubleValue), null != e2.stringValue && e2.hasOwnProperty("stringValue") && (o2.stringValue = t2.bytes === String ? i.base64.encode(e2.stringValue, 0, e2.stringValue.length) : t2.bytes === Array ? Array.prototype.slice.call(e2.stringValue) : e2.stringValue), null != e2.aggregateValue && e2.hasOwnProperty("aggregateValue") && (o2.aggregateValue = e2.aggregateValue), o2;
      }, I.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, I.NamePart = (q.prototype.namePart = "", q.prototype.isExtension = false, q.create = function(e2) {
        return new q(e2);
      }, q.encode = function(e2, t2) {
        return (t2 = t2 || r.create()).uint32(10).string(e2.namePart), t2.uint32(16).bool(e2.isExtension), t2;
      }, q.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, q.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.UninterpretedOption.NamePart(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.namePart = e2.string();
              break;
            case 2:
              o2.isExtension = e2.bool();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        if (!o2.hasOwnProperty("namePart"))
          throw i.ProtocolError("missing required 'namePart'", { instance: o2 });
        if (o2.hasOwnProperty("isExtension"))
          return o2;
        throw i.ProtocolError("missing required 'isExtension'", { instance: o2 });
      }, q.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, q.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : i.isString(e2.namePart) ? "boolean" != typeof e2.isExtension ? "isExtension: boolean expected" : null : "namePart: string expected";
      }, q.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.protobuf.UninterpretedOption.NamePart ? e2 : (t2 = new p.google.protobuf.UninterpretedOption.NamePart(), null != e2.namePart && (t2.namePart = String(e2.namePart)), null != e2.isExtension && (t2.isExtension = Boolean(e2.isExtension)), t2);
      }, q.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.namePart = "", n2.isExtension = false), null != e2.namePart && e2.hasOwnProperty("namePart") && (n2.namePart = e2.namePart), null != e2.isExtension && e2.hasOwnProperty("isExtension") && (n2.isExtension = e2.isExtension), n2;
      }, q.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, q), I), t.SourceCodeInfo = (Y.prototype.location = i.emptyArray, Y.create = function(e2) {
        return new Y(e2);
      }, Y.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.location && e2.location.length)
          for (var n2 = 0; n2 < e2.location.length; ++n2)
            p.google.protobuf.SourceCodeInfo.Location.encode(e2.location[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, Y.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, Y.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.SourceCodeInfo(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.location && o2.location.length || (o2.location = []), o2.location.push(p.google.protobuf.SourceCodeInfo.Location.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, Y.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, Y.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.location && e2.hasOwnProperty("location")) {
          if (!Array.isArray(e2.location))
            return "location: array expected";
          for (var t2 = 0; t2 < e2.location.length; ++t2) {
            var n2 = p.google.protobuf.SourceCodeInfo.Location.verify(e2.location[t2]);
            if (n2)
              return "location." + n2;
          }
        }
        return null;
      }, Y.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.SourceCodeInfo)
          return e2;
        var t2 = new p.google.protobuf.SourceCodeInfo();
        if (e2.location) {
          if (!Array.isArray(e2.location))
            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
          t2.location = [];
          for (var n2 = 0; n2 < e2.location.length; ++n2) {
            if ("object" != typeof e2.location[n2])
              throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
            t2.location[n2] = p.google.protobuf.SourceCodeInfo.Location.fromObject(e2.location[n2]);
          }
        }
        return t2;
      }, Y.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.location = []), e2.location && e2.location.length) {
          n2.location = [];
          for (var o2 = 0; o2 < e2.location.length; ++o2)
            n2.location[o2] = p.google.protobuf.SourceCodeInfo.Location.toObject(e2.location[o2], t2);
        }
        return n2;
      }, Y.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, Y.Location = (R.prototype.path = i.emptyArray, R.prototype.span = i.emptyArray, R.prototype.leadingComments = "", R.prototype.trailingComments = "", R.prototype.leadingDetachedComments = i.emptyArray, R.create = function(e2) {
        return new R(e2);
      }, R.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.path && e2.path.length) {
          t2.uint32(10).fork();
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.int32(e2.path[n2]);
          t2.ldelim();
        }
        if (null != e2.span && e2.span.length) {
          t2.uint32(18).fork();
          for (n2 = 0; n2 < e2.span.length; ++n2)
            t2.int32(e2.span[n2]);
          t2.ldelim();
        }
        if (null != e2.leadingComments && Object.hasOwnProperty.call(e2, "leadingComments") && t2.uint32(26).string(e2.leadingComments), null != e2.trailingComments && Object.hasOwnProperty.call(e2, "trailingComments") && t2.uint32(34).string(e2.trailingComments), null != e2.leadingDetachedComments && e2.leadingDetachedComments.length)
          for (n2 = 0; n2 < e2.leadingDetachedComments.length; ++n2)
            t2.uint32(50).string(e2.leadingDetachedComments[n2]);
        return t2;
      }, R.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, R.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.SourceCodeInfo.Location(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              if (o2.path && o2.path.length || (o2.path = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.path.push(e2.int32());
              else
                o2.path.push(e2.int32());
              break;
            case 2:
              if (o2.span && o2.span.length || (o2.span = []), 2 == (7 & r2))
                for (i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.span.push(e2.int32());
              else
                o2.span.push(e2.int32());
              break;
            case 3:
              o2.leadingComments = e2.string();
              break;
            case 4:
              o2.trailingComments = e2.string();
              break;
            case 6:
              o2.leadingDetachedComments && o2.leadingDetachedComments.length || (o2.leadingDetachedComments = []), o2.leadingDetachedComments.push(e2.string());
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, R.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, R.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.path && e2.hasOwnProperty("path")) {
          if (!Array.isArray(e2.path))
            return "path: array expected";
          for (var t2 = 0; t2 < e2.path.length; ++t2)
            if (!i.isInteger(e2.path[t2]))
              return "path: integer[] expected";
        }
        if (null != e2.span && e2.hasOwnProperty("span")) {
          if (!Array.isArray(e2.span))
            return "span: array expected";
          for (t2 = 0; t2 < e2.span.length; ++t2)
            if (!i.isInteger(e2.span[t2]))
              return "span: integer[] expected";
        }
        if (null != e2.leadingComments && e2.hasOwnProperty("leadingComments") && !i.isString(e2.leadingComments))
          return "leadingComments: string expected";
        if (null != e2.trailingComments && e2.hasOwnProperty("trailingComments") && !i.isString(e2.trailingComments))
          return "trailingComments: string expected";
        if (null != e2.leadingDetachedComments && e2.hasOwnProperty("leadingDetachedComments")) {
          if (!Array.isArray(e2.leadingDetachedComments))
            return "leadingDetachedComments: array expected";
          for (t2 = 0; t2 < e2.leadingDetachedComments.length; ++t2)
            if (!i.isString(e2.leadingDetachedComments[t2]))
              return "leadingDetachedComments: string[] expected";
        }
        return null;
      }, R.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.SourceCodeInfo.Location)
          return e2;
        var t2 = new p.google.protobuf.SourceCodeInfo.Location();
        if (e2.path) {
          if (!Array.isArray(e2.path))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
          t2.path = [];
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.path[n2] = 0 | e2.path[n2];
        }
        if (e2.span) {
          if (!Array.isArray(e2.span))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
          t2.span = [];
          for (n2 = 0; n2 < e2.span.length; ++n2)
            t2.span[n2] = 0 | e2.span[n2];
        }
        if (null != e2.leadingComments && (t2.leadingComments = String(e2.leadingComments)), null != e2.trailingComments && (t2.trailingComments = String(e2.trailingComments)), e2.leadingDetachedComments) {
          if (!Array.isArray(e2.leadingDetachedComments))
            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
          t2.leadingDetachedComments = [];
          for (n2 = 0; n2 < e2.leadingDetachedComments.length; ++n2)
            t2.leadingDetachedComments[n2] = String(e2.leadingDetachedComments[n2]);
        }
        return t2;
      }, R.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.path = [], n2.span = [], n2.leadingDetachedComments = []), t2.defaults && (n2.leadingComments = "", n2.trailingComments = ""), e2.path && e2.path.length) {
          n2.path = [];
          for (var o2 = 0; o2 < e2.path.length; ++o2)
            n2.path[o2] = e2.path[o2];
        }
        if (e2.span && e2.span.length) {
          n2.span = [];
          for (o2 = 0; o2 < e2.span.length; ++o2)
            n2.span[o2] = e2.span[o2];
        }
        if (null != e2.leadingComments && e2.hasOwnProperty("leadingComments") && (n2.leadingComments = e2.leadingComments), null != e2.trailingComments && e2.hasOwnProperty("trailingComments") && (n2.trailingComments = e2.trailingComments), e2.leadingDetachedComments && e2.leadingDetachedComments.length) {
          n2.leadingDetachedComments = [];
          for (o2 = 0; o2 < e2.leadingDetachedComments.length; ++o2)
            n2.leadingDetachedComments[o2] = e2.leadingDetachedComments[o2];
        }
        return n2;
      }, R.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, R), Y), t.GeneratedCodeInfo = (W.prototype.annotation = i.emptyArray, W.create = function(e2) {
        return new W(e2);
      }, W.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.annotation && e2.annotation.length)
          for (var n2 = 0; n2 < e2.annotation.length; ++n2)
            p.google.protobuf.GeneratedCodeInfo.Annotation.encode(e2.annotation[n2], t2.uint32(10).fork()).ldelim();
        return t2;
      }, W.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, W.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.GeneratedCodeInfo(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          r2 >>> 3 == 1 ? (o2.annotation && o2.annotation.length || (o2.annotation = []), o2.annotation.push(p.google.protobuf.GeneratedCodeInfo.Annotation.decode(e2, e2.uint32()))) : e2.skipType(7 & r2);
        }
        return o2;
      }, W.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, W.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.annotation && e2.hasOwnProperty("annotation")) {
          if (!Array.isArray(e2.annotation))
            return "annotation: array expected";
          for (var t2 = 0; t2 < e2.annotation.length; ++t2) {
            var n2 = p.google.protobuf.GeneratedCodeInfo.Annotation.verify(e2.annotation[t2]);
            if (n2)
              return "annotation." + n2;
          }
        }
        return null;
      }, W.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.GeneratedCodeInfo)
          return e2;
        var t2 = new p.google.protobuf.GeneratedCodeInfo();
        if (e2.annotation) {
          if (!Array.isArray(e2.annotation))
            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
          t2.annotation = [];
          for (var n2 = 0; n2 < e2.annotation.length; ++n2) {
            if ("object" != typeof e2.annotation[n2])
              throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
            t2.annotation[n2] = p.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(e2.annotation[n2]);
          }
        }
        return t2;
      }, W.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.annotation = []), e2.annotation && e2.annotation.length) {
          n2.annotation = [];
          for (var o2 = 0; o2 < e2.annotation.length; ++o2)
            n2.annotation[o2] = p.google.protobuf.GeneratedCodeInfo.Annotation.toObject(e2.annotation[o2], t2);
        }
        return n2;
      }, W.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, W.Annotation = (C.prototype.path = i.emptyArray, C.prototype.sourceFile = "", C.prototype.begin = 0, C.prototype.end = 0, C.create = function(e2) {
        return new C(e2);
      }, C.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.path && e2.path.length) {
          t2.uint32(10).fork();
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.int32(e2.path[n2]);
          t2.ldelim();
        }
        return null != e2.sourceFile && Object.hasOwnProperty.call(e2, "sourceFile") && t2.uint32(18).string(e2.sourceFile), null != e2.begin && Object.hasOwnProperty.call(e2, "begin") && t2.uint32(24).int32(e2.begin), null != e2.end && Object.hasOwnProperty.call(e2, "end") && t2.uint32(32).int32(e2.end), t2;
      }, C.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, C.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.GeneratedCodeInfo.Annotation(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              if (o2.path && o2.path.length || (o2.path = []), 2 == (7 & r2))
                for (var i2 = e2.uint32() + e2.pos; e2.pos < i2; )
                  o2.path.push(e2.int32());
              else
                o2.path.push(e2.int32());
              break;
            case 2:
              o2.sourceFile = e2.string();
              break;
            case 3:
              o2.begin = e2.int32();
              break;
            case 4:
              o2.end = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, C.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, C.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.path && e2.hasOwnProperty("path")) {
          if (!Array.isArray(e2.path))
            return "path: array expected";
          for (var t2 = 0; t2 < e2.path.length; ++t2)
            if (!i.isInteger(e2.path[t2]))
              return "path: integer[] expected";
        }
        return null != e2.sourceFile && e2.hasOwnProperty("sourceFile") && !i.isString(e2.sourceFile) ? "sourceFile: string expected" : null != e2.begin && e2.hasOwnProperty("begin") && !i.isInteger(e2.begin) ? "begin: integer expected" : null != e2.end && e2.hasOwnProperty("end") && !i.isInteger(e2.end) ? "end: integer expected" : null;
      }, C.fromObject = function(e2) {
        if (e2 instanceof p.google.protobuf.GeneratedCodeInfo.Annotation)
          return e2;
        var t2 = new p.google.protobuf.GeneratedCodeInfo.Annotation();
        if (e2.path) {
          if (!Array.isArray(e2.path))
            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
          t2.path = [];
          for (var n2 = 0; n2 < e2.path.length; ++n2)
            t2.path[n2] = 0 | e2.path[n2];
        }
        return null != e2.sourceFile && (t2.sourceFile = String(e2.sourceFile)), null != e2.begin && (t2.begin = 0 | e2.begin), null != e2.end && (t2.end = 0 | e2.end), t2;
      }, C.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.path = []), t2.defaults && (n2.sourceFile = "", n2.begin = 0, n2.end = 0), e2.path && e2.path.length) {
          n2.path = [];
          for (var o2 = 0; o2 < e2.path.length; ++o2)
            n2.path[o2] = e2.path[o2];
        }
        return null != e2.sourceFile && e2.hasOwnProperty("sourceFile") && (n2.sourceFile = e2.sourceFile), null != e2.begin && e2.hasOwnProperty("begin") && (n2.begin = e2.begin), null != e2.end && e2.hasOwnProperty("end") && (n2.end = e2.end), n2;
      }, C.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, C), W), t.Any = (X.prototype.type_url = "", X.prototype.value = i.newBuffer([]), X.create = function(e2) {
        return new X(e2);
      }, X.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.type_url && Object.hasOwnProperty.call(e2, "type_url") && t2.uint32(10).string(e2.type_url), null != e2.value && Object.hasOwnProperty.call(e2, "value") && t2.uint32(18).bytes(e2.value), t2;
      }, X.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, X.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.Any(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.type_url = e2.string();
              break;
            case 2:
              o2.value = e2.bytes();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, X.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, X.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.type_url && e2.hasOwnProperty("type_url") && !i.isString(e2.type_url) ? "type_url: string expected" : null != e2.value && e2.hasOwnProperty("value") && !(e2.value && "number" == typeof e2.value.length || i.isString(e2.value)) ? "value: buffer expected" : null;
      }, X.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.protobuf.Any ? e2 : (t2 = new p.google.protobuf.Any(), null != e2.type_url && (t2.type_url = String(e2.type_url)), null != e2.value && ("string" == typeof e2.value ? i.base64.decode(e2.value, t2.value = i.newBuffer(i.base64.length(e2.value)), 0) : e2.value.length && (t2.value = e2.value)), t2);
      }, X.toObject = function(e2, t2) {
        var n2 = {};
        return (t2 = t2 || {}).defaults && (n2.type_url = "", t2.bytes === String ? n2.value = "" : (n2.value = [], t2.bytes !== Array && (n2.value = i.newBuffer(n2.value)))), null != e2.type_url && e2.hasOwnProperty("type_url") && (n2.type_url = e2.type_url), null != e2.value && e2.hasOwnProperty("value") && (n2.value = t2.bytes === String ? i.base64.encode(e2.value, 0, e2.value.length) : t2.bytes === Array ? Array.prototype.slice.call(e2.value) : e2.value), n2;
      }, X.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, X), t.Duration = (K.prototype.seconds = i.Long ? i.Long.fromBits(0, 0, false) : 0, K.prototype.nanos = 0, K.create = function(e2) {
        return new K(e2);
      }, K.encode = function(e2, t2) {
        return t2 = t2 || r.create(), null != e2.seconds && Object.hasOwnProperty.call(e2, "seconds") && t2.uint32(8).int64(e2.seconds), null != e2.nanos && Object.hasOwnProperty.call(e2, "nanos") && t2.uint32(16).int32(e2.nanos), t2;
      }, K.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, K.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.protobuf.Duration(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.seconds = e2.int64();
              break;
            case 2:
              o2.nanos = e2.int32();
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, K.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, K.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null != e2.seconds && e2.hasOwnProperty("seconds") && !(i.isInteger(e2.seconds) || e2.seconds && i.isInteger(e2.seconds.low) && i.isInteger(e2.seconds.high)) ? "seconds: integer|Long expected" : null != e2.nanos && e2.hasOwnProperty("nanos") && !i.isInteger(e2.nanos) ? "nanos: integer expected" : null;
      }, K.fromObject = function(e2) {
        var t2;
        return e2 instanceof p.google.protobuf.Duration ? e2 : (t2 = new p.google.protobuf.Duration(), null != e2.seconds && (i.Long ? (t2.seconds = i.Long.fromValue(e2.seconds)).unsigned = false : "string" == typeof e2.seconds ? t2.seconds = parseInt(e2.seconds, 10) : "number" == typeof e2.seconds ? t2.seconds = e2.seconds : "object" == typeof e2.seconds && (t2.seconds = new i.LongBits(e2.seconds.low >>> 0, e2.seconds.high >>> 0).toNumber())), null != e2.nanos && (t2.nanos = 0 | e2.nanos), t2);
      }, K.toObject = function(e2, t2) {
        var n2, o2 = {};
        return (t2 = t2 || {}).defaults && (i.Long ? (n2 = new i.Long(0, 0, false), o2.seconds = t2.longs === String ? n2.toString() : t2.longs === Number ? n2.toNumber() : n2) : o2.seconds = t2.longs === String ? "0" : 0, o2.nanos = 0), null != e2.seconds && e2.hasOwnProperty("seconds") && ("number" == typeof e2.seconds ? o2.seconds = t2.longs === String ? String(e2.seconds) : e2.seconds : o2.seconds = t2.longs === String ? i.Long.prototype.toString.call(e2.seconds) : t2.longs === Number ? new i.LongBits(e2.seconds.low >>> 0, e2.seconds.high >>> 0).toNumber() : e2.seconds), null != e2.nanos && e2.hasOwnProperty("nanos") && (o2.nanos = e2.nanos), o2;
      }, K.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, K), t.Empty = (Q.create = function(e2) {
        return new Q(e2);
      }, Q.encode = function(e2, t2) {
        return t2 = t2 || r.create();
      }, Q.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, Q.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, t2 = new p.google.protobuf.Empty(); e2.pos < n2; ) {
          var o2 = e2.uint32();
          e2.skipType(7 & o2);
        }
        return t2;
      }, Q.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, Q.verify = function(e2) {
        return "object" != typeof e2 || null === e2 ? "object expected" : null;
      }, Q.fromObject = function(e2) {
        return e2 instanceof p.google.protobuf.Empty ? e2 : new p.google.protobuf.Empty();
      }, Q.toObject = function() {
        return {};
      }, Q.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, Q), t), F.rpc = ((n = {}).Status = (V.prototype.code = 0, V.prototype.message = "", V.prototype.details = i.emptyArray, V.create = function(e2) {
        return new V(e2);
      }, V.encode = function(e2, t2) {
        if (t2 = t2 || r.create(), null != e2.code && Object.hasOwnProperty.call(e2, "code") && t2.uint32(8).int32(e2.code), null != e2.message && Object.hasOwnProperty.call(e2, "message") && t2.uint32(18).string(e2.message), null != e2.details && e2.details.length)
          for (var n2 = 0; n2 < e2.details.length; ++n2)
            p.google.protobuf.Any.encode(e2.details[n2], t2.uint32(26).fork()).ldelim();
        return t2;
      }, V.encodeDelimited = function(e2, t2) {
        return this.encode(e2, t2).ldelim();
      }, V.decode = function(e2, t2) {
        e2 instanceof a || (e2 = a.create(e2));
        for (var n2 = void 0 === t2 ? e2.len : e2.pos + t2, o2 = new p.google.rpc.Status(); e2.pos < n2; ) {
          var r2 = e2.uint32();
          switch (r2 >>> 3) {
            case 1:
              o2.code = e2.int32();
              break;
            case 2:
              o2.message = e2.string();
              break;
            case 3:
              o2.details && o2.details.length || (o2.details = []), o2.details.push(p.google.protobuf.Any.decode(e2, e2.uint32()));
              break;
            default:
              e2.skipType(7 & r2);
          }
        }
        return o2;
      }, V.decodeDelimited = function(e2) {
        return e2 instanceof a || (e2 = new a(e2)), this.decode(e2, e2.uint32());
      }, V.verify = function(e2) {
        if ("object" != typeof e2 || null === e2)
          return "object expected";
        if (null != e2.code && e2.hasOwnProperty("code") && !i.isInteger(e2.code))
          return "code: integer expected";
        if (null != e2.message && e2.hasOwnProperty("message") && !i.isString(e2.message))
          return "message: string expected";
        if (null != e2.details && e2.hasOwnProperty("details")) {
          if (!Array.isArray(e2.details))
            return "details: array expected";
          for (var t2 = 0; t2 < e2.details.length; ++t2) {
            var n2 = p.google.protobuf.Any.verify(e2.details[t2]);
            if (n2)
              return "details." + n2;
          }
        }
        return null;
      }, V.fromObject = function(e2) {
        if (e2 instanceof p.google.rpc.Status)
          return e2;
        var t2 = new p.google.rpc.Status();
        if (null != e2.code && (t2.code = 0 | e2.code), null != e2.message && (t2.message = String(e2.message)), e2.details) {
          if (!Array.isArray(e2.details))
            throw TypeError(".google.rpc.Status.details: array expected");
          t2.details = [];
          for (var n2 = 0; n2 < e2.details.length; ++n2) {
            if ("object" != typeof e2.details[n2])
              throw TypeError(".google.rpc.Status.details: object expected");
            t2.details[n2] = p.google.protobuf.Any.fromObject(e2.details[n2]);
          }
        }
        return t2;
      }, V.toObject = function(e2, t2) {
        var n2 = {};
        if (((t2 = t2 || {}).arrays || t2.defaults) && (n2.details = []), t2.defaults && (n2.code = 0, n2.message = ""), null != e2.code && e2.hasOwnProperty("code") && (n2.code = e2.code), null != e2.message && e2.hasOwnProperty("message") && (n2.message = e2.message), e2.details && e2.details.length) {
          n2.details = [];
          for (var o2 = 0; o2 < e2.details.length; ++o2)
            n2.details[o2] = p.google.protobuf.Any.toObject(e2.details[o2], t2);
        }
        return n2;
      }, V.prototype.toJSON = function() {
        return this.constructor.toObject(this, o.util.toJSONOptions);
      }, V), n), F), p;
    });
  }
});

// node_modules/google-gax/build/src/status.js
var require_status = __commonJS({
  "node_modules/google-gax/build/src/status.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.rpcCodeFromHttpStatusCode = exports2.HttpCodeToRpcCodeMap = exports2.Status = void 0;
    var Status;
    (function(Status2) {
      Status2[Status2["OK"] = 0] = "OK";
      Status2[Status2["CANCELLED"] = 1] = "CANCELLED";
      Status2[Status2["UNKNOWN"] = 2] = "UNKNOWN";
      Status2[Status2["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
      Status2[Status2["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
      Status2[Status2["NOT_FOUND"] = 5] = "NOT_FOUND";
      Status2[Status2["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
      Status2[Status2["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
      Status2[Status2["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
      Status2[Status2["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
      Status2[Status2["ABORTED"] = 10] = "ABORTED";
      Status2[Status2["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
      Status2[Status2["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
      Status2[Status2["INTERNAL"] = 13] = "INTERNAL";
      Status2[Status2["UNAVAILABLE"] = 14] = "UNAVAILABLE";
      Status2[Status2["DATA_LOSS"] = 15] = "DATA_LOSS";
      Status2[Status2["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
    })(Status || (exports2.Status = Status = {}));
    exports2.HttpCodeToRpcCodeMap = /* @__PURE__ */ new Map([
      [400, Status.INVALID_ARGUMENT],
      [401, Status.UNAUTHENTICATED],
      [403, Status.PERMISSION_DENIED],
      [404, Status.NOT_FOUND],
      [409, Status.ABORTED],
      [416, Status.OUT_OF_RANGE],
      [429, Status.RESOURCE_EXHAUSTED],
      [499, Status.CANCELLED],
      [501, Status.UNIMPLEMENTED],
      [503, Status.UNAVAILABLE],
      [504, Status.DEADLINE_EXCEEDED]
    ]);
    function rpcCodeFromHttpStatusCode(httpStatusCode) {
      if (exports2.HttpCodeToRpcCodeMap.has(httpStatusCode)) {
        return exports2.HttpCodeToRpcCodeMap.get(httpStatusCode);
      }
      if (httpStatusCode >= 200 && httpStatusCode < 300) {
        return Status.OK;
      }
      if (httpStatusCode >= 400 && httpStatusCode < 500) {
        return Status.FAILED_PRECONDITION;
      }
      if (httpStatusCode >= 500 && httpStatusCode < 600) {
        return Status.INTERNAL;
      }
      return Status.UNKNOWN;
    }
    exports2.rpcCodeFromHttpStatusCode = rpcCodeFromHttpStatusCode;
  }
});

// node_modules/proto3-json-serializer/build/src/bytes.js
var require_bytes = __commonJS({
  "node_modules/proto3-json-serializer/build/src/bytes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bytesFromProto3JSON = exports2.bytesToProto3JSON = void 0;
    function bytesToProto3JSON(obj) {
      if (Buffer.isBuffer(obj)) {
        return obj.toString("base64");
      } else {
        return Buffer.from(obj.buffer, 0, obj.byteLength).toString("base64");
      }
    }
    exports2.bytesToProto3JSON = bytesToProto3JSON;
    function bytesFromProto3JSON(json) {
      return Buffer.from(json, "base64");
    }
    exports2.bytesFromProto3JSON = bytesFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/enum.js
var require_enum2 = __commonJS({
  "node_modules/proto3-json-serializer/build/src/enum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEnumValueToNumber = exports2.resolveEnumValueToString = void 0;
    function resolveEnumValueToString(enumType, enumValue) {
      if (typeof enumValue === "number") {
        const value = enumType.valuesById[enumValue];
        if (typeof value === "undefined") {
          return enumValue;
        }
        return value;
      }
      if (typeof enumValue === "string") {
        return enumValue;
      }
      throw new Error("resolveEnumValueToString: enum value must be a string or a number");
    }
    exports2.resolveEnumValueToString = resolveEnumValueToString;
    function resolveEnumValueToNumber(enumType, enumValue) {
      if (typeof enumValue === "number") {
        return enumValue;
      }
      if (typeof enumValue === "string") {
        const num = enumType.values[enumValue];
        if (typeof num === "undefined") {
          return enumValue;
        }
        return num;
      }
      throw new Error("resolveEnumValueToNumber: enum value must be a string or a number");
    }
    exports2.resolveEnumValueToNumber = resolveEnumValueToNumber;
  }
});

// node_modules/proto3-json-serializer/build/src/util.js
var require_util4 = __commonJS({
  "node_modules/proto3-json-serializer/build/src/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.assert = exports2.wrapperTypes = exports2.getFullyQualifiedTypeName = void 0;
    function getFullyQualifiedTypeName(type) {
      let fullyQualifiedTypeName = "";
      while (type.parent) {
        fullyQualifiedTypeName = `.${type.name}${fullyQualifiedTypeName}`;
        type = type.parent;
      }
      return fullyQualifiedTypeName;
    }
    exports2.getFullyQualifiedTypeName = getFullyQualifiedTypeName;
    exports2.wrapperTypes = /* @__PURE__ */ new Set([
      ".google.protobuf.DoubleValue",
      ".google.protobuf.FloatValue",
      ".google.protobuf.Int64Value",
      ".google.protobuf.UInt64Value",
      ".google.protobuf.Int32Value",
      ".google.protobuf.UInt32Value",
      ".google.protobuf.BoolValue",
      ".google.protobuf.StringValue",
      ".google.protobuf.BytesValue"
    ]);
    function assert(assertion, message) {
      if (!assertion) {
        throw new Error(message);
      }
    }
    exports2.assert = assert;
  }
});

// node_modules/proto3-json-serializer/build/src/value.js
var require_value = __commonJS({
  "node_modules/proto3-json-serializer/build/src/value.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.googleProtobufValueFromProto3JSON = exports2.googleProtobufListValueFromProto3JSON = exports2.googleProtobufStructFromProto3JSON = exports2.googleProtobufValueToProto3JSON = exports2.googleProtobufListValueToProto3JSON = exports2.googleProtobufStructToProto3JSON = void 0;
    var util_1 = require_util4();
    function googleProtobufStructToProto3JSON(obj) {
      const result = {};
      const fields = obj.fields;
      for (const [key, value] of Object.entries(fields)) {
        result[key] = googleProtobufValueToProto3JSON(value);
      }
      return result;
    }
    exports2.googleProtobufStructToProto3JSON = googleProtobufStructToProto3JSON;
    function googleProtobufListValueToProto3JSON(obj) {
      (0, util_1.assert)(Array.isArray(obj.values), "ListValue internal representation must contain array of values");
      return obj.values.map(googleProtobufValueToProto3JSON);
    }
    exports2.googleProtobufListValueToProto3JSON = googleProtobufListValueToProto3JSON;
    function googleProtobufValueToProto3JSON(obj) {
      if (Object.prototype.hasOwnProperty.call(obj, "nullValue")) {
        return null;
      }
      if (Object.prototype.hasOwnProperty.call(obj, "numberValue") && typeof obj.numberValue === "number") {
        if (!Number.isFinite(obj.numberValue)) {
          return obj.numberValue.toString();
        }
        return obj.numberValue;
      }
      if (Object.prototype.hasOwnProperty.call(obj, "stringValue") && typeof obj.stringValue === "string") {
        return obj.stringValue;
      }
      if (Object.prototype.hasOwnProperty.call(obj, "boolValue") && typeof obj.boolValue === "boolean") {
        return obj.boolValue;
      }
      if (Object.prototype.hasOwnProperty.call(obj, "structValue") && typeof obj.structValue === "object") {
        return googleProtobufStructToProto3JSON(obj.structValue);
      }
      if (Object.prototype.hasOwnProperty.call(obj, "listValue") && typeof obj === "object" && typeof obj.listValue === "object") {
        return googleProtobufListValueToProto3JSON(obj.listValue);
      }
      return null;
    }
    exports2.googleProtobufValueToProto3JSON = googleProtobufValueToProto3JSON;
    function googleProtobufStructFromProto3JSON(json) {
      const fields = {};
      for (const [key, value] of Object.entries(json)) {
        fields[key] = googleProtobufValueFromProto3JSON(value);
      }
      return { fields };
    }
    exports2.googleProtobufStructFromProto3JSON = googleProtobufStructFromProto3JSON;
    function googleProtobufListValueFromProto3JSON(json) {
      return {
        values: json.map((element) => googleProtobufValueFromProto3JSON(element))
      };
    }
    exports2.googleProtobufListValueFromProto3JSON = googleProtobufListValueFromProto3JSON;
    function googleProtobufValueFromProto3JSON(json) {
      if (json === null) {
        return { nullValue: "NULL_VALUE" };
      }
      if (typeof json === "number") {
        return { numberValue: json };
      }
      if (typeof json === "string") {
        return { stringValue: json };
      }
      if (typeof json === "boolean") {
        return { boolValue: json };
      }
      if (Array.isArray(json)) {
        return {
          listValue: googleProtobufListValueFromProto3JSON(json)
        };
      }
      if (typeof json === "object") {
        return {
          structValue: googleProtobufStructFromProto3JSON(json)
        };
      }
      throw new Error(`googleProtobufValueFromProto3JSON: incorrect parameter type: ${typeof json}`);
    }
    exports2.googleProtobufValueFromProto3JSON = googleProtobufValueFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/duration.js
var require_duration2 = __commonJS({
  "node_modules/proto3-json-serializer/build/src/duration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.googleProtobufDurationFromProto3JSON = exports2.googleProtobufDurationToProto3JSON = void 0;
    function googleProtobufDurationToProto3JSON(obj) {
      let durationSeconds = obj.seconds.toString();
      if (typeof obj.nanos === "number" && obj.nanos > 0) {
        const nanosStr = obj.nanos.toString().padStart(9, "0").replace(/^((?:\d\d\d)+?)(?:0*)$/, "$1");
        durationSeconds += "." + nanosStr;
      }
      durationSeconds += "s";
      return durationSeconds;
    }
    exports2.googleProtobufDurationToProto3JSON = googleProtobufDurationToProto3JSON;
    function googleProtobufDurationFromProto3JSON(json) {
      const match = json.match(/^(\d*)(?:\.(\d*))?s$/);
      if (!match) {
        throw new Error(`googleProtobufDurationFromProto3JSON: incorrect value ${json} passed as google.protobuf.Duration`);
      }
      let seconds = 0;
      let nanos = 0;
      if (typeof match[1] === "string" && match[1].length > 0) {
        seconds = parseInt(match[1]);
      }
      if (typeof match[2] === "string" && match[2].length > 0) {
        nanos = parseInt(match[2].padEnd(9, "0"));
      }
      const result = {};
      if (seconds !== 0) {
        result.seconds = seconds;
      }
      if (nanos !== 0) {
        result.nanos = nanos;
      }
      return result;
    }
    exports2.googleProtobufDurationFromProto3JSON = googleProtobufDurationFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/timestamp.js
var require_timestamp = __commonJS({
  "node_modules/proto3-json-serializer/build/src/timestamp.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.googleProtobufTimestampFromProto3JSON = exports2.googleProtobufTimestampToProto3JSON = void 0;
    function googleProtobufTimestampToProto3JSON(obj) {
      var _a;
      const durationSeconds = obj.seconds;
      const date = new Date(durationSeconds * 1e3).toISOString();
      let nanos = (_a = obj.nanos) === null || _a === void 0 ? void 0 : _a.toString().padStart(9, "0");
      while (nanos && nanos.length > 3 && nanos.endsWith("000")) {
        nanos = nanos.slice(0, -3);
      }
      return date.replace(/(?:\.\d{0,9})/, "." + nanos);
    }
    exports2.googleProtobufTimestampToProto3JSON = googleProtobufTimestampToProto3JSON;
    function googleProtobufTimestampFromProto3JSON(json) {
      const match = json.match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?/);
      if (!match) {
        throw new Error(`googleProtobufDurationFromProto3JSON: incorrect value ${json} passed as google.protobuf.Duration`);
      }
      const date = new Date(json);
      const millisecondsSinceEpoch = date.getTime();
      const seconds = Math.floor(millisecondsSinceEpoch / 1e3);
      let nanos = 0;
      const secondsFromDate = json.split(".")[1];
      if (secondsFromDate) {
        nanos = parseInt(secondsFromDate.slice(0, -1).padEnd(9, "0"));
      }
      const result = {};
      if (seconds !== 0) {
        result.seconds = seconds;
      }
      if (nanos !== 0) {
        result.nanos = nanos;
      }
      return result;
    }
    exports2.googleProtobufTimestampFromProto3JSON = googleProtobufTimestampFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/wrappers.js
var require_wrappers2 = __commonJS({
  "node_modules/proto3-json-serializer/build/src/wrappers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.wrapperFromProto3JSON = exports2.wrapperToProto3JSON = void 0;
    var bytes_1 = require_bytes();
    var util_1 = require_util4();
    function wrapperToProto3JSON(obj) {
      if (!Object.prototype.hasOwnProperty.call(obj, "value")) {
        return null;
      }
      if (Buffer.isBuffer(obj.value) || obj.value instanceof Uint8Array) {
        return (0, bytes_1.bytesToProto3JSON)(obj.value);
      }
      if (typeof obj.value === "object") {
        (0, util_1.assert)(obj.value.constructor.name === "Long", `wrapperToProto3JSON: expected to see a number, a string, a boolean, or a Long, but got ${obj.value}`);
        return obj.value.toString();
      }
      if (typeof obj.value === "number" && !Number.isFinite(obj.value)) {
        return obj.value.toString();
      }
      return obj.value;
    }
    exports2.wrapperToProto3JSON = wrapperToProto3JSON;
    function wrapperFromProto3JSON(typeName, json) {
      if (json === null) {
        return {
          value: null
        };
      }
      if (typeName === ".google.protobuf.BytesValue") {
        if (typeof json !== "string") {
          throw new Error(`numberWrapperFromProto3JSON: expected to get a string for google.protobuf.BytesValue but got ${typeof json}`);
        }
        return {
          value: (0, bytes_1.bytesFromProto3JSON)(json)
        };
      }
      return {
        value: json
      };
    }
    exports2.wrapperFromProto3JSON = wrapperFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/fieldmask.js
var require_fieldmask = __commonJS({
  "node_modules/proto3-json-serializer/build/src/fieldmask.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.googleProtobufFieldMaskFromProto3JSON = exports2.googleProtobufFieldMaskToProto3JSON = void 0;
    function googleProtobufFieldMaskToProto3JSON(obj) {
      return obj.paths.join(",");
    }
    exports2.googleProtobufFieldMaskToProto3JSON = googleProtobufFieldMaskToProto3JSON;
    function googleProtobufFieldMaskFromProto3JSON(json) {
      return {
        paths: json.split(",")
      };
    }
    exports2.googleProtobufFieldMaskFromProto3JSON = googleProtobufFieldMaskFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/fromproto3json.js
var require_fromproto3json = __commonJS({
  "node_modules/proto3-json-serializer/build/src/fromproto3json.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromProto3JSON = exports2.fromProto3JSONToInternalRepresentation = void 0;
    var any_1 = require_any();
    var bytes_1 = require_bytes();
    var enum_1 = require_enum2();
    var value_1 = require_value();
    var util_1 = require_util4();
    var duration_1 = require_duration2();
    var timestamp_1 = require_timestamp();
    var wrappers_1 = require_wrappers2();
    var fieldmask_1 = require_fieldmask();
    function fromProto3JSONToInternalRepresentation(type, json) {
      const fullyQualifiedTypeName = typeof type === "string" ? type : (0, util_1.getFullyQualifiedTypeName)(type);
      if (typeof type !== "string" && "values" in type) {
        if (fullyQualifiedTypeName === ".google.protobuf.NullValue") {
          return "NULL_VALUE";
        }
        return (0, enum_1.resolveEnumValueToString)(type, json);
      }
      if (typeof type !== "string") {
        type.resolveAll();
      }
      if (typeof type === "string") {
        return json;
      }
      if (fullyQualifiedTypeName === ".google.protobuf.Value") {
        return (0, value_1.googleProtobufValueFromProto3JSON)(json);
      }
      if (util_1.wrapperTypes.has(fullyQualifiedTypeName)) {
        if (json !== null && typeof json === "object" || Array.isArray(json)) {
          throw new Error(`fromProto3JSONToInternalRepresentation: JSON representation for ${fullyQualifiedTypeName} expects a string, a number, or a boolean, but got ${typeof json}`);
        }
        return (0, wrappers_1.wrapperFromProto3JSON)(fullyQualifiedTypeName, json);
      }
      if (json === null) {
        return null;
      }
      if (fullyQualifiedTypeName === ".google.protobuf.Any") {
        return (0, any_1.googleProtobufAnyFromProto3JSON)(type.root, json);
      }
      if (fullyQualifiedTypeName === ".google.protobuf.Struct") {
        if (typeof json !== "object") {
          throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.Struct must be an object but got ${typeof json}`);
        }
        if (Array.isArray(json)) {
          throw new Error("fromProto3JSONToInternalRepresentation: google.protobuf.Struct must be an object but got an array");
        }
        return (0, value_1.googleProtobufStructFromProto3JSON)(json);
      }
      if (fullyQualifiedTypeName === ".google.protobuf.ListValue") {
        if (!Array.isArray(json)) {
          throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.ListValue must be an array but got ${typeof json}`);
        }
        return (0, value_1.googleProtobufListValueFromProto3JSON)(json);
      }
      if (fullyQualifiedTypeName === ".google.protobuf.Duration") {
        if (typeof json !== "string") {
          throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.Duration must be a string but got ${typeof json}`);
        }
        return (0, duration_1.googleProtobufDurationFromProto3JSON)(json);
      }
      if (fullyQualifiedTypeName === ".google.protobuf.Timestamp") {
        if (typeof json !== "string") {
          throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.Timestamp must be a string but got ${typeof json}`);
        }
        return (0, timestamp_1.googleProtobufTimestampFromProto3JSON)(json);
      }
      if (fullyQualifiedTypeName === ".google.protobuf.FieldMask") {
        if (typeof json !== "string") {
          throw new Error(`fromProto3JSONToInternalRepresentation: google.protobuf.FieldMask must be a string but got ${typeof json}`);
        }
        return (0, fieldmask_1.googleProtobufFieldMaskFromProto3JSON)(json);
      }
      const result = {};
      for (const [key, value] of Object.entries(json)) {
        const field = type.fields[key];
        if (!field) {
          continue;
        }
        const resolvedType = field.resolvedType;
        const fieldType = field.type;
        if (field.repeated) {
          if (value === null) {
            result[key] = [];
          } else {
            if (!Array.isArray(value)) {
              throw new Error(`fromProto3JSONToInternalRepresentation: expected an array for field ${key}`);
            }
            result[key] = value.map((element) => fromProto3JSONToInternalRepresentation(resolvedType || fieldType, element));
          }
        } else if (field.map) {
          const map = {};
          for (const [mapKey, mapValue] of Object.entries(value)) {
            map[mapKey] = fromProto3JSONToInternalRepresentation(resolvedType || fieldType, mapValue);
          }
          result[key] = map;
        } else if (fieldType.match(/^(?:(?:(?:u?int|fixed)(?:32|64))|float|double)$/)) {
          if (typeof value !== "number" && typeof value !== "string") {
            throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);
          }
          result[key] = value;
        } else if (fieldType === "string") {
          if (typeof value !== "string") {
            throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);
          }
          result[key] = value;
        } else if (fieldType === "bool") {
          if (typeof value !== "boolean") {
            throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);
          }
          result[key] = value;
        } else if (fieldType === "bytes") {
          if (typeof value !== "string") {
            throw new Error(`fromProto3JSONToInternalRepresentation: field ${key} of type ${field.type} cannot contain value ${value}`);
          }
          result[key] = (0, bytes_1.bytesFromProto3JSON)(value);
        } else {
          (0, util_1.assert)(resolvedType !== null, `Expected to be able to resolve type for field ${field.name}`);
          const deserializedValue = fromProto3JSONToInternalRepresentation(resolvedType, value);
          result[key] = deserializedValue;
        }
      }
      return result;
    }
    exports2.fromProto3JSONToInternalRepresentation = fromProto3JSONToInternalRepresentation;
    function fromProto3JSON(type, json) {
      const internalRepr = fromProto3JSONToInternalRepresentation(type, json);
      if (internalRepr === null) {
        return null;
      }
      (0, util_1.assert)(typeof internalRepr === "object" && !Array.isArray(internalRepr), `fromProto3JSON: expected an object, not ${json}`);
      return type.fromObject(internalRepr);
    }
    exports2.fromProto3JSON = fromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/any.js
var require_any = __commonJS({
  "node_modules/proto3-json-serializer/build/src/any.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.googleProtobufAnyFromProto3JSON = exports2.googleProtobufAnyToProto3JSON = void 0;
    var fromproto3json_1 = require_fromproto3json();
    var toproto3json_1 = require_toproto3json();
    var specialJSON = /* @__PURE__ */ new Set([
      "google.protobuf.Any",
      "google.protobuf.Duration",
      "google.protobuf.FieldMask",
      "google.protobuf.ListValue",
      "google.protobuf.Struct",
      "google.protobuf.Timestamp",
      "google.protobuf.Value"
    ]);
    function googleProtobufAnyToProto3JSON(obj, options) {
      const typeName = obj.type_url.replace(/^.*\//, "");
      let type;
      try {
        type = obj.$type.root.lookupType(typeName);
      } catch (err) {
        throw new Error(`googleProtobufAnyToProto3JSON: cannot find type ${typeName}: ${err}`);
      }
      const valueMessage = type.decode(obj.value);
      const valueProto3JSON = (0, toproto3json_1.toProto3JSON)(valueMessage, options);
      if (specialJSON.has(typeName)) {
        return {
          "@type": obj.type_url,
          value: valueProto3JSON
        };
      }
      valueProto3JSON["@type"] = obj.type_url;
      return valueProto3JSON;
    }
    exports2.googleProtobufAnyToProto3JSON = googleProtobufAnyToProto3JSON;
    function googleProtobufAnyFromProto3JSON(root, json) {
      if (json === null || typeof json !== "object" || Array.isArray(json)) {
        throw new Error("googleProtobufAnyFromProto3JSON: must be an object to decode google.protobuf.Any");
      }
      const typeUrl = json["@type"];
      if (!typeUrl || typeof typeUrl !== "string") {
        throw new Error("googleProtobufAnyFromProto3JSON: JSON serialization of google.protobuf.Any must contain @type field");
      }
      const typeName = typeUrl.replace(/^.*\//, "");
      let type;
      try {
        type = root.lookupType(typeName);
      } catch (err) {
        throw new Error(`googleProtobufAnyFromProto3JSON: cannot find type ${typeName}: ${err}`);
      }
      let value = json;
      if (specialJSON.has(typeName)) {
        if (!("value" in json)) {
          throw new Error(`googleProtobufAnyFromProto3JSON: JSON representation of google.protobuf.Any with type ${typeName} must contain the value field`);
        }
        value = json.value;
      }
      const valueMessage = (0, fromproto3json_1.fromProto3JSON)(type, value);
      if (valueMessage === null) {
        return {
          type_url: typeUrl,
          value: null
        };
      }
      const uint8array = type.encode(valueMessage).finish();
      const buffer = Buffer.from(uint8array, 0, uint8array.byteLength);
      const base64 = buffer.toString("base64");
      return {
        type_url: typeUrl,
        value: base64
      };
    }
    exports2.googleProtobufAnyFromProto3JSON = googleProtobufAnyFromProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/toproto3json.js
var require_toproto3json = __commonJS({
  "node_modules/proto3-json-serializer/build/src/toproto3json.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toProto3JSON = void 0;
    var any_1 = require_any();
    var bytes_1 = require_bytes();
    var util_1 = require_util4();
    var enum_1 = require_enum2();
    var value_1 = require_value();
    var duration_1 = require_duration2();
    var timestamp_1 = require_timestamp();
    var wrappers_1 = require_wrappers2();
    var fieldmask_1 = require_fieldmask();
    var id = (x) => {
      return x;
    };
    function toProto3JSON(obj, options) {
      const objType = obj.$type;
      if (!objType) {
        throw new Error("Cannot serialize object to proto3 JSON since its .$type is unknown. Use Type.fromObject(obj) before calling toProto3JSON.");
      }
      objType.resolveAll();
      const typeName = (0, util_1.getFullyQualifiedTypeName)(objType);
      if (typeName === ".google.protobuf.Any") {
        return (0, any_1.googleProtobufAnyToProto3JSON)(obj, options);
      }
      if (typeName === ".google.protobuf.Value") {
        return (0, value_1.googleProtobufValueToProto3JSON)(obj);
      }
      if (typeName === ".google.protobuf.Struct") {
        return (0, value_1.googleProtobufStructToProto3JSON)(obj);
      }
      if (typeName === ".google.protobuf.ListValue") {
        return (0, value_1.googleProtobufListValueToProto3JSON)(obj);
      }
      if (typeName === ".google.protobuf.Duration") {
        return (0, duration_1.googleProtobufDurationToProto3JSON)(obj);
      }
      if (typeName === ".google.protobuf.Timestamp") {
        return (0, timestamp_1.googleProtobufTimestampToProto3JSON)(obj);
      }
      if (typeName === ".google.protobuf.FieldMask") {
        return (0, fieldmask_1.googleProtobufFieldMaskToProto3JSON)(obj);
      }
      if (util_1.wrapperTypes.has(typeName)) {
        return (0, wrappers_1.wrapperToProto3JSON)(obj);
      }
      const result = {};
      for (const [key, value] of Object.entries(obj)) {
        const field = objType.fields[key];
        const fieldResolvedType = field.resolvedType;
        const fieldFullyQualifiedTypeName = fieldResolvedType ? (0, util_1.getFullyQualifiedTypeName)(fieldResolvedType) : null;
        if (value === null) {
          result[key] = null;
          continue;
        }
        if (Array.isArray(value)) {
          if (value.length === 0) {
            continue;
          }
          result[key] = value.map(fieldResolvedType ? (element) => {
            return toProto3JSON(element, options);
          } : id);
          continue;
        }
        if (field.map) {
          const map = {};
          for (const [mapKey, mapValue] of Object.entries(value)) {
            map[mapKey] = fieldResolvedType ? toProto3JSON(mapValue, options) : mapValue;
          }
          result[key] = map;
          continue;
        }
        if (fieldFullyQualifiedTypeName === ".google.protobuf.NullValue") {
          result[key] = null;
          continue;
        }
        if (fieldResolvedType && "values" in fieldResolvedType && value !== null) {
          if (options === null || options === void 0 ? void 0 : options.numericEnums) {
            result[key] = (0, enum_1.resolveEnumValueToNumber)(fieldResolvedType, value);
          } else {
            result[key] = (0, enum_1.resolveEnumValueToString)(fieldResolvedType, value);
          }
          continue;
        }
        if (fieldResolvedType) {
          result[key] = toProto3JSON(value, options);
          continue;
        }
        if (typeof value === "string" || typeof value === "number" || typeof value === "boolean" || value === null) {
          if (typeof value === "number" && !Number.isFinite(value)) {
            result[key] = value.toString();
            continue;
          }
          result[key] = value;
          continue;
        }
        if (Buffer.isBuffer(value) || value instanceof Uint8Array) {
          result[key] = (0, bytes_1.bytesToProto3JSON)(value);
          continue;
        }
        (0, util_1.assert)(value.constructor.name === "Long", `toProto3JSON: don't know how to convert field ${key} with value ${value}`);
        result[key] = value.toString();
        continue;
      }
      return result;
    }
    exports2.toProto3JSON = toProto3JSON;
  }
});

// node_modules/proto3-json-serializer/build/src/index.js
var require_src9 = __commonJS({
  "node_modules/proto3-json-serializer/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromProto3JSON = exports2.toProto3JSON = void 0;
    var toproto3json_1 = require_toproto3json();
    Object.defineProperty(exports2, "toProto3JSON", { enumerable: true, get: function() {
      return toproto3json_1.toProto3JSON;
    } });
    var fromproto3json_1 = require_fromproto3json();
    Object.defineProperty(exports2, "fromProto3JSON", { enumerable: true, get: function() {
      return fromproto3json_1.fromProto3JSON;
    } });
  }
});

// node_modules/google-gax/build/src/routingHeader.js
var require_routingHeader = __commonJS({
  "node_modules/google-gax/build/src/routingHeader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromParams = void 0;
    var querystring = require("querystring");
    function fromParams(params) {
      return querystring.stringify(params);
    }
    exports2.fromParams = fromParams;
  }
});

// node_modules/google-gax/build/src/transcoding.js
var require_transcoding = __commonJS({
  "node_modules/google-gax/build/src/transcoding.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.overrideHttpRules = exports2.transcode = exports2.isProto3OptionalField = exports2.flattenObject = exports2.match = exports2.applyPattern = exports2.encodeWithoutSlashes = exports2.encodeWithSlashes = exports2.buildQueryStringComponents = exports2.deleteField = exports2.deepCopyWithoutMatchedFields = exports2.getField = void 0;
    var util_1 = require_util3();
    var httpOptionName = "(google.api.http)";
    var proto3OptionalName = "proto3_optional";
    var supportedHttpMethods = ["get", "post", "put", "patch", "delete"];
    function getField(request, field, allowObjects = false) {
      const parts = field.split(".");
      let value = request;
      for (const part of parts) {
        if (typeof value !== "object") {
          return void 0;
        }
        value = value[part];
      }
      if (!allowObjects && typeof value === "object" && !Array.isArray(value) && value !== null) {
        return void 0;
      }
      return value;
    }
    exports2.getField = getField;
    function deepCopyWithoutMatchedFields(request, fieldsToSkip, fullNamePrefix = "") {
      if (typeof request !== "object" || request === null) {
        return request;
      }
      const copy = Object.assign({}, request);
      for (const key in copy) {
        if (fieldsToSkip.has(`${fullNamePrefix}${key}`)) {
          delete copy[key];
          continue;
        }
        const nextFullNamePrefix = `${fullNamePrefix}${key}.`;
        if (Array.isArray(copy[key])) {
          copy[key] = copy[key].map((value) => deepCopyWithoutMatchedFields(value, /* @__PURE__ */ new Set()));
        } else if (typeof copy[key] === "object" && copy[key] !== null) {
          copy[key] = deepCopyWithoutMatchedFields(copy[key], fieldsToSkip, nextFullNamePrefix);
        }
      }
      return copy;
    }
    exports2.deepCopyWithoutMatchedFields = deepCopyWithoutMatchedFields;
    function deleteField(request, field) {
      const parts = field.split(".");
      while (parts.length > 1) {
        if (typeof request !== "object") {
          return;
        }
        const part2 = parts.shift();
        request = request[part2];
      }
      const part = parts.shift();
      if (typeof request !== "object") {
        return;
      }
      delete request[part];
    }
    exports2.deleteField = deleteField;
    function buildQueryStringComponents(request, prefix = "") {
      const resultList = [];
      for (const key in request) {
        if (Array.isArray(request[key])) {
          for (const value of request[key]) {
            resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(value.toString())}`);
          }
        } else if (typeof request[key] === "object" && request[key] !== null) {
          resultList.push(...buildQueryStringComponents(request[key], `${key}.`));
        } else {
          resultList.push(`${prefix}${encodeWithoutSlashes(key)}=${encodeWithoutSlashes(request[key] === null ? "null" : request[key].toString())}`);
        }
      }
      return resultList;
    }
    exports2.buildQueryStringComponents = buildQueryStringComponents;
    function encodeWithSlashes(str) {
      return str.split("").map((c) => c.match(/[-_.~0-9a-zA-Z]/) ? c : encodeURIComponent(c)).join("");
    }
    exports2.encodeWithSlashes = encodeWithSlashes;
    function encodeWithoutSlashes(str) {
      return str.split("").map((c) => c.match(/[-_.~0-9a-zA-Z/]/) ? c : encodeURIComponent(c)).join("");
    }
    exports2.encodeWithoutSlashes = encodeWithoutSlashes;
    function escapeRegExp(str) {
      return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }
    function applyPattern(pattern, fieldValue) {
      if (!pattern || pattern === "*") {
        return encodeWithSlashes(fieldValue);
      }
      if (!pattern.includes("*") && pattern !== fieldValue) {
        return void 0;
      }
      const regex = new RegExp("^" + escapeRegExp(pattern).replace(/\\\*\\\*/g, "(.+)").replace(/\\\*/g, "([^/]+)") + "$");
      if (!fieldValue.match(regex)) {
        return void 0;
      }
      return encodeWithoutSlashes(fieldValue);
    }
    exports2.applyPattern = applyPattern;
    function fieldToCamelCase(field) {
      const parts = field.split(".");
      return parts.map((part) => (0, util_1.toCamelCase)(part)).join(".");
    }
    function match(request, pattern) {
      let url = pattern;
      const matchedFields = [];
      for (; ; ) {
        const match2 = url.match(/^(.*)\{([^}=]+)(?:=([^}]*))?\}(.*)/);
        if (!match2) {
          break;
        }
        const [, before, field, pattern2, after] = match2;
        const camelCasedField = fieldToCamelCase(field);
        matchedFields.push(fieldToCamelCase(camelCasedField));
        const fieldValue = getField(request, camelCasedField);
        if (fieldValue === void 0) {
          return void 0;
        }
        const appliedPattern = applyPattern(pattern2, fieldValue === null ? "null" : fieldValue.toString());
        if (appliedPattern === void 0) {
          return void 0;
        }
        url = before + appliedPattern + after;
      }
      return { matchedFields, url };
    }
    exports2.match = match;
    function flattenObject(request) {
      const result = {};
      for (const key in request) {
        if (request[key] === void 0) {
          continue;
        }
        if (Array.isArray(request[key])) {
          result[key] = request[key];
          continue;
        }
        if (typeof request[key] === "object" && request[key] !== null) {
          const nested = flattenObject(request[key]);
          for (const nestedKey in nested) {
            result[`${key}.${nestedKey}`] = nested[nestedKey];
          }
          continue;
        }
        result[key] = request[key];
      }
      return result;
    }
    exports2.flattenObject = flattenObject;
    function isProto3OptionalField(field) {
      return field && field.options && field.options[proto3OptionalName];
    }
    exports2.isProto3OptionalField = isProto3OptionalField;
    function transcode(request, parsedOptions) {
      const httpRules = [];
      for (const option of parsedOptions) {
        if (!(httpOptionName in option)) {
          continue;
        }
        const httpRule = option[httpOptionName];
        httpRules.push(httpRule);
        if (httpRule === null || httpRule === void 0 ? void 0 : httpRule.additional_bindings) {
          const additionalBindings = Array.isArray(httpRule.additional_bindings) ? httpRule.additional_bindings : [httpRule.additional_bindings];
          httpRules.push(...additionalBindings);
        }
      }
      for (const httpRule of httpRules) {
        for (const httpMethod of supportedHttpMethods) {
          if (!(httpMethod in httpRule)) {
            continue;
          }
          const pathTemplate = httpRule[httpMethod];
          const matchResult = match(request, pathTemplate);
          if (matchResult === void 0) {
            continue;
          }
          const { url, matchedFields } = matchResult;
          let data = deepCopyWithoutMatchedFields(request, new Set(matchedFields));
          if (httpRule.body === "*") {
            return { httpMethod, url, queryString: "", data };
          }
          const queryStringObject = data;
          if (httpRule.body) {
            data = getField(
              queryStringObject,
              fieldToCamelCase(httpRule.body),
              /*allowObjects:*/
              true
            );
            deleteField(queryStringObject, fieldToCamelCase(httpRule.body));
          } else {
            data = "";
          }
          const queryStringComponents = buildQueryStringComponents(queryStringObject);
          const queryString = queryStringComponents.join("&");
          if (!data || typeof data === "object" && Object.keys(data).length === 0) {
            data = "";
          }
          return { httpMethod, url, queryString, data };
        }
      }
      return void 0;
    }
    exports2.transcode = transcode;
    function overrideHttpRules(httpRules, protoJson) {
      for (const rule of httpRules) {
        if (!rule.selector) {
          continue;
        }
        const rpc = protoJson.lookup(rule.selector);
        if (!rpc || !rpc.parsedOptions) {
          continue;
        }
        for (const item of rpc.parsedOptions) {
          if (!(httpOptionName in item)) {
            continue;
          }
          const httpOptions = item[httpOptionName];
          for (const httpMethod in httpOptions) {
            if (httpMethod in rule) {
              if (httpMethod === "additional_bindings") {
                continue;
              }
              httpOptions[httpMethod] = rule[httpMethod];
            }
            if (rule.additional_bindings) {
              httpOptions["additional_bindings"] = !httpOptions["additional_bindings"] ? [] : Array.isArray(httpOptions["additional_bindings"]) ? httpOptions["additional_bindings"] : [httpOptions["additional_bindings"]];
              httpOptions["additional_bindings"].push(...rule.additional_bindings);
            }
          }
        }
      }
    }
    exports2.overrideHttpRules = overrideHttpRules;
  }
});

// node_modules/google-gax/build/src/fallbackRest.js
var require_fallbackRest = __commonJS({
  "node_modules/google-gax/build/src/fallbackRest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeResponse = exports2.encodeRequest = void 0;
    var serializer = require_src9();
    var fallback_1 = require_fallback();
    var googleError_1 = require_googleError();
    var transcoding_1 = require_transcoding();
    function encodeRequest(rpc, protocol, servicePath, servicePort, request, numericEnums) {
      const headers = {
        "Content-Type": "application/json"
      };
      const message = rpc.resolvedRequestType.fromObject(request);
      const json = serializer.toProto3JSON(message, {
        numericEnums
      });
      if (!json) {
        throw new Error(`Cannot send null request to RPC ${rpc.name}.`);
      }
      if (typeof json !== "object" || Array.isArray(json)) {
        throw new Error(`Request to RPC ${rpc.name} must be an object.`);
      }
      const transcoded = (0, transcoding_1.transcode)(json, rpc.parsedOptions);
      if (!transcoded) {
        throw new Error(`Cannot build HTTP request for ${JSON.stringify(json)}, method: ${rpc.name}`);
      }
      if (numericEnums) {
        transcoded.queryString = (transcoded.queryString ? `${transcoded.queryString}&` : "") + "$alt=json%3Benum-encoding=int";
      }
      const method = transcoded.httpMethod.toUpperCase();
      const body = JSON.stringify(transcoded.data);
      const url = `${protocol}://${servicePath}:${servicePort}/${transcoded.url.replace(/^\//, "")}?${transcoded.queryString}`;
      return {
        method,
        url,
        headers,
        body
      };
    }
    exports2.encodeRequest = encodeRequest;
    function decodeResponse(rpc, ok, response) {
      const decodedString = new TextDecoder().decode(response);
      const json = JSON.parse(decodedString);
      if (!ok) {
        const error = googleError_1.GoogleError.parseHttpError(json);
        throw error;
      }
      const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);
      if (!message) {
        throw new Error(`Received null response from RPC ${rpc.name}`);
      }
      return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);
    }
    exports2.decodeResponse = decodeResponse;
  }
});

// node_modules/google-gax/node_modules/node-fetch/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/google-gax/node_modules/node-fetch/lib/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var Stream = _interopDefault(require("stream"));
    var http = _interopDefault(require("http"));
    var Url = _interopDefault(require("url"));
    var whatwgUrl = _interopDefault(require_public_api());
    var https = _interopDefault(require("https"));
    var zlib = _interopDefault(require("zlib"));
    var Readable = Stream.Readable;
    var BUFFER = Symbol("buffer");
    var TYPE = Symbol("type");
    var Blob = class _Blob {
      constructor() {
        this[TYPE] = "";
        const blobParts = arguments[0];
        const options = arguments[1];
        const buffers = [];
        let size = 0;
        if (blobParts) {
          const a = blobParts;
          const length = Number(a.length);
          for (let i = 0; i < length; i++) {
            const element = a[i];
            let buffer;
            if (element instanceof Buffer) {
              buffer = element;
            } else if (ArrayBuffer.isView(element)) {
              buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
            } else if (element instanceof ArrayBuffer) {
              buffer = Buffer.from(element);
            } else if (element instanceof _Blob) {
              buffer = element[BUFFER];
            } else {
              buffer = Buffer.from(typeof element === "string" ? element : String(element));
            }
            size += buffer.length;
            buffers.push(buffer);
          }
        }
        this[BUFFER] = Buffer.concat(buffers);
        let type = options && options.type !== void 0 && String(options.type).toLowerCase();
        if (type && !/[^\u0020-\u007E]/.test(type)) {
          this[TYPE] = type;
        }
      }
      get size() {
        return this[BUFFER].length;
      }
      get type() {
        return this[TYPE];
      }
      text() {
        return Promise.resolve(this[BUFFER].toString());
      }
      arrayBuffer() {
        const buf = this[BUFFER];
        const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        return Promise.resolve(ab);
      }
      stream() {
        const readable = new Readable();
        readable._read = function() {
        };
        readable.push(this[BUFFER]);
        readable.push(null);
        return readable;
      }
      toString() {
        return "[object Blob]";
      }
      slice() {
        const size = this.size;
        const start = arguments[0];
        const end = arguments[1];
        let relativeStart, relativeEnd;
        if (start === void 0) {
          relativeStart = 0;
        } else if (start < 0) {
          relativeStart = Math.max(size + start, 0);
        } else {
          relativeStart = Math.min(start, size);
        }
        if (end === void 0) {
          relativeEnd = size;
        } else if (end < 0) {
          relativeEnd = Math.max(size + end, 0);
        } else {
          relativeEnd = Math.min(end, size);
        }
        const span = Math.max(relativeEnd - relativeStart, 0);
        const buffer = this[BUFFER];
        const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
        const blob = new _Blob([], { type: arguments[2] });
        blob[BUFFER] = slicedBuffer;
        return blob;
      }
    };
    Object.defineProperties(Blob.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    });
    Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
      value: "Blob",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function FetchError(message, type, systemError) {
      Error.call(this, message);
      this.message = message;
      this.type = type;
      if (systemError) {
        this.code = this.errno = systemError.code;
      }
      Error.captureStackTrace(this, this.constructor);
    }
    FetchError.prototype = Object.create(Error.prototype);
    FetchError.prototype.constructor = FetchError;
    FetchError.prototype.name = "FetchError";
    var convert;
    try {
      convert = require("encoding").convert;
    } catch (e) {
    }
    var INTERNALS = Symbol("Body internals");
    var PassThrough = Stream.PassThrough;
    function Body(body) {
      var _this = this;
      var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
      let size = _ref$size === void 0 ? 0 : _ref$size;
      var _ref$timeout = _ref.timeout;
      let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
      if (body == null) {
        body = null;
      } else if (isURLSearchParams(body)) {
        body = Buffer.from(body.toString());
      } else if (isBlob(body))
        ;
      else if (Buffer.isBuffer(body))
        ;
      else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        body = Buffer.from(body);
      } else if (ArrayBuffer.isView(body)) {
        body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
      } else if (body instanceof Stream)
        ;
      else {
        body = Buffer.from(String(body));
      }
      this[INTERNALS] = {
        body,
        disturbed: false,
        error: null
      };
      this.size = size;
      this.timeout = timeout;
      if (body instanceof Stream) {
        body.on("error", function(err) {
          const error = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
          _this[INTERNALS].error = error;
        });
      }
    }
    Body.prototype = {
      get body() {
        return this[INTERNALS].body;
      },
      get bodyUsed() {
        return this[INTERNALS].disturbed;
      },
      /**
       * Decode response as ArrayBuffer
       *
       * @return  Promise
       */
      arrayBuffer() {
        return consumeBody.call(this).then(function(buf) {
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        });
      },
      /**
       * Return raw response as Blob
       *
       * @return Promise
       */
      blob() {
        let ct = this.headers && this.headers.get("content-type") || "";
        return consumeBody.call(this).then(function(buf) {
          return Object.assign(
            // Prevent copying
            new Blob([], {
              type: ct.toLowerCase()
            }),
            {
              [BUFFER]: buf
            }
          );
        });
      },
      /**
       * Decode response as json
       *
       * @return  Promise
       */
      json() {
        var _this2 = this;
        return consumeBody.call(this).then(function(buffer) {
          try {
            return JSON.parse(buffer.toString());
          } catch (err) {
            return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
          }
        });
      },
      /**
       * Decode response as text
       *
       * @return  Promise
       */
      text() {
        return consumeBody.call(this).then(function(buffer) {
          return buffer.toString();
        });
      },
      /**
       * Decode response as buffer (non-spec api)
       *
       * @return  Promise
       */
      buffer() {
        return consumeBody.call(this);
      },
      /**
       * Decode response as text, while automatically detecting the encoding and
       * trying to decode to UTF-8 (non-spec api)
       *
       * @return  Promise
       */
      textConverted() {
        var _this3 = this;
        return consumeBody.call(this).then(function(buffer) {
          return convertBody(buffer, _this3.headers);
        });
      }
    };
    Object.defineProperties(Body.prototype, {
      body: { enumerable: true },
      bodyUsed: { enumerable: true },
      arrayBuffer: { enumerable: true },
      blob: { enumerable: true },
      json: { enumerable: true },
      text: { enumerable: true }
    });
    Body.mixIn = function(proto) {
      for (const name of Object.getOwnPropertyNames(Body.prototype)) {
        if (!(name in proto)) {
          const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
          Object.defineProperty(proto, name, desc);
        }
      }
    };
    function consumeBody() {
      var _this4 = this;
      if (this[INTERNALS].disturbed) {
        return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
      }
      this[INTERNALS].disturbed = true;
      if (this[INTERNALS].error) {
        return Body.Promise.reject(this[INTERNALS].error);
      }
      let body = this.body;
      if (body === null) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      if (isBlob(body)) {
        body = body.stream();
      }
      if (Buffer.isBuffer(body)) {
        return Body.Promise.resolve(body);
      }
      if (!(body instanceof Stream)) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      let accum = [];
      let accumBytes = 0;
      let abort = false;
      return new Body.Promise(function(resolve, reject) {
        let resTimeout;
        if (_this4.timeout) {
          resTimeout = setTimeout(function() {
            abort = true;
            reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
          }, _this4.timeout);
        }
        body.on("error", function(err) {
          if (err.name === "AbortError") {
            abort = true;
            reject(err);
          } else {
            reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
          }
        });
        body.on("data", function(chunk) {
          if (abort || chunk === null) {
            return;
          }
          if (_this4.size && accumBytes + chunk.length > _this4.size) {
            abort = true;
            reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
            return;
          }
          accumBytes += chunk.length;
          accum.push(chunk);
        });
        body.on("end", function() {
          if (abort) {
            return;
          }
          clearTimeout(resTimeout);
          try {
            resolve(Buffer.concat(accum, accumBytes));
          } catch (err) {
            reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
          }
        });
      });
    }
    function convertBody(buffer, headers) {
      if (typeof convert !== "function") {
        throw new Error("The package `encoding` must be installed to use the textConverted() function");
      }
      const ct = headers.get("content-type");
      let charset = "utf-8";
      let res, str;
      if (ct) {
        res = /charset=([^;]*)/i.exec(ct);
      }
      str = buffer.slice(0, 1024).toString();
      if (!res && str) {
        res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
      }
      if (!res && str) {
        res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
        if (!res) {
          res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
          if (res) {
            res.pop();
          }
        }
        if (res) {
          res = /charset=(.*)/i.exec(res.pop());
        }
      }
      if (!res && str) {
        res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
      }
      if (res) {
        charset = res.pop();
        if (charset === "gb2312" || charset === "gbk") {
          charset = "gb18030";
        }
      }
      return convert(buffer, "UTF-8", charset).toString();
    }
    function isURLSearchParams(obj) {
      if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
        return false;
      }
      return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
    }
    function isBlob(obj) {
      return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
    }
    function clone(instance) {
      let p1, p2;
      let body = instance.body;
      if (instance.bodyUsed) {
        throw new Error("cannot clone body after it is used");
      }
      if (body instanceof Stream && typeof body.getBoundary !== "function") {
        p1 = new PassThrough();
        p2 = new PassThrough();
        body.pipe(p1);
        body.pipe(p2);
        instance[INTERNALS].body = p1;
        body = p2;
      }
      return body;
    }
    function extractContentType(body) {
      if (body === null) {
        return null;
      } else if (typeof body === "string") {
        return "text/plain;charset=UTF-8";
      } else if (isURLSearchParams(body)) {
        return "application/x-www-form-urlencoded;charset=UTF-8";
      } else if (isBlob(body)) {
        return body.type || null;
      } else if (Buffer.isBuffer(body)) {
        return null;
      } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        return null;
      } else if (ArrayBuffer.isView(body)) {
        return null;
      } else if (typeof body.getBoundary === "function") {
        return `multipart/form-data;boundary=${body.getBoundary()}`;
      } else if (body instanceof Stream) {
        return null;
      } else {
        return "text/plain;charset=UTF-8";
      }
    }
    function getTotalBytes(instance) {
      const body = instance.body;
      if (body === null) {
        return 0;
      } else if (isBlob(body)) {
        return body.size;
      } else if (Buffer.isBuffer(body)) {
        return body.length;
      } else if (body && typeof body.getLengthSync === "function") {
        if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
        body.hasKnownLength && body.hasKnownLength()) {
          return body.getLengthSync();
        }
        return null;
      } else {
        return null;
      }
    }
    function writeToStream(dest, instance) {
      const body = instance.body;
      if (body === null) {
        dest.end();
      } else if (isBlob(body)) {
        body.stream().pipe(dest);
      } else if (Buffer.isBuffer(body)) {
        dest.write(body);
        dest.end();
      } else {
        body.pipe(dest);
      }
    }
    Body.Promise = global.Promise;
    var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
    var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    function validateName(name) {
      name = `${name}`;
      if (invalidTokenRegex.test(name) || name === "") {
        throw new TypeError(`${name} is not a legal HTTP header name`);
      }
    }
    function validateValue(value) {
      value = `${value}`;
      if (invalidHeaderCharRegex.test(value)) {
        throw new TypeError(`${value} is not a legal HTTP header value`);
      }
    }
    function find(map, name) {
      name = name.toLowerCase();
      for (const key in map) {
        if (key.toLowerCase() === name) {
          return key;
        }
      }
      return void 0;
    }
    var MAP = Symbol("map");
    var Headers = class _Headers {
      /**
       * Headers class
       *
       * @param   Object  headers  Response headers
       * @return  Void
       */
      constructor() {
        let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
        this[MAP] = /* @__PURE__ */ Object.create(null);
        if (init instanceof _Headers) {
          const rawHeaders = init.raw();
          const headerNames = Object.keys(rawHeaders);
          for (const headerName of headerNames) {
            for (const value of rawHeaders[headerName]) {
              this.append(headerName, value);
            }
          }
          return;
        }
        if (init == null)
          ;
        else if (typeof init === "object") {
          const method = init[Symbol.iterator];
          if (method != null) {
            if (typeof method !== "function") {
              throw new TypeError("Header pairs must be iterable");
            }
            const pairs = [];
            for (const pair of init) {
              if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
                throw new TypeError("Each header pair must be iterable");
              }
              pairs.push(Array.from(pair));
            }
            for (const pair of pairs) {
              if (pair.length !== 2) {
                throw new TypeError("Each header pair must be a name/value tuple");
              }
              this.append(pair[0], pair[1]);
            }
          } else {
            for (const key of Object.keys(init)) {
              const value = init[key];
              this.append(key, value);
            }
          }
        } else {
          throw new TypeError("Provided initializer must be an object");
        }
      }
      /**
       * Return combined header value given name
       *
       * @param   String  name  Header name
       * @return  Mixed
       */
      get(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key === void 0) {
          return null;
        }
        return this[MAP][key].join(", ");
      }
      /**
       * Iterate over all headers
       *
       * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
       * @param   Boolean   thisArg   `this` context for callback function
       * @return  Void
       */
      forEach(callback) {
        let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
        let pairs = getHeaders(this);
        let i = 0;
        while (i < pairs.length) {
          var _pairs$i = pairs[i];
          const name = _pairs$i[0], value = _pairs$i[1];
          callback.call(thisArg, value, name, this);
          pairs = getHeaders(this);
          i++;
        }
      }
      /**
       * Overwrite header values given name
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */
      set(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        this[MAP][key !== void 0 ? key : name] = [value];
      }
      /**
       * Append a value onto existing header
       *
       * @param   String  name   Header name
       * @param   String  value  Header value
       * @return  Void
       */
      append(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue(value);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          this[MAP][key].push(value);
        } else {
          this[MAP][name] = [value];
        }
      }
      /**
       * Check for header name existence
       *
       * @param   String   name  Header name
       * @return  Boolean
       */
      has(name) {
        name = `${name}`;
        validateName(name);
        return find(this[MAP], name) !== void 0;
      }
      /**
       * Delete all header values given name
       *
       * @param   String  name  Header name
       * @return  Void
       */
      delete(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          delete this[MAP][key];
        }
      }
      /**
       * Return raw headers (non-spec api)
       *
       * @return  Object
       */
      raw() {
        return this[MAP];
      }
      /**
       * Get an iterator on keys.
       *
       * @return  Iterator
       */
      keys() {
        return createHeadersIterator(this, "key");
      }
      /**
       * Get an iterator on values.
       *
       * @return  Iterator
       */
      values() {
        return createHeadersIterator(this, "value");
      }
      /**
       * Get an iterator on entries.
       *
       * This is the default iterator of the Headers object.
       *
       * @return  Iterator
       */
      [Symbol.iterator]() {
        return createHeadersIterator(this, "key+value");
      }
    };
    Headers.prototype.entries = Headers.prototype[Symbol.iterator];
    Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
      value: "Headers",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Headers.prototype, {
      get: { enumerable: true },
      forEach: { enumerable: true },
      set: { enumerable: true },
      append: { enumerable: true },
      has: { enumerable: true },
      delete: { enumerable: true },
      keys: { enumerable: true },
      values: { enumerable: true },
      entries: { enumerable: true }
    });
    function getHeaders(headers) {
      let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
      const keys = Object.keys(headers[MAP]).sort();
      return keys.map(kind === "key" ? function(k) {
        return k.toLowerCase();
      } : kind === "value" ? function(k) {
        return headers[MAP][k].join(", ");
      } : function(k) {
        return [k.toLowerCase(), headers[MAP][k].join(", ")];
      });
    }
    var INTERNAL = Symbol("internal");
    function createHeadersIterator(target, kind) {
      const iterator = Object.create(HeadersIteratorPrototype);
      iterator[INTERNAL] = {
        target,
        kind,
        index: 0
      };
      return iterator;
    }
    var HeadersIteratorPrototype = Object.setPrototypeOf({
      next() {
        if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
          throw new TypeError("Value of `this` is not a HeadersIterator");
        }
        var _INTERNAL = this[INTERNAL];
        const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
        const values = getHeaders(target, kind);
        const len = values.length;
        if (index >= len) {
          return {
            value: void 0,
            done: true
          };
        }
        this[INTERNAL].index = index + 1;
        return {
          value: values[index],
          done: false
        };
      }
    }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
    Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
      value: "HeadersIterator",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function exportNodeCompatibleHeaders(headers) {
      const obj = Object.assign({ __proto__: null }, headers[MAP]);
      const hostHeaderKey = find(headers[MAP], "Host");
      if (hostHeaderKey !== void 0) {
        obj[hostHeaderKey] = obj[hostHeaderKey][0];
      }
      return obj;
    }
    function createHeadersLenient(obj) {
      const headers = new Headers();
      for (const name of Object.keys(obj)) {
        if (invalidTokenRegex.test(name)) {
          continue;
        }
        if (Array.isArray(obj[name])) {
          for (const val of obj[name]) {
            if (invalidHeaderCharRegex.test(val)) {
              continue;
            }
            if (headers[MAP][name] === void 0) {
              headers[MAP][name] = [val];
            } else {
              headers[MAP][name].push(val);
            }
          }
        } else if (!invalidHeaderCharRegex.test(obj[name])) {
          headers[MAP][name] = [obj[name]];
        }
      }
      return headers;
    }
    var INTERNALS$1 = Symbol("Response internals");
    var STATUS_CODES = http.STATUS_CODES;
    var Response = class _Response {
      constructor() {
        let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Body.call(this, body, opts);
        const status = opts.status || 200;
        const headers = new Headers(opts.headers);
        if (body != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(body);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        this[INTERNALS$1] = {
          url: opts.url,
          status,
          statusText: opts.statusText || STATUS_CODES[status],
          headers,
          counter: opts.counter
        };
      }
      get url() {
        return this[INTERNALS$1].url || "";
      }
      get status() {
        return this[INTERNALS$1].status;
      }
      /**
       * Convenience property representing if the request ended normally
       */
      get ok() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
      get redirected() {
        return this[INTERNALS$1].counter > 0;
      }
      get statusText() {
        return this[INTERNALS$1].statusText;
      }
      get headers() {
        return this[INTERNALS$1].headers;
      }
      /**
       * Clone this response
       *
       * @return  Response
       */
      clone() {
        return new _Response(clone(this), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected
        });
      }
    };
    Body.mixIn(Response.prototype);
    Object.defineProperties(Response.prototype, {
      url: { enumerable: true },
      status: { enumerable: true },
      ok: { enumerable: true },
      redirected: { enumerable: true },
      statusText: { enumerable: true },
      headers: { enumerable: true },
      clone: { enumerable: true }
    });
    Object.defineProperty(Response.prototype, Symbol.toStringTag, {
      value: "Response",
      writable: false,
      enumerable: false,
      configurable: true
    });
    var INTERNALS$2 = Symbol("Request internals");
    var URL2 = Url.URL || whatwgUrl.URL;
    var parse_url = Url.parse;
    var format_url = Url.format;
    function parseURL(urlStr) {
      if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
        urlStr = new URL2(urlStr).toString();
      }
      return parse_url(urlStr);
    }
    var streamDestructionSupported = "destroy" in Stream.Readable.prototype;
    function isRequest(input) {
      return typeof input === "object" && typeof input[INTERNALS$2] === "object";
    }
    function isAbortSignal(signal) {
      const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
      return !!(proto && proto.constructor.name === "AbortSignal");
    }
    var Request = class _Request {
      constructor(input) {
        let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        let parsedURL;
        if (!isRequest(input)) {
          if (input && input.href) {
            parsedURL = parseURL(input.href);
          } else {
            parsedURL = parseURL(`${input}`);
          }
          input = {};
        } else {
          parsedURL = parseURL(input.url);
        }
        let method = init.method || input.method || "GET";
        method = method.toUpperCase();
        if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body");
        }
        let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
        Body.call(this, inputBody, {
          timeout: init.timeout || input.timeout || 0,
          size: init.size || input.size || 0
        });
        const headers = new Headers(init.headers || input.headers || {});
        if (inputBody != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(inputBody);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ("signal" in init)
          signal = init.signal;
        if (signal != null && !isAbortSignal(signal)) {
          throw new TypeError("Expected signal to be an instanceof AbortSignal");
        }
        this[INTERNALS$2] = {
          method,
          redirect: init.redirect || input.redirect || "follow",
          headers,
          parsedURL,
          signal
        };
        this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
        this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
        this.counter = init.counter || input.counter || 0;
        this.agent = init.agent || input.agent;
      }
      get method() {
        return this[INTERNALS$2].method;
      }
      get url() {
        return format_url(this[INTERNALS$2].parsedURL);
      }
      get headers() {
        return this[INTERNALS$2].headers;
      }
      get redirect() {
        return this[INTERNALS$2].redirect;
      }
      get signal() {
        return this[INTERNALS$2].signal;
      }
      /**
       * Clone this request
       *
       * @return  Request
       */
      clone() {
        return new _Request(this);
      }
    };
    Body.mixIn(Request.prototype);
    Object.defineProperty(Request.prototype, Symbol.toStringTag, {
      value: "Request",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Request.prototype, {
      method: { enumerable: true },
      url: { enumerable: true },
      headers: { enumerable: true },
      redirect: { enumerable: true },
      clone: { enumerable: true },
      signal: { enumerable: true }
    });
    function getNodeRequestOptions(request) {
      const parsedURL = request[INTERNALS$2].parsedURL;
      const headers = new Headers(request[INTERNALS$2].headers);
      if (!headers.has("Accept")) {
        headers.set("Accept", "*/*");
      }
      if (!parsedURL.protocol || !parsedURL.hostname) {
        throw new TypeError("Only absolute URLs are supported");
      }
      if (!/^https?:$/.test(parsedURL.protocol)) {
        throw new TypeError("Only HTTP(S) protocols are supported");
      }
      if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
        throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
      }
      let contentLengthValue = null;
      if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
        contentLengthValue = "0";
      }
      if (request.body != null) {
        const totalBytes = getTotalBytes(request);
        if (typeof totalBytes === "number") {
          contentLengthValue = String(totalBytes);
        }
      }
      if (contentLengthValue) {
        headers.set("Content-Length", contentLengthValue);
      }
      if (!headers.has("User-Agent")) {
        headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
      }
      if (request.compress && !headers.has("Accept-Encoding")) {
        headers.set("Accept-Encoding", "gzip,deflate");
      }
      let agent = request.agent;
      if (typeof agent === "function") {
        agent = agent(parsedURL);
      }
      return Object.assign({}, parsedURL, {
        method: request.method,
        headers: exportNodeCompatibleHeaders(headers),
        agent
      });
    }
    function AbortError(message) {
      Error.call(this, message);
      this.type = "aborted";
      this.message = message;
      Error.captureStackTrace(this, this.constructor);
    }
    AbortError.prototype = Object.create(Error.prototype);
    AbortError.prototype.constructor = AbortError;
    AbortError.prototype.name = "AbortError";
    var URL$1 = Url.URL || whatwgUrl.URL;
    var PassThrough$1 = Stream.PassThrough;
    var isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
      const orig = new URL$1(original).hostname;
      const dest = new URL$1(destination).hostname;
      return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
    };
    var isSameProtocol = function isSameProtocol2(destination, original) {
      const orig = new URL$1(original).protocol;
      const dest = new URL$1(destination).protocol;
      return orig === dest;
    };
    function fetch(url, opts) {
      if (!fetch.Promise) {
        throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
      }
      Body.Promise = fetch.Promise;
      return new fetch.Promise(function(resolve, reject) {
        const request = new Request(url, opts);
        const options = getNodeRequestOptions(request);
        const send = (options.protocol === "https:" ? https : http).request;
        const signal = request.signal;
        let response = null;
        const abort = function abort2() {
          let error = new AbortError("The user aborted a request.");
          reject(error);
          if (request.body && request.body instanceof Stream.Readable) {
            destroyStream(request.body, error);
          }
          if (!response || !response.body)
            return;
          response.body.emit("error", error);
        };
        if (signal && signal.aborted) {
          abort();
          return;
        }
        const abortAndFinalize = function abortAndFinalize2() {
          abort();
          finalize();
        };
        const req = send(options);
        let reqTimeout;
        if (signal) {
          signal.addEventListener("abort", abortAndFinalize);
        }
        function finalize() {
          req.abort();
          if (signal)
            signal.removeEventListener("abort", abortAndFinalize);
          clearTimeout(reqTimeout);
        }
        if (request.timeout) {
          req.once("socket", function(socket) {
            reqTimeout = setTimeout(function() {
              reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
              finalize();
            }, request.timeout);
          });
        }
        req.on("error", function(err) {
          reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
          if (response && response.body) {
            destroyStream(response.body, err);
          }
          finalize();
        });
        fixResponseChunkedTransferBadEnding(req, function(err) {
          if (signal && signal.aborted) {
            return;
          }
          if (response && response.body) {
            destroyStream(response.body, err);
          }
        });
        if (parseInt(process.version.substring(1)) < 14) {
          req.on("socket", function(s) {
            s.addListener("close", function(hadError) {
              const hasDataListener = s.listenerCount("data") > 0;
              if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {
                const err = new Error("Premature close");
                err.code = "ERR_STREAM_PREMATURE_CLOSE";
                response.body.emit("error", err);
              }
            });
          });
        }
        req.on("response", function(res) {
          clearTimeout(reqTimeout);
          const headers = createHeadersLenient(res.headers);
          if (fetch.isRedirect(res.statusCode)) {
            const location = headers.get("Location");
            let locationURL = null;
            try {
              locationURL = location === null ? null : new URL$1(location, request.url).toString();
            } catch (err) {
              if (request.redirect !== "manual") {
                reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
                finalize();
                return;
              }
            }
            switch (request.redirect) {
              case "error":
                reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
                finalize();
                return;
              case "manual":
                if (locationURL !== null) {
                  try {
                    headers.set("Location", locationURL);
                  } catch (err) {
                    reject(err);
                  }
                }
                break;
              case "follow":
                if (locationURL === null) {
                  break;
                }
                if (request.counter >= request.follow) {
                  reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
                  finalize();
                  return;
                }
                const requestOpts = {
                  headers: new Headers(request.headers),
                  follow: request.follow,
                  counter: request.counter + 1,
                  agent: request.agent,
                  compress: request.compress,
                  method: request.method,
                  body: request.body,
                  signal: request.signal,
                  timeout: request.timeout,
                  size: request.size
                };
                if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
                  for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                    requestOpts.headers.delete(name);
                  }
                }
                if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                  reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                  finalize();
                  return;
                }
                if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
                  requestOpts.method = "GET";
                  requestOpts.body = void 0;
                  requestOpts.headers.delete("content-length");
                }
                resolve(fetch(new Request(locationURL, requestOpts)));
                finalize();
                return;
            }
          }
          res.once("end", function() {
            if (signal)
              signal.removeEventListener("abort", abortAndFinalize);
          });
          let body = res.pipe(new PassThrough$1());
          const response_options = {
            url: request.url,
            status: res.statusCode,
            statusText: res.statusMessage,
            headers,
            size: request.size,
            timeout: request.timeout,
            counter: request.counter
          };
          const codings = headers.get("Content-Encoding");
          if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          const zlibOptions = {
            flush: zlib.Z_SYNC_FLUSH,
            finishFlush: zlib.Z_SYNC_FLUSH
          };
          if (codings == "gzip" || codings == "x-gzip") {
            body = body.pipe(zlib.createGunzip(zlibOptions));
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          if (codings == "deflate" || codings == "x-deflate") {
            const raw = res.pipe(new PassThrough$1());
            raw.once("data", function(chunk) {
              if ((chunk[0] & 15) === 8) {
                body = body.pipe(zlib.createInflate());
              } else {
                body = body.pipe(zlib.createInflateRaw());
              }
              response = new Response(body, response_options);
              resolve(response);
            });
            raw.on("end", function() {
              if (!response) {
                response = new Response(body, response_options);
                resolve(response);
              }
            });
            return;
          }
          if (codings == "br" && typeof zlib.createBrotliDecompress === "function") {
            body = body.pipe(zlib.createBrotliDecompress());
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          response = new Response(body, response_options);
          resolve(response);
        });
        writeToStream(req, request);
      });
    }
    function fixResponseChunkedTransferBadEnding(request, errorCallback) {
      let socket;
      request.on("socket", function(s) {
        socket = s;
      });
      request.on("response", function(response) {
        const headers = response.headers;
        if (headers["transfer-encoding"] === "chunked" && !headers["content-length"]) {
          response.once("close", function(hadError) {
            const hasDataListener = socket && socket.listenerCount("data") > 0;
            if (hasDataListener && !hadError) {
              const err = new Error("Premature close");
              err.code = "ERR_STREAM_PREMATURE_CLOSE";
              errorCallback(err);
            }
          });
        }
      });
    }
    function destroyStream(stream, err) {
      if (stream.destroy) {
        stream.destroy(err);
      } else {
        stream.emit("error", err);
        stream.end();
      }
    }
    fetch.isRedirect = function(code) {
      return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
    };
    fetch.Promise = global.Promise;
    module2.exports = exports2 = fetch;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.default = exports2;
    exports2.Headers = Headers;
    exports2.Request = Request;
    exports2.Response = Response;
    exports2.FetchError = FetchError;
    exports2.AbortError = AbortError;
  }
});

// node_modules/event-target-shim/dist/event-target-shim.js
var require_event_target_shim = __commonJS({
  "node_modules/event-target-shim/dist/event-target-shim.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var privateData = /* @__PURE__ */ new WeakMap();
    var wrappers = /* @__PURE__ */ new WeakMap();
    function pd(event) {
      const retv = privateData.get(event);
      console.assert(
        retv != null,
        "'this' is expected an Event object, but got",
        event
      );
      return retv;
    }
    function setCancelFlag(data) {
      if (data.passiveListener != null) {
        if (typeof console !== "undefined" && typeof console.error === "function") {
          console.error(
            "Unable to preventDefault inside passive event listener invocation.",
            data.passiveListener
          );
        }
        return;
      }
      if (!data.event.cancelable) {
        return;
      }
      data.canceled = true;
      if (typeof data.event.preventDefault === "function") {
        data.event.preventDefault();
      }
    }
    function Event(eventTarget, event) {
      privateData.set(this, {
        eventTarget,
        event,
        eventPhase: 2,
        currentTarget: eventTarget,
        canceled: false,
        stopped: false,
        immediateStopped: false,
        passiveListener: null,
        timeStamp: event.timeStamp || Date.now()
      });
      Object.defineProperty(this, "isTrusted", { value: false, enumerable: true });
      const keys = Object.keys(event);
      for (let i = 0; i < keys.length; ++i) {
        const key = keys[i];
        if (!(key in this)) {
          Object.defineProperty(this, key, defineRedirectDescriptor(key));
        }
      }
    }
    Event.prototype = {
      /**
       * The type of this event.
       * @type {string}
       */
      get type() {
        return pd(this).event.type;
      },
      /**
       * The target of this event.
       * @type {EventTarget}
       */
      get target() {
        return pd(this).eventTarget;
      },
      /**
       * The target of this event.
       * @type {EventTarget}
       */
      get currentTarget() {
        return pd(this).currentTarget;
      },
      /**
       * @returns {EventTarget[]} The composed path of this event.
       */
      composedPath() {
        const currentTarget = pd(this).currentTarget;
        if (currentTarget == null) {
          return [];
        }
        return [currentTarget];
      },
      /**
       * Constant of NONE.
       * @type {number}
       */
      get NONE() {
        return 0;
      },
      /**
       * Constant of CAPTURING_PHASE.
       * @type {number}
       */
      get CAPTURING_PHASE() {
        return 1;
      },
      /**
       * Constant of AT_TARGET.
       * @type {number}
       */
      get AT_TARGET() {
        return 2;
      },
      /**
       * Constant of BUBBLING_PHASE.
       * @type {number}
       */
      get BUBBLING_PHASE() {
        return 3;
      },
      /**
       * The target of this event.
       * @type {number}
       */
      get eventPhase() {
        return pd(this).eventPhase;
      },
      /**
       * Stop event bubbling.
       * @returns {void}
       */
      stopPropagation() {
        const data = pd(this);
        data.stopped = true;
        if (typeof data.event.stopPropagation === "function") {
          data.event.stopPropagation();
        }
      },
      /**
       * Stop event bubbling.
       * @returns {void}
       */
      stopImmediatePropagation() {
        const data = pd(this);
        data.stopped = true;
        data.immediateStopped = true;
        if (typeof data.event.stopImmediatePropagation === "function") {
          data.event.stopImmediatePropagation();
        }
      },
      /**
       * The flag to be bubbling.
       * @type {boolean}
       */
      get bubbles() {
        return Boolean(pd(this).event.bubbles);
      },
      /**
       * The flag to be cancelable.
       * @type {boolean}
       */
      get cancelable() {
        return Boolean(pd(this).event.cancelable);
      },
      /**
       * Cancel this event.
       * @returns {void}
       */
      preventDefault() {
        setCancelFlag(pd(this));
      },
      /**
       * The flag to indicate cancellation state.
       * @type {boolean}
       */
      get defaultPrevented() {
        return pd(this).canceled;
      },
      /**
       * The flag to be composed.
       * @type {boolean}
       */
      get composed() {
        return Boolean(pd(this).event.composed);
      },
      /**
       * The unix time of this event.
       * @type {number}
       */
      get timeStamp() {
        return pd(this).timeStamp;
      },
      /**
       * The target of this event.
       * @type {EventTarget}
       * @deprecated
       */
      get srcElement() {
        return pd(this).eventTarget;
      },
      /**
       * The flag to stop event bubbling.
       * @type {boolean}
       * @deprecated
       */
      get cancelBubble() {
        return pd(this).stopped;
      },
      set cancelBubble(value) {
        if (!value) {
          return;
        }
        const data = pd(this);
        data.stopped = true;
        if (typeof data.event.cancelBubble === "boolean") {
          data.event.cancelBubble = true;
        }
      },
      /**
       * The flag to indicate cancellation state.
       * @type {boolean}
       * @deprecated
       */
      get returnValue() {
        return !pd(this).canceled;
      },
      set returnValue(value) {
        if (!value) {
          setCancelFlag(pd(this));
        }
      },
      /**
       * Initialize this event object. But do nothing under event dispatching.
       * @param {string} type The event type.
       * @param {boolean} [bubbles=false] The flag to be possible to bubble up.
       * @param {boolean} [cancelable=false] The flag to be possible to cancel.
       * @deprecated
       */
      initEvent() {
      }
    };
    Object.defineProperty(Event.prototype, "constructor", {
      value: Event,
      configurable: true,
      writable: true
    });
    if (typeof window !== "undefined" && typeof window.Event !== "undefined") {
      Object.setPrototypeOf(Event.prototype, window.Event.prototype);
      wrappers.set(window.Event.prototype, Event);
    }
    function defineRedirectDescriptor(key) {
      return {
        get() {
          return pd(this).event[key];
        },
        set(value) {
          pd(this).event[key] = value;
        },
        configurable: true,
        enumerable: true
      };
    }
    function defineCallDescriptor(key) {
      return {
        value() {
          const event = pd(this).event;
          return event[key].apply(event, arguments);
        },
        configurable: true,
        enumerable: true
      };
    }
    function defineWrapper(BaseEvent, proto) {
      const keys = Object.keys(proto);
      if (keys.length === 0) {
        return BaseEvent;
      }
      function CustomEvent(eventTarget, event) {
        BaseEvent.call(this, eventTarget, event);
      }
      CustomEvent.prototype = Object.create(BaseEvent.prototype, {
        constructor: { value: CustomEvent, configurable: true, writable: true }
      });
      for (let i = 0; i < keys.length; ++i) {
        const key = keys[i];
        if (!(key in BaseEvent.prototype)) {
          const descriptor = Object.getOwnPropertyDescriptor(proto, key);
          const isFunc = typeof descriptor.value === "function";
          Object.defineProperty(
            CustomEvent.prototype,
            key,
            isFunc ? defineCallDescriptor(key) : defineRedirectDescriptor(key)
          );
        }
      }
      return CustomEvent;
    }
    function getWrapper(proto) {
      if (proto == null || proto === Object.prototype) {
        return Event;
      }
      let wrapper = wrappers.get(proto);
      if (wrapper == null) {
        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);
        wrappers.set(proto, wrapper);
      }
      return wrapper;
    }
    function wrapEvent(eventTarget, event) {
      const Wrapper = getWrapper(Object.getPrototypeOf(event));
      return new Wrapper(eventTarget, event);
    }
    function isStopped(event) {
      return pd(event).immediateStopped;
    }
    function setEventPhase(event, eventPhase) {
      pd(event).eventPhase = eventPhase;
    }
    function setCurrentTarget(event, currentTarget) {
      pd(event).currentTarget = currentTarget;
    }
    function setPassiveListener(event, passiveListener) {
      pd(event).passiveListener = passiveListener;
    }
    var listenersMap = /* @__PURE__ */ new WeakMap();
    var CAPTURE = 1;
    var BUBBLE = 2;
    var ATTRIBUTE = 3;
    function isObject(x) {
      return x !== null && typeof x === "object";
    }
    function getListeners(eventTarget) {
      const listeners = listenersMap.get(eventTarget);
      if (listeners == null) {
        throw new TypeError(
          "'this' is expected an EventTarget object, but got another value."
        );
      }
      return listeners;
    }
    function defineEventAttributeDescriptor(eventName) {
      return {
        get() {
          const listeners = getListeners(this);
          let node = listeners.get(eventName);
          while (node != null) {
            if (node.listenerType === ATTRIBUTE) {
              return node.listener;
            }
            node = node.next;
          }
          return null;
        },
        set(listener) {
          if (typeof listener !== "function" && !isObject(listener)) {
            listener = null;
          }
          const listeners = getListeners(this);
          let prev = null;
          let node = listeners.get(eventName);
          while (node != null) {
            if (node.listenerType === ATTRIBUTE) {
              if (prev !== null) {
                prev.next = node.next;
              } else if (node.next !== null) {
                listeners.set(eventName, node.next);
              } else {
                listeners.delete(eventName);
              }
            } else {
              prev = node;
            }
            node = node.next;
          }
          if (listener !== null) {
            const newNode = {
              listener,
              listenerType: ATTRIBUTE,
              passive: false,
              once: false,
              next: null
            };
            if (prev === null) {
              listeners.set(eventName, newNode);
            } else {
              prev.next = newNode;
            }
          }
        },
        configurable: true,
        enumerable: true
      };
    }
    function defineEventAttribute(eventTargetPrototype, eventName) {
      Object.defineProperty(
        eventTargetPrototype,
        `on${eventName}`,
        defineEventAttributeDescriptor(eventName)
      );
    }
    function defineCustomEventTarget(eventNames) {
      function CustomEventTarget() {
        EventTarget.call(this);
      }
      CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
        constructor: {
          value: CustomEventTarget,
          configurable: true,
          writable: true
        }
      });
      for (let i = 0; i < eventNames.length; ++i) {
        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);
      }
      return CustomEventTarget;
    }
    function EventTarget() {
      if (this instanceof EventTarget) {
        listenersMap.set(this, /* @__PURE__ */ new Map());
        return;
      }
      if (arguments.length === 1 && Array.isArray(arguments[0])) {
        return defineCustomEventTarget(arguments[0]);
      }
      if (arguments.length > 0) {
        const types = new Array(arguments.length);
        for (let i = 0; i < arguments.length; ++i) {
          types[i] = arguments[i];
        }
        return defineCustomEventTarget(types);
      }
      throw new TypeError("Cannot call a class as a function");
    }
    EventTarget.prototype = {
      /**
       * Add a given listener to this event target.
       * @param {string} eventName The event name to add.
       * @param {Function} listener The listener to add.
       * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
       * @returns {void}
       */
      addEventListener(eventName, listener, options) {
        if (listener == null) {
          return;
        }
        if (typeof listener !== "function" && !isObject(listener)) {
          throw new TypeError("'listener' should be a function or an object.");
        }
        const listeners = getListeners(this);
        const optionsIsObj = isObject(options);
        const capture = optionsIsObj ? Boolean(options.capture) : Boolean(options);
        const listenerType = capture ? CAPTURE : BUBBLE;
        const newNode = {
          listener,
          listenerType,
          passive: optionsIsObj && Boolean(options.passive),
          once: optionsIsObj && Boolean(options.once),
          next: null
        };
        let node = listeners.get(eventName);
        if (node === void 0) {
          listeners.set(eventName, newNode);
          return;
        }
        let prev = null;
        while (node != null) {
          if (node.listener === listener && node.listenerType === listenerType) {
            return;
          }
          prev = node;
          node = node.next;
        }
        prev.next = newNode;
      },
      /**
       * Remove a given listener from this event target.
       * @param {string} eventName The event name to remove.
       * @param {Function} listener The listener to remove.
       * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.
       * @returns {void}
       */
      removeEventListener(eventName, listener, options) {
        if (listener == null) {
          return;
        }
        const listeners = getListeners(this);
        const capture = isObject(options) ? Boolean(options.capture) : Boolean(options);
        const listenerType = capture ? CAPTURE : BUBBLE;
        let prev = null;
        let node = listeners.get(eventName);
        while (node != null) {
          if (node.listener === listener && node.listenerType === listenerType) {
            if (prev !== null) {
              prev.next = node.next;
            } else if (node.next !== null) {
              listeners.set(eventName, node.next);
            } else {
              listeners.delete(eventName);
            }
            return;
          }
          prev = node;
          node = node.next;
        }
      },
      /**
       * Dispatch a given event.
       * @param {Event|{type:string}} event The event to dispatch.
       * @returns {boolean} `false` if canceled.
       */
      dispatchEvent(event) {
        if (event == null || typeof event.type !== "string") {
          throw new TypeError('"event.type" should be a string.');
        }
        const listeners = getListeners(this);
        const eventName = event.type;
        let node = listeners.get(eventName);
        if (node == null) {
          return true;
        }
        const wrappedEvent = wrapEvent(this, event);
        let prev = null;
        while (node != null) {
          if (node.once) {
            if (prev !== null) {
              prev.next = node.next;
            } else if (node.next !== null) {
              listeners.set(eventName, node.next);
            } else {
              listeners.delete(eventName);
            }
          } else {
            prev = node;
          }
          setPassiveListener(
            wrappedEvent,
            node.passive ? node.listener : null
          );
          if (typeof node.listener === "function") {
            try {
              node.listener.call(this, wrappedEvent);
            } catch (err) {
              if (typeof console !== "undefined" && typeof console.error === "function") {
                console.error(err);
              }
            }
          } else if (node.listenerType !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
            node.listener.handleEvent(wrappedEvent);
          }
          if (isStopped(wrappedEvent)) {
            break;
          }
          node = node.next;
        }
        setPassiveListener(wrappedEvent, null);
        setEventPhase(wrappedEvent, 0);
        setCurrentTarget(wrappedEvent, null);
        return !wrappedEvent.defaultPrevented;
      }
    };
    Object.defineProperty(EventTarget.prototype, "constructor", {
      value: EventTarget,
      configurable: true,
      writable: true
    });
    if (typeof window !== "undefined" && typeof window.EventTarget !== "undefined") {
      Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype);
    }
    exports2.defineEventAttribute = defineEventAttribute;
    exports2.EventTarget = EventTarget;
    exports2.default = EventTarget;
    module2.exports = EventTarget;
    module2.exports.EventTarget = module2.exports["default"] = EventTarget;
    module2.exports.defineEventAttribute = defineEventAttribute;
  }
});

// node_modules/abort-controller/dist/abort-controller.js
var require_abort_controller = __commonJS({
  "node_modules/abort-controller/dist/abort-controller.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var eventTargetShim = require_event_target_shim();
    var AbortSignal = class extends eventTargetShim.EventTarget {
      /**
       * AbortSignal cannot be constructed directly.
       */
      constructor() {
        super();
        throw new TypeError("AbortSignal cannot be constructed directly");
      }
      /**
       * Returns `true` if this `AbortSignal`'s `AbortController` has signaled to abort, and `false` otherwise.
       */
      get aborted() {
        const aborted = abortedFlags.get(this);
        if (typeof aborted !== "boolean") {
          throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? "null" : typeof this}`);
        }
        return aborted;
      }
    };
    eventTargetShim.defineEventAttribute(AbortSignal.prototype, "abort");
    function createAbortSignal() {
      const signal = Object.create(AbortSignal.prototype);
      eventTargetShim.EventTarget.call(signal);
      abortedFlags.set(signal, false);
      return signal;
    }
    function abortSignal(signal) {
      if (abortedFlags.get(signal) !== false) {
        return;
      }
      abortedFlags.set(signal, true);
      signal.dispatchEvent({ type: "abort" });
    }
    var abortedFlags = /* @__PURE__ */ new WeakMap();
    Object.defineProperties(AbortSignal.prototype, {
      aborted: { enumerable: true }
    });
    if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
      Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
        configurable: true,
        value: "AbortSignal"
      });
    }
    var AbortController2 = class {
      /**
       * Initialize this controller.
       */
      constructor() {
        signals.set(this, createAbortSignal());
      }
      /**
       * Returns the `AbortSignal` object associated with this object.
       */
      get signal() {
        return getSignal(this);
      }
      /**
       * Abort and signal to any observers that the associated activity is to be aborted.
       */
      abort() {
        abortSignal(getSignal(this));
      }
    };
    var signals = /* @__PURE__ */ new WeakMap();
    function getSignal(controller) {
      const signal = signals.get(controller);
      if (signal == null) {
        throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${controller === null ? "null" : typeof controller}`);
      }
      return signal;
    }
    Object.defineProperties(AbortController2.prototype, {
      signal: { enumerable: true },
      abort: { enumerable: true }
    });
    if (typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol") {
      Object.defineProperty(AbortController2.prototype, Symbol.toStringTag, {
        configurable: true,
        value: "AbortController"
      });
    }
    exports2.AbortController = AbortController2;
    exports2.AbortSignal = AbortSignal;
    exports2.default = AbortController2;
    module2.exports = AbortController2;
    module2.exports.AbortController = module2.exports["default"] = AbortController2;
    module2.exports.AbortSignal = AbortSignal;
  }
});

// node_modules/google-gax/build/src/streamArrayParser.js
var require_streamArrayParser = __commonJS({
  "node_modules/google-gax/build/src/streamArrayParser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StreamArrayParser = void 0;
    var abort_controller_1 = require_abort_controller();
    var stream_1 = require("stream");
    var fallbackRest_1 = require_fallbackRest();
    var featureDetection_1 = require_featureDetection();
    var StreamArrayParser = class extends stream_1.Transform {
      /**
       * StreamArrayParser processes array of valid JSON objects in random chunks
       * through readable stream, and produces a stream of plain Javascript objects
       * where it converted from the corresponding protobuf message instance.
       *
       * The default JSON parser decodes the input stream under the
       * following rules:
       *  1. The stream represents a valid JSON array (must start with a "[" and
       * close with the corresponding "]"). Each element of this array is assumed to
       * be either an array or an object, and will be decoded as a JS object and
       *    delivered.
       *  2. All JSON elements in the buffer will be decoded and delivered in a
       * stream.
       *
       * @private
       * @constructor
       * @param {protobuf.Method} rpc - the protobuf method produce array of JSON.
       * @param {Object} options - the options pass to Transform Stream. See more
       * details
       * https://nodejs.org/api/stream.html#stream_new_stream_transform_options.
       */
      constructor(rpc, options) {
        super(Object.assign({}, options, { readableObjectMode: true }));
        this._done = false;
        this._prevBlock = Buffer.from("");
        this._isInString = false;
        this._isSkipped = false;
        this._level = 0;
        this.rpc = rpc;
        this.cancelController = (0, featureDetection_1.hasAbortController)() ? new AbortController() : new abort_controller_1.AbortController();
        this.cancelSignal = this.cancelController.signal;
        this.cancelRequested = false;
      }
      _transform(chunk, _, callback) {
        let objectStart = 0;
        let curIndex = 0;
        if (this._level === 0 && curIndex === 0) {
          if (String.fromCharCode(chunk[0]) !== "[") {
            this.emit("error", new Error(`Internal Error: API service stream data must start with a '[' and close with the corresponding ']', but it start with ${String.fromCharCode(chunk[0])}`));
          }
          curIndex++;
          this._level++;
        }
        while (curIndex < chunk.length) {
          const curValue = String.fromCharCode(chunk[curIndex]);
          if (!this._isSkipped) {
            switch (curValue) {
              case "{":
                if (!this._isInString) {
                  this._level++;
                }
                if (!this._isInString && this._level === 2) {
                  objectStart = curIndex;
                }
                break;
              case '"':
                this._isInString = !this._isInString;
                break;
              case "}":
                if (!this._isInString) {
                  this._level--;
                }
                if (!this._isInString && this._level === 1) {
                  const objBuff = Buffer.concat([
                    this._prevBlock,
                    chunk.slice(objectStart, curIndex + 1)
                  ]);
                  try {
                    const msgObj = (0, fallbackRest_1.decodeResponse)(this.rpc, true, objBuff);
                    this.push(msgObj);
                  } catch (err) {
                    this.emit("error", err);
                  }
                  objectStart = curIndex + 1;
                  this._prevBlock = Buffer.from("");
                }
                break;
              case "]":
                if (!this._isInString && this._level === 1) {
                  this._done = true;
                  this.push(null);
                }
                break;
              case "\\":
                this._isSkipped = true;
                break;
              default:
                break;
            }
          } else {
            this._isSkipped = false;
          }
          curIndex++;
        }
        if (this._level > 1) {
          this._prevBlock = Buffer.concat([
            this._prevBlock,
            chunk.slice(objectStart, curIndex)
          ]);
        }
        callback();
      }
      _flush(callback) {
        callback();
      }
      cancel() {
        this._done = true;
        this.cancelRequested = true;
        this.cancelController.abort();
        this.end();
      }
    };
    exports2.StreamArrayParser = StreamArrayParser;
  }
});

// node_modules/google-gax/build/src/fallbackServiceStub.js
var require_fallbackServiceStub = __commonJS({
  "node_modules/google-gax/build/src/fallbackServiceStub.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.generateServiceStub = void 0;
    var node_fetch_1 = require_lib3();
    var abort_controller_1 = require_abort_controller();
    var featureDetection_1 = require_featureDetection();
    var streamArrayParser_1 = require_streamArrayParser();
    var stream_1 = require("stream");
    function generateServiceStub(rpcs, protocol, servicePath, servicePort, authClient, requestEncoder, responseDecoder, numericEnums) {
      const fetch = (0, featureDetection_1.hasWindowFetch)() ? window.fetch : node_fetch_1.default;
      const serviceStub = {
        // close method should close all cancel controllers. If this feature request in the future, we can have a cancelControllerFactory that tracks created cancel controllers, and abort them all in close method.
        close: () => {
          return { cancel: () => {
          } };
        }
      };
      for (const [rpcName, rpc] of Object.entries(rpcs)) {
        serviceStub[rpcName] = (request, options, _metadata, callback) => {
          options !== null && options !== void 0 ? options : options = {};
          let fetchParameters;
          try {
            fetchParameters = requestEncoder(rpc, protocol, servicePath, servicePort, request, numericEnums);
          } catch (err) {
            if (callback) {
              callback(err);
            }
            return {
              cancel() {
              }
            };
          }
          const cancelController = (0, featureDetection_1.hasAbortController)() ? new AbortController() : new abort_controller_1.AbortController();
          const cancelSignal = cancelController.signal;
          let cancelRequested = false;
          const url = fetchParameters.url;
          const headers = fetchParameters.headers;
          for (const key of Object.keys(options)) {
            headers[key] = options[key][0];
          }
          const streamArrayParser = new streamArrayParser_1.StreamArrayParser(rpc);
          authClient.getRequestHeaders().then((authHeader) => {
            const fetchRequest = {
              headers: {
                ...authHeader,
                ...headers
              },
              body: fetchParameters.body,
              method: fetchParameters.method,
              signal: cancelSignal
            };
            if (fetchParameters.method === "GET" || fetchParameters.method === "DELETE") {
              delete fetchRequest["body"];
            }
            return fetch(url, fetchRequest);
          }).then((response) => {
            if (response.ok && rpc.responseStream) {
              (0, stream_1.pipeline)(response.body, streamArrayParser, (err) => {
                if (err && (!cancelRequested || err instanceof Error && err.name !== "AbortError")) {
                  if (callback) {
                    callback(err);
                  }
                  streamArrayParser.emit("error", err);
                }
              });
              return;
            } else {
              return Promise.all([
                Promise.resolve(response.ok),
                response.arrayBuffer()
              ]).then(([ok, buffer]) => {
                const response2 = responseDecoder(rpc, ok, buffer);
                callback(null, response2);
              }).catch((err) => {
                if (!cancelRequested || err.name !== "AbortError") {
                  if (rpc.responseStream) {
                    if (callback) {
                      callback(err);
                    }
                    streamArrayParser.emit("error", err);
                  } else if (callback) {
                    callback(err);
                  } else {
                    throw err;
                  }
                }
              });
            }
          }).catch((err) => {
            if (rpc.responseStream) {
              if (callback) {
                callback(err);
              }
              streamArrayParser.emit("error", err);
            } else if (callback) {
              callback(err);
            } else {
              throw err;
            }
          });
          if (rpc.responseStream) {
            return streamArrayParser;
          }
          return {
            cancel: () => {
              cancelRequested = true;
              cancelController.abort();
            }
          };
        };
      }
      return serviceStub;
    }
    exports2.generateServiceStub = generateServiceStub;
  }
});

// node_modules/readable-stream/lib/internal/streams/stream.js
var require_stream = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/stream.js"(exports2, module2) {
    module2.exports = require("stream");
  }
});

// node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports2, module2) {
    "use strict";
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var _require = require("buffer");
    var Buffer2 = _require.Buffer;
    var _require2 = require("util");
    var inspect = _require2.inspect;
    var custom = inspect && inspect.custom || "inspect";
    function copyBuffer(src, target, offset) {
      Buffer2.prototype.copy.call(src, target, offset);
    }
    module2.exports = /* @__PURE__ */ function() {
      function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      _createClass(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0)
            this.tail.next = entry;
          else
            this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0)
            this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0)
            return;
          var ret = this.head.data;
          if (this.length === 1)
            this.head = this.tail = null;
          else
            this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0)
            return "";
          var p = this.head;
          var ret = "" + p.data;
          while (p = p.next)
            ret += s + p.data;
          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0)
            return Buffer2.alloc(0);
          var ret = Buffer2.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;
          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }
          return ret;
        }
        // Consumes a specified amount of bytes or characters from the buffered data.
      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;
          if (n < this.head.data.length) {
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            ret = this.shift();
          } else {
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }
          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        }
        // Consumes a specified amount of characters from the buffered data.
      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;
          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length)
              ret += str;
            else
              ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
        // Consumes a specified amount of bytes from the buffered data.
      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer2.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;
          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next)
                  this.head = p.next;
                else
                  this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }
              break;
            }
            ++c;
          }
          this.length -= c;
          return ret;
        }
        // Make sure the linked list only shows the minimal necessary information.
      }, {
        key: custom,
        value: function value(_, options) {
          return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);
      return BufferList;
    }();
  }
});

// node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/destroy.js"(exports2, module2) {
    "use strict";
    function destroy(err, cb) {
      var _this = this;
      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;
      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }
        return this;
      }
      if (this._readableState) {
        this._readableState.destroyed = true;
      }
      if (this._writableState) {
        this._writableState.destroyed = true;
      }
      this._destroy(err || null, function(err2) {
        if (!cb && err2) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err2);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err2);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });
      return this;
    }
    function emitErrorAndCloseNT(self2, err) {
      emitErrorNT(self2, err);
      emitCloseNT(self2);
    }
    function emitCloseNT(self2) {
      if (self2._writableState && !self2._writableState.emitClose)
        return;
      if (self2._readableState && !self2._readableState.emitClose)
        return;
      self2.emit("close");
    }
    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }
      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }
    function emitErrorNT(self2, err) {
      self2.emit("error", err);
    }
    function errorOrDestroy(stream, err) {
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy)
        stream.destroy(err);
      else
        stream.emit("error", err);
    }
    module2.exports = {
      destroy,
      undestroy,
      errorOrDestroy
    };
  }
});

// node_modules/readable-stream/errors.js
var require_errors = __commonJS({
  "node_modules/readable-stream/errors.js"(exports2, module2) {
    "use strict";
    var codes = {};
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      class NodeError extends Base {
        constructor(arg1, arg2, arg3) {
          super(getMessage(arg1, arg2, arg3));
        }
      }
      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        const len = expected.length;
        expected = expected.map((i) => String(i));
        if (len > 2) {
          return `one of ${thing} ${expected.slice(0, len - 1).join(", ")}, or ` + expected[len - 1];
        } else if (len === 2) {
          return `one of ${thing} ${expected[0]} or ${expected[1]}`;
        } else {
          return `of ${thing} ${expected[0]}`;
        }
      } else {
        return `of ${thing} ${String(expected)}`;
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"';
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      let determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      let msg;
      if (endsWith(name, " argument")) {
        msg = `The ${name} ${determiner} ${oneOf(expected, "type")}`;
      } else {
        const type = includes(name, ".") ? "property" : "argument";
        msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, "type")}`;
      }
      msg += `. Received type ${typeof actual}`;
      return msg;
    }, TypeError);
    createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
      return "The " + name + " method is not implemented";
    });
    createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    createErrorType("ERR_STREAM_DESTROYED", function(name) {
      return "Cannot call " + name + " after a stream was destroyed";
    });
    createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
    createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
      return "Unknown encoding: " + arg;
    }, TypeError);
    createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    module2.exports.codes = codes;
  }
});

// node_modules/readable-stream/lib/internal/streams/state.js
var require_state = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/state.js"(exports2, module2) {
    "use strict";
    var ERR_INVALID_OPT_VALUE = require_errors().codes.ERR_INVALID_OPT_VALUE;
    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }
    function getHighWaterMark(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : "highWaterMark";
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
      }
      return state.objectMode ? 16 : 16 * 1024;
    }
    module2.exports = {
      getHighWaterMark
    };
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports2, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/inherits/inherits.js
var require_inherits = __commonJS({
  "node_modules/inherits/inherits.js"(exports2, module2) {
    try {
      util = require("util");
      if (typeof util.inherits !== "function")
        throw "";
      module2.exports = util.inherits;
    } catch (e) {
      module2.exports = require_inherits_browser();
    }
    var util;
  }
});

// node_modules/util-deprecate/node.js
var require_node2 = __commonJS({
  "node_modules/util-deprecate/node.js"(exports2, module2) {
    module2.exports = require("util").deprecate;
  }
});

// node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS({
  "node_modules/readable-stream/lib/_stream_writable.js"(exports2, module2) {
    "use strict";
    module2.exports = Writable;
    function CorkedRequest(state) {
      var _this = this;
      this.next = null;
      this.entry = null;
      this.finish = function() {
        onCorkedFinish(_this, state);
      };
    }
    var Duplex;
    Writable.WritableState = WritableState;
    var internalUtil = {
      deprecate: require_node2()
    };
    var Stream = require_stream();
    var Buffer2 = require("buffer").Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
    var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
    var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    require_inherits()(Writable, Stream);
    function nop() {
    }
    function WritableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.writableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
      this.finalCalled = false;
      this.needDrain = false;
      this.ending = false;
      this.ended = false;
      this.finished = false;
      this.destroyed = false;
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.length = 0;
      this.writing = false;
      this.corked = 0;
      this.sync = true;
      this.bufferProcessing = false;
      this.onwrite = function(er) {
        onwrite(stream, er);
      };
      this.writecb = null;
      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null;
      this.pendingcb = 0;
      this.prefinished = false;
      this.errorEmitted = false;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.bufferedRequestCount = 0;
      this.corkedRequestsFree = new CorkedRequest(this);
    }
    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    (function() {
      try {
        Object.defineProperty(WritableState.prototype, "buffer", {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
      } catch (_) {
      }
    })();
    var realHasInstance;
    if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object))
            return true;
          if (this !== Writable)
            return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance2(object) {
        return object instanceof this;
      };
    }
    function Writable(options) {
      Duplex = Duplex || require_stream_duplex();
      var isDuplex = this instanceof Duplex;
      if (!isDuplex && !realHasInstance.call(Writable, this))
        return new Writable(options);
      this._writableState = new WritableState(options, this, isDuplex);
      this.writable = true;
      if (options) {
        if (typeof options.write === "function")
          this._write = options.write;
        if (typeof options.writev === "function")
          this._writev = options.writev;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
        if (typeof options.final === "function")
          this._final = options.final;
      }
      Stream.call(this);
    }
    Writable.prototype.pipe = function() {
      errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
    };
    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END();
      errorOrDestroy(stream, er);
      process.nextTick(cb, er);
    }
    function validChunk(stream, state, chunk, cb) {
      var er;
      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== "string" && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
      }
      if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
      }
      return true;
    }
    Writable.prototype.write = function(chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;
      var isBuf = !state.objectMode && _isUint8Array(chunk);
      if (isBuf && !Buffer2.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (isBuf)
        encoding = "buffer";
      else if (!encoding)
        encoding = state.defaultEncoding;
      if (typeof cb !== "function")
        cb = nop;
      if (state.ending)
        writeAfterEnd(this, cb);
      else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };
    Writable.prototype.cork = function() {
      this._writableState.corked++;
    };
    Writable.prototype.uncork = function() {
      var state = this._writableState;
      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
          clearBuffer(this, state);
      }
    };
    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      if (typeof encoding === "string")
        encoding = encoding.toLowerCase();
      if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
        throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
        chunk = Buffer2.from(chunk, encoding);
      }
      return chunk;
    }
    Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
          isBuf = true;
          encoding = "buffer";
          chunk = newChunk;
        }
      }
      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark;
      if (!ret)
        state.needDrain = true;
      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk,
          encoding,
          isBuf,
          callback: cb,
          next: null
        };
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }
      return ret;
    }
    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed)
        state.onwrite(new ERR_STREAM_DESTROYED("write"));
      else if (writev)
        stream._writev(chunk, state.onwrite);
      else
        stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }
    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) {
        process.nextTick(cb, er);
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
      } else {
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        finishMaybe(stream, state);
      }
    }
    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }
    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== "function")
        throw new ERR_MULTIPLE_CALLBACK();
      onwriteStateUpdate(state);
      if (er)
        onwriteError(stream, state, sync, er, cb);
      else {
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }
        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }
    function afterWrite(stream, state, finished, cb) {
      if (!finished)
        onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
      }
    }
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;
      if (stream._writev && entry && entry.next) {
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf)
            allBuffers = false;
          entry = entry.next;
          count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
        state.bufferedRequestCount = 0;
      } else {
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--;
          if (state.writing) {
            break;
          }
        }
        if (entry === null)
          state.lastBufferedRequest = null;
      }
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }
    Writable.prototype._write = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
    };
    Writable.prototype._writev = null;
    Writable.prototype.end = function(chunk, encoding, cb) {
      var state = this._writableState;
      if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
      }
      if (chunk !== null && chunk !== void 0)
        this.write(chunk, encoding);
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }
      if (!state.ending)
        endWritable(this, state, cb);
      return this;
    };
    Object.defineProperty(Writable.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }
    function callFinal(stream, state) {
      stream._final(function(err) {
        state.pendingcb--;
        if (err) {
          errorOrDestroy(stream, err);
        }
        state.prefinished = true;
        stream.emit("prefinish");
        finishMaybe(stream, state);
      });
    }
    function prefinish(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit("prefinish");
        }
      }
    }
    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit("finish");
          if (state.autoDestroy) {
            var rState = stream._readableState;
            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }
      return need;
    }
    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished)
          process.nextTick(cb);
        else
          stream.once("finish", cb);
      }
      state.ended = true;
      stream.writable = false;
    }
    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      state.corkedRequestsFree.next = corkReq;
    }
    Object.defineProperty(Writable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._writableState === void 0) {
          return false;
        }
        return this._writableState.destroyed;
      },
      set: function set(value) {
        if (!this._writableState) {
          return;
        }
        this._writableState.destroyed = value;
      }
    });
    Writable.prototype.destroy = destroyImpl.destroy;
    Writable.prototype._undestroy = destroyImpl.undestroy;
    Writable.prototype._destroy = function(err, cb) {
      cb(err);
    };
  }
});

// node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS({
  "node_modules/readable-stream/lib/_stream_duplex.js"(exports2, module2) {
    "use strict";
    var objectKeys = Object.keys || function(obj) {
      var keys2 = [];
      for (var key in obj)
        keys2.push(key);
      return keys2;
    };
    module2.exports = Duplex;
    var Readable = require_stream_readable();
    var Writable = require_stream_writable();
    require_inherits()(Duplex, Readable);
    {
      keys = objectKeys(Writable.prototype);
      for (v = 0; v < keys.length; v++) {
        method = keys[v];
        if (!Duplex.prototype[method])
          Duplex.prototype[method] = Writable.prototype[method];
      }
    }
    var keys;
    var method;
    var v;
    function Duplex(options) {
      if (!(this instanceof Duplex))
        return new Duplex(options);
      Readable.call(this, options);
      Writable.call(this, options);
      this.allowHalfOpen = true;
      if (options) {
        if (options.readable === false)
          this.readable = false;
        if (options.writable === false)
          this.writable = false;
        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once("end", onend);
        }
      }
    }
    Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex.prototype, "writableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex.prototype, "writableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });
    function onend() {
      if (this._writableState.ended)
        return;
      process.nextTick(onEndNT, this);
    }
    function onEndNT(self2) {
      self2.end();
    }
    Object.defineProperty(Duplex.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return false;
        }
        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        if (this._readableState === void 0 || this._writableState === void 0) {
          return;
        }
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });
  }
});

// node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder = __commonJS({
  "node_modules/string_decoder/lib/string_decoder.js"(exports2) {
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var isEncoding = Buffer2.isEncoding || function(encoding) {
      encoding = "" + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return true;
        default:
          return false;
      }
    };
    function _normalizeEncoding(enc) {
      if (!enc)
        return "utf8";
      var retried;
      while (true) {
        switch (enc) {
          case "utf8":
          case "utf-8":
            return "utf8";
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return "utf16le";
          case "latin1":
          case "binary":
            return "latin1";
          case "base64":
          case "ascii":
          case "hex":
            return enc;
          default:
            if (retried)
              return;
            enc = ("" + enc).toLowerCase();
            retried = true;
        }
      }
    }
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
        throw new Error("Unknown encoding: " + enc);
      return nenc || enc;
    }
    exports2.StringDecoder = StringDecoder;
    function StringDecoder(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case "utf16le":
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case "utf8":
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case "base64":
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer2.allocUnsafe(nb);
    }
    StringDecoder.prototype.write = function(buf) {
      if (buf.length === 0)
        return "";
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === void 0)
          return "";
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length)
        return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || "";
    };
    StringDecoder.prototype.end = utf8End;
    StringDecoder.prototype.text = utf8Text;
    StringDecoder.prototype.fillLast = function(buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };
    function utf8CheckByte(byte) {
      if (byte <= 127)
        return 0;
      else if (byte >> 5 === 6)
        return 2;
      else if (byte >> 4 === 14)
        return 3;
      else if (byte >> 3 === 30)
        return 4;
      return byte >> 6 === 2 ? -1 : -2;
    }
    function utf8CheckIncomplete(self2, buf, i) {
      var j = buf.length - 1;
      if (j < i)
        return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0)
          self2.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2)
        return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2)
            nb = 0;
          else
            self2.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }
    function utf8CheckExtraBytes(self2, buf, p) {
      if ((buf[0] & 192) !== 128) {
        self2.lastNeed = 0;
        return "\uFFFD";
      }
      if (self2.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
          self2.lastNeed = 1;
          return "\uFFFD";
        }
        if (self2.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 192) !== 128) {
            self2.lastNeed = 2;
            return "\uFFFD";
          }
        }
      }
    }
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf, p);
      if (r !== void 0)
        return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed)
        return buf.toString("utf8", i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString("utf8", i, end);
    }
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + "\uFFFD";
      return r;
    }
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 55296 && c <= 56319) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString("utf16le", i, buf.length - 1);
    }
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
      }
      return r;
    }
    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0)
        return buf.toString("base64", i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString("base64", i, buf.length - n);
    }
    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : "";
      if (this.lastNeed)
        return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
      return r;
    }
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }
    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : "";
    }
  }
});

// node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports2, module2) {
    "use strict";
    var ERR_STREAM_PREMATURE_CLOSE = require_errors().codes.ERR_STREAM_PREMATURE_CLOSE;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        callback.apply(this, args);
      };
    }
    function noop() {
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function eos(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var onlegacyfinish = function onlegacyfinish2() {
        if (!stream.writable)
          onfinish();
      };
      var writableEnded = stream._writableState && stream._writableState.finished;
      var onfinish = function onfinish2() {
        writable = false;
        writableEnded = true;
        if (!readable)
          callback.call(stream);
      };
      var readableEnded = stream._readableState && stream._readableState.endEmitted;
      var onend = function onend2() {
        readable = false;
        readableEnded = true;
        if (!writable)
          callback.call(stream);
      };
      var onerror = function onerror2(err) {
        callback.call(stream, err);
      };
      var onclose = function onclose2() {
        var err;
        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended)
            err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };
      var onrequest = function onrequest2() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !stream._writableState) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    }
    module2.exports = eos;
  }
});

// node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports2, module2) {
    "use strict";
    var _Object$setPrototypeO;
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var finished = require_end_of_stream();
    var kLastResolve = Symbol("lastResolve");
    var kLastReject = Symbol("lastReject");
    var kError = Symbol("error");
    var kEnded = Symbol("ended");
    var kLastPromise = Symbol("lastPromise");
    var kHandlePromise = Symbol("handlePromise");
    var kStream = Symbol("stream");
    function createIterResult(value, done) {
      return {
        value,
        done
      };
    }
    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];
      if (resolve !== null) {
        var data = iter[kStream].read();
        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }
    function onReadable(iter) {
      process.nextTick(readAndResolve, iter);
    }
    function wrapForNext(lastPromise, iter) {
      return function(resolve, reject) {
        lastPromise.then(function() {
          if (iter[kEnded]) {
            resolve(createIterResult(void 0, true));
            return;
          }
          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }
    var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
    });
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },
      next: function next() {
        var _this = this;
        var error = this[kError];
        if (error !== null) {
          return Promise.reject(error);
        }
        if (this[kEnded]) {
          return Promise.resolve(createIterResult(void 0, true));
        }
        if (this[kStream].destroyed) {
          return new Promise(function(resolve, reject) {
            process.nextTick(function() {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(void 0, true));
              }
            });
          });
        }
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          var data = this[kStream].read();
          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }
          promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
      return this;
    }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;
      return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
          if (err) {
            reject(err);
            return;
          }
          resolve(createIterResult(void 0, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);
    var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
      var _Object$create;
      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();
          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
          var reject = iterator[kLastReject];
          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }
          iterator[kError] = err;
          return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(void 0, true));
        }
        iterator[kEnded] = true;
      });
      stream.on("readable", onReadable.bind(null, iterator));
      return iterator;
    };
    module2.exports = createReadableStreamAsyncIterator;
  }
});

// node_modules/readable-stream/lib/internal/streams/from.js
var require_from = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/from.js"(exports2, module2) {
    "use strict";
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self2 = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self2, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
      return target;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return typeof key === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (typeof input !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    var ERR_INVALID_ARG_TYPE = require_errors().codes.ERR_INVALID_ARG_TYPE;
    function from(Readable, iterable, opts) {
      var iterator;
      if (iterable && typeof iterable.next === "function") {
        iterator = iterable;
      } else if (iterable && iterable[Symbol.asyncIterator])
        iterator = iterable[Symbol.asyncIterator]();
      else if (iterable && iterable[Symbol.iterator])
        iterator = iterable[Symbol.iterator]();
      else
        throw new ERR_INVALID_ARG_TYPE("iterable", ["Iterable"], iterable);
      var readable = new Readable(_objectSpread({
        objectMode: true
      }, opts));
      var reading = false;
      readable._read = function() {
        if (!reading) {
          reading = true;
          next();
        }
      };
      function next() {
        return _next2.apply(this, arguments);
      }
      function _next2() {
        _next2 = _asyncToGenerator(function* () {
          try {
            var _yield$iterator$next = yield iterator.next(), value = _yield$iterator$next.value, done = _yield$iterator$next.done;
            if (done) {
              readable.push(null);
            } else if (readable.push(yield value)) {
              next();
            } else {
              reading = false;
            }
          } catch (err) {
            readable.destroy(err);
          }
        });
        return _next2.apply(this, arguments);
      }
      return readable;
    }
    module2.exports = from;
  }
});

// node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS({
  "node_modules/readable-stream/lib/_stream_readable.js"(exports2, module2) {
    "use strict";
    module2.exports = Readable;
    var Duplex;
    Readable.ReadableState = ReadableState;
    var EE = require("events").EventEmitter;
    var EElistenerCount = function EElistenerCount2(emitter, type) {
      return emitter.listeners(type).length;
    };
    var Stream = require_stream();
    var Buffer2 = require("buffer").Buffer;
    var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {
    };
    function _uint8ArrayToBuffer(chunk) {
      return Buffer2.from(chunk);
    }
    function _isUint8Array(obj) {
      return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    var debugUtil = require("util");
    var debug;
    if (debugUtil && debugUtil.debuglog) {
      debug = debugUtil.debuglog("stream");
    } else {
      debug = function debug2() {
      };
    }
    var BufferList = require_buffer_list();
    var destroyImpl = require_destroy();
    var _require = require_state();
    var getHighWaterMark = _require.getHighWaterMark;
    var _require$codes = require_errors().codes;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
    var StringDecoder;
    var createReadableStreamAsyncIterator;
    var from;
    require_inherits()(Readable, Stream);
    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
    function prependListener(emitter, event, fn) {
      if (typeof emitter.prependListener === "function")
        return emitter.prependListener(event, fn);
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
    function ReadableState(options, stream, isDuplex) {
      Duplex = Duplex || require_stream_duplex();
      options = options || {};
      if (typeof isDuplex !== "boolean")
        isDuplex = stream instanceof Duplex;
      this.objectMode = !!options.objectMode;
      if (isDuplex)
        this.objectMode = this.objectMode || !!options.readableObjectMode;
      this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;
      this.sync = true;
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true;
      this.emitClose = options.emitClose !== false;
      this.autoDestroy = !!options.autoDestroy;
      this.destroyed = false;
      this.defaultEncoding = options.defaultEncoding || "utf8";
      this.awaitDrain = 0;
      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        if (!StringDecoder)
          StringDecoder = require_string_decoder().StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {
      Duplex = Duplex || require_stream_duplex();
      if (!(this instanceof Readable))
        return new Readable(options);
      var isDuplex = this instanceof Duplex;
      this._readableState = new ReadableState(options, this, isDuplex);
      this.readable = true;
      if (options) {
        if (typeof options.read === "function")
          this._read = options.read;
        if (typeof options.destroy === "function")
          this._destroy = options.destroy;
      }
      Stream.call(this);
    }
    Object.defineProperty(Readable.prototype, "destroyed", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === void 0) {
          return false;
        }
        return this._readableState.destroyed;
      },
      set: function set(value) {
        if (!this._readableState) {
          return;
        }
        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;
    Readable.prototype._destroy = function(err, cb) {
      cb(err);
    };
    Readable.prototype.push = function(chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;
      if (!state.objectMode) {
        if (typeof chunk === "string") {
          encoding = encoding || state.defaultEncoding;
          if (encoding !== state.encoding) {
            chunk = Buffer2.from(chunk, encoding);
            encoding = "";
          }
          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }
      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    };
    Readable.prototype.unshift = function(chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };
    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug("readableAddChunk", chunk);
      var state = stream._readableState;
      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck)
          er = chunkInvalid(state, chunk);
        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }
          if (addToFront) {
            if (state.endEmitted)
              errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
            else
              addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;
            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0)
                addChunk(stream, state, chunk, false);
              else
                maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      }
      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }
    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
      } else {
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);
        if (state.needReadable)
          emitReadable(stream);
      }
      maybeReadMore(stream, state);
    }
    function chunkInvalid(state, chunk) {
      var er;
      if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
      }
      return er;
    }
    Readable.prototype.isPaused = function() {
      return this._readableState.flowing === false;
    };
    Readable.prototype.setEncoding = function(enc) {
      if (!StringDecoder)
        StringDecoder = require_string_decoder().StringDecoder;
      var decoder = new StringDecoder(enc);
      this._readableState.decoder = decoder;
      this._readableState.encoding = this._readableState.decoder.encoding;
      var p = this._readableState.buffer.head;
      var content = "";
      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }
      this._readableState.buffer.clear();
      if (content !== "")
        this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    };
    var MAX_HWM = 1073741824;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended)
        return 0;
      if (state.objectMode)
        return 1;
      if (n !== n) {
        if (state.flowing && state.length)
          return state.buffer.head.data.length;
        else
          return state.length;
      }
      if (n > state.highWaterMark)
        state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length)
        return n;
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }
    Readable.prototype.read = function(n) {
      debug("read", n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0)
        state.emittedReadable = false;
      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended)
          endReadable(this);
        else
          emitReadable(this);
        return null;
      }
      n = howMuchToRead(n, state);
      if (n === 0 && state.ended) {
        if (state.length === 0)
          endReadable(this);
        return null;
      }
      var doRead = state.needReadable;
      debug("need readable", doRead);
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug("length less than watermark", doRead);
      }
      if (state.ended || state.reading) {
        doRead = false;
        debug("reading or ended", doRead);
      } else if (doRead) {
        debug("do read");
        state.reading = true;
        state.sync = true;
        if (state.length === 0)
          state.needReadable = true;
        this._read(state.highWaterMark);
        state.sync = false;
        if (!state.reading)
          n = howMuchToRead(nOrig, state);
      }
      var ret;
      if (n > 0)
        ret = fromList(n, state);
      else
        ret = null;
      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }
      if (state.length === 0) {
        if (!state.ended)
          state.needReadable = true;
        if (nOrig !== n && state.ended)
          endReadable(this);
      }
      if (ret !== null)
        this.emit("data", ret);
      return ret;
    };
    function onEofChunk(stream, state) {
      debug("onEofChunk");
      if (state.ended)
        return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;
      if (state.sync) {
        emitReadable(stream);
      } else {
        state.needReadable = false;
        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    }
    function emitReadable(stream) {
      var state = stream._readableState;
      debug("emitReadable", state.needReadable, state.emittedReadable);
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }
    function emitReadable_(stream) {
      var state = stream._readableState;
      debug("emitReadable_", state.destroyed, state.length, state.ended);
      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
      }
      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    }
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }
    function maybeReadMore_(stream, state) {
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length)
          break;
      }
      state.readingMore = false;
    }
    Readable.prototype._read = function(n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
    };
    Readable.prototype.pipe = function(dest, pipeOpts) {
      var src = this;
      var state = this._readableState;
      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted)
        process.nextTick(endFn);
      else
        src.once("end", endFn);
      dest.on("unpipe", onunpipe);
      function onunpipe(readable, unpipeInfo) {
        debug("onunpipe");
        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }
      function onend() {
        debug("onend");
        dest.end();
      }
      var ondrain = pipeOnDrain(src);
      dest.on("drain", ondrain);
      var cleanedUp = false;
      function cleanup() {
        debug("cleanup");
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
          ondrain();
      }
      src.on("data", ondata);
      function ondata(chunk) {
        debug("ondata");
        var ret = dest.write(chunk);
        debug("dest.write", ret);
        if (ret === false) {
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug("false write response, pause", state.awaitDrain);
            state.awaitDrain++;
          }
          src.pause();
        }
      }
      function onerror(er) {
        debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if (EElistenerCount(dest, "error") === 0)
          errorOrDestroy(dest, er);
      }
      prependListener(dest, "error", onerror);
      function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
      }
      dest.once("close", onclose);
      function onfinish() {
        debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
      }
      dest.once("finish", onfinish);
      function unpipe() {
        debug("unpipe");
        src.unpipe(dest);
      }
      dest.emit("pipe", src);
      if (!state.flowing) {
        debug("pipe resume");
        src.resume();
      }
      return dest;
    };
    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain)
          state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
          state.flowing = true;
          flow(src);
        }
      };
    }
    Readable.prototype.unpipe = function(dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      };
      if (state.pipesCount === 0)
        return this;
      if (state.pipesCount === 1) {
        if (dest && dest !== state.pipes)
          return this;
        if (!dest)
          dest = state.pipes;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest)
          dest.emit("unpipe", this, unpipeInfo);
        return this;
      }
      if (!dest) {
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for (var i = 0; i < len; i++)
          dests[i].emit("unpipe", this, {
            hasUnpiped: false
          });
        return this;
      }
      var index = indexOf(state.pipes, dest);
      if (index === -1)
        return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1)
        state.pipes = state.pipes[0];
      dest.emit("unpipe", this, unpipeInfo);
      return this;
    };
    Readable.prototype.on = function(ev, fn) {
      var res = Stream.prototype.on.call(this, ev, fn);
      var state = this._readableState;
      if (ev === "data") {
        state.readableListening = this.listenerCount("readable") > 0;
        if (state.flowing !== false)
          this.resume();
      } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug("on readable", state.length, state.reading);
          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }
      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;
    Readable.prototype.removeListener = function(ev, fn) {
      var res = Stream.prototype.removeListener.call(this, ev, fn);
      if (ev === "readable") {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    Readable.prototype.removeAllListeners = function(ev) {
      var res = Stream.prototype.removeAllListeners.apply(this, arguments);
      if (ev === "readable" || ev === void 0) {
        process.nextTick(updateReadableListening, this);
      }
      return res;
    };
    function updateReadableListening(self2) {
      var state = self2._readableState;
      state.readableListening = self2.listenerCount("readable") > 0;
      if (state.resumeScheduled && !state.paused) {
        state.flowing = true;
      } else if (self2.listenerCount("data") > 0) {
        self2.resume();
      }
    }
    function nReadingNextTick(self2) {
      debug("readable nexttick read 0");
      self2.read(0);
    }
    Readable.prototype.resume = function() {
      var state = this._readableState;
      if (!state.flowing) {
        debug("resume");
        state.flowing = !state.readableListening;
        resume(this, state);
      }
      state.paused = false;
      return this;
    };
    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }
    function resume_(stream, state) {
      debug("resume", state.reading);
      if (!state.reading) {
        stream.read(0);
      }
      state.resumeScheduled = false;
      stream.emit("resume");
      flow(stream);
      if (state.flowing && !state.reading)
        stream.read(0);
    }
    Readable.prototype.pause = function() {
      debug("call pause flowing=%j", this._readableState.flowing);
      if (this._readableState.flowing !== false) {
        debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
      }
      this._readableState.paused = true;
      return this;
    };
    function flow(stream) {
      var state = stream._readableState;
      debug("flow", state.flowing);
      while (state.flowing && stream.read() !== null)
        ;
    }
    Readable.prototype.wrap = function(stream) {
      var _this = this;
      var state = this._readableState;
      var paused = false;
      stream.on("end", function() {
        debug("wrapped end");
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length)
            _this.push(chunk);
        }
        _this.push(null);
      });
      stream.on("data", function(chunk) {
        debug("wrapped data");
        if (state.decoder)
          chunk = state.decoder.write(chunk);
        if (state.objectMode && (chunk === null || chunk === void 0))
          return;
        else if (!state.objectMode && (!chunk || !chunk.length))
          return;
        var ret = _this.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });
      for (var i in stream) {
        if (this[i] === void 0 && typeof stream[i] === "function") {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }
      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      }
      this._read = function(n2) {
        debug("wrapped _read", n2);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };
      return this;
    };
    if (typeof Symbol === "function") {
      Readable.prototype[Symbol.asyncIterator] = function() {
        if (createReadableStreamAsyncIterator === void 0) {
          createReadableStreamAsyncIterator = require_async_iterator();
        }
        return createReadableStreamAsyncIterator(this);
      };
    }
    Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, "readableBuffer", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, "readableFlowing", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    });
    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, "readableLength", {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    });
    function fromList(n, state) {
      if (state.length === 0)
        return null;
      var ret;
      if (state.objectMode)
        ret = state.buffer.shift();
      else if (!n || n >= state.length) {
        if (state.decoder)
          ret = state.buffer.join("");
        else if (state.buffer.length === 1)
          ret = state.buffer.first();
        else
          ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }
    function endReadable(stream) {
      var state = stream._readableState;
      debug("endReadable", state.endEmitted);
      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }
    function endReadableNT(state, stream) {
      debug("endReadableNT", state.endEmitted, state.length);
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
          var wState = stream._writableState;
          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }
    if (typeof Symbol === "function") {
      Readable.from = function(iterable, opts) {
        if (from === void 0) {
          from = require_from();
        }
        return from(Readable, iterable, opts);
      };
    }
    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x)
          return i;
      }
      return -1;
    }
  }
});

// node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS({
  "node_modules/readable-stream/lib/_stream_transform.js"(exports2, module2) {
    "use strict";
    module2.exports = Transform;
    var _require$codes = require_errors().codes;
    var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
    var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
    var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
    var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
    var Duplex = require_stream_duplex();
    require_inherits()(Transform, Duplex);
    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;
      if (cb === null) {
        return this.emit("error", new ERR_MULTIPLE_CALLBACK());
      }
      ts.writechunk = null;
      ts.writecb = null;
      if (data != null)
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform))
        return new Transform(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      };
      this._readableState.needReadable = true;
      this._readableState.sync = false;
      if (options) {
        if (typeof options.transform === "function")
          this._transform = options.transform;
        if (typeof options.flush === "function")
          this._flush = options.flush;
      }
      this.on("prefinish", prefinish);
    }
    function prefinish() {
      var _this = this;
      if (typeof this._flush === "function" && !this._readableState.destroyed) {
        this._flush(function(er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }
    Transform.prototype.push = function(chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };
    Transform.prototype._transform = function(chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
    };
    Transform.prototype._write = function(chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
          this._read(rs.highWaterMark);
      }
    };
    Transform.prototype._read = function(n) {
      var ts = this._transformState;
      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        ts.needTransform = true;
      }
    };
    Transform.prototype._destroy = function(err, cb) {
      Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
      });
    };
    function done(stream, er, data) {
      if (er)
        return stream.emit("error", er);
      if (data != null)
        stream.push(data);
      if (stream._writableState.length)
        throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming)
        throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }
  }
});

// node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS({
  "node_modules/readable-stream/lib/_stream_passthrough.js"(exports2, module2) {
    "use strict";
    module2.exports = PassThrough;
    var Transform = require_stream_transform();
    require_inherits()(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough))
        return new PassThrough(options);
      Transform.call(this, options);
    }
    PassThrough.prototype._transform = function(chunk, encoding, cb) {
      cb(null, chunk);
    };
  }
});

// node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({
  "node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports2, module2) {
    "use strict";
    var eos;
    function once(callback) {
      var called = false;
      return function() {
        if (called)
          return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }
    var _require$codes = require_errors().codes;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
    function noop(err) {
      if (err)
        throw err;
    }
    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    }
    function destroyer(stream, reading, writing, callback) {
      callback = once(callback);
      var closed = false;
      stream.on("close", function() {
        closed = true;
      });
      if (eos === void 0)
        eos = require_end_of_stream();
      eos(stream, {
        readable: reading,
        writable: writing
      }, function(err) {
        if (err)
          return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function(err) {
        if (closed)
          return;
        if (destroyed)
          return;
        destroyed = true;
        if (isRequest(stream))
          return stream.abort();
        if (typeof stream.destroy === "function")
          return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED("pipe"));
      };
    }
    function call(fn) {
      fn();
    }
    function pipe(from, to) {
      return from.pipe(to);
    }
    function popCallback(streams) {
      if (!streams.length)
        return noop;
      if (typeof streams[streams.length - 1] !== "function")
        return noop;
      return streams.pop();
    }
    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }
      var callback = popCallback(streams);
      if (Array.isArray(streams[0]))
        streams = streams[0];
      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS("streams");
      }
      var error;
      var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
          if (!error)
            error = err;
          if (err)
            destroys.forEach(call);
          if (reading)
            return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe);
    }
    module2.exports = pipeline;
  }
});

// node_modules/readable-stream/readable.js
var require_readable = __commonJS({
  "node_modules/readable-stream/readable.js"(exports2, module2) {
    var Stream = require("stream");
    if (process.env.READABLE_STREAM === "disable" && Stream) {
      module2.exports = Stream.Readable;
      Object.assign(module2.exports, Stream);
      module2.exports.Stream = Stream;
    } else {
      exports2 = module2.exports = require_stream_readable();
      exports2.Stream = Stream || exports2;
      exports2.Readable = exports2;
      exports2.Writable = require_stream_writable();
      exports2.Duplex = require_stream_duplex();
      exports2.Transform = require_stream_transform();
      exports2.PassThrough = require_stream_passthrough();
      exports2.finished = require_end_of_stream();
      exports2.pipeline = require_pipeline();
    }
  }
});

// node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS({
  "node_modules/wrappy/wrappy.js"(exports2, module2) {
    module2.exports = wrappy;
    function wrappy(fn, cb) {
      if (fn && cb)
        return wrappy(fn)(cb);
      if (typeof fn !== "function")
        throw new TypeError("need wrapper function");
      Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
      });
      return wrapper;
      function wrapper() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        var ret = fn.apply(this, args);
        var cb2 = args[args.length - 1];
        if (typeof ret === "function" && ret !== cb2) {
          Object.keys(cb2).forEach(function(k) {
            ret[k] = cb2[k];
          });
        }
        return ret;
      }
    }
  }
});

// node_modules/once/once.js
var require_once = __commonJS({
  "node_modules/once/once.js"(exports2, module2) {
    var wrappy = require_wrappy();
    module2.exports = wrappy(once);
    module2.exports.strict = wrappy(onceStrict);
    once.proto = once(function() {
      Object.defineProperty(Function.prototype, "once", {
        value: function() {
          return once(this);
        },
        configurable: true
      });
      Object.defineProperty(Function.prototype, "onceStrict", {
        value: function() {
          return onceStrict(this);
        },
        configurable: true
      });
    });
    function once(fn) {
      var f = function() {
        if (f.called)
          return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      f.called = false;
      return f;
    }
    function onceStrict(fn) {
      var f = function() {
        if (f.called)
          throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
      };
      var name = fn.name || "Function wrapped with `once`";
      f.onceError = name + " shouldn't be called more than once";
      f.called = false;
      return f;
    }
  }
});

// node_modules/end-of-stream/index.js
var require_end_of_stream2 = __commonJS({
  "node_modules/end-of-stream/index.js"(exports2, module2) {
    var once = require_once();
    var noop = function() {
    };
    var isRequest = function(stream) {
      return stream.setHeader && typeof stream.abort === "function";
    };
    var isChildProcess = function(stream) {
      return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3;
    };
    var eos = function(stream, opts, callback) {
      if (typeof opts === "function")
        return eos(stream, null, opts);
      if (!opts)
        opts = {};
      callback = once(callback || noop);
      var ws = stream._writableState;
      var rs = stream._readableState;
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;
      var cancelled = false;
      var onlegacyfinish = function() {
        if (!stream.writable)
          onfinish();
      };
      var onfinish = function() {
        writable = false;
        if (!readable)
          callback.call(stream);
      };
      var onend = function() {
        readable = false;
        if (!writable)
          callback.call(stream);
      };
      var onexit = function(exitCode) {
        callback.call(stream, exitCode ? new Error("exited with error code: " + exitCode) : null);
      };
      var onerror = function(err) {
        callback.call(stream, err);
      };
      var onclose = function() {
        process.nextTick(onclosenexttick);
      };
      var onclosenexttick = function() {
        if (cancelled)
          return;
        if (readable && !(rs && (rs.ended && !rs.destroyed)))
          return callback.call(stream, new Error("premature close"));
        if (writable && !(ws && (ws.ended && !ws.destroyed)))
          return callback.call(stream, new Error("premature close"));
      };
      var onrequest = function() {
        stream.req.on("finish", onfinish);
      };
      if (isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req)
          onrequest();
        else
          stream.on("request", onrequest);
      } else if (writable && !ws) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
      }
      if (isChildProcess(stream))
        stream.on("exit", onexit);
      stream.on("end", onend);
      stream.on("finish", onfinish);
      if (opts.error !== false)
        stream.on("error", onerror);
      stream.on("close", onclose);
      return function() {
        cancelled = true;
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req)
          stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("exit", onexit);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
      };
    };
    module2.exports = eos;
  }
});

// node_modules/stream-shift/index.js
var require_stream_shift = __commonJS({
  "node_modules/stream-shift/index.js"(exports2, module2) {
    module2.exports = shift;
    function shift(stream) {
      var rs = stream._readableState;
      if (!rs)
        return null;
      return rs.objectMode || typeof stream._duplexState === "number" ? stream.read() : stream.read(getStateLength(rs));
    }
    function getStateLength(state) {
      if (state.buffer.length) {
        if (state.buffer.head) {
          return state.buffer.head.data.length;
        }
        return state.buffer[0].length;
      }
      return state.length;
    }
  }
});

// node_modules/duplexify/index.js
var require_duplexify = __commonJS({
  "node_modules/duplexify/index.js"(exports2, module2) {
    var stream = require_readable();
    var eos = require_end_of_stream2();
    var inherits = require_inherits();
    var shift = require_stream_shift();
    var SIGNAL_FLUSH = Buffer.from && Buffer.from !== Uint8Array.from ? Buffer.from([0]) : new Buffer([0]);
    var onuncork = function(self2, fn) {
      if (self2._corked)
        self2.once("uncork", fn);
      else
        fn();
    };
    var autoDestroy = function(self2, err) {
      if (self2._autoDestroy)
        self2.destroy(err);
    };
    var destroyer = function(self2, end2) {
      return function(err) {
        if (err)
          autoDestroy(self2, err.message === "premature close" ? null : err);
        else if (end2 && !self2._ended)
          self2.end();
      };
    };
    var end = function(ws, fn) {
      if (!ws)
        return fn();
      if (ws._writableState && ws._writableState.finished)
        return fn();
      if (ws._writableState)
        return ws.end(fn);
      ws.end();
      fn();
    };
    var noop = function() {
    };
    var toStreams2 = function(rs) {
      return new stream.Readable({ objectMode: true, highWaterMark: 16 }).wrap(rs);
    };
    var Duplexify = function(writable, readable, opts) {
      if (!(this instanceof Duplexify))
        return new Duplexify(writable, readable, opts);
      stream.Duplex.call(this, opts);
      this._writable = null;
      this._readable = null;
      this._readable2 = null;
      this._autoDestroy = !opts || opts.autoDestroy !== false;
      this._forwardDestroy = !opts || opts.destroy !== false;
      this._forwardEnd = !opts || opts.end !== false;
      this._corked = 1;
      this._ondrain = null;
      this._drained = false;
      this._forwarding = false;
      this._unwrite = null;
      this._unread = null;
      this._ended = false;
      this.destroyed = false;
      if (writable)
        this.setWritable(writable);
      if (readable)
        this.setReadable(readable);
    };
    inherits(Duplexify, stream.Duplex);
    Duplexify.obj = function(writable, readable, opts) {
      if (!opts)
        opts = {};
      opts.objectMode = true;
      opts.highWaterMark = 16;
      return new Duplexify(writable, readable, opts);
    };
    Duplexify.prototype.cork = function() {
      if (++this._corked === 1)
        this.emit("cork");
    };
    Duplexify.prototype.uncork = function() {
      if (this._corked && --this._corked === 0)
        this.emit("uncork");
    };
    Duplexify.prototype.setWritable = function(writable) {
      if (this._unwrite)
        this._unwrite();
      if (this.destroyed) {
        if (writable && writable.destroy)
          writable.destroy();
        return;
      }
      if (writable === null || writable === false) {
        this.end();
        return;
      }
      var self2 = this;
      var unend = eos(writable, { writable: true, readable: false }, destroyer(this, this._forwardEnd));
      var ondrain = function() {
        var ondrain2 = self2._ondrain;
        self2._ondrain = null;
        if (ondrain2)
          ondrain2();
      };
      var clear = function() {
        self2._writable.removeListener("drain", ondrain);
        unend();
      };
      if (this._unwrite)
        process.nextTick(ondrain);
      this._writable = writable;
      this._writable.on("drain", ondrain);
      this._unwrite = clear;
      this.uncork();
    };
    Duplexify.prototype.setReadable = function(readable) {
      if (this._unread)
        this._unread();
      if (this.destroyed) {
        if (readable && readable.destroy)
          readable.destroy();
        return;
      }
      if (readable === null || readable === false) {
        this.push(null);
        this.resume();
        return;
      }
      var self2 = this;
      var unend = eos(readable, { writable: false, readable: true }, destroyer(this));
      var onreadable = function() {
        self2._forward();
      };
      var onend = function() {
        self2.push(null);
      };
      var clear = function() {
        self2._readable2.removeListener("readable", onreadable);
        self2._readable2.removeListener("end", onend);
        unend();
      };
      this._drained = true;
      this._readable = readable;
      this._readable2 = readable._readableState ? readable : toStreams2(readable);
      this._readable2.on("readable", onreadable);
      this._readable2.on("end", onend);
      this._unread = clear;
      this._forward();
    };
    Duplexify.prototype._read = function() {
      this._drained = true;
      this._forward();
    };
    Duplexify.prototype._forward = function() {
      if (this._forwarding || !this._readable2 || !this._drained)
        return;
      this._forwarding = true;
      var data;
      while (this._drained && (data = shift(this._readable2)) !== null) {
        if (this.destroyed)
          continue;
        this._drained = this.push(data);
      }
      this._forwarding = false;
    };
    Duplexify.prototype.destroy = function(err, cb) {
      if (!cb)
        cb = noop;
      if (this.destroyed)
        return cb(null);
      this.destroyed = true;
      var self2 = this;
      process.nextTick(function() {
        self2._destroy(err);
        cb(null);
      });
    };
    Duplexify.prototype._destroy = function(err) {
      if (err) {
        var ondrain = this._ondrain;
        this._ondrain = null;
        if (ondrain)
          ondrain(err);
        else
          this.emit("error", err);
      }
      if (this._forwardDestroy) {
        if (this._readable && this._readable.destroy)
          this._readable.destroy();
        if (this._writable && this._writable.destroy)
          this._writable.destroy();
      }
      this.emit("close");
    };
    Duplexify.prototype._write = function(data, enc, cb) {
      if (this.destroyed)
        return;
      if (this._corked)
        return onuncork(this, this._write.bind(this, data, enc, cb));
      if (data === SIGNAL_FLUSH)
        return this._finish(cb);
      if (!this._writable)
        return cb();
      if (this._writable.write(data) === false)
        this._ondrain = cb;
      else if (!this.destroyed)
        cb();
    };
    Duplexify.prototype._finish = function(cb) {
      var self2 = this;
      this.emit("preend");
      onuncork(this, function() {
        end(self2._forwardEnd && self2._writable, function() {
          if (self2._writableState.prefinished === false)
            self2._writableState.prefinished = true;
          self2.emit("prefinish");
          onuncork(self2, cb);
        });
      });
    };
    Duplexify.prototype.end = function(data, enc, cb) {
      if (typeof data === "function")
        return this.end(null, null, data);
      if (typeof enc === "function")
        return this.end(data, null, enc);
      this._ended = true;
      if (data)
        this.write(data);
      if (!this._writableState.ending && !this._writableState.destroyed)
        this.write(SIGNAL_FLUSH);
      return stream.Writable.prototype.end.call(this, cb);
    };
    module2.exports = Duplexify;
  }
});

// node_modules/retry-request/node_modules/ms/index.js
var require_ms2 = __commonJS({
  "node_modules/retry-request/node_modules/ms/index.js"(exports2, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/retry-request/node_modules/debug/src/common.js
var require_common4 = __commonJS({
  "node_modules/retry-request/node_modules/debug/src/common.js"(exports2, module2) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms2();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self2 = debug;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index];
              match = formatter.call(self2, val);
              args.splice(index, 1);
              index--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module2.exports = setup;
  }
});

// node_modules/retry-request/node_modules/debug/src/browser.js
var require_browser2 = __commonJS({
  "node_modules/retry-request/node_modules/debug/src/browser.js"(exports2, module2) {
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.storage = localstorage();
    exports2.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports2.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index++;
        if (match === "%c") {
          lastC = index;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports2.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports2.storage.setItem("debug", namespaces);
        } else {
          exports2.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports2.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module2.exports = require_common4()(exports2);
    var { formatters } = module2.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/retry-request/node_modules/debug/src/node.js
var require_node3 = __commonJS({
  "node_modules/retry-request/node_modules/debug/src/node.js"(exports2, module2) {
    var tty = require("tty");
    var util = require("util");
    exports2.init = init;
    exports2.log = log;
    exports2.formatArgs = formatArgs;
    exports2.save = save;
    exports2.load = load;
    exports2.useColors = useColors;
    exports2.destroy = util.deprecate(
      () => {
      },
      "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
    );
    exports2.colors = [6, 2, 3, 4, 5, 1];
    try {
      const supportsColor = require_supports_color();
      if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports2.colors = [
          20,
          21,
          26,
          27,
          32,
          33,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          56,
          57,
          62,
          63,
          68,
          69,
          74,
          75,
          76,
          77,
          78,
          79,
          80,
          81,
          92,
          93,
          98,
          99,
          112,
          113,
          128,
          129,
          134,
          135,
          148,
          149,
          160,
          161,
          162,
          163,
          164,
          165,
          166,
          167,
          168,
          169,
          170,
          171,
          172,
          173,
          178,
          179,
          184,
          185,
          196,
          197,
          198,
          199,
          200,
          201,
          202,
          203,
          204,
          205,
          206,
          207,
          208,
          209,
          214,
          215,
          220,
          221
        ];
      }
    } catch (error) {
    }
    exports2.inspectOpts = Object.keys(process.env).filter((key) => {
      return /^debug_/i.test(key);
    }).reduce((obj, key) => {
      const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
        return k.toUpperCase();
      });
      let val = process.env[key];
      if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
      } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
      } else if (val === "null") {
        val = null;
      } else {
        val = Number(val);
      }
      obj[prop] = val;
      return obj;
    }, {});
    function useColors() {
      return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
    }
    function formatArgs(args) {
      const { namespace: name, useColors: useColors2 } = this;
      if (useColors2) {
        const c = this.color;
        const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
        const prefix = `  ${colorCode};1m${name} \x1B[0m`;
        args[0] = prefix + args[0].split("\n").join("\n" + prefix);
        args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
      } else {
        args[0] = getDate() + name + " " + args[0];
      }
    }
    function getDate() {
      if (exports2.inspectOpts.hideDate) {
        return "";
      }
      return (/* @__PURE__ */ new Date()).toISOString() + " ";
    }
    function log(...args) {
      return process.stderr.write(util.format(...args) + "\n");
    }
    function save(namespaces) {
      if (namespaces) {
        process.env.DEBUG = namespaces;
      } else {
        delete process.env.DEBUG;
      }
    }
    function load() {
      return process.env.DEBUG;
    }
    function init(debug) {
      debug.inspectOpts = {};
      const keys = Object.keys(exports2.inspectOpts);
      for (let i = 0; i < keys.length; i++) {
        debug.inspectOpts[keys[i]] = exports2.inspectOpts[keys[i]];
      }
    }
    module2.exports = require_common4()(exports2);
    var { formatters } = module2.exports;
    formatters.o = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
    };
    formatters.O = function(v) {
      this.inspectOpts.colors = this.useColors;
      return util.inspect(v, this.inspectOpts);
    };
  }
});

// node_modules/retry-request/node_modules/debug/src/index.js
var require_src10 = __commonJS({
  "node_modules/retry-request/node_modules/debug/src/index.js"(exports2, module2) {
    if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
      module2.exports = require_browser2();
    } else {
      module2.exports = require_node3();
    }
  }
});

// node_modules/retry-request/index.js
var require_retry_request = __commonJS({
  "node_modules/retry-request/index.js"(exports2, module2) {
    "use strict";
    var { PassThrough } = require("stream");
    var debug = require_src10()("retry-request");
    var extend = require_extend();
    var DEFAULTS = {
      objectMode: false,
      retries: 2,
      /*
        The maximum time to delay in seconds. If retryDelayMultiplier results in a
        delay greater than maxRetryDelay, retries should delay by maxRetryDelay
        seconds instead.
      */
      maxRetryDelay: 64,
      /*
        The multiplier by which to increase the delay time between the completion of
        failed requests, and the initiation of the subsequent retrying request.
      */
      retryDelayMultiplier: 2,
      /*
        The length of time to keep retrying in seconds. The last sleep period will
        be shortened as necessary, so that the last retry runs at deadline (and not
        considerably beyond it).  The total time starting from when the initial
        request is sent, after which an error will be returned, regardless of the
        retrying attempts made meanwhile.
       */
      totalTimeout: 600,
      noResponseRetries: 2,
      currentRetryAttempt: 0,
      shouldRetryFn: function(response) {
        const retryRanges = [
          // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
          // 1xx - Retry (Informational, request still processing)
          // 2xx - Do not retry (Success)
          // 3xx - Do not retry (Redirect)
          // 4xx - Do not retry (Client errors)
          // 429 - Retry ("Too Many Requests")
          // 5xx - Retry (Server errors)
          [100, 199],
          [429, 429],
          [500, 599]
        ];
        const statusCode = response.statusCode;
        debug(`Response status: ${statusCode}`);
        let range;
        while (range = retryRanges.shift()) {
          if (statusCode >= range[0] && statusCode <= range[1]) {
            return true;
          }
        }
      }
    };
    function retryRequest(requestOpts, opts, callback) {
      const streamMode = typeof arguments[arguments.length - 1] !== "function";
      if (typeof opts === "function") {
        callback = opts;
      }
      const manualCurrentRetryAttemptWasSet = opts && typeof opts.currentRetryAttempt === "number";
      opts = extend({}, DEFAULTS, opts);
      if (typeof opts.request === "undefined") {
        try {
          opts.request = require("request");
        } catch (e) {
          throw new Error("A request library must be provided to retry-request.");
        }
      }
      let currentRetryAttempt = opts.currentRetryAttempt;
      let numNoResponseAttempts = 0;
      let streamResponseHandled = false;
      let retryStream;
      let requestStream;
      let delayStream;
      let activeRequest;
      const retryRequest2 = {
        abort: function() {
          if (activeRequest && activeRequest.abort) {
            activeRequest.abort();
          }
        }
      };
      if (streamMode) {
        retryStream = new PassThrough({ objectMode: opts.objectMode });
        retryStream.abort = resetStreams;
      }
      const timeOfFirstRequest = Date.now();
      if (currentRetryAttempt > 0) {
        retryAfterDelay(currentRetryAttempt);
      } else {
        makeRequest();
      }
      if (streamMode) {
        return retryStream;
      } else {
        return retryRequest2;
      }
      function resetStreams() {
        delayStream = null;
        if (requestStream) {
          requestStream.abort && requestStream.abort();
          requestStream.cancel && requestStream.cancel();
          if (requestStream.destroy) {
            requestStream.destroy();
          } else if (requestStream.end) {
            requestStream.end();
          }
        }
      }
      function makeRequest() {
        currentRetryAttempt++;
        debug(`Current retry attempt: ${currentRetryAttempt}`);
        if (streamMode) {
          streamResponseHandled = false;
          delayStream = new PassThrough({ objectMode: opts.objectMode });
          requestStream = opts.request(requestOpts);
          setImmediate(() => {
            retryStream.emit("request");
          });
          requestStream.on("error", (err) => {
            if (streamResponseHandled) {
              return;
            }
            streamResponseHandled = true;
            onResponse(err);
          }).on("response", (resp, body) => {
            if (streamResponseHandled) {
              return;
            }
            streamResponseHandled = true;
            onResponse(null, resp, body);
          }).on("complete", retryStream.emit.bind(retryStream, "complete"));
          requestStream.pipe(delayStream);
        } else {
          activeRequest = opts.request(requestOpts, onResponse);
        }
      }
      function retryAfterDelay(currentRetryAttempt2) {
        if (streamMode) {
          resetStreams();
        }
        const nextRetryDelay = getNextRetryDelay({
          maxRetryDelay: opts.maxRetryDelay,
          retryDelayMultiplier: opts.retryDelayMultiplier,
          retryNumber: currentRetryAttempt2,
          timeOfFirstRequest,
          totalTimeout: opts.totalTimeout
        });
        debug(`Next retry delay: ${nextRetryDelay}`);
        if (nextRetryDelay <= 0) {
          numNoResponseAttempts = opts.noResponseRetries + 1;
          return;
        }
        setTimeout(makeRequest, nextRetryDelay);
      }
      function onResponse(err, response, body) {
        if (err) {
          numNoResponseAttempts++;
          if (numNoResponseAttempts <= opts.noResponseRetries) {
            retryAfterDelay(numNoResponseAttempts);
          } else {
            if (streamMode) {
              retryStream.emit("error", err);
              retryStream.end();
            } else {
              callback(err, response, body);
            }
          }
          return;
        }
        const adjustedCurrentRetryAttempt = manualCurrentRetryAttemptWasSet ? currentRetryAttempt : currentRetryAttempt - 1;
        if (adjustedCurrentRetryAttempt < opts.retries && opts.shouldRetryFn(response)) {
          retryAfterDelay(currentRetryAttempt);
          return;
        }
        if (streamMode) {
          retryStream.emit("response", response);
          delayStream.pipe(retryStream);
          requestStream.on("error", (err2) => {
            retryStream.destroy(err2);
          });
        } else {
          callback(err, response, body);
        }
      }
    }
    module2.exports = retryRequest;
    function getNextRetryDelay(config) {
      const {
        maxRetryDelay,
        retryDelayMultiplier,
        retryNumber,
        timeOfFirstRequest,
        totalTimeout
      } = config;
      const maxRetryDelayMs = maxRetryDelay * 1e3;
      const totalTimeoutMs = totalTimeout * 1e3;
      const jitter = Math.floor(Math.random() * 1e3);
      const calculatedNextRetryDelay = Math.pow(retryDelayMultiplier, retryNumber) * 1e3 + jitter;
      const maxAllowableDelayMs = totalTimeoutMs - (Date.now() - timeOfFirstRequest);
      return Math.min(
        calculatedNextRetryDelay,
        maxAllowableDelayMs,
        maxRetryDelayMs
      );
    }
    module2.exports.getNextRetryDelay = getNextRetryDelay;
  }
});

// node_modules/google-gax/build/src/streamingCalls/streaming.js
var require_streaming = __commonJS({
  "node_modules/google-gax/build/src/streamingCalls/streaming.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StreamProxy = exports2.StreamType = void 0;
    var googleError_1 = require_googleError();
    var duplexify = require_duplexify();
    var retryRequest = require_retry_request();
    var StreamType;
    (function(StreamType2) {
      StreamType2[StreamType2["SERVER_STREAMING"] = 1] = "SERVER_STREAMING";
      StreamType2[StreamType2["CLIENT_STREAMING"] = 2] = "CLIENT_STREAMING";
      StreamType2[StreamType2["BIDI_STREAMING"] = 3] = "BIDI_STREAMING";
    })(StreamType || (exports2.StreamType = StreamType = {}));
    var StreamProxy = class extends duplexify {
      /**
       * StreamProxy is a proxy to gRPC-streaming method.
       *
       * @private
       * @constructor
       * @param {StreamType} type - the type of gRPC stream.
       * @param {ApiCallback} callback - the callback for further API call.
       */
      constructor(type, callback, rest) {
        super(void 0, void 0, {
          objectMode: true,
          readable: type !== StreamType.CLIENT_STREAMING,
          writable: type !== StreamType.SERVER_STREAMING
        });
        this.type = type;
        this._callback = callback;
        this._isCancelCalled = false;
        this._responseHasSent = false;
        this.rest = rest;
      }
      cancel() {
        if (this.stream) {
          this.stream.cancel();
        } else {
          this._isCancelCalled = true;
        }
      }
      /**
       * Forward events from an API request stream to the user's stream.
       * @param {Stream} stream - The API request stream.
       */
      forwardEvents(stream) {
        const eventsToForward = ["metadata", "response", "status"];
        eventsToForward.forEach((event) => {
          stream.on(event, this.emit.bind(this, event));
        });
        stream.on("status", () => {
          if (!this._responseHasSent) {
            stream.emit("response", {
              code: 200,
              details: "",
              message: "OK"
            });
          }
        });
        stream.on("metadata", (metadata) => {
          stream.emit("response", {
            code: 200,
            details: "",
            message: "OK",
            metadata
          });
          this._responseHasSent = true;
        });
        stream.on("error", (error) => {
          googleError_1.GoogleError.parseGRPCStatusDetails(error);
        });
      }
      /**
       * Specifies the target stream.
       * @param {ApiCall} apiCall - the API function to be called.
       * @param {Object} argument - the argument to be passed to the apiCall.
       */
      setStream(apiCall, argument, retryRequestOptions = {}) {
        if (this.type === StreamType.SERVER_STREAMING) {
          if (this.rest) {
            const stream2 = apiCall(argument, this._callback);
            this.stream = stream2;
            this.setReadable(stream2);
          } else {
            const retryStream = retryRequest(null, {
              objectMode: true,
              request: () => {
                if (this._isCancelCalled) {
                  if (this.stream) {
                    this.stream.cancel();
                  }
                  return;
                }
                const stream2 = apiCall(argument, this._callback);
                this.stream = stream2;
                this.forwardEvents(stream2);
                return stream2;
              },
              retries: retryRequestOptions.retries,
              currentRetryAttempt: retryRequestOptions.currentRetryAttempt,
              noResponseRetries: retryRequestOptions.noResponseRetries,
              shouldRetryFn: retryRequestOptions.shouldRetryFn
            });
            this.setReadable(retryStream);
          }
          return;
        }
        const stream = apiCall(argument, this._callback);
        this.stream = stream;
        this.forwardEvents(stream);
        if (this.type === StreamType.CLIENT_STREAMING) {
          this.setWritable(stream);
        }
        if (this.type === StreamType.BIDI_STREAMING) {
          this.setReadable(stream);
          this.setWritable(stream);
        }
        if (this._isCancelCalled && this.stream) {
          this.stream.cancel();
        }
      }
    };
    exports2.StreamProxy = StreamProxy;
  }
});

// node_modules/google-gax/build/src/pathTemplate.js
var require_pathTemplate = __commonJS({
  "node_modules/google-gax/build/src/pathTemplate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PathTemplate = void 0;
    var PathTemplate = class {
      /**
       * @param {String} data the of the template
       *
       * @constructor
       */
      constructor(data) {
        this.bindings = {};
        this.data = data;
        this.segments = this.parsePathTemplate(data);
        this.size = this.segments.length;
      }
      /**
       * Matches a fully-qualified path template string.
       *
       * @param {String} path a fully-qualified path template string
       * @return {Object} contains const names matched to binding values
       * @throws {TypeError} if path can't be matched to this template
       */
      match(path) {
        let pathSegments = path.split("/");
        const bindings = {};
        if (pathSegments.length !== this.segments.length) {
          if (!this.data.includes("**")) {
            throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same.`);
          } else if (pathSegments.length !== this.segments.length + 1) {
            throw new TypeError(`This path ${path} does not match path template ${this.data}, the number of parameters is not same with one wildcard.`);
          }
        }
        for (let index = 0; index < this.segments.length && pathSegments.length > 0; index++) {
          if (this.segments[index] !== pathSegments[0]) {
            if (!this.segments[index].includes("*")) {
              throw new TypeError(`segment does not match, ${this.segments[index]} and  ${pathSegments[index]}.`);
            } else {
              let segment = this.segments[index];
              const matches = segment.match(/\{[$0-9a-zA-Z_]+=.*?\}/g);
              if (!matches) {
                throw new Error(`Error processing path template segment ${segment}`);
              }
              const variables = matches.map((str) => str.replace(/^\{/, "").replace(/=.*/, ""));
              if (segment.includes("**")) {
                bindings[variables[0]] = pathSegments[0] + "/" + pathSegments[1];
                pathSegments = pathSegments.slice(2);
              } else {
                if (variables.length === 1) {
                  bindings[variables[0]] = pathSegments[0];
                } else {
                  const value = pathSegments[0].split(/[-_.~]/);
                  if (value.length !== variables.length) {
                    throw new Error(`segment ${segment} does not match ${pathSegments[0]}`);
                  }
                  for (const v of variables) {
                    bindings[v] = value[0];
                    segment = segment.replace(`{${v}=*}`, `${value[0]}`);
                    value.shift();
                  }
                  if (segment !== pathSegments[0]) {
                    throw new TypeError(`non slash resource pattern ${this.segments[index]} and ${pathSegments[0]} should have same separator`);
                  }
                }
                pathSegments.shift();
              }
            }
          } else {
            pathSegments.shift();
          }
        }
        return bindings;
      }
      /**
       * Renders a path template using the provided bindings.
       *
       * @param {Object} bindings a mapping of const names to binding strings
       * @return {String} a rendered representation of the path template
       * @throws {TypeError} if a key is missing, or if a sub-template cannot be
       *   parsed
       */
      render(bindings) {
        if (Object.keys(bindings).length !== Object.keys(this.bindings).length) {
          throw new TypeError(`The number of variables ${Object.keys(bindings).length} does not match the number of needed variables ${Object.keys(this.bindings).length}`);
        }
        let path = this.inspect();
        for (const key of Object.keys(bindings)) {
          const b = bindings[key].toString();
          if (!this.bindings[key]) {
            throw new TypeError(`render fails for not matching ${bindings[key]}`);
          }
          const variable = this.bindings[key];
          if (variable === "*") {
            if (!b.match(/[^/{}]+/)) {
              throw new TypeError(`render fails for not matching ${b}`);
            }
            path = path.replace(`{${key}=*}`, `${b}`);
          } else if (variable === "**") {
            if (!b.match(/[^{}]+/)) {
              throw new TypeError(`render fails for not matching ${b}`);
            }
            path = path.replace(`{${key}=**}`, `${b}`);
          }
        }
        return path;
      }
      /**
       * Renders the path template.
       *
       * @return {string} contains const names matched to binding values
       */
      inspect() {
        return this.segments.join("/");
      }
      /**
       * Parse the path template.
       *
       * @return {string[]} return segments of the input path.
       * For example: 'buckets/{hello}'' will give back ['buckets', {hello=*}]
       */
      parsePathTemplate(data) {
        const pathSegments = splitPathTemplate(data);
        let index = 0;
        let wildCardCount = 0;
        const segments = [];
        let matches;
        pathSegments.forEach((segment) => {
          if (segment === "*" || segment === "**") {
            this.bindings[`$${index}`] = segment;
            segments.push(`{$${index}=${segment}}`);
            index = index + 1;
            if (segment === "**") {
              ++wildCardCount;
            }
          } else if (matches = segment.match(/\{[0-9a-zA-Z-.~_]+(?:=.*?)?\}/g)) {
            for (const subsegment of matches) {
              const pairMatch = subsegment.match(/^\{([0-9a-zA-Z-.~_]+)(?:=(.*?))?\}$/);
              if (!pairMatch) {
                throw new Error(`Cannot process path template segment ${subsegment}`);
              }
              const key = pairMatch[1];
              let value = pairMatch[2];
              if (!value) {
                value = "*";
                segment = segment.replace(key, key + "=*");
                this.bindings[key] = value;
              } else if (value === "*") {
                this.bindings[key] = value;
              } else if (value === "**") {
                ++wildCardCount;
                this.bindings[key] = value;
              }
            }
            segments.push(segment);
          } else if (segment.match(/[0-9a-zA-Z-.~_]+/)) {
            segments.push(segment);
          }
        });
        if (wildCardCount > 1) {
          throw new TypeError("Can not have more than one wildcard.");
        }
        return segments;
      }
    };
    exports2.PathTemplate = PathTemplate;
    function splitPathTemplate(data) {
      let left = 0;
      let right = 0;
      let bracketCount = 0;
      const segments = [];
      while (right >= left && right < data.length) {
        if (data.charAt(right) === "{") {
          bracketCount = bracketCount + 1;
        } else if (data.charAt(right) === "}") {
          bracketCount = bracketCount - 1;
        } else if (data.charAt(right) === "/") {
          if (right === data.length - 1) {
            throw new TypeError("Invalid path, it can not be ended by /");
          }
          if (bracketCount === 0) {
            segments.push(data.substring(left, right));
            left = right + 1;
          }
        }
        if (right === data.length - 1) {
          if (bracketCount !== 0) {
            throw new TypeError("Brackets are invalid.");
          }
          segments.push(data.substring(left));
        }
        right = right + 1;
      }
      return segments;
    }
  }
});

// node_modules/google-gax/package.json
var require_package4 = __commonJS({
  "node_modules/google-gax/package.json"(exports2, module2) {
    module2.exports = {
      name: "google-gax",
      version: "4.0.4",
      description: "Google API Extensions",
      main: "build/src/index.js",
      types: "build/src/index.d.ts",
      files: [
        "build/src",
        "build/protos/",
        "!build/src/**/*.map"
      ],
      dependencies: {
        "@grpc/grpc-js": "~1.9.0",
        "@grpc/proto-loader": "^0.7.0",
        "@types/long": "^4.0.0",
        "abort-controller": "^3.0.0",
        duplexify: "^4.0.0",
        "google-auth-library": "^9.0.0",
        "node-fetch": "^2.6.1",
        "object-hash": "^3.0.0",
        "proto3-json-serializer": "^2.0.0",
        protobufjs: "7.2.5",
        "retry-request": "^6.0.0"
      },
      devDependencies: {
        "@babel/plugin-proposal-private-methods": "^7.18.6",
        "@compodoc/compodoc": "1.1.21",
        "@types/mocha": "^9.0.0",
        "@types/ncp": "^2.0.1",
        "@types/node": "^20.5.0",
        "@types/node-fetch": "^2.5.4",
        "@types/object-hash": "^3.0.0",
        "@types/proxyquire": "^1.3.28",
        "@types/pumpify": "^1.4.1",
        "@types/sinon": "^10.0.0",
        "@types/uglify-js": "^3.17.0",
        c8: "^8.0.0",
        codecov: "^3.1.0",
        execa: "^5.0.0",
        "google-proto-files": "^4.0.0",
        gts: "^5.0.0",
        linkinator: "^4.0.0",
        long: "^4.0.0",
        mkdirp: "^2.0.0",
        mocha: "^9.0.0",
        ncp: "^2.0.0",
        "null-loader": "^4.0.0",
        "protobufjs-cli": "1.1.2",
        proxyquire: "^2.0.1",
        pumpify: "^2.0.0",
        rimraf: "^5.0.1",
        sinon: "^15.0.0",
        "stream-events": "^1.0.4",
        "ts-loader": "^8.0.0",
        typescript: "^5.1.6",
        "uglify-js": "^3.17.0",
        walkdir: "^0.4.0",
        webpack: "^4.0.0",
        "webpack-cli": "^4.0.0"
      },
      scripts: {
        docs: "compodoc src/",
        pretest: "npm run prepare",
        test: "c8 mocha build/test/unit",
        lint: "gts check src samples test",
        clean: "gts clean",
        compile: "tsc -p . && cp src/*.json build/src && cp -r test/fixtures build/test && cp -r protos build/",
        "compile-operation-protos": "pbjs -t json google/longrunning/operations.proto -p ./protos > protos/operations.json && pbjs -t static-module -r operations_protos google/longrunning/operations.proto -p ./protos > protos/operations.js && pbts protos/operations.js -o protos/operations.d.ts",
        "compile-compute-operations-protos": "pbjs -t json google/longrunning/compute_operations.proto -p ./protos > protos/compute_operations.json && pbjs -t static-module -r compute_operations_protos google/longrunning/compute_operations.proto -p ./protos > protos/compute_operations.js && pbts protos/compute_operations.js -o protos/compute_operations.d.ts",
        "compile-iam-protos": "pbjs -t json google/iam/v1/iam_policy.proto google/iam/v1/options.proto google/iam/v1/policy.proto google/iam/v1/logging/audit_data.proto -p ./protos > protos/iam_service.json && pbjs -t static-module -r iam_protos google/iam/v1/iam_policy.proto google/iam/v1/options.proto google/iam/v1/policy.proto google/iam/v1/logging/audit_data.proto -p ./protos > protos/iam_service.js && pbts protos/iam_service.js -o protos/iam_service.d.ts",
        "compile-location-protos": "pbjs -t json google/cloud/location/locations.proto -p ./protos > protos/locations.json && pbjs -t static-module -r locations_protos google/cloud/location/locations.proto -p ./protos > protos/locations.js && pbts protos/locations.js -o protos/locations.d.ts",
        "compile-status-protos": "pbjs -t json google/rpc/status.proto google/rpc/error_details.proto -p ./protos > protos/status.json",
        "compile-http-protos": "pbjs -t static-module -r http_proto --keep-case google/api/http.proto -p ./protos > protos/http.js && pbts protos/http.js -o protos/http.d.ts",
        "compile-showcase-proto": "pbjs -t json google/showcase/v1beta1/echo.proto google/showcase/v1beta1/identity.proto google/showcase/v1beta1/messaging.proto google/showcase/v1beta1/testing.proto -p ./protos > test/fixtures/google-gax-packaging-test-app/protos/protos.json && pbjs -t static-module -r showcase_protos google/showcase/v1beta1/echo.proto google/showcase/v1beta1/identity.proto google/showcase/v1beta1/messaging.proto google/showcase/v1beta1/testing.proto -p ./protos > test/fixtures/google-gax-packaging-test-app/protos/protos.js && pbts test/fixtures/google-gax-packaging-test-app/protos/protos.js -o test/fixtures/google-gax-packaging-test-app/protos/protos.d.ts",
        fix: "gts fix",
        prepare: "npm run compile && node ./build/tools/src/prepublish.js . && mkdirp build/protos && cp -r protos/* build/protos/ && npm run minify-proto-json",
        "system-test": "c8 mocha build/test/system-test --timeout 600000 && npm run test-application",
        "samples-test": "cd samples/ && npm link ../ && npm test && cd ../",
        "docs-test": "linkinator docs",
        "predocs-test": "npm run docs",
        "browser-test": "cd test/browser-test && npm run prefetch && npm install && npm test",
        "test-application": "cd test/test-application && npm run prefetch && npm install && npm start",
        prelint: "cd samples; npm link ../; npm install",
        precompile: "gts clean",
        "update-protos": "node ./build/tools/src/listProtos.js .",
        "minify-proto-json": "node ./build/tools/src/minify.js"
      },
      repository: "googleapis/gax-nodejs",
      keywords: [
        "grpc"
      ],
      author: "Google API Authors",
      license: "Apache-2.0",
      bugs: {
        url: "https://github.com/googleapis/gax-nodejs/issues"
      },
      homepage: "https://github.com/googleapis/gax-nodejs#readme",
      engines: {
        node: ">=14"
      },
      browser: "build/src/fallback.js"
    };
  }
});

// node_modules/google-gax/build/src/longRunningCalls/longrunning.js
var require_longrunning = __commonJS({
  "node_modules/google-gax/build/src/longRunningCalls/longrunning.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.operation = exports2.Operation = void 0;
    var events_1 = require("events");
    var status_1 = require_status();
    var googleError_1 = require_googleError();
    var operationProtos = require_operations();
    var Operation = class extends events_1.EventEmitter {
      /**
       * Wrapper for a google.longrunnung.Operation.
       *
       * @constructor
       *
       * @param {google.longrunning.Operation} grpcOp - The operation to be wrapped.
       * @param {LongRunningDescriptor} longrunningDescriptor - This defines the
       * operations service client and unpacking mechanisms for the operation.
       * @param {BackoffSettings} backoffSettings - The backoff settings used in
       * in polling the operation.
       * @param {CallOptions} callOptions - CallOptions used in making get operation
       * requests.
       */
      constructor(grpcOp, longrunningDescriptor, backoffSettings, callOptions) {
        super();
        this.completeListeners = 0;
        this.hasActiveListeners = false;
        this.latestResponse = grpcOp;
        this.name = this.latestResponse.name;
        this.done = this.latestResponse.done;
        this.error = this.latestResponse.error;
        this.longrunningDescriptor = longrunningDescriptor;
        this.result = null;
        this.metadata = null;
        this.backoffSettings = backoffSettings;
        this._unpackResponse(grpcOp);
        this._listenForEvents();
        this._callOptions = callOptions;
      }
      /**
       * Begin listening for events on the operation. This method keeps track of how
       * many "complete" listeners are registered and removed, making sure polling
       * is handled automatically.
       *
       * As long as there is one active "complete" listener, the connection is open.
       * When there are no more listeners, the polling stops.
       *
       * @private
       */
      _listenForEvents() {
        this.on("newListener", (event) => {
          if (event === "complete") {
            this.completeListeners++;
            if (!this.hasActiveListeners) {
              this.hasActiveListeners = true;
              this.startPolling_();
            }
          }
        });
        this.on("removeListener", (event) => {
          if (event === "complete" && --this.completeListeners === 0) {
            this.hasActiveListeners = false;
          }
        });
      }
      /**
       * Cancels current polling api call and cancels the operation.
       *
       * @return {Promise} the promise of the OperationsClient#cancelOperation api
       * request.
       */
      cancel() {
        if (this.currentCallPromise_) {
          this.currentCallPromise_.cancel();
        }
        const operationsClient = this.longrunningDescriptor.operationsClient;
        const cancelRequest = new operationProtos.google.longrunning.CancelOperationRequest();
        cancelRequest.name = this.latestResponse.name;
        return operationsClient.cancelOperation(cancelRequest);
      }
      getOperation(callback) {
        const self2 = this;
        const operationsClient = this.longrunningDescriptor.operationsClient;
        function promisifyResponse() {
          if (!callback) {
            return new Promise((resolve, reject) => {
              if (self2.latestResponse.error) {
                const error = new googleError_1.GoogleError(self2.latestResponse.error.message);
                error.code = self2.latestResponse.error.code;
                reject(error);
              } else {
                resolve([self2.result, self2.metadata, self2.latestResponse]);
              }
            });
          }
          return;
        }
        if (this.latestResponse.done) {
          this._unpackResponse(this.latestResponse, callback);
          return promisifyResponse();
        }
        const request = new operationProtos.google.longrunning.GetOperationRequest();
        request.name = this.latestResponse.name;
        this.currentCallPromise_ = operationsClient.getOperationInternal(request, this._callOptions);
        const noCallbackPromise = this.currentCallPromise_.then((responses) => {
          self2.latestResponse = responses[0];
          self2._unpackResponse(responses[0], callback);
          return promisifyResponse();
        }, (err) => {
          if (callback) {
            callback(err);
            return;
          }
          return Promise.reject(err);
        });
        if (!callback) {
          return noCallbackPromise;
        }
      }
      _unpackResponse(op, callback) {
        const responseDecoder = this.longrunningDescriptor.responseDecoder;
        const metadataDecoder = this.longrunningDescriptor.metadataDecoder;
        let response;
        let metadata;
        if (op.done) {
          if (op.result === "error") {
            const error = new googleError_1.GoogleError(op.error.message);
            error.code = op.error.code;
            this.error = error;
            if (callback) {
              callback(error);
            }
            return;
          }
          if (responseDecoder && op.response) {
            this.response = op.response;
            response = responseDecoder(op.response.value);
            this.result = response;
            this.done = true;
          }
        }
        if (metadataDecoder && op.metadata) {
          metadata = metadataDecoder(op.metadata.value);
          this.metadata = metadata;
        }
        if (callback) {
          callback(null, response, metadata, op);
        }
      }
      /**
       * Poll `getOperation` to check the operation's status. This runs a loop to
       * ping using the backoff strategy specified at initialization.
       *
       * Note: This method is automatically called once a "complete" event handler
       * is registered on the operation.
       *
       * @private
       */
      startPolling_() {
        const self2 = this;
        let now = /* @__PURE__ */ new Date();
        const delayMult = this.backoffSettings.retryDelayMultiplier;
        const maxDelay = this.backoffSettings.maxRetryDelayMillis;
        let delay = this.backoffSettings.initialRetryDelayMillis;
        let deadline = Infinity;
        if (this.backoffSettings.totalTimeoutMillis) {
          deadline = now.getTime() + this.backoffSettings.totalTimeoutMillis;
        }
        let previousMetadataBytes;
        if (this.latestResponse.metadata) {
          previousMetadataBytes = this.latestResponse.metadata.value;
        }
        function emit(event, ...args) {
          self2.emit(event, ...args);
        }
        function arrayEquals(a, b) {
          if (a.byteLength !== b.byteLength) {
            return false;
          }
          for (let i = 0; i < a.byteLength; ++i) {
            if (a[i] !== b[i])
              return false;
          }
          return true;
        }
        function retry() {
          if (!self2.hasActiveListeners) {
            return;
          }
          if (now.getTime() >= deadline) {
            const error = new googleError_1.GoogleError("Total timeout exceeded before any response was received");
            error.code = status_1.Status.DEADLINE_EXCEEDED;
            setImmediate(emit, "error", error);
            return;
          }
          self2.getOperation((err, result, metadata, rawResponse) => {
            if (err) {
              setImmediate(emit, "error", err);
              return;
            }
            if (!result) {
              if (rawResponse.metadata && (!previousMetadataBytes || rawResponse && !arrayEquals(rawResponse.metadata.value, previousMetadataBytes))) {
                setImmediate(emit, "progress", metadata, rawResponse);
                previousMetadataBytes = rawResponse.metadata.value;
              }
              if (rawResponse.done) {
                setImmediate(emit, "complete", {}, metadata, rawResponse);
                return;
              }
              setTimeout(() => {
                now = /* @__PURE__ */ new Date();
                delay = Math.min(delay * delayMult, maxDelay);
                retry();
              }, delay);
              return;
            }
            setImmediate(emit, "complete", result, metadata, rawResponse);
          });
        }
        retry();
      }
      /**
       * Wraps the `complete` and `error` events in a Promise.
       *
       * @return {promise} - Promise that resolves on operation completion and rejects
       * on operation error.
       */
      promise() {
        return new Promise((resolve, reject) => {
          this.on("error", reject).on("complete", (result, metadata, rawResponse) => {
            resolve([result, metadata, rawResponse]);
          });
        });
      }
    };
    exports2.Operation = Operation;
    function operation(op, longrunningDescriptor, backoffSettings, callOptions) {
      return new Operation(op, longrunningDescriptor, backoffSettings, callOptions);
    }
    exports2.operation = operation;
  }
});

// node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js
var require_longRunningApiCaller = __commonJS({
  "node_modules/google-gax/build/src/longRunningCalls/longRunningApiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LongrunningApiCaller = void 0;
    var call_1 = require_call2();
    var gax_1 = require_gax();
    var longrunning_1 = require_longrunning();
    var LongrunningApiCaller = class {
      /**
       * Creates an API caller that performs polling on a long running operation.
       *
       * @private
       * @constructor
       * @param {LongRunningDescriptor} longrunningDescriptor - Holds the
       * decoders used for unpacking responses and the operationsClient
       * used for polling the operation.
       */
      constructor(longrunningDescriptor) {
        this.longrunningDescriptor = longrunningDescriptor;
      }
      init(callback) {
        if (callback) {
          return new call_1.OngoingCall(callback);
        }
        return new call_1.OngoingCallPromise();
      }
      wrap(func) {
        return func;
      }
      call(apiCall, argument, settings, canceller) {
        canceller.call((argument2, callback) => {
          return this._wrapOperation(apiCall, settings, argument2, callback);
        }, argument);
      }
      _wrapOperation(apiCall, settings, argument, callback) {
        let backoffSettings = settings.longrunning;
        if (!backoffSettings) {
          backoffSettings = (0, gax_1.createDefaultBackoffSettings)();
        }
        const longrunningDescriptor = this.longrunningDescriptor;
        return apiCall(argument, (err, rawResponse) => {
          if (err) {
            callback(err, null, null, rawResponse);
            return;
          }
          const operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);
          callback(null, operation, rawResponse);
        });
      }
      fail(canceller, err) {
        canceller.callback(err);
      }
      result(canceller) {
        return canceller.promise;
      }
    };
    exports2.LongrunningApiCaller = LongrunningApiCaller;
  }
});

// node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js
var require_longRunningDescriptor = __commonJS({
  "node_modules/google-gax/build/src/longRunningCalls/longRunningDescriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LongRunningDescriptor = void 0;
    var longRunningApiCaller_1 = require_longRunningApiCaller();
    var LongRunningDescriptor = class {
      constructor(operationsClient, responseDecoder, metadataDecoder) {
        this.operationsClient = operationsClient;
        this.responseDecoder = responseDecoder;
        this.metadataDecoder = metadataDecoder;
      }
      getApiCaller() {
        return new longRunningApiCaller_1.LongrunningApiCaller(this);
      }
    };
    exports2.LongRunningDescriptor = LongRunningDescriptor;
  }
});

// node_modules/google-gax/build/src/paginationCalls/resourceCollector.js
var require_resourceCollector = __commonJS({
  "node_modules/google-gax/build/src/paginationCalls/resourceCollector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ResourceCollector = void 0;
    var ResourceCollector = class {
      constructor(apiCall, maxResults = -1) {
        this.apiCall = apiCall;
        this.resources = [];
        this.maxResults = maxResults;
      }
      callback(err, resources, nextPageRequest) {
        if (err) {
          this.rejectCallback(err);
          return;
        }
        for (const resource of resources) {
          this.resources.push(resource);
          if (this.resources.length === this.maxResults) {
            nextPageRequest = null;
            break;
          }
        }
        if (!nextPageRequest) {
          this.resolveCallback(this.resources);
          return;
        }
        const callback = (...args) => this.callback(...args);
        setImmediate(this.apiCall, nextPageRequest, callback);
      }
      processAllPages(firstRequest) {
        return new Promise((resolve, reject) => {
          this.resolveCallback = resolve;
          this.rejectCallback = reject;
          const callback = (...args) => this.callback(...args);
          setImmediate(this.apiCall, firstRequest, callback);
        });
      }
    };
    exports2.ResourceCollector = ResourceCollector;
  }
});

// node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js
var require_pagedApiCaller = __commonJS({
  "node_modules/google-gax/build/src/paginationCalls/pagedApiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PagedApiCaller = void 0;
    var call_1 = require_call2();
    var googleError_1 = require_googleError();
    var resourceCollector_1 = require_resourceCollector();
    var PagedApiCaller = class {
      /**
       * Creates an API caller that returns a stream to performs page-streaming.
       *
       * @private
       * @constructor
       * @param {PageDescriptor} pageDescriptor - indicates the structure
       *   of page streaming to be performed.
       */
      constructor(pageDescriptor) {
        this.pageDescriptor = pageDescriptor;
      }
      /**
       * This function translates between regular gRPC calls (that accepts a request and returns a response,
       * and does not know anything about pages and page tokens) and the users' callback (that expects
       * to see resources from one page, a request to get the next page, and the raw response from the server).
       *
       * It generates a function that can be passed as a callback function to a gRPC call, will understand
       * pagination-specific fields in the response, and call the users' callback after having those fields
       * parsed.
       *
       * @param request Request object. It needs to be passed to all subsequent next page requests
       * (the main content of the request object stays unchanged, only the next page token changes)
       * @param callback The user's callback that expects the page content, next page request, and raw response.
       */
      generateParseResponseCallback(request, callback) {
        const resourceFieldName = this.pageDescriptor.resourceField;
        const responsePageTokenFieldName = this.pageDescriptor.responsePageTokenField;
        const requestPageTokenFieldName = this.pageDescriptor.requestPageTokenField;
        return (err, response) => {
          if (err) {
            callback(err);
            return;
          }
          if (!request) {
            callback(new googleError_1.GoogleError("Undefined request in pagination method callback."));
            return;
          }
          if (!response) {
            callback(new googleError_1.GoogleError("Undefined response in pagination method callback."));
            return;
          }
          const resources = response[resourceFieldName] || [];
          const pageToken = response[responsePageTokenFieldName];
          let nextPageRequest = null;
          if (pageToken) {
            nextPageRequest = Object.assign({}, request);
            nextPageRequest[requestPageTokenFieldName] = pageToken;
          }
          callback(err, resources, nextPageRequest, response);
        };
      }
      /**
       * Adds a special ability to understand pagination-specific fields to the existing gRPC call.
       * The original gRPC call just calls callback(err, result).
       * The wrapped one will call callback(err, resources, nextPageRequest, rawResponse) instead.
       *
       * @param func gRPC call (normally, a service stub call). The gRPC call is expected to accept four parameters:
       * request, metadata, call options, and callback.
       */
      wrap(func) {
        const self2 = this;
        return function wrappedCall(argument, metadata, options, callback) {
          return func(argument, metadata, options, self2.generateParseResponseCallback(argument, callback));
        };
      }
      /**
       * Makes it possible to use both callback-based and promise-based calls.
       * Returns an OngoingCall or OngoingCallPromise object.
       * Regardless of which one is returned, it always has a `.callback` to call.
       *
       * @param settings Call settings. Can only be used to replace Promise with another promise implementation.
       * @param [callback] Callback to be called, if any.
       */
      init(callback) {
        if (callback) {
          return new call_1.OngoingCall(callback);
        }
        return new call_1.OngoingCallPromise();
      }
      /**
       * Implements auto-pagination logic.
       *
       * @param apiCall A function that performs gRPC request and calls its callback with a response or an error.
       * It's supposed to be a gRPC service stub function wrapped into several layers of wrappers that make it
       * accept just two parameters: (request, callback).
       * @param request A request object that came from the user.
       * @param settings Call settings. We are interested in `maxResults` and `autoPaginate` (they are optional).
       * @param ongoingCall An instance of OngoingCall or OngoingCallPromise that can be used for call cancellation,
       * and is used to return results to the user.
       */
      call(apiCall, request, settings, ongoingCall) {
        request = Object.assign({}, request);
        if (!settings.autoPaginate) {
          ongoingCall.call(apiCall, request);
          return;
        }
        const maxResults = settings.maxResults || -1;
        const resourceCollector = new resourceCollector_1.ResourceCollector(apiCall, maxResults);
        resourceCollector.processAllPages(request).then((resources) => ongoingCall.callback(null, resources), (err) => ongoingCall.callback(err));
      }
      fail(ongoingCall, err) {
        ongoingCall.callback(err);
      }
      result(ongoingCall) {
        return ongoingCall.promise;
      }
    };
    exports2.PagedApiCaller = PagedApiCaller;
  }
});

// node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js
var require_pageDescriptor = __commonJS({
  "node_modules/google-gax/build/src/paginationCalls/pageDescriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PageDescriptor = void 0;
    var stream_1 = require("stream");
    var normalApiCaller_1 = require_normalApiCaller();
    var pagedApiCaller_1 = require_pagedApiCaller();
    var maxAttemptsEmptyResponse = 10;
    var PageDescriptor = class {
      constructor(requestPageTokenField, responsePageTokenField, resourceField) {
        this.requestPageTokenField = requestPageTokenField;
        this.responsePageTokenField = responsePageTokenField;
        this.resourceField = resourceField;
      }
      /**
       * Creates a new object Stream which emits the resource on 'data' event.
       */
      createStream(apiCall, request, options) {
        const stream = new stream_1.PassThrough({ objectMode: true });
        options = Object.assign({}, options, { autoPaginate: false });
        const maxResults = "maxResults" in options ? options.maxResults : -1;
        let pushCount = 0;
        let started = false;
        function callback(err, resources, next, apiResp) {
          if (err) {
            stream.emit("error", err);
            return;
          }
          stream.emit("response", apiResp);
          for (let i = 0; i < resources.length; ++i) {
            if (stream._readableState.ended) {
              return;
            }
            if (resources[i] === null) {
              continue;
            }
            stream.push(resources[i]);
            pushCount++;
            if (pushCount === maxResults) {
              stream.end();
            }
          }
          if (stream._readableState.ended) {
            return;
          }
          if (!next) {
            stream.end();
            return;
          }
          if ("pageToken" in options) {
            delete options.pageToken;
          }
          if (stream.isPaused()) {
            request = next;
            started = false;
          } else {
            setImmediate(apiCall, next, options, callback);
          }
        }
        stream.on("resume", () => {
          if (!started) {
            started = true;
            apiCall(request, options, callback);
          }
        });
        return stream;
      }
      /**
       * Create an async iterable which can be recursively called for data on-demand.
       */
      asyncIterate(apiCall, request, options) {
        options = Object.assign({}, options, { autoPaginate: false });
        const iterable = this.createIterator(apiCall, request, options);
        return iterable;
      }
      createIterator(apiCall, request, options) {
        const asyncIterable = {
          [Symbol.asyncIterator]() {
            let nextPageRequest = request;
            const cache = [];
            return {
              async next() {
                if (cache.length > 0) {
                  return Promise.resolve({
                    done: false,
                    value: cache.shift()
                  });
                }
                let attempts = 0;
                while (cache.length === 0 && nextPageRequest) {
                  let result;
                  [result, nextPageRequest] = await apiCall(nextPageRequest, options);
                  if (result && !Array.isArray(result)) {
                    for (const [key, value] of Object.entries(result)) {
                      cache.push([key, value]);
                    }
                  } else {
                    cache.push(...result);
                  }
                  if (cache.length === 0) {
                    ++attempts;
                    if (attempts > maxAttemptsEmptyResponse) {
                      break;
                    }
                  }
                }
                if (cache.length === 0) {
                  return Promise.resolve({ done: true, value: void 0 });
                }
                return Promise.resolve({ done: false, value: cache.shift() });
              }
            };
          }
        };
        return asyncIterable;
      }
      getApiCaller(settings) {
        if (!settings.autoPaginate) {
          return new normalApiCaller_1.NormalApiCaller();
        }
        return new pagedApiCaller_1.PagedApiCaller(this);
      }
    };
    exports2.PageDescriptor = PageDescriptor;
  }
});

// node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js
var require_streamingApiCaller = __commonJS({
  "node_modules/google-gax/build/src/streamingCalls/streamingApiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StreamingApiCaller = void 0;
    var warnings_1 = require_warnings();
    var streaming_1 = require_streaming();
    var StreamingApiCaller = class {
      /**
       * An API caller for methods of gRPC streaming.
       * @private
       * @constructor
       * @param {StreamDescriptor} descriptor - the descriptor of the method structure.
       */
      constructor(descriptor) {
        this.descriptor = descriptor;
      }
      init(callback) {
        return new streaming_1.StreamProxy(this.descriptor.type, callback, this.descriptor.rest);
      }
      wrap(func) {
        switch (this.descriptor.type) {
          case streaming_1.StreamType.SERVER_STREAMING:
            return (argument, metadata, options) => {
              return func(argument, metadata, options);
            };
          case streaming_1.StreamType.CLIENT_STREAMING:
            return (argument, metadata, options, callback) => {
              return func(metadata, options, callback);
            };
          case streaming_1.StreamType.BIDI_STREAMING:
            return (argument, metadata, options) => {
              return func(metadata, options);
            };
          default:
            (0, warnings_1.warn)("streaming_wrap_unknown_stream_type", `Unknown stream type: ${this.descriptor.type}`);
        }
        return func;
      }
      call(apiCall, argument, settings, stream) {
        stream.setStream(apiCall, argument, settings.retryRequestOptions);
      }
      fail(stream, err) {
        stream.emit("error", err);
      }
      result(stream) {
        return stream;
      }
    };
    exports2.StreamingApiCaller = StreamingApiCaller;
  }
});

// node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js
var require_streamDescriptor = __commonJS({
  "node_modules/google-gax/build/src/streamingCalls/streamDescriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StreamDescriptor = void 0;
    var streamingApiCaller_1 = require_streamingApiCaller();
    var StreamDescriptor = class {
      constructor(streamType, rest) {
        this.type = streamType;
        this.streaming = true;
        this.rest = rest;
      }
      getApiCaller(settings) {
        settings.retry = null;
        return new streamingApiCaller_1.StreamingApiCaller(this);
      }
    };
    exports2.StreamDescriptor = StreamDescriptor;
  }
});

// node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js
var require_bundleApiCaller = __commonJS({
  "node_modules/google-gax/build/src/bundlingCalls/bundleApiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BundleApiCaller = void 0;
    var call_1 = require_call2();
    var googleError_1 = require_googleError();
    var BundleApiCaller = class {
      constructor(bundler) {
        this.bundler = bundler;
      }
      init(callback) {
        if (callback) {
          return new call_1.OngoingCall(callback);
        }
        return new call_1.OngoingCallPromise();
      }
      wrap(func) {
        return func;
      }
      call(apiCall, argument, settings, status) {
        if (!settings.isBundling) {
          throw new googleError_1.GoogleError("Bundling enabled with no isBundling!");
        }
        status.call((argument2, callback) => {
          this.bundler.schedule(apiCall, argument2, callback);
          return status;
        }, argument);
      }
      fail(canceller, err) {
        canceller.callback(err);
      }
      result(canceller) {
        return canceller.promise;
      }
    };
    exports2.BundleApiCaller = BundleApiCaller;
  }
});

// node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js
var require_bundlingUtils = __commonJS({
  "node_modules/google-gax/build/src/bundlingCalls/bundlingUtils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.computeBundleId = void 0;
    function computeBundleId(obj, discriminatorFields) {
      const ids = [];
      let hasIds = false;
      for (const field of discriminatorFields) {
        const id = at(obj, field);
        if (id === void 0) {
          ids.push(null);
        } else {
          hasIds = true;
          ids.push(id);
        }
      }
      if (!hasIds) {
        return void 0;
      }
      return JSON.stringify(ids);
    }
    exports2.computeBundleId = computeBundleId;
    function at(obj, field) {
      const pathParts = field.split(".");
      let currentObj = obj;
      for (const pathPart of pathParts) {
        currentObj = currentObj === null || currentObj === void 0 ? void 0 : currentObj[pathPart];
      }
      return currentObj;
    }
  }
});

// node_modules/google-gax/build/src/bundlingCalls/task.js
var require_task = __commonJS({
  "node_modules/google-gax/build/src/bundlingCalls/task.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Task = exports2.deepCopyForResponse = void 0;
    var status_1 = require_status();
    var googleError_1 = require_googleError();
    function deepCopyForResponse(obj, subresponseInfo) {
      let result;
      if (obj === null) {
        return null;
      }
      if (obj === void 0) {
        return void 0;
      }
      if (Array.isArray(obj)) {
        result = [];
        obj.forEach((element) => {
          result.push(deepCopyForResponse(element, null));
        });
        return result;
      }
      if (obj.copy !== void 0) {
        return obj.copy();
      }
      if (obj instanceof ArrayBuffer) {
        return obj.slice(0);
      }
      if (typeof obj === "object") {
        result = {};
        Object.keys(obj).forEach((key) => {
          if (subresponseInfo && key === subresponseInfo.field && Array.isArray(obj[key])) {
            result[key] = obj[key].slice(subresponseInfo.start, subresponseInfo.end);
          } else {
            result[key] = deepCopyForResponse(obj[key], null);
          }
        });
        return result;
      }
      return obj;
    }
    exports2.deepCopyForResponse = deepCopyForResponse;
    var Task = class {
      /**
       * A task coordinates the execution of a single bundle.
       *
       * @param {function} apiCall - The function to conduct calling API.
       * @param {Object} bundlingRequest - The base request object to be used
       *   for the actual API call.
       * @param {string} bundledField - The name of the field in bundlingRequest
       *   to be bundled.
       * @param {string=} subresponseField - The name of the field in the response
       *   to be passed to the callback.
       * @constructor
       * @private
       */
      constructor(apiCall, bundlingRequest, bundledField, subresponseField) {
        this._apiCall = apiCall;
        this._request = bundlingRequest;
        this._bundledField = bundledField;
        this._subresponseField = subresponseField;
        this._data = [];
      }
      /**
       * Returns the number of elements in a task.
       * @return {number} The number of elements.
       */
      getElementCount() {
        let count = 0;
        for (let i = 0; i < this._data.length; ++i) {
          count += this._data[i].elements.length;
        }
        return count;
      }
      /**
       * Returns the total byte size of the elements in a task.
       * @return {number} The byte size.
       */
      getRequestByteSize() {
        let size = 0;
        for (let i = 0; i < this._data.length; ++i) {
          size += this._data[i].bytes;
        }
        return size;
      }
      /**
       * Invokes the actual API call with current elements.
       * @return {string[]} - the list of ids for invocations to be run.
       */
      run() {
        if (this._data.length === 0) {
          return [];
        }
        const request = this._request;
        const elements = [];
        const ids = [];
        for (let i = 0; i < this._data.length; ++i) {
          elements.push(...this._data[i].elements);
          ids.push(this._data[i].callback.id);
        }
        request[this._bundledField] = elements;
        const self2 = this;
        this.callCanceller = this._apiCall(request, (err, response) => {
          const responses = [];
          if (err) {
            self2._data.forEach(() => {
              responses.push(void 0);
            });
          } else {
            let subresponseInfo = null;
            if (self2._subresponseField) {
              subresponseInfo = {
                field: self2._subresponseField,
                start: 0
              };
            }
            self2._data.forEach((data) => {
              if (subresponseInfo) {
                subresponseInfo.end = subresponseInfo.start + data.elements.length;
              }
              responses.push(deepCopyForResponse(response, subresponseInfo));
              if (subresponseInfo) {
                subresponseInfo.start = subresponseInfo.end;
              }
            });
          }
          for (let i = 0; i < self2._data.length; ++i) {
            if (self2._data[i].cancelled) {
              const error = new googleError_1.GoogleError("cancelled");
              error.code = status_1.Status.CANCELLED;
              self2._data[i].callback(error);
            } else {
              self2._data[i].callback(err, responses[i]);
            }
          }
        });
        return ids;
      }
      /**
       * Appends the list of elements into the task.
       * @param {Object[]} elements - the new list of elements.
       * @param {number} bytes - the byte size required to encode elements in the API.
       * @param {APICallback} callback - the callback of the method call.
       */
      extend(elements, bytes, callback) {
        this._data.push({
          elements,
          bytes,
          callback
        });
      }
      /**
       * Cancels a part of elements.
       * @param {string} id - The identifier of the part of elements.
       * @return {boolean} Whether the entire task will be canceled or not.
       */
      cancel(id) {
        if (this.callCanceller) {
          let allCancelled = true;
          this._data.forEach((d) => {
            if (d.callback.id === id) {
              d.cancelled = true;
            }
            if (!d.cancelled) {
              allCancelled = false;
            }
          });
          if (allCancelled) {
            this.callCanceller.cancel();
          }
          return allCancelled;
        }
        for (let i = 0; i < this._data.length; ++i) {
          if (this._data[i].callback.id === id) {
            const error = new googleError_1.GoogleError("cancelled");
            error.code = status_1.Status.CANCELLED;
            this._data[i].callback(error);
            this._data.splice(i, 1);
            break;
          }
        }
        return this._data.length === 0;
      }
    };
    exports2.Task = Task;
  }
});

// node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js
var require_bundleExecutor = __commonJS({
  "node_modules/google-gax/build/src/bundlingCalls/bundleExecutor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BundleExecutor = void 0;
    var status_1 = require_status();
    var googleError_1 = require_googleError();
    var warnings_1 = require_warnings();
    var bundlingUtils_1 = require_bundlingUtils();
    var task_1 = require_task();
    function noop() {
    }
    var BundleExecutor = class {
      /**
       * Organizes requests for an api service that requires to bundle them.
       *
       * @param {BundleOptions} bundleOptions - configures strategy this instance
       *   uses when executing bundled functions.
       * @param {BundleDescriptor} bundleDescriptor - the description of the bundling.
       * @constructor
       */
      constructor(bundleOptions, bundleDescriptor) {
        this._options = bundleOptions;
        this._descriptor = bundleDescriptor;
        this._tasks = {};
        this._timers = {};
        this._invocations = {};
        this._invocationId = 0;
      }
      /**
       * Schedule a method call.
       *
       * @param {function} apiCall - the function for an API call.
       * @param {Object} request - the request object to be bundled with others.
       * @param {APICallback} callback - the callback to be called when the method finished.
       * @return {function()} - the function to cancel the scheduled invocation.
       */
      schedule(apiCall, request, callback) {
        const bundleId = (0, bundlingUtils_1.computeBundleId)(request, this._descriptor.requestDiscriminatorFields);
        callback = callback || noop;
        if (bundleId === void 0) {
          (0, warnings_1.warn)("bundling_schedule_bundleid_undefined", `The request does not have enough information for request bundling. Invoking immediately. Request: ${JSON.stringify(request)} discriminator fields: ${this._descriptor.requestDiscriminatorFields}`);
          return apiCall(request, callback);
        }
        if (request[this._descriptor.bundledField] === void 0) {
          (0, warnings_1.warn)("bundling_no_bundled_field", `Request does not contain field ${this._descriptor.bundledField} that must present for bundling. Invoking immediately. Request: ${JSON.stringify(request)}`);
          return apiCall(request, callback);
        }
        if (!(bundleId in this._tasks)) {
          this._tasks[bundleId] = new task_1.Task(apiCall, request, this._descriptor.bundledField, this._descriptor.subresponseField);
        }
        let task = this._tasks[bundleId];
        callback.id = String(this._invocationId++);
        this._invocations[callback.id] = bundleId;
        const bundledField = request[this._descriptor.bundledField];
        const elementCount = bundledField.length;
        let requestBytes = 0;
        const self2 = this;
        bundledField.forEach((obj) => {
          requestBytes += this._descriptor.byteLengthFunction(obj);
        });
        const countLimit = this._options.elementCountLimit || 0;
        const byteLimit = this._options.requestByteLimit || 0;
        if (countLimit > 0 && elementCount > countLimit || byteLimit > 0 && requestBytes >= byteLimit) {
          let message;
          if (countLimit > 0 && elementCount > countLimit) {
            message = "The number of elements " + elementCount + " exceeds the limit " + this._options.elementCountLimit;
          } else {
            message = "The required bytes " + requestBytes + " exceeds the limit " + this._options.requestByteLimit;
          }
          const error = new googleError_1.GoogleError(message);
          error.code = status_1.Status.INVALID_ARGUMENT;
          callback(error);
          return {
            cancel: noop
          };
        }
        const existingCount = task.getElementCount();
        const existingBytes = task.getRequestByteSize();
        if (countLimit > 0 && elementCount + existingCount >= countLimit || byteLimit > 0 && requestBytes + existingBytes >= byteLimit) {
          this._runNow(bundleId);
          this._tasks[bundleId] = new task_1.Task(apiCall, request, this._descriptor.bundledField, this._descriptor.subresponseField);
          task = this._tasks[bundleId];
        }
        task.extend(bundledField, requestBytes, callback);
        const ret = {
          cancel() {
            self2._cancel(callback.id);
          }
        };
        const countThreshold = this._options.elementCountThreshold || 0;
        const sizeThreshold = this._options.requestByteThreshold || 0;
        if (countThreshold > 0 && task.getElementCount() >= countThreshold || sizeThreshold > 0 && task.getRequestByteSize() >= sizeThreshold) {
          this._runNow(bundleId);
          return ret;
        }
        if (!(bundleId in this._timers) && this._options.delayThreshold > 0) {
          this._timers[bundleId] = setTimeout(() => {
            delete this._timers[bundleId];
            this._runNow(bundleId);
          }, this._options.delayThreshold);
        }
        return ret;
      }
      /**
       * Clears scheduled timeout if it exists.
       *
       * @param {String} bundleId - the id for the task whose timeout needs to be
       *   cleared.
       * @private
       */
      _maybeClearTimeout(bundleId) {
        if (bundleId in this._timers) {
          const timerId = this._timers[bundleId];
          delete this._timers[bundleId];
          clearTimeout(timerId);
        }
      }
      /**
       * Cancels an event.
       *
       * @param {String} id - The id for the event in the task.
       * @private
       */
      _cancel(id) {
        if (!(id in this._invocations)) {
          return;
        }
        const bundleId = this._invocations[id];
        if (!(bundleId in this._tasks)) {
          return;
        }
        const task = this._tasks[bundleId];
        delete this._invocations[id];
        if (task.cancel(id)) {
          this._maybeClearTimeout(bundleId);
          delete this._tasks[bundleId];
        }
      }
      /**
       * Invokes a task.
       *
       * @param {String} bundleId - The id for the task.
       * @private
       */
      _runNow(bundleId) {
        if (!(bundleId in this._tasks)) {
          (0, warnings_1.warn)("bundle_runnow_bundleid_unknown", `No such bundleid: ${bundleId}`);
          return;
        }
        this._maybeClearTimeout(bundleId);
        const task = this._tasks[bundleId];
        delete this._tasks[bundleId];
        task.run().forEach((id) => {
          delete this._invocations[id];
        });
      }
    };
    exports2.BundleExecutor = BundleExecutor;
  }
});

// node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js
var require_bundleDescriptor = __commonJS({
  "node_modules/google-gax/build/src/bundlingCalls/bundleDescriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BundleDescriptor = void 0;
    var normalApiCaller_1 = require_normalApiCaller();
    var bundleApiCaller_1 = require_bundleApiCaller();
    var bundleExecutor_1 = require_bundleExecutor();
    var util_1 = require_util3();
    var BundleDescriptor = class {
      /**
       * Describes the structure of bundled call.
       *
       * requestDiscriminatorFields may include '.' as a separator, which is used to
       * indicate object traversal. This allows fields in nested objects to be used
       * to determine what request to bundle.
       *
       * @property {String} bundledField
       * @property {String} requestDiscriminatorFields
       * @property {String} subresponseField
       * @property {Function} byteLengthFunction
       *
       * @param {String} bundledField - the repeated field in the request message
       *   that will have its elements aggregated by bundling.
       * @param {String} requestDiscriminatorFields - a list of fields in the
       *   target request message class that are used to detemrine which request
       *   messages should be bundled together.
       * @param {String} subresponseField - an optional field, when present it
       *   indicates the field in the response message that should be used to
       *   demultiplex the response into multiple response messages.
       * @param {Function} byteLengthFunction - a function to obtain the byte
       *   length to be consumed for the bundled field messages. Because Node.JS
       *   protobuf.js/gRPC uses builtin Objects for the user-visible data and
       *   internally they are encoded/decoded in protobuf manner, this function
       *   is actually necessary to calculate the byte length.
       * @constructor
       */
      constructor(bundledField, requestDiscriminatorFields, subresponseField, byteLengthFunction) {
        if (!byteLengthFunction && typeof subresponseField === "function") {
          byteLengthFunction = subresponseField;
          subresponseField = null;
        }
        this.bundledField = bundledField;
        this.requestDiscriminatorFields = requestDiscriminatorFields.map(util_1.toCamelCase);
        this.subresponseField = subresponseField;
        this.byteLengthFunction = byteLengthFunction;
      }
      getApiCaller(settings) {
        if (settings.isBundling === false) {
          return new normalApiCaller_1.NormalApiCaller();
        }
        return new bundleApiCaller_1.BundleApiCaller(new bundleExecutor_1.BundleExecutor(settings.bundleOptions, this));
      }
    };
    exports2.BundleDescriptor = BundleDescriptor;
  }
});

// node_modules/google-gax/build/src/descriptor.js
var require_descriptor3 = __commonJS({
  "node_modules/google-gax/build/src/descriptor.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BundleDescriptor = exports2.StreamDescriptor = exports2.PageDescriptor = exports2.LongrunningDescriptor = void 0;
    var longRunningDescriptor_1 = require_longRunningDescriptor();
    Object.defineProperty(exports2, "LongrunningDescriptor", { enumerable: true, get: function() {
      return longRunningDescriptor_1.LongRunningDescriptor;
    } });
    var pageDescriptor_1 = require_pageDescriptor();
    Object.defineProperty(exports2, "PageDescriptor", { enumerable: true, get: function() {
      return pageDescriptor_1.PageDescriptor;
    } });
    var streamDescriptor_1 = require_streamDescriptor();
    Object.defineProperty(exports2, "StreamDescriptor", { enumerable: true, get: function() {
      return streamDescriptor_1.StreamDescriptor;
    } });
    var bundleDescriptor_1 = require_bundleDescriptor();
    Object.defineProperty(exports2, "BundleDescriptor", { enumerable: true, get: function() {
      return bundleDescriptor_1.BundleDescriptor;
    } });
  }
});

// node_modules/google-gax/build/src/iam_policy_service_client_config.json
var require_iam_policy_service_client_config = __commonJS({
  "node_modules/google-gax/build/src/iam_policy_service_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.iam.v1.IAMPolicy": {
          retry_codes: {
            non_idempotent: [],
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ]
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 2e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 2e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            GetIamPolicy: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            SetIamPolicy: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            TestIamPermissions: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/google-gax/build/protos/iam_service.json
var require_iam_service2 = __commonJS({
  "node_modules/google-gax/build/protos/iam_service.json"(exports2, module2) {
    module2.exports = { nested: { google: { nested: { iam: { nested: { v1: { options: { cc_enable_arenas: true, csharp_namespace: "Google.Cloud.Iam.V1", go_package: "google.golang.org/genproto/googleapis/iam/v1;iam", java_multiple_files: true, java_outer_classname: "PolicyProto", java_package: "com.google.iam.v1", php_namespace: "Google\\Cloud\\Iam\\V1" }, nested: { IAMPolicy: { options: { "(google.api.default_host)": "iam-meta-api.googleapis.com" }, methods: { SetIamPolicy: { requestType: "SetIamPolicyRequest", responseType: "Policy", options: { "(google.api.http).post": "/v1/{resource=**}:setIamPolicy", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{resource=**}:setIamPolicy", body: "*" } }] }, GetIamPolicy: { requestType: "GetIamPolicyRequest", responseType: "Policy", options: { "(google.api.http).post": "/v1/{resource=**}:getIamPolicy", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{resource=**}:getIamPolicy", body: "*" } }] }, TestIamPermissions: { requestType: "TestIamPermissionsRequest", responseType: "TestIamPermissionsResponse", options: { "(google.api.http).post": "/v1/{resource=**}:testIamPermissions", "(google.api.http).body": "*" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{resource=**}:testIamPermissions", body: "*" } }] } } }, SetIamPolicyRequest: { fields: { resource: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "*" } }, policy: { type: "Policy", id: 2, options: { "(google.api.field_behavior)": "REQUIRED" } } } }, GetIamPolicyRequest: { fields: { resource: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "*" } }, options: { type: "GetPolicyOptions", id: 2 } } }, TestIamPermissionsRequest: { fields: { resource: { type: "string", id: 1, options: { "(google.api.field_behavior)": "REQUIRED", "(google.api.resource_reference).type": "*" } }, permissions: { rule: "repeated", type: "string", id: 2, options: { "(google.api.field_behavior)": "REQUIRED" } } } }, TestIamPermissionsResponse: { fields: { permissions: { rule: "repeated", type: "string", id: 1 } } }, GetPolicyOptions: { fields: { requestedPolicyVersion: { type: "int32", id: 1 } } }, Policy: { fields: { version: { type: "int32", id: 1 }, bindings: { rule: "repeated", type: "Binding", id: 4 }, etag: { type: "bytes", id: 3 } } }, Binding: { fields: { role: { type: "string", id: 1 }, members: { rule: "repeated", type: "string", id: 2 }, condition: { type: "google.type.Expr", id: 3 } } }, PolicyDelta: { fields: { bindingDeltas: { rule: "repeated", type: "BindingDelta", id: 1 }, auditConfigDeltas: { rule: "repeated", type: "AuditConfigDelta", id: 2 } } }, BindingDelta: { fields: { action: { type: "Action", id: 1 }, role: { type: "string", id: 2 }, member: { type: "string", id: 3 }, condition: { type: "google.type.Expr", id: 4 } }, nested: { Action: { values: { ACTION_UNSPECIFIED: 0, ADD: 1, REMOVE: 2 } } } }, AuditConfigDelta: { fields: { action: { type: "Action", id: 1 }, service: { type: "string", id: 2 }, exemptedMember: { type: "string", id: 3 }, logType: { type: "string", id: 4 } }, nested: { Action: { values: { ACTION_UNSPECIFIED: 0, ADD: 1, REMOVE: 2 } } } }, logging: { options: { csharp_namespace: "Google.Cloud.Iam.V1.Logging", go_package: "google.golang.org/genproto/googleapis/iam/v1/logging;logging", java_multiple_files: true, java_outer_classname: "AuditDataProto", java_package: "com.google.iam.v1.logging" }, nested: { AuditData: { fields: { policyDelta: { type: "google.iam.v1.PolicyDelta", id: 2 } } } } } } } } }, api: { options: { go_package: "google.golang.org/genproto/googleapis/api/annotations;annotations", java_multiple_files: true, java_outer_classname: "ResourceProto", java_package: "com.google.api", objc_class_prefix: "GAPI", cc_enable_arenas: true }, nested: { http: { type: "HttpRule", id: 72295728, extend: "google.protobuf.MethodOptions" }, Http: { fields: { rules: { rule: "repeated", type: "HttpRule", id: 1 }, fullyDecodeReservedExpansion: { type: "bool", id: 2 } } }, HttpRule: { oneofs: { pattern: { oneof: ["get", "put", "post", "delete", "patch", "custom"] } }, fields: { selector: { type: "string", id: 1 }, get: { type: "string", id: 2 }, put: { type: "string", id: 3 }, post: { type: "string", id: 4 }, delete: { type: "string", id: 5 }, patch: { type: "string", id: 6 }, custom: { type: "CustomHttpPattern", id: 8 }, body: { type: "string", id: 7 }, responseBody: { type: "string", id: 12 }, additionalBindings: { rule: "repeated", type: "HttpRule", id: 11 } } }, CustomHttpPattern: { fields: { kind: { type: "string", id: 1 }, path: { type: "string", id: 2 } } }, methodSignature: { rule: "repeated", type: "string", id: 1051, extend: "google.protobuf.MethodOptions" }, defaultHost: { type: "string", id: 1049, extend: "google.protobuf.ServiceOptions" }, oauthScopes: { type: "string", id: 1050, extend: "google.protobuf.ServiceOptions" }, fieldBehavior: { rule: "repeated", type: "google.api.FieldBehavior", id: 1052, extend: "google.protobuf.FieldOptions" }, FieldBehavior: { values: { FIELD_BEHAVIOR_UNSPECIFIED: 0, OPTIONAL: 1, REQUIRED: 2, OUTPUT_ONLY: 3, INPUT_ONLY: 4, IMMUTABLE: 5 } }, resourceReference: { type: "google.api.ResourceReference", id: 1055, extend: "google.protobuf.FieldOptions" }, resourceDefinition: { rule: "repeated", type: "google.api.ResourceDescriptor", id: 1053, extend: "google.protobuf.FileOptions" }, resource: { type: "google.api.ResourceDescriptor", id: 1053, extend: "google.protobuf.MessageOptions" }, ResourceDescriptor: { fields: { type: { type: "string", id: 1 }, pattern: { rule: "repeated", type: "string", id: 2 }, nameField: { type: "string", id: 3 }, history: { type: "History", id: 4 }, plural: { type: "string", id: 5 }, singular: { type: "string", id: 6 } }, nested: { History: { values: { HISTORY_UNSPECIFIED: 0, ORIGINALLY_SINGLE_PATTERN: 1, FUTURE_MULTI_PATTERN: 2 } } } }, ResourceReference: { fields: { type: { type: "string", id: 1 }, childType: { type: "string", id: 2 } } } } }, protobuf: { options: { go_package: "github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor", java_package: "com.google.protobuf", java_outer_classname: "DescriptorProtos", csharp_namespace: "Google.Protobuf.Reflection", objc_class_prefix: "GPB", cc_enable_arenas: true, optimize_for: "SPEED" }, nested: { FileDescriptorSet: { fields: { file: { rule: "repeated", type: "FileDescriptorProto", id: 1 } } }, FileDescriptorProto: { fields: { name: { type: "string", id: 1 }, package: { type: "string", id: 2 }, dependency: { rule: "repeated", type: "string", id: 3 }, publicDependency: { rule: "repeated", type: "int32", id: 10, options: { packed: false } }, weakDependency: { rule: "repeated", type: "int32", id: 11, options: { packed: false } }, messageType: { rule: "repeated", type: "DescriptorProto", id: 4 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 5 }, service: { rule: "repeated", type: "ServiceDescriptorProto", id: 6 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 7 }, options: { type: "FileOptions", id: 8 }, sourceCodeInfo: { type: "SourceCodeInfo", id: 9 }, syntax: { type: "string", id: 12 } } }, DescriptorProto: { fields: { name: { type: "string", id: 1 }, field: { rule: "repeated", type: "FieldDescriptorProto", id: 2 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 6 }, nestedType: { rule: "repeated", type: "DescriptorProto", id: 3 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 4 }, extensionRange: { rule: "repeated", type: "ExtensionRange", id: 5 }, oneofDecl: { rule: "repeated", type: "OneofDescriptorProto", id: 8 }, options: { type: "MessageOptions", id: 7 }, reservedRange: { rule: "repeated", type: "ReservedRange", id: 9 }, reservedName: { rule: "repeated", type: "string", id: 10 } }, nested: { ExtensionRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 }, options: { type: "ExtensionRangeOptions", id: 3 } } }, ReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, ExtensionRangeOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, FieldDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 3 }, label: { type: "Label", id: 4 }, type: { type: "Type", id: 5 }, typeName: { type: "string", id: 6 }, extendee: { type: "string", id: 2 }, defaultValue: { type: "string", id: 7 }, oneofIndex: { type: "int32", id: 9 }, jsonName: { type: "string", id: 10 }, options: { type: "FieldOptions", id: 8 }, proto3Optional: { type: "bool", id: 17 } }, nested: { Type: { values: { TYPE_DOUBLE: 1, TYPE_FLOAT: 2, TYPE_INT64: 3, TYPE_UINT64: 4, TYPE_INT32: 5, TYPE_FIXED64: 6, TYPE_FIXED32: 7, TYPE_BOOL: 8, TYPE_STRING: 9, TYPE_GROUP: 10, TYPE_MESSAGE: 11, TYPE_BYTES: 12, TYPE_UINT32: 13, TYPE_ENUM: 14, TYPE_SFIXED32: 15, TYPE_SFIXED64: 16, TYPE_SINT32: 17, TYPE_SINT64: 18 } }, Label: { values: { LABEL_OPTIONAL: 1, LABEL_REQUIRED: 2, LABEL_REPEATED: 3 } } } }, OneofDescriptorProto: { fields: { name: { type: "string", id: 1 }, options: { type: "OneofOptions", id: 2 } } }, EnumDescriptorProto: { fields: { name: { type: "string", id: 1 }, value: { rule: "repeated", type: "EnumValueDescriptorProto", id: 2 }, options: { type: "EnumOptions", id: 3 }, reservedRange: { rule: "repeated", type: "EnumReservedRange", id: 4 }, reservedName: { rule: "repeated", type: "string", id: 5 } }, nested: { EnumReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, EnumValueDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 2 }, options: { type: "EnumValueOptions", id: 3 } } }, ServiceDescriptorProto: { fields: { name: { type: "string", id: 1 }, method: { rule: "repeated", type: "MethodDescriptorProto", id: 2 }, options: { type: "ServiceOptions", id: 3 } } }, MethodDescriptorProto: { fields: { name: { type: "string", id: 1 }, inputType: { type: "string", id: 2 }, outputType: { type: "string", id: 3 }, options: { type: "MethodOptions", id: 4 }, clientStreaming: { type: "bool", id: 5, options: { default: false } }, serverStreaming: { type: "bool", id: 6, options: { default: false } } } }, FileOptions: { fields: { javaPackage: { type: "string", id: 1 }, javaOuterClassname: { type: "string", id: 8 }, javaMultipleFiles: { type: "bool", id: 10, options: { default: false } }, javaGenerateEqualsAndHash: { type: "bool", id: 20, options: { deprecated: true } }, javaStringCheckUtf8: { type: "bool", id: 27, options: { default: false } }, optimizeFor: { type: "OptimizeMode", id: 9, options: { default: "SPEED" } }, goPackage: { type: "string", id: 11 }, ccGenericServices: { type: "bool", id: 16, options: { default: false } }, javaGenericServices: { type: "bool", id: 17, options: { default: false } }, pyGenericServices: { type: "bool", id: 18, options: { default: false } }, phpGenericServices: { type: "bool", id: 42, options: { default: false } }, deprecated: { type: "bool", id: 23, options: { default: false } }, ccEnableArenas: { type: "bool", id: 31, options: { default: true } }, objcClassPrefix: { type: "string", id: 36 }, csharpNamespace: { type: "string", id: 37 }, swiftPrefix: { type: "string", id: 39 }, phpClassPrefix: { type: "string", id: 40 }, phpNamespace: { type: "string", id: 41 }, phpMetadataNamespace: { type: "string", id: 44 }, rubyPackage: { type: "string", id: 45 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[38, 38]], nested: { OptimizeMode: { values: { SPEED: 1, CODE_SIZE: 2, LITE_RUNTIME: 3 } } } }, MessageOptions: { fields: { messageSetWireFormat: { type: "bool", id: 1, options: { default: false } }, noStandardDescriptorAccessor: { type: "bool", id: 2, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, mapEntry: { type: "bool", id: 7 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[8, 8], [9, 9]] }, FieldOptions: { fields: { ctype: { type: "CType", id: 1, options: { default: "STRING" } }, packed: { type: "bool", id: 2 }, jstype: { type: "JSType", id: 6, options: { default: "JS_NORMAL" } }, lazy: { type: "bool", id: 5, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, weak: { type: "bool", id: 10, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[4, 4]], nested: { CType: { values: { STRING: 0, CORD: 1, STRING_PIECE: 2 } }, JSType: { values: { JS_NORMAL: 0, JS_STRING: 1, JS_NUMBER: 2 } } } }, OneofOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, EnumOptions: { fields: { allowAlias: { type: "bool", id: 2 }, deprecated: { type: "bool", id: 3, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[5, 5]] }, EnumValueOptions: { fields: { deprecated: { type: "bool", id: 1, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, ServiceOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, MethodOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, idempotencyLevel: { type: "IdempotencyLevel", id: 34, options: { default: "IDEMPOTENCY_UNKNOWN" } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], nested: { IdempotencyLevel: { values: { IDEMPOTENCY_UNKNOWN: 0, NO_SIDE_EFFECTS: 1, IDEMPOTENT: 2 } } } }, UninterpretedOption: { fields: { name: { rule: "repeated", type: "NamePart", id: 2 }, identifierValue: { type: "string", id: 3 }, positiveIntValue: { type: "uint64", id: 4 }, negativeIntValue: { type: "int64", id: 5 }, doubleValue: { type: "double", id: 6 }, stringValue: { type: "bytes", id: 7 }, aggregateValue: { type: "string", id: 8 } }, nested: { NamePart: { fields: { namePart: { rule: "required", type: "string", id: 1 }, isExtension: { rule: "required", type: "bool", id: 2 } } } } }, SourceCodeInfo: { fields: { location: { rule: "repeated", type: "Location", id: 1 } }, nested: { Location: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, span: { rule: "repeated", type: "int32", id: 2 }, leadingComments: { type: "string", id: 3 }, trailingComments: { type: "string", id: 4 }, leadingDetachedComments: { rule: "repeated", type: "string", id: 6 } } } } }, GeneratedCodeInfo: { fields: { annotation: { rule: "repeated", type: "Annotation", id: 1 } }, nested: { Annotation: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, sourceFile: { type: "string", id: 2 }, begin: { type: "int32", id: 3 }, end: { type: "int32", id: 4 } } } } } } }, type: { options: { go_package: "google.golang.org/genproto/googleapis/type/expr;expr", java_multiple_files: true, java_outer_classname: "ExprProto", java_package: "com.google.type", objc_class_prefix: "GTP" }, nested: { Expr: { fields: { expression: { type: "string", id: 1 }, title: { type: "string", id: 2 }, description: { type: "string", id: 3 }, location: { type: "string", id: 4 } } } } } } } } };
  }
});

// node_modules/google-gax/build/src/iamService.js
var require_iamService = __commonJS({
  "node_modules/google-gax/build/src/iamService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IamClient = void 0;
    var createApiCall_1 = require_createApiCall();
    var routingHeader = require_routingHeader();
    var gapicConfig = require_iam_policy_service_client_config();
    var fallback = require_fallback();
    var version = require_package4().version;
    var jsonProtos = require_iam_service2();
    var IamClient = class {
      constructor(gaxGrpc, options) {
        this._terminated = false;
        this.descriptors = { page: {}, stream: {}, longrunning: {} };
        this.innerApiCalls = {};
        this.gaxGrpc = gaxGrpc;
        const opts = Object.assign({
          servicePath: options.servicePath,
          port: options.port,
          clientConfig: options.clientConfig,
          apiEndpoint: options.apiEndpoint,
          fallback: options.fallback
        }, options);
        version = opts.fallback ? fallback.version : version;
        opts.scopes = this.constructor.scopes;
        this._opts = opts;
        this.auth = gaxGrpc.auth;
        const clientHeader = [`gax/${version}`, `gapic/${version}`];
        if (typeof process !== "undefined" && "versions" in process) {
          clientHeader.push(`gl-node/${process.versions.node}`);
        } else {
          clientHeader.push(`gl-web/${version}`);
        }
        if (!opts.fallback) {
          clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
          clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        this._protos = this.gaxGrpc.loadProtoJSON(jsonProtos);
        this._defaults = gaxGrpc.constructSettings("google.iam.v1.IAMPolicy", gapicConfig, opts.clientConfig || {}, { "x-goog-api-client": clientHeader.join(" ") });
        this.innerApiCalls = {};
      }
      /**
       * Initialize the client.
       * Performs asynchronous operations (such as authentication) and prepares the client.
       * This function will be called automatically when any class method is called for the
       * first time, but if you need to initialize it before calling an actual method,
       * feel free to call initialize() directly.
       *
       * You can await on this method if you want to make sure the client is initialized.
       *
       * @returns {Promise} A promise that resolves to an authenticated service stub.
       */
      initialize() {
        if (this.iamPolicyStub) {
          return this.iamPolicyStub;
        }
        this.iamPolicyStub = this.gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService("google.iam.v1.IAMPolicy") : this._protos.google.iam.v1.IAMPolicy, this._opts);
        const iamPolicyStubMethods = [
          "getIamPolicy",
          "setIamPolicy",
          "testIamPermissions"
        ];
        for (const methodName of iamPolicyStubMethods) {
          const innerCallPromise = this.iamPolicyStub.then((stub) => (...args) => {
            if (this._terminated) {
              return Promise.reject("The client has already been closed.");
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, this._defaults[methodName], this.descriptors.page[methodName]);
        }
        return this.iamPolicyStub;
      }
      /**
       * The DNS address for this API service.
       */
      static get servicePath() {
        return "cloudkms.googleapis.com";
      }
      /**
       * The DNS address for this API service - same as servicePath(),
       * exists for compatibility reasons.
       */
      static get apiEndpoint() {
        return "cloudkms.googleapis.com";
      }
      /**
       * The port for this API service.
       */
      static get port() {
        return 443;
      }
      /**
       * The scopes needed to make gRPC calls for every method defined
       * in this service.
       */
      static get scopes() {
        return [
          "https://www.googleapis.com/auth/cloud-platform",
          "https://www.googleapis.com/auth/cloudkms"
        ];
      }
      getProjectId(callback) {
        if (this.auth && "getProjectId" in this.auth) {
          return this.auth.getProjectId(callback);
        }
        if (callback) {
          callback(new Error("Cannot determine project ID."));
        } else {
          return Promise.reject("Cannot determine project ID.");
        }
      }
      getIamPolicy(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          resource: request.resource
        });
        this.initialize();
        return this.innerApiCalls.getIamPolicy(request, options, callback);
      }
      setIamPolicy(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          resource: request.resource
        });
        this.initialize();
        return this.innerApiCalls.setIamPolicy(request, options, callback);
      }
      testIamPermissions(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          resource: request.resource
        });
        this.initialize();
        return this.innerApiCalls.testIamPermissions(request, options, callback);
      }
      /**
       * Terminate the GRPC channel and close the client.
       *
       * The client will no longer be usable and all future behavior is undefined.
       */
      close() {
        this.initialize();
        if (!this._terminated) {
          return this.iamPolicyStub.then((stub) => {
            this._terminated = true;
            stub.close();
          });
        }
        return Promise.resolve();
      }
    };
    exports2.IamClient = IamClient;
  }
});

// node_modules/google-gax/build/protos/locations.json
var require_locations2 = __commonJS({
  "node_modules/google-gax/build/protos/locations.json"(exports2, module2) {
    module2.exports = { nested: { google: { nested: { cloud: { nested: { location: { options: { cc_enable_arenas: true, go_package: "google.golang.org/genproto/googleapis/cloud/location;location", java_multiple_files: true, java_outer_classname: "LocationsProto", java_package: "com.google.cloud.location" }, nested: { Locations: { options: { "(google.api.default_host)": "cloud.googleapis.com", "(google.api.oauth_scopes)": "https://www.googleapis.com/auth/cloud-platform" }, methods: { ListLocations: { requestType: "ListLocationsRequest", responseType: "ListLocationsResponse", options: { "(google.api.http).get": "/v1/{name=locations}", "(google.api.http).additional_bindings.get": "/v1/{name=projects/*}/locations" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{name=locations}", additional_bindings: { get: "/v1/{name=projects/*}/locations" } } }] }, GetLocation: { requestType: "GetLocationRequest", responseType: "Location", options: { "(google.api.http).get": "/v1/{name=locations/*}", "(google.api.http).additional_bindings.get": "/v1/{name=projects/*/locations/*}" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{name=locations/*}", additional_bindings: { get: "/v1/{name=projects/*/locations/*}" } } }] } } }, ListLocationsRequest: { fields: { name: { type: "string", id: 1 }, filter: { type: "string", id: 2 }, pageSize: { type: "int32", id: 3 }, pageToken: { type: "string", id: 4 } } }, ListLocationsResponse: { fields: { locations: { rule: "repeated", type: "Location", id: 1 }, nextPageToken: { type: "string", id: 2 } } }, GetLocationRequest: { fields: { name: { type: "string", id: 1 } } }, Location: { fields: { name: { type: "string", id: 1 }, locationId: { type: "string", id: 4 }, displayName: { type: "string", id: 5 }, labels: { keyType: "string", type: "string", id: 2 }, metadata: { type: "google.protobuf.Any", id: 3 } } } } } } }, api: { options: { go_package: "google.golang.org/genproto/googleapis/api/annotations;annotations", java_multiple_files: true, java_outer_classname: "ClientProto", java_package: "com.google.api", objc_class_prefix: "GAPI", cc_enable_arenas: true }, nested: { http: { type: "HttpRule", id: 72295728, extend: "google.protobuf.MethodOptions" }, Http: { fields: { rules: { rule: "repeated", type: "HttpRule", id: 1 }, fullyDecodeReservedExpansion: { type: "bool", id: 2 } } }, HttpRule: { oneofs: { pattern: { oneof: ["get", "put", "post", "delete", "patch", "custom"] } }, fields: { selector: { type: "string", id: 1 }, get: { type: "string", id: 2 }, put: { type: "string", id: 3 }, post: { type: "string", id: 4 }, delete: { type: "string", id: 5 }, patch: { type: "string", id: 6 }, custom: { type: "CustomHttpPattern", id: 8 }, body: { type: "string", id: 7 }, responseBody: { type: "string", id: 12 }, additionalBindings: { rule: "repeated", type: "HttpRule", id: 11 } } }, CustomHttpPattern: { fields: { kind: { type: "string", id: 1 }, path: { type: "string", id: 2 } } }, methodSignature: { rule: "repeated", type: "string", id: 1051, extend: "google.protobuf.MethodOptions" }, defaultHost: { type: "string", id: 1049, extend: "google.protobuf.ServiceOptions" }, oauthScopes: { type: "string", id: 1050, extend: "google.protobuf.ServiceOptions" } } }, protobuf: { options: { go_package: "google.golang.org/protobuf/types/descriptorpb", java_package: "com.google.protobuf", java_outer_classname: "DescriptorProtos", csharp_namespace: "Google.Protobuf.Reflection", objc_class_prefix: "GPB", cc_enable_arenas: true, optimize_for: "SPEED" }, nested: { FileDescriptorSet: { fields: { file: { rule: "repeated", type: "FileDescriptorProto", id: 1 } } }, FileDescriptorProto: { fields: { name: { type: "string", id: 1 }, package: { type: "string", id: 2 }, dependency: { rule: "repeated", type: "string", id: 3 }, publicDependency: { rule: "repeated", type: "int32", id: 10, options: { packed: false } }, weakDependency: { rule: "repeated", type: "int32", id: 11, options: { packed: false } }, messageType: { rule: "repeated", type: "DescriptorProto", id: 4 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 5 }, service: { rule: "repeated", type: "ServiceDescriptorProto", id: 6 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 7 }, options: { type: "FileOptions", id: 8 }, sourceCodeInfo: { type: "SourceCodeInfo", id: 9 }, syntax: { type: "string", id: 12 } } }, DescriptorProto: { fields: { name: { type: "string", id: 1 }, field: { rule: "repeated", type: "FieldDescriptorProto", id: 2 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 6 }, nestedType: { rule: "repeated", type: "DescriptorProto", id: 3 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 4 }, extensionRange: { rule: "repeated", type: "ExtensionRange", id: 5 }, oneofDecl: { rule: "repeated", type: "OneofDescriptorProto", id: 8 }, options: { type: "MessageOptions", id: 7 }, reservedRange: { rule: "repeated", type: "ReservedRange", id: 9 }, reservedName: { rule: "repeated", type: "string", id: 10 } }, nested: { ExtensionRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 }, options: { type: "ExtensionRangeOptions", id: 3 } } }, ReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, ExtensionRangeOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, FieldDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 3 }, label: { type: "Label", id: 4 }, type: { type: "Type", id: 5 }, typeName: { type: "string", id: 6 }, extendee: { type: "string", id: 2 }, defaultValue: { type: "string", id: 7 }, oneofIndex: { type: "int32", id: 9 }, jsonName: { type: "string", id: 10 }, options: { type: "FieldOptions", id: 8 }, proto3Optional: { type: "bool", id: 17 } }, nested: { Type: { values: { TYPE_DOUBLE: 1, TYPE_FLOAT: 2, TYPE_INT64: 3, TYPE_UINT64: 4, TYPE_INT32: 5, TYPE_FIXED64: 6, TYPE_FIXED32: 7, TYPE_BOOL: 8, TYPE_STRING: 9, TYPE_GROUP: 10, TYPE_MESSAGE: 11, TYPE_BYTES: 12, TYPE_UINT32: 13, TYPE_ENUM: 14, TYPE_SFIXED32: 15, TYPE_SFIXED64: 16, TYPE_SINT32: 17, TYPE_SINT64: 18 } }, Label: { values: { LABEL_OPTIONAL: 1, LABEL_REQUIRED: 2, LABEL_REPEATED: 3 } } } }, OneofDescriptorProto: { fields: { name: { type: "string", id: 1 }, options: { type: "OneofOptions", id: 2 } } }, EnumDescriptorProto: { fields: { name: { type: "string", id: 1 }, value: { rule: "repeated", type: "EnumValueDescriptorProto", id: 2 }, options: { type: "EnumOptions", id: 3 }, reservedRange: { rule: "repeated", type: "EnumReservedRange", id: 4 }, reservedName: { rule: "repeated", type: "string", id: 5 } }, nested: { EnumReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, EnumValueDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 2 }, options: { type: "EnumValueOptions", id: 3 } } }, ServiceDescriptorProto: { fields: { name: { type: "string", id: 1 }, method: { rule: "repeated", type: "MethodDescriptorProto", id: 2 }, options: { type: "ServiceOptions", id: 3 } } }, MethodDescriptorProto: { fields: { name: { type: "string", id: 1 }, inputType: { type: "string", id: 2 }, outputType: { type: "string", id: 3 }, options: { type: "MethodOptions", id: 4 }, clientStreaming: { type: "bool", id: 5, options: { default: false } }, serverStreaming: { type: "bool", id: 6, options: { default: false } } } }, FileOptions: { fields: { javaPackage: { type: "string", id: 1 }, javaOuterClassname: { type: "string", id: 8 }, javaMultipleFiles: { type: "bool", id: 10, options: { default: false } }, javaGenerateEqualsAndHash: { type: "bool", id: 20, options: { deprecated: true } }, javaStringCheckUtf8: { type: "bool", id: 27, options: { default: false } }, optimizeFor: { type: "OptimizeMode", id: 9, options: { default: "SPEED" } }, goPackage: { type: "string", id: 11 }, ccGenericServices: { type: "bool", id: 16, options: { default: false } }, javaGenericServices: { type: "bool", id: 17, options: { default: false } }, pyGenericServices: { type: "bool", id: 18, options: { default: false } }, phpGenericServices: { type: "bool", id: 42, options: { default: false } }, deprecated: { type: "bool", id: 23, options: { default: false } }, ccEnableArenas: { type: "bool", id: 31, options: { default: true } }, objcClassPrefix: { type: "string", id: 36 }, csharpNamespace: { type: "string", id: 37 }, swiftPrefix: { type: "string", id: 39 }, phpClassPrefix: { type: "string", id: 40 }, phpNamespace: { type: "string", id: 41 }, phpMetadataNamespace: { type: "string", id: 44 }, rubyPackage: { type: "string", id: 45 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[38, 38]], nested: { OptimizeMode: { values: { SPEED: 1, CODE_SIZE: 2, LITE_RUNTIME: 3 } } } }, MessageOptions: { fields: { messageSetWireFormat: { type: "bool", id: 1, options: { default: false } }, noStandardDescriptorAccessor: { type: "bool", id: 2, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, mapEntry: { type: "bool", id: 7 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[8, 8], [9, 9]] }, FieldOptions: { fields: { ctype: { type: "CType", id: 1, options: { default: "STRING" } }, packed: { type: "bool", id: 2 }, jstype: { type: "JSType", id: 6, options: { default: "JS_NORMAL" } }, lazy: { type: "bool", id: 5, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, weak: { type: "bool", id: 10, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[4, 4]], nested: { CType: { values: { STRING: 0, CORD: 1, STRING_PIECE: 2 } }, JSType: { values: { JS_NORMAL: 0, JS_STRING: 1, JS_NUMBER: 2 } } } }, OneofOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, EnumOptions: { fields: { allowAlias: { type: "bool", id: 2 }, deprecated: { type: "bool", id: 3, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[5, 5]] }, EnumValueOptions: { fields: { deprecated: { type: "bool", id: 1, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, ServiceOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, MethodOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, idempotencyLevel: { type: "IdempotencyLevel", id: 34, options: { default: "IDEMPOTENCY_UNKNOWN" } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], nested: { IdempotencyLevel: { values: { IDEMPOTENCY_UNKNOWN: 0, NO_SIDE_EFFECTS: 1, IDEMPOTENT: 2 } } } }, UninterpretedOption: { fields: { name: { rule: "repeated", type: "NamePart", id: 2 }, identifierValue: { type: "string", id: 3 }, positiveIntValue: { type: "uint64", id: 4 }, negativeIntValue: { type: "int64", id: 5 }, doubleValue: { type: "double", id: 6 }, stringValue: { type: "bytes", id: 7 }, aggregateValue: { type: "string", id: 8 } }, nested: { NamePart: { fields: { namePart: { rule: "required", type: "string", id: 1 }, isExtension: { rule: "required", type: "bool", id: 2 } } } } }, SourceCodeInfo: { fields: { location: { rule: "repeated", type: "Location", id: 1 } }, nested: { Location: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, span: { rule: "repeated", type: "int32", id: 2 }, leadingComments: { type: "string", id: 3 }, trailingComments: { type: "string", id: 4 }, leadingDetachedComments: { rule: "repeated", type: "string", id: 6 } } } } }, GeneratedCodeInfo: { fields: { annotation: { rule: "repeated", type: "Annotation", id: 1 } }, nested: { Annotation: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, sourceFile: { type: "string", id: 2 }, begin: { type: "int32", id: 3 }, end: { type: "int32", id: 4 } } } } }, Any: { fields: { type_url: { type: "string", id: 1 }, value: { type: "bytes", id: 2 } } } } } } } } };
  }
});

// node_modules/google-gax/build/src/locations_client_config.json
var require_locations_client_config = __commonJS({
  "node_modules/google-gax/build/src/locations_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.cloud.location.Locations": {
          retry_codes: {
            non_idempotent: [],
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ]
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 6e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 6e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            ListLocations: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            },
            GetLocation: {
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/google-gax/build/src/locationService.js
var require_locationService = __commonJS({
  "node_modules/google-gax/build/src/locationService.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LocationsClient = void 0;
    var gax = require_gax();
    var warnings_1 = require_warnings();
    var createApiCall_1 = require_createApiCall();
    var routingHeader = require_routingHeader();
    var pageDescriptor_1 = require_pageDescriptor();
    var jsonProtos = require_locations2();
    var gapicConfig = require_locations_client_config();
    var version = require_package4().version;
    var LocationsClient = class {
      /**
       * Construct an instance of LocationsClient.
       *
       * @param {object} [options] - The configuration object.
       * The options accepted by the constructor are described in detail
       * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
       * The common options are:
       * @param {object} [options.credentials] - Credentials object.
       * @param {string} [options.credentials.client_email]
       * @param {string} [options.credentials.private_key]
       * @param {string} [options.email] - Account email address. Required when
       *     using a .pem or .p12 keyFilename.
       * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
       *     .p12 key downloaded from the Google Developers Console. If you provide
       *     a path to a JSON file, the projectId option below is not necessary.
       *     NOTE: .pem and .p12 require you to specify options.email as well.
       * @param {number} [options.port] - The port on which to connect to
       *     the remote host.
       * @param {string} [options.projectId] - The project ID from the Google
       *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
       *     the environment variable GCLOUD_PROJECT for your project ID. If your
       *     app is running in an environment which supports
       *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
       *     your project ID will be detected automatically.
       * @param {string} [options.apiEndpoint] - The domain name of the
       *     API remote host.
       * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
       *     Follows the structure of {@link gapicConfig}.
       * @param {boolean} [options.fallback] - Use HTTP fallback mode.
       *     In fallback mode, a special browser-compatible transport implementation is used
       *     instead of gRPC transport. In browser context (if the `window` object is defined)
       *     the fallback mode is enabled automatically; set `options.fallback` to `false`
       *     if you need to override this behavior.
       */
      constructor(gaxGrpc, opts) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
          page: {},
          stream: {},
          longrunning: {},
          batching: {}
        };
        this.gaxGrpc = gaxGrpc;
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== "undefined" && typeof (window === null || window === void 0 ? void 0 : window.fetch) === "function";
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        if (servicePath !== staticMembers.servicePath && !("scopes" in opts)) {
          opts["scopes"] = staticMembers.scopes;
        }
        this._opts = opts;
        this.auth = gaxGrpc.auth;
        if (servicePath === staticMembers.servicePath) {
          this.auth.defaultScopes = staticMembers.scopes;
        }
        const clientHeader = [`gax/${version}`, `gapic/${version}`];
        if (typeof process !== "undefined" && "versions" in process) {
          clientHeader.push(`gl-node/${process.versions.node}`);
        } else {
          clientHeader.push(`gl-web/${version}`);
        }
        if (!opts.fallback) {
          clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
        } else if (opts.fallback === "rest") {
          clientHeader.push(`rest/${gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
          clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        this._protos = gaxGrpc.loadProtoJSON(jsonProtos);
        this.descriptors.page = {
          listLocations: new pageDescriptor_1.PageDescriptor("pageToken", "nextPageToken", "locations")
        };
        this._defaults = gaxGrpc.constructSettings("google.cloud.location.Locations", gapicConfig, opts.clientConfig || {}, { "x-goog-api-client": clientHeader.join(" ") });
        this.innerApiCalls = {};
        this.warn = warnings_1.warn;
      }
      /**
       * Initialize the client.
       * Performs asynchronous operations (such as authentication) and prepares the client.
       * This function will be called automatically when any class method is called for the
       * first time, but if you need to initialize it before calling an actual method,
       * feel free to call initialize() directly.
       *
       * You can await on this method if you want to make sure the client is initialized.
       *
       * @returns {Promise} A promise that resolves to an authenticated service stub.
       */
      initialize() {
        if (this.locationsStub) {
          return this.locationsStub;
        }
        this.locationsStub = this.gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService("google.cloud.location.Locations") : (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this._protos.google.cloud.location.Locations
        ), this._opts, this._providedCustomServicePath);
        const locationsStubMethods = ["listLocations", "getLocation"];
        for (const methodName of locationsStubMethods) {
          const callPromise = this.locationsStub.then((stub) => (...args) => {
            if (this._terminated) {
              return Promise.reject("The client has already been closed.");
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          const descriptor = this.descriptors.page[methodName] || void 0;
          const apiCall = (0, createApiCall_1.createApiCall)(callPromise, this._defaults[methodName], descriptor);
          this.innerApiCalls[methodName] = apiCall;
        }
        return this.locationsStub;
      }
      /**
       * The DNS address for this API service.
       * @returns {string} The DNS address for this service.
       */
      static get servicePath() {
        return "cloud.googleapis.com";
      }
      /**
       * The DNS address for this API service - same as servicePath(),
       * exists for compatibility reasons.
       * @returns {string} The DNS address for this service.
       */
      static get apiEndpoint() {
        return "cloud.googleapis.com";
      }
      /**
       * The port for this API service.
       * @returns {number} The default port for this service.
       */
      static get port() {
        return 443;
      }
      /**
       * The scopes needed to make gRPC calls for every method defined
       * in this service.
       * @returns {string[]} List of default scopes.
       */
      static get scopes() {
        return ["https://www.googleapis.com/auth/cloud-platform"];
      }
      getProjectId(callback) {
        if (callback) {
          this.auth.getProjectId(callback);
          return;
        }
        return this.auth.getProjectId();
      }
      /**
       * Gets information about a location.
       *
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.name
       *   Resource name for the location.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
       * @returns {Promise} - The promise which resolves to an array.
       *   The first element of the array is an object representing [Location]{@link google.cloud.location.Location}.
       *   Please see the
       *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#regular-methods)
       *   for more details and examples.
       * @example
       * const [response] = await client.getLocation(request);
       */
      getLocation(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          name: request.name || ""
        });
        this.initialize();
        return this.innerApiCalls.getLocation(request, options, callback);
      }
      /**
       * Lists information about the supported locations for this service.
       *
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.name
       *   The resource that owns the locations collection, if applicable.
       * @param {string} request.filter
       *   The standard list filter.
       * @param {number} request.pageSize
       *   The standard list page size.
       * @param {string} request.pageToken
       *   The standard list page token.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
       * @returns {Promise} - The promise which resolves to an array.
       *   The first element of the array is Array of [Location]{@link google.cloud.location.Location}.
       *   The client library will perform auto-pagination by default: it will call the API as many
       *   times as needed and will merge results from all the pages into this array.
       *   Note that it can affect your quota.
       *   We recommend using `listLocationsAsync()`
       *   method described below for async iteration which you can stop as needed.
       *   Please see the
       *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)
       *   for more details and examples.
       */
      listLocations(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          name: request.name || ""
        });
        this.initialize();
        return this.innerApiCalls.listLocations(request, options, callback);
      }
      /**
       * Equivalent to `listLocations`, but returns an iterable object.
       *
       * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
       * @param {Object} request
       *   The request object that will be sent.
       * @param {string} request.name
       *   The resource that owns the locations collection, if applicable.
       * @param {string} request.filter
       *   The standard list filter.
       * @param {number} request.pageSize
       *   The standard list page size.
       * @param {string} request.pageToken
       *   The standard list page token.
       * @param {object} [options]
       *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
       * @returns {Object}
       *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
       *   When you iterate the returned iterable, each element will be an object representing
       *   [Location]{@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
       *   so you can stop the iteration when you don't need more results.
       *   Please see the
       *   [documentation](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#auto-pagination)
       *   for more details and examples.
       * @example
       * const iterable = client.listLocationsAsync(request);
       * for await (const response of iterable) {
       *   // process response
       * }
       */
      listLocationsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = routingHeader.fromParams({
          name: request.name || ""
        });
        options = options || {};
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listLocations.asyncIterate(this.innerApiCalls["listLocations"], request, callSettings);
      }
      /**
       * Terminate the gRPC channel and close the client.
       *
       * The client will no longer be usable and all future behavior is undefined.
       * @returns {Promise} A promise that resolves when the client is closed.
       */
      close() {
        this.initialize();
        if (!this._terminated) {
          return this.locationsStub.then((stub) => {
            this._terminated = true;
            stub.close();
          });
        }
        return Promise.resolve();
      }
    };
    exports2.LocationsClient = LocationsClient;
  }
});

// node_modules/google-gax/build/src/fallback.js
var require_fallback = __commonJS({
  "node_modules/google-gax/build/src/fallback.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fallback = exports2.GoogleError = exports2.operation = exports2.Operation = exports2.warn = exports2.protobufMinimal = exports2.protobuf = exports2.createApiCall = exports2.LocationProtos = exports2.IamProtos = exports2.operationsProtos = exports2.lro = exports2.GrpcClient = exports2.defaultToObjectOptions = exports2.LocationsClient = exports2.IamClient = exports2.OperationsClient = exports2.StreamType = exports2.StreamDescriptor = exports2.PageDescriptor = exports2.LongrunningDescriptor = exports2.BundleDescriptor = exports2.version = exports2.createDefaultBackoffSettings = exports2.RetryOptions = exports2.constructSettings = exports2.CallSettings = exports2.routingHeader = exports2.PathTemplate = void 0;
    var objectHash = require_object_hash();
    var protobuf = require_protobufjs();
    exports2.protobuf = protobuf;
    var gax = require_gax();
    var routingHeader = require_routingHeader();
    exports2.routingHeader = routingHeader;
    var status_1 = require_status();
    var google_auth_library_1 = require_src8();
    var operationsClient_1 = require_operationsClient();
    var createApiCall_1 = require_createApiCall();
    var fallbackRest = require_fallbackRest();
    var featureDetection_1 = require_featureDetection();
    var fallbackServiceStub_1 = require_fallbackServiceStub();
    var streaming_1 = require_streaming();
    var util_1 = require_util3();
    var IamProtos = require_iam_service();
    exports2.IamProtos = IamProtos;
    var LocationProtos = require_locations();
    exports2.LocationProtos = LocationProtos;
    var operationsProtos = require_operations();
    exports2.operationsProtos = operationsProtos;
    var pathTemplate_1 = require_pathTemplate();
    Object.defineProperty(exports2, "PathTemplate", { enumerable: true, get: function() {
      return pathTemplate_1.PathTemplate;
    } });
    var gax_1 = require_gax();
    Object.defineProperty(exports2, "CallSettings", { enumerable: true, get: function() {
      return gax_1.CallSettings;
    } });
    Object.defineProperty(exports2, "constructSettings", { enumerable: true, get: function() {
      return gax_1.constructSettings;
    } });
    Object.defineProperty(exports2, "RetryOptions", { enumerable: true, get: function() {
      return gax_1.RetryOptions;
    } });
    Object.defineProperty(exports2, "createDefaultBackoffSettings", { enumerable: true, get: function() {
      return gax_1.createDefaultBackoffSettings;
    } });
    exports2.version = require_package4().version + "-fallback";
    var descriptor_1 = require_descriptor3();
    Object.defineProperty(exports2, "BundleDescriptor", { enumerable: true, get: function() {
      return descriptor_1.BundleDescriptor;
    } });
    Object.defineProperty(exports2, "LongrunningDescriptor", { enumerable: true, get: function() {
      return descriptor_1.LongrunningDescriptor;
    } });
    Object.defineProperty(exports2, "PageDescriptor", { enumerable: true, get: function() {
      return descriptor_1.PageDescriptor;
    } });
    Object.defineProperty(exports2, "StreamDescriptor", { enumerable: true, get: function() {
      return descriptor_1.StreamDescriptor;
    } });
    var streaming_2 = require_streaming();
    Object.defineProperty(exports2, "StreamType", { enumerable: true, get: function() {
      return streaming_2.StreamType;
    } });
    var operationsClient_2 = require_operationsClient();
    Object.defineProperty(exports2, "OperationsClient", { enumerable: true, get: function() {
      return operationsClient_2.OperationsClient;
    } });
    var iamService_1 = require_iamService();
    Object.defineProperty(exports2, "IamClient", { enumerable: true, get: function() {
      return iamService_1.IamClient;
    } });
    var locationService_1 = require_locationService();
    Object.defineProperty(exports2, "LocationsClient", { enumerable: true, get: function() {
      return locationService_1.LocationsClient;
    } });
    exports2.defaultToObjectOptions = {
      keepCase: false,
      longs: String,
      enums: String,
      defaults: true,
      oneofs: true
    };
    var CLIENT_VERSION_HEADER = "x-goog-api-client";
    var GrpcClient = class _GrpcClient {
      /**
       * In rare cases users might need to deallocate all memory consumed by loaded protos.
       * This method will delete the proto cache content.
       */
      static clearProtoCache() {
        _GrpcClient.protoCache.clear();
      }
      /**
       * gRPC-fallback version of GrpcClient
       * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).
       *
       * @param {Object=} options.auth - An instance of OAuth2Client to use in browser, or an instance of GoogleAuth from google-auth-library
       *  to use in Node.js. Required for browser, optional for Node.js.
       * @constructor
       */
      constructor(options = {}) {
        var _a;
        if (!(0, featureDetection_1.isNodeJS)()) {
          if (!options.auth) {
            throw new Error(JSON.stringify(options) + "You need to pass auth instance to use gRPC-fallback client in browser or other non-Node.js environments. Use OAuth2Client from google-auth-library.");
          }
          this.auth = options.auth;
        } else {
          this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);
        }
        this.fallback = options.fallback ? true : false;
        this.grpcVersion = require_package4().version;
        this.httpRules = options.httpRules;
        this.numericEnums = (_a = options.numericEnums) !== null && _a !== void 0 ? _a : false;
      }
      /**
       * gRPC-fallback version of loadProto
       * Loads the protobuf root object from a JSON object created from a proto file
       * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js
       * @returns {Object} Root namespace of proto JSON
       */
      loadProto(jsonObject) {
        const rootObject = protobuf.Root.fromJSON(jsonObject);
        return rootObject;
      }
      loadProtoJSON(json, ignoreCache = false) {
        const hash = objectHash(JSON.stringify(json)).toString();
        const cached = _GrpcClient.protoCache.get(hash);
        if (cached && !ignoreCache) {
          return cached;
        }
        const root = protobuf.Root.fromJSON(json);
        _GrpcClient.protoCache.set(hash, root);
        return root;
      }
      static getServiceMethods(service) {
        const methods = {};
        for (const [methodName, methodObject] of Object.entries(service.methods)) {
          const methodNameLowerCamelCase = (0, util_1.toLowerCamelCase)(methodName);
          methods[methodNameLowerCamelCase] = methodObject;
        }
        return methods;
      }
      /**
       * gRPC-fallback version of constructSettings
       * A wrapper of {@link constructSettings} function under the gRPC context.
       *
       * Most of parameters are common among constructSettings, please take a look.
       * @param {string} serviceName - The fullly-qualified name of the service.
       * @param {Object} clientConfig - A dictionary of the client config.
       * @param {Object} configOverrides - A dictionary of overriding configs.
       * @param {Object} headers - A dictionary of additional HTTP header name to
       *   its value.
       * @return {Object} A mapping of method names to CallSettings.
       */
      constructSettings(serviceName, clientConfig, configOverrides, headers) {
        function buildMetadata(abTests, moreHeaders) {
          const metadata = {};
          if (!headers) {
            headers = {};
          }
          for (const key in headers) {
            metadata[key] = Array.isArray(headers[key]) ? headers[key] : [headers[key]];
          }
          const clientVersions = [];
          if (metadata[CLIENT_VERSION_HEADER] && metadata[CLIENT_VERSION_HEADER][0]) {
            clientVersions.push(...metadata[CLIENT_VERSION_HEADER][0].split(" "));
          }
          clientVersions.push(`grpc-web/${exports2.version}`);
          metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(" ")];
          if (!moreHeaders) {
            return metadata;
          }
          for (const key in moreHeaders) {
            if (key.toLowerCase() !== CLIENT_VERSION_HEADER) {
              const value = moreHeaders[key];
              if (Array.isArray(value)) {
                if (metadata[key] === void 0) {
                  metadata[key] = value;
                } else {
                  if (Array.isArray(metadata[key])) {
                    metadata[key].push(...value);
                  } else {
                    throw new Error(`Can not add value ${value} to the call metadata.`);
                  }
                }
              } else {
                metadata[key] = [value];
              }
            }
          }
          return metadata;
        }
        return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, { metadataBuilder: buildMetadata });
      }
      /**
       * gRPC-fallback version of createStub
       * Creates a gRPC-fallback stub with authentication headers built from supplied OAuth2Client instance
       *
       * @param {function} CreateStub - The constructor function of the stub.
       * @param {Object} service - A protobufjs Service object (as returned by lookupService)
       * @param {Object} opts - Connection options, as described below.
       * @param {string} opts.servicePath - The hostname of the API endpoint service.
       * @param {number} opts.port - The port of the service.
       * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API
       */
      async createStub(service, opts, customServicePath) {
        if (!this.authClient) {
          if (this.auth && "getClient" in this.auth) {
            this.authClient = await this.auth.getClient();
          } else if (this.auth && "getRequestHeaders" in this.auth) {
            this.authClient = this.auth;
          }
        }
        if (!this.authClient) {
          throw new Error("No authentication was provided");
        }
        service.resolveAll();
        const methods = _GrpcClient.getServiceMethods(service);
        const protocol = opts.protocol || "https";
        let servicePath = opts.servicePath;
        if (!servicePath && service.options && service.options["(google.api.default_host)"]) {
          servicePath = service.options["(google.api.default_host)"];
        }
        if (!servicePath) {
          throw new Error(`Cannot determine service API path for service ${service.name}.`);
        }
        let servicePort;
        const match = servicePath.match(/^(.*):(\d+)$/);
        if (match) {
          servicePath = match[1];
          servicePort = parseInt(match[2]);
        }
        if (opts.port) {
          servicePort = opts.port;
        } else if (!servicePort) {
          servicePort = 443;
        }
        const encoder = fallbackRest.encodeRequest;
        const decoder = fallbackRest.decodeResponse;
        const serviceStub = (0, fallbackServiceStub_1.generateServiceStub)(methods, protocol, servicePath, servicePort, this.authClient, encoder, decoder, this.numericEnums);
        return serviceStub;
      }
      /**
       * Creates a 'bytelength' function for a given proto message class.
       *
       * See {@link BundleDescriptor} about the meaning of the return value.
       *
       * @param {function} message - a constructor function that is generated by
       *   protobuf.js. Assumes 'encoder' field in the message.
       * @return {function(Object):number} - a function to compute the byte length
       *   for an object.
       */
      static createByteLengthFunction(message) {
        return gax.createByteLengthFunction(message);
      }
    };
    exports2.GrpcClient = GrpcClient;
    GrpcClient.protoCache = /* @__PURE__ */ new Map();
    function lro(options) {
      options = Object.assign({ scopes: [] }, options);
      if (options.protoJson) {
        options = Object.assign(options, { fallback: true });
      }
      const gaxGrpc = new GrpcClient(options);
      return new operationsClient_1.OperationsClientBuilder(gaxGrpc, options.protoJson);
    }
    exports2.lro = lro;
    function createApiCall(func, settings, descriptor, _fallback) {
      if (descriptor && "streaming" in descriptor && descriptor.type !== streaming_1.StreamType.SERVER_STREAMING) {
        return () => {
          throw new Error("The REST transport currently does not support client-streaming or bidi-stream calls.");
        };
      }
      if (descriptor && "streaming" in descriptor && !(0, featureDetection_1.isNodeJS)()) {
        return () => {
          throw new Error("Server streaming over the REST transport is only supported in Node.js.");
        };
      }
      return (0, createApiCall_1.createApiCall)(func, settings, descriptor);
    }
    exports2.createApiCall = createApiCall;
    exports2.protobufMinimal = require_minimal2();
    var warnings_1 = require_warnings();
    Object.defineProperty(exports2, "warn", { enumerable: true, get: function() {
      return warnings_1.warn;
    } });
    var longrunning_1 = require_longrunning();
    Object.defineProperty(exports2, "Operation", { enumerable: true, get: function() {
      return longrunning_1.Operation;
    } });
    Object.defineProperty(exports2, "operation", { enumerable: true, get: function() {
      return longrunning_1.operation;
    } });
    var googleError_1 = require_googleError();
    Object.defineProperty(exports2, "GoogleError", { enumerable: true, get: function() {
      return googleError_1.GoogleError;
    } });
    var fallback = module2.exports;
    exports2.fallback = fallback;
  }
});

// node_modules/google-gax/build/protos/status.json
var require_status2 = __commonJS({
  "node_modules/google-gax/build/protos/status.json"(exports2, module2) {
    module2.exports = { nested: { google: { nested: { protobuf: { nested: { Any: { fields: { type_url: { type: "string", id: 1 }, value: { type: "bytes", id: 2 } } }, Duration: { fields: { seconds: { type: "int64", id: 1 }, nanos: { type: "int32", id: 2 } } } } }, rpc: { options: { cc_enable_arenas: true, go_package: "google.golang.org/genproto/googleapis/rpc/errdetails;errdetails", java_multiple_files: true, java_outer_classname: "ErrorDetailsProto", java_package: "com.google.rpc", objc_class_prefix: "RPC" }, nested: { Status: { fields: { code: { type: "int32", id: 1 }, message: { type: "string", id: 2 }, details: { rule: "repeated", type: "google.protobuf.Any", id: 3 } } }, RetryInfo: { fields: { retryDelay: { type: "google.protobuf.Duration", id: 1 } } }, DebugInfo: { fields: { stackEntries: { rule: "repeated", type: "string", id: 1 }, detail: { type: "string", id: 2 } } }, QuotaFailure: { fields: { violations: { rule: "repeated", type: "Violation", id: 1 } }, nested: { Violation: { fields: { subject: { type: "string", id: 1 }, description: { type: "string", id: 2 } } } } }, ErrorInfo: { fields: { reason: { type: "string", id: 1 }, domain: { type: "string", id: 2 }, metadata: { keyType: "string", type: "string", id: 3 } } }, PreconditionFailure: { fields: { violations: { rule: "repeated", type: "Violation", id: 1 } }, nested: { Violation: { fields: { type: { type: "string", id: 1 }, subject: { type: "string", id: 2 }, description: { type: "string", id: 3 } } } } }, BadRequest: { fields: { fieldViolations: { rule: "repeated", type: "FieldViolation", id: 1 } }, nested: { FieldViolation: { fields: { field: { type: "string", id: 1 }, description: { type: "string", id: 2 } } } } }, RequestInfo: { fields: { requestId: { type: "string", id: 1 }, servingData: { type: "string", id: 2 } } }, ResourceInfo: { fields: { resourceType: { type: "string", id: 1 }, resourceName: { type: "string", id: 2 }, owner: { type: "string", id: 3 }, description: { type: "string", id: 4 } } }, Help: { fields: { links: { rule: "repeated", type: "Link", id: 1 } }, nested: { Link: { fields: { description: { type: "string", id: 1 }, url: { type: "string", id: 2 } } } } }, LocalizedMessage: { fields: { locale: { type: "string", id: 1 }, message: { type: "string", id: 2 } } } } } } } } };
  }
});

// node_modules/google-gax/build/src/googleError.js
var require_googleError = __commonJS({
  "node_modules/google-gax/build/src/googleError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GoogleErrorDecoder = exports2.GoogleError = void 0;
    var status_1 = require_status();
    var protobuf = require_protobufjs();
    var serializer = require_src9();
    var fallback_1 = require_fallback();
    var GoogleError = class _GoogleError extends Error {
      // Parse details field in google.rpc.status wire over gRPC medatadata.
      // Promote google.rpc.ErrorInfo if exist.
      static parseGRPCStatusDetails(err) {
        const decoder = new GoogleErrorDecoder();
        try {
          if (err.metadata && err.metadata.get("grpc-status-details-bin")) {
            const statusDetailsObj = decoder.decodeGRPCStatusDetails(err.metadata.get("grpc-status-details-bin"));
            if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {
              err.statusDetails = statusDetailsObj.details;
            }
            if (statusDetailsObj && statusDetailsObj.errorInfo) {
              err.reason = statusDetailsObj.errorInfo.reason;
              err.domain = statusDetailsObj.errorInfo.domain;
              err.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;
            }
          }
        } catch (decodeErr) {
        }
        return err;
      }
      // Parse http JSON error and promote google.rpc.ErrorInfo if exist.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      static parseHttpError(json) {
        if (Array.isArray(json)) {
          json = json.find((obj) => {
            return "error" in obj;
          });
        }
        if (!json["error"]) {
          json["error"] = {};
          Object.keys(json).filter((key) => key !== "error").forEach((key) => {
            json["error"][key] = json[key];
            delete json[key];
          });
        }
        const decoder = new GoogleErrorDecoder();
        const proto3Error = decoder.decodeHTTPError(json["error"]);
        const error = Object.assign(new _GoogleError(json["error"]["message"]), proto3Error);
        if (json["error"]["code"]) {
          error.code = (0, status_1.rpcCodeFromHttpStatusCode)(json["error"]["code"]);
        } else {
          delete error.code;
        }
        if (error.details) {
          try {
            const statusDetailsObj = decoder.decodeHttpStatusDetails(error.details);
            if (statusDetailsObj && statusDetailsObj.details && statusDetailsObj.details.length > 0) {
              error.statusDetails = statusDetailsObj.details;
            }
            if (statusDetailsObj && statusDetailsObj.errorInfo) {
              error.reason = statusDetailsObj.errorInfo.reason;
              error.domain = statusDetailsObj.errorInfo.domain;
              error.errorInfoMetadata = statusDetailsObj.errorInfo.metadata;
            }
          } catch (decodeErr) {
          }
        }
        return error;
      }
    };
    exports2.GoogleError = GoogleError;
    var GoogleErrorDecoder = class {
      constructor() {
        const errorProtoJson = require_status2();
        this.root = protobuf.Root.fromJSON(errorProtoJson);
        this.anyType = this.root.lookupType("google.protobuf.Any");
        this.statusType = this.root.lookupType("google.rpc.Status");
      }
      decodeProtobufAny(anyValue) {
        const match = anyValue.type_url.match(/^type.googleapis.com\/(.*)/);
        if (!match) {
          throw new Error(`Unknown type encoded in google.protobuf.any: ${anyValue.type_url}`);
        }
        const typeName = match[1];
        const type = this.root.lookupType(typeName);
        if (!type) {
          throw new Error(`Cannot lookup type ${typeName}`);
        }
        return type.decode(anyValue.value);
      }
      // Decodes gRPC-fallback error which is an instance of google.rpc.Status.
      decodeRpcStatus(buffer) {
        const uint8array = new Uint8Array(buffer);
        const status = this.statusType.decode(uint8array);
        const details = [];
        let errorInfo;
        for (const detail of status.details) {
          try {
            const decodedDetail = this.decodeProtobufAny(detail);
            details.push(decodedDetail);
            if (detail.type_url === "type.googleapis.com/google.rpc.ErrorInfo") {
              errorInfo = decodedDetail;
            }
          } catch (err) {
          }
        }
        const result = {
          code: status.code,
          message: status.message,
          statusDetails: details,
          reason: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.reason,
          domain: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.domain,
          errorInfoMetadata: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.metadata
        };
        return result;
      }
      // Construct an Error from a StatusObject.
      // Adapted from https://github.com/grpc/grpc-node/blob/main/packages/grpc-js/src/call.ts#L79
      callErrorFromStatus(status) {
        status.message = `${status.code} ${status_1.Status[status.code]}: ${status.message}`;
        return Object.assign(new GoogleError(status.message), status);
      }
      // Decodes gRPC-fallback error which is an instance of google.rpc.Status,
      // and puts it into the object similar to gRPC ServiceError object.
      decodeErrorFromBuffer(buffer) {
        return this.callErrorFromStatus(this.decodeRpcStatus(buffer));
      }
      // Decodes gRPC metadata error details which is an instance of google.rpc.Status.
      decodeGRPCStatusDetails(bufferArr) {
        const details = [];
        let errorInfo;
        bufferArr.forEach((buffer) => {
          const uint8array = new Uint8Array(buffer);
          const rpcStatus = this.statusType.decode(uint8array);
          for (const detail of rpcStatus.details) {
            try {
              const decodedDetail = this.decodeProtobufAny(detail);
              details.push(decodedDetail);
              if (detail.type_url === "type.googleapis.com/google.rpc.ErrorInfo") {
                errorInfo = decodedDetail;
              }
            } catch (err) {
            }
          }
        });
        const result = {
          details,
          errorInfo
        };
        return result;
      }
      // Decodes http error which is an instance of google.rpc.Status.
      decodeHTTPError(json) {
        const errorMessage = serializer.fromProto3JSON(this.statusType, json);
        if (!errorMessage) {
          throw new Error(`Received error message ${json}, but failed to serialize as proto3 message`);
        }
        return this.statusType.toObject(errorMessage, fallback_1.defaultToObjectOptions);
      }
      // Decodes http error details which is an instance of Array<google.protobuf.Any>.
      decodeHttpStatusDetails(rawDetails) {
        const details = [];
        let errorInfo;
        for (const detail of rawDetails) {
          try {
            const decodedDetail = this.decodeProtobufAny(detail);
            details.push(decodedDetail);
            if (detail.type_url === "type.googleapis.com/google.rpc.ErrorInfo") {
              errorInfo = decodedDetail;
            }
          } catch (err) {
          }
        }
        return { details, errorInfo };
      }
    };
    exports2.GoogleErrorDecoder = GoogleErrorDecoder;
  }
});

// node_modules/google-gax/build/src/call.js
var require_call2 = __commonJS({
  "node_modules/google-gax/build/src/call.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OngoingCallPromise = exports2.OngoingCall = void 0;
    var status_1 = require_status();
    var googleError_1 = require_googleError();
    var OngoingCall = class {
      /**
       * OngoingCall manages callback, API calls, and cancellation
       * of the API calls.
       * @param {APICallback=} callback
       *   The callback to be called asynchronously when the API call
       *   finishes.
       * @constructor
       * @property {APICallback} callback
       *   The callback function to be called.
       * @private
       */
      constructor(callback) {
        this.callback = callback;
        this.completed = false;
      }
      /**
       * Cancels the ongoing promise.
       */
      cancel() {
        if (this.completed) {
          return;
        }
        this.completed = true;
        if (this.cancelFunc) {
          this.cancelFunc();
        } else {
          const error = new googleError_1.GoogleError("cancelled");
          error.code = status_1.Status.CANCELLED;
          this.callback(error);
        }
      }
      /**
       * Call calls the specified function. Result will be used to fulfill
       * the promise.
       *
       * @param {SimpleCallbackFunction} func
       *   A function for an API call.
       * @param {Object} argument
       *   A request object.
       */
      call(func, argument) {
        if (this.completed) {
          return;
        }
        const canceller = func(argument, (err, response, next, rawResponse) => {
          this.completed = true;
          setImmediate(this.callback, err, response, next, rawResponse);
        });
        if (canceller instanceof Promise) {
          canceller.catch((err) => {
            setImmediate(this.callback, new googleError_1.GoogleError(err), null, null, null);
          });
        }
        this.cancelFunc = () => canceller.cancel();
      }
    };
    exports2.OngoingCall = OngoingCall;
    var OngoingCallPromise = class extends OngoingCall {
      /**
       * GaxPromise is GRPCCallbackWrapper, but it holds a promise when
       * the API call finishes.
       * @constructor
       * @private
       */
      constructor() {
        let resolveCallback;
        let rejectCallback;
        const callback = (err, response, next, rawResponse) => {
          if (err) {
            if (err.metadata) {
              rejectCallback(googleError_1.GoogleError.parseGRPCStatusDetails(err));
            } else {
              rejectCallback(err);
            }
          } else if (response !== void 0) {
            resolveCallback([response, next || null, rawResponse || null]);
          } else {
            throw new googleError_1.GoogleError("Neither error nor response are defined");
          }
        };
        const promise = new Promise((resolve, reject) => {
          resolveCallback = resolve;
          rejectCallback = reject;
        });
        super(callback);
        this.promise = promise;
        this.promise.cancel = () => {
          this.cancel();
        };
      }
    };
    exports2.OngoingCallPromise = OngoingCallPromise;
  }
});

// node_modules/google-gax/build/src/normalCalls/normalApiCaller.js
var require_normalApiCaller = __commonJS({
  "node_modules/google-gax/build/src/normalCalls/normalApiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NormalApiCaller = void 0;
    var call_1 = require_call2();
    var NormalApiCaller = class {
      init(callback) {
        if (callback) {
          return new call_1.OngoingCall(callback);
        }
        return new call_1.OngoingCallPromise();
      }
      wrap(func) {
        return func;
      }
      call(apiCall, argument, settings, canceller) {
        canceller.call(apiCall, argument);
      }
      fail(canceller, err) {
        canceller.callback(err);
      }
      result(canceller) {
        return canceller.promise;
      }
    };
    exports2.NormalApiCaller = NormalApiCaller;
  }
});

// node_modules/google-gax/build/src/apiCaller.js
var require_apiCaller = __commonJS({
  "node_modules/google-gax/build/src/apiCaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createAPICaller = void 0;
    var normalApiCaller_1 = require_normalApiCaller();
    function createAPICaller(settings, descriptor) {
      if (!descriptor) {
        return new normalApiCaller_1.NormalApiCaller();
      }
      return descriptor.getApiCaller(settings);
    }
    exports2.createAPICaller = createAPICaller;
  }
});

// node_modules/google-gax/build/src/normalCalls/timeout.js
var require_timeout = __commonJS({
  "node_modules/google-gax/build/src/normalCalls/timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.addTimeoutArg = void 0;
    function addTimeoutArg(func, timeout, otherArgs, abTests) {
      return (argument, callback) => {
        const now = /* @__PURE__ */ new Date();
        const options = otherArgs.options || {};
        options.deadline = new Date(now.getTime() + timeout);
        const metadata = otherArgs.metadataBuilder ? otherArgs.metadataBuilder(abTests, otherArgs.headers || {}) : null;
        return func(argument, metadata, options, callback);
      };
    }
    exports2.addTimeoutArg = addTimeoutArg;
  }
});

// node_modules/google-gax/build/src/normalCalls/retries.js
var require_retries = __commonJS({
  "node_modules/google-gax/build/src/normalCalls/retries.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.retryable = void 0;
    var status_1 = require_status();
    var googleError_1 = require_googleError();
    var timeout_1 = require_timeout();
    function retryable(func, retry, otherArgs, apiName) {
      const delayMult = retry.backoffSettings.retryDelayMultiplier;
      const maxDelay = retry.backoffSettings.maxRetryDelayMillis;
      const timeoutMult = retry.backoffSettings.rpcTimeoutMultiplier;
      const maxTimeout = retry.backoffSettings.maxRpcTimeoutMillis;
      let delay = retry.backoffSettings.initialRetryDelayMillis;
      let timeout = retry.backoffSettings.initialRpcTimeoutMillis;
      return (argument, callback) => {
        let canceller;
        let timeoutId;
        let now = /* @__PURE__ */ new Date();
        let deadline;
        if (retry.backoffSettings.totalTimeoutMillis) {
          deadline = now.getTime() + retry.backoffSettings.totalTimeoutMillis;
        }
        let retries = 0;
        const maxRetries = retry.backoffSettings.maxRetries;
        function repeat() {
          timeoutId = null;
          if (deadline && now.getTime() >= deadline) {
            const error = new googleError_1.GoogleError(`Total timeout of API ${apiName} exceeded ${retry.backoffSettings.totalTimeoutMillis} milliseconds before any response was received.`);
            error.code = status_1.Status.DEADLINE_EXCEEDED;
            callback(error);
            return;
          }
          if (retries && retries >= maxRetries) {
            const error = new googleError_1.GoogleError("Exceeded maximum number of retries before any response was received");
            error.code = status_1.Status.DEADLINE_EXCEEDED;
            callback(error);
            return;
          }
          retries++;
          const toCall = (0, timeout_1.addTimeoutArg)(func, timeout, otherArgs);
          canceller = toCall(argument, (err, response, next, rawResponse) => {
            if (!err) {
              callback(null, response, next, rawResponse);
              return;
            }
            canceller = null;
            if (retry.retryCodes.indexOf(err.code) < 0) {
              err.note = "Exception occurred in retry method that was not classified as transient";
              callback(err);
            } else {
              const toSleep = Math.random() * delay;
              timeoutId = setTimeout(() => {
                now = /* @__PURE__ */ new Date();
                delay = Math.min(delay * delayMult, maxDelay);
                const timeoutCal = timeout && timeoutMult ? timeout * timeoutMult : 0;
                const rpcTimeout = maxTimeout ? maxTimeout : 0;
                const newDeadline = deadline ? deadline - now.getTime() : 0;
                timeout = Math.min(timeoutCal, rpcTimeout, newDeadline);
                repeat();
              }, toSleep);
            }
          });
          if (canceller instanceof Promise) {
            canceller.catch((err) => {
              callback(new googleError_1.GoogleError(err));
            });
          }
        }
        if (maxRetries && deadline) {
          const error = new googleError_1.GoogleError("Cannot set both totalTimeoutMillis and maxRetries in backoffSettings.");
          error.code = status_1.Status.INVALID_ARGUMENT;
          callback(error);
        } else {
          repeat();
        }
        return {
          cancel() {
            if (timeoutId) {
              clearTimeout(timeoutId);
            }
            if (canceller) {
              canceller.cancel();
            } else {
              const error = new googleError_1.GoogleError("cancelled");
              error.code = status_1.Status.CANCELLED;
              callback(error);
            }
          }
        };
      };
    }
    exports2.retryable = retryable;
  }
});

// node_modules/google-gax/build/src/createApiCall.js
var require_createApiCall = __commonJS({
  "node_modules/google-gax/build/src/createApiCall.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createApiCall = void 0;
    var apiCaller_1 = require_apiCaller();
    var retries_1 = require_retries();
    var timeout_1 = require_timeout();
    function createApiCall(func, settings, descriptor, _fallback) {
      const funcPromise = typeof func === "function" ? Promise.resolve(func) : func;
      const apiCaller = (0, apiCaller_1.createAPICaller)(settings, descriptor);
      return (request, callOptions, callback) => {
        const thisSettings = settings.merge(callOptions);
        let currentApiCaller = apiCaller;
        if (settings.isBundling && !thisSettings.isBundling) {
          currentApiCaller = (0, apiCaller_1.createAPICaller)(settings, void 0);
        }
        const ongoingCall = currentApiCaller.init(callback);
        funcPromise.then((func2) => {
          var _a;
          func2 = currentApiCaller.wrap(func2);
          const streaming = (_a = currentApiCaller.descriptor) === null || _a === void 0 ? void 0 : _a.streaming;
          const retry = thisSettings.retry;
          if (!streaming && retry && retry.retryCodes && retry.retryCodes.length > 0) {
            retry.backoffSettings.initialRpcTimeoutMillis = retry.backoffSettings.initialRpcTimeoutMillis || thisSettings.timeout;
            return (0, retries_1.retryable)(func2, thisSettings.retry, thisSettings.otherArgs, thisSettings.apiName);
          }
          return (0, timeout_1.addTimeoutArg)(func2, thisSettings.timeout, thisSettings.otherArgs);
        }).then((apiCall) => {
          currentApiCaller.call(apiCall, request, thisSettings, ongoingCall);
        }).catch((err) => {
          currentApiCaller.fail(ongoingCall, err);
        });
        return currentApiCaller.result(ongoingCall);
      };
    }
    exports2.createApiCall = createApiCall;
  }
});

// node_modules/google-gax/build/src/operations_client_config.json
var require_operations_client_config = __commonJS({
  "node_modules/google-gax/build/src/operations_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.longrunning.Operations": {
          retry_codes: {
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ],
            non_idempotent: []
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 9e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 9e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            GetOperation: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            ListOperations: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            CancelOperation: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            DeleteOperation: {
              timeout_millis: 6e4,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/google-gax/build/protos/operations.json
var require_operations2 = __commonJS({
  "node_modules/google-gax/build/protos/operations.json"(exports2, module2) {
    module2.exports = { nested: { google: { nested: { longrunning: { options: { cc_enable_arenas: true, csharp_namespace: "Google.LongRunning", go_package: "google.golang.org/genproto/googleapis/longrunning;longrunning", java_multiple_files: true, java_outer_classname: "OperationsProto", java_package: "com.google.longrunning", php_namespace: "Google\\LongRunning" }, nested: { operationInfo: { type: "google.longrunning.OperationInfo", id: 1049, extend: "google.protobuf.MethodOptions" }, Operations: { options: { "(google.api.default_host)": "longrunning.googleapis.com" }, methods: { ListOperations: { requestType: "ListOperationsRequest", responseType: "ListOperationsResponse", options: { "(google.api.http).get": "/v1/{name=operations}", "(google.api.method_signature)": "name,filter" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/{name=operations}" } }, { "(google.api.method_signature)": "name,filter" }] }, GetOperation: { requestType: "GetOperationRequest", responseType: "Operation", options: { "(google.api.http).get": "/v1/operations/{name}", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { get: "/v1/operations/{name}" } }, { "(google.api.method_signature)": "name" }] }, DeleteOperation: { requestType: "DeleteOperationRequest", responseType: "google.protobuf.Empty", options: { "(google.api.http).delete": "/v1/{name=operations/**}", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { delete: "/v1/{name=operations/**}" } }, { "(google.api.method_signature)": "name" }] }, CancelOperation: { requestType: "CancelOperationRequest", responseType: "google.protobuf.Empty", options: { "(google.api.http).post": "/v1/{name=operations/**}:cancel", "(google.api.http).body": "*", "(google.api.method_signature)": "name" }, parsedOptions: [{ "(google.api.http)": { post: "/v1/{name=operations/**}:cancel", body: "*" } }, { "(google.api.method_signature)": "name" }] }, WaitOperation: { requestType: "WaitOperationRequest", responseType: "Operation" } } }, Operation: { oneofs: { result: { oneof: ["error", "response"] } }, fields: { name: { type: "string", id: 1 }, metadata: { type: "google.protobuf.Any", id: 2 }, done: { type: "bool", id: 3 }, error: { type: "google.rpc.Status", id: 4 }, response: { type: "google.protobuf.Any", id: 5 } } }, GetOperationRequest: { fields: { name: { type: "string", id: 1 } } }, ListOperationsRequest: { fields: { name: { type: "string", id: 4 }, filter: { type: "string", id: 1 }, pageSize: { type: "int32", id: 2 }, pageToken: { type: "string", id: 3 } } }, ListOperationsResponse: { fields: { operations: { rule: "repeated", type: "Operation", id: 1 }, nextPageToken: { type: "string", id: 2 } } }, CancelOperationRequest: { fields: { name: { type: "string", id: 1 } } }, DeleteOperationRequest: { fields: { name: { type: "string", id: 1 } } }, WaitOperationRequest: { fields: { name: { type: "string", id: 1 }, timeout: { type: "google.protobuf.Duration", id: 2 } } }, OperationInfo: { fields: { responseType: { type: "string", id: 1 }, metadataType: { type: "string", id: 2 } } } } }, api: { options: { go_package: "google.golang.org/genproto/googleapis/api/annotations;annotations", java_multiple_files: true, java_outer_classname: "ClientProto", java_package: "com.google.api", objc_class_prefix: "GAPI", cc_enable_arenas: true }, nested: { http: { type: "HttpRule", id: 72295728, extend: "google.protobuf.MethodOptions" }, Http: { fields: { rules: { rule: "repeated", type: "HttpRule", id: 1 }, fullyDecodeReservedExpansion: { type: "bool", id: 2 } } }, HttpRule: { oneofs: { pattern: { oneof: ["get", "put", "post", "delete", "patch", "custom"] } }, fields: { selector: { type: "string", id: 1 }, get: { type: "string", id: 2 }, put: { type: "string", id: 3 }, post: { type: "string", id: 4 }, delete: { type: "string", id: 5 }, patch: { type: "string", id: 6 }, custom: { type: "CustomHttpPattern", id: 8 }, body: { type: "string", id: 7 }, responseBody: { type: "string", id: 12 }, additionalBindings: { rule: "repeated", type: "HttpRule", id: 11 } } }, CustomHttpPattern: { fields: { kind: { type: "string", id: 1 }, path: { type: "string", id: 2 } } }, methodSignature: { rule: "repeated", type: "string", id: 1051, extend: "google.protobuf.MethodOptions" }, defaultHost: { type: "string", id: 1049, extend: "google.protobuf.ServiceOptions" }, oauthScopes: { type: "string", id: 1050, extend: "google.protobuf.ServiceOptions" } } }, protobuf: { options: { go_package: "github.com/golang/protobuf/protoc-gen-go/descriptor;descriptor", java_package: "com.google.protobuf", java_outer_classname: "DescriptorProtos", csharp_namespace: "Google.Protobuf.Reflection", objc_class_prefix: "GPB", cc_enable_arenas: true, optimize_for: "SPEED" }, nested: { FileDescriptorSet: { fields: { file: { rule: "repeated", type: "FileDescriptorProto", id: 1 } } }, FileDescriptorProto: { fields: { name: { type: "string", id: 1 }, package: { type: "string", id: 2 }, dependency: { rule: "repeated", type: "string", id: 3 }, publicDependency: { rule: "repeated", type: "int32", id: 10, options: { packed: false } }, weakDependency: { rule: "repeated", type: "int32", id: 11, options: { packed: false } }, messageType: { rule: "repeated", type: "DescriptorProto", id: 4 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 5 }, service: { rule: "repeated", type: "ServiceDescriptorProto", id: 6 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 7 }, options: { type: "FileOptions", id: 8 }, sourceCodeInfo: { type: "SourceCodeInfo", id: 9 }, syntax: { type: "string", id: 12 } } }, DescriptorProto: { fields: { name: { type: "string", id: 1 }, field: { rule: "repeated", type: "FieldDescriptorProto", id: 2 }, extension: { rule: "repeated", type: "FieldDescriptorProto", id: 6 }, nestedType: { rule: "repeated", type: "DescriptorProto", id: 3 }, enumType: { rule: "repeated", type: "EnumDescriptorProto", id: 4 }, extensionRange: { rule: "repeated", type: "ExtensionRange", id: 5 }, oneofDecl: { rule: "repeated", type: "OneofDescriptorProto", id: 8 }, options: { type: "MessageOptions", id: 7 }, reservedRange: { rule: "repeated", type: "ReservedRange", id: 9 }, reservedName: { rule: "repeated", type: "string", id: 10 } }, nested: { ExtensionRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 }, options: { type: "ExtensionRangeOptions", id: 3 } } }, ReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, ExtensionRangeOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, FieldDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 3 }, label: { type: "Label", id: 4 }, type: { type: "Type", id: 5 }, typeName: { type: "string", id: 6 }, extendee: { type: "string", id: 2 }, defaultValue: { type: "string", id: 7 }, oneofIndex: { type: "int32", id: 9 }, jsonName: { type: "string", id: 10 }, options: { type: "FieldOptions", id: 8 }, proto3Optional: { type: "bool", id: 17 } }, nested: { Type: { values: { TYPE_DOUBLE: 1, TYPE_FLOAT: 2, TYPE_INT64: 3, TYPE_UINT64: 4, TYPE_INT32: 5, TYPE_FIXED64: 6, TYPE_FIXED32: 7, TYPE_BOOL: 8, TYPE_STRING: 9, TYPE_GROUP: 10, TYPE_MESSAGE: 11, TYPE_BYTES: 12, TYPE_UINT32: 13, TYPE_ENUM: 14, TYPE_SFIXED32: 15, TYPE_SFIXED64: 16, TYPE_SINT32: 17, TYPE_SINT64: 18 } }, Label: { values: { LABEL_OPTIONAL: 1, LABEL_REQUIRED: 2, LABEL_REPEATED: 3 } } } }, OneofDescriptorProto: { fields: { name: { type: "string", id: 1 }, options: { type: "OneofOptions", id: 2 } } }, EnumDescriptorProto: { fields: { name: { type: "string", id: 1 }, value: { rule: "repeated", type: "EnumValueDescriptorProto", id: 2 }, options: { type: "EnumOptions", id: 3 }, reservedRange: { rule: "repeated", type: "EnumReservedRange", id: 4 }, reservedName: { rule: "repeated", type: "string", id: 5 } }, nested: { EnumReservedRange: { fields: { start: { type: "int32", id: 1 }, end: { type: "int32", id: 2 } } } } }, EnumValueDescriptorProto: { fields: { name: { type: "string", id: 1 }, number: { type: "int32", id: 2 }, options: { type: "EnumValueOptions", id: 3 } } }, ServiceDescriptorProto: { fields: { name: { type: "string", id: 1 }, method: { rule: "repeated", type: "MethodDescriptorProto", id: 2 }, options: { type: "ServiceOptions", id: 3 } } }, MethodDescriptorProto: { fields: { name: { type: "string", id: 1 }, inputType: { type: "string", id: 2 }, outputType: { type: "string", id: 3 }, options: { type: "MethodOptions", id: 4 }, clientStreaming: { type: "bool", id: 5, options: { default: false } }, serverStreaming: { type: "bool", id: 6, options: { default: false } } } }, FileOptions: { fields: { javaPackage: { type: "string", id: 1 }, javaOuterClassname: { type: "string", id: 8 }, javaMultipleFiles: { type: "bool", id: 10, options: { default: false } }, javaGenerateEqualsAndHash: { type: "bool", id: 20, options: { deprecated: true } }, javaStringCheckUtf8: { type: "bool", id: 27, options: { default: false } }, optimizeFor: { type: "OptimizeMode", id: 9, options: { default: "SPEED" } }, goPackage: { type: "string", id: 11 }, ccGenericServices: { type: "bool", id: 16, options: { default: false } }, javaGenericServices: { type: "bool", id: 17, options: { default: false } }, pyGenericServices: { type: "bool", id: 18, options: { default: false } }, phpGenericServices: { type: "bool", id: 42, options: { default: false } }, deprecated: { type: "bool", id: 23, options: { default: false } }, ccEnableArenas: { type: "bool", id: 31, options: { default: true } }, objcClassPrefix: { type: "string", id: 36 }, csharpNamespace: { type: "string", id: 37 }, swiftPrefix: { type: "string", id: 39 }, phpClassPrefix: { type: "string", id: 40 }, phpNamespace: { type: "string", id: 41 }, phpMetadataNamespace: { type: "string", id: 44 }, rubyPackage: { type: "string", id: 45 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[38, 38]], nested: { OptimizeMode: { values: { SPEED: 1, CODE_SIZE: 2, LITE_RUNTIME: 3 } } } }, MessageOptions: { fields: { messageSetWireFormat: { type: "bool", id: 1, options: { default: false } }, noStandardDescriptorAccessor: { type: "bool", id: 2, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, mapEntry: { type: "bool", id: 7 }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[8, 8], [9, 9]] }, FieldOptions: { fields: { ctype: { type: "CType", id: 1, options: { default: "STRING" } }, packed: { type: "bool", id: 2 }, jstype: { type: "JSType", id: 6, options: { default: "JS_NORMAL" } }, lazy: { type: "bool", id: 5, options: { default: false } }, deprecated: { type: "bool", id: 3, options: { default: false } }, weak: { type: "bool", id: 10, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[4, 4]], nested: { CType: { values: { STRING: 0, CORD: 1, STRING_PIECE: 2 } }, JSType: { values: { JS_NORMAL: 0, JS_STRING: 1, JS_NUMBER: 2 } } } }, OneofOptions: { fields: { uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, EnumOptions: { fields: { allowAlias: { type: "bool", id: 2 }, deprecated: { type: "bool", id: 3, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], reserved: [[5, 5]] }, EnumValueOptions: { fields: { deprecated: { type: "bool", id: 1, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, ServiceOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]] }, MethodOptions: { fields: { deprecated: { type: "bool", id: 33, options: { default: false } }, idempotencyLevel: { type: "IdempotencyLevel", id: 34, options: { default: "IDEMPOTENCY_UNKNOWN" } }, uninterpretedOption: { rule: "repeated", type: "UninterpretedOption", id: 999 } }, extensions: [[1e3, 536870911]], nested: { IdempotencyLevel: { values: { IDEMPOTENCY_UNKNOWN: 0, NO_SIDE_EFFECTS: 1, IDEMPOTENT: 2 } } } }, UninterpretedOption: { fields: { name: { rule: "repeated", type: "NamePart", id: 2 }, identifierValue: { type: "string", id: 3 }, positiveIntValue: { type: "uint64", id: 4 }, negativeIntValue: { type: "int64", id: 5 }, doubleValue: { type: "double", id: 6 }, stringValue: { type: "bytes", id: 7 }, aggregateValue: { type: "string", id: 8 } }, nested: { NamePart: { fields: { namePart: { rule: "required", type: "string", id: 1 }, isExtension: { rule: "required", type: "bool", id: 2 } } } } }, SourceCodeInfo: { fields: { location: { rule: "repeated", type: "Location", id: 1 } }, nested: { Location: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, span: { rule: "repeated", type: "int32", id: 2 }, leadingComments: { type: "string", id: 3 }, trailingComments: { type: "string", id: 4 }, leadingDetachedComments: { rule: "repeated", type: "string", id: 6 } } } } }, GeneratedCodeInfo: { fields: { annotation: { rule: "repeated", type: "Annotation", id: 1 } }, nested: { Annotation: { fields: { path: { rule: "repeated", type: "int32", id: 1 }, sourceFile: { type: "string", id: 2 }, begin: { type: "int32", id: 3 }, end: { type: "int32", id: 4 } } } } }, Any: { fields: { type_url: { type: "string", id: 1 }, value: { type: "bytes", id: 2 } } }, Duration: { fields: { seconds: { type: "int64", id: 1 }, nanos: { type: "int32", id: 2 } } }, Empty: { fields: {} } } }, rpc: { options: { cc_enable_arenas: true, go_package: "google.golang.org/genproto/googleapis/rpc/status;status", java_multiple_files: true, java_outer_classname: "StatusProto", java_package: "com.google.rpc", objc_class_prefix: "RPC" }, nested: { Status: { fields: { code: { type: "int32", id: 1 }, message: { type: "string", id: 2 }, details: { rule: "repeated", type: "google.protobuf.Any", id: 3 } } } } } } } } };
  }
});

// node_modules/google-gax/build/src/operationsClient.js
var require_operationsClient = __commonJS({
  "node_modules/google-gax/build/src/operationsClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.OperationsClientBuilder = exports2.OperationsClient = exports2.ALL_SCOPES = exports2.SERVICE_ADDRESS = void 0;
    var createApiCall_1 = require_createApiCall();
    var descriptor_1 = require_descriptor3();
    var gax = require_gax();
    var configData = require_operations_client_config();
    var operationProtoJson = require_operations2();
    var transcoding_1 = require_transcoding();
    exports2.SERVICE_ADDRESS = "longrunning.googleapis.com";
    var version = require_package4().version;
    var DEFAULT_SERVICE_PORT = 443;
    var CODE_GEN_NAME_VERSION = "gapic/0.7.1";
    exports2.ALL_SCOPES = [];
    var OperationsClient = class {
      constructor(gaxGrpc, operationsProtos, options) {
        const opts = Object.assign({
          servicePath: exports2.SERVICE_ADDRESS,
          port: DEFAULT_SERVICE_PORT,
          clientConfig: {}
        }, options);
        const googleApiClient = ["gl-node/" + process.versions.node];
        if (opts.libName && opts.libVersion) {
          googleApiClient.push(opts.libName + "/" + opts.libVersion);
        }
        googleApiClient.push(CODE_GEN_NAME_VERSION, "gax/" + version);
        if (opts.fallback) {
          googleApiClient.push("gl-web/" + version);
        } else {
          googleApiClient.push("grpc/" + gaxGrpc.grpcVersion);
        }
        const defaults = gaxGrpc.constructSettings("google.longrunning.Operations", configData, opts.clientConfig || {}, { "x-goog-api-client": googleApiClient.join(" ") });
        this.auth = gaxGrpc.auth;
        this.innerApiCalls = {};
        this.descriptor = {
          listOperations: new descriptor_1.PageDescriptor("pageToken", "nextPageToken", "operations")
        };
        this.operationsStub = gaxGrpc.createStub(opts.fallback ? operationsProtos.lookupService("google.longrunning.Operations") : operationsProtos.google.longrunning.Operations, opts);
        const operationsStubMethods = [
          "getOperation",
          "listOperations",
          "cancelOperation",
          "deleteOperation"
        ];
        for (const methodName of operationsStubMethods) {
          const innerCallPromise = this.operationsStub.then((stub) => (...args) => {
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, defaults[methodName], this.descriptor[methodName]);
        }
      }
      /** Closes this operations client. */
      close() {
        this.operationsStub.then((stub) => stub.close());
      }
      getProjectId(callback) {
        if (this.auth && "getProjectId" in this.auth) {
          return this.auth.getProjectId(callback);
        }
        if (callback) {
          callback(new Error("Cannot determine project ID."));
        } else {
          return Promise.reject("Cannot determine project ID.");
        }
      }
      // Service calls
      getOperationInternal(request, options, callback) {
        request = request || {};
        options = options || {};
        return this.innerApiCalls.getOperation(request, options, callback);
      }
      /**
       * Gets the latest state of a long-running operation.  Clients can use this
       * method to poll the operation result at intervals as recommended by the API
       * service.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation resource.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
       *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
       *   details.
       * @param {function(?Error, ?Object)=} callback
       *   The function which will be called with the result of the API call.
       *
       *   The second parameter to the callback is an object representing
       * [google.longrunning.Operation]{@link
       * external:"google.longrunning.Operation"}.
       * @return {Promise} - The promise which resolves to an array.
       *   The first element of the array is an object representing
       * [google.longrunning.Operation]{@link
       * external:"google.longrunning.Operation"}. The promise has a method named
       * "cancel" which cancels the ongoing API call.
       *
       * @example
       *
       * const client = longrunning.operationsClient();
       * const name = '';
       * const [response] = await client.getOperation({name});
       * // doThingsWith(response)
       */
      getOperation(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        return this.innerApiCalls.getOperation(request, options, callback);
      }
      /**
       * Lists operations that match the specified filter in the request. If the
       * server doesn't support this method, it returns `UNIMPLEMENTED`.
       *
       * NOTE: the `name` binding below allows API services to override the binding
       * to use different resource name schemes.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation collection.
       * @param {string} request.filter - The standard list filter.
       * @param {number=} request.pageSize
       *   The maximum number of resources contained in the underlying API
       *   response. If page streaming is performed per-resource, this
       *   parameter does not affect the return value. If page streaming is
       *   performed per-page, this determines the maximum number of
       *   resources in a page.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
       * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
       * details.
       * @param {function(?Error, ?Array, ?Object, ?Object)=} callback
       *   The function which will be called with the result of the API call.
       *
       *   The second parameter to the callback is Array of
       * [google.longrunning.Operation]{@link
       * external:"google.longrunning.Operation"}.
       *
       *   When autoPaginate: false is specified through options, it contains the
       * result in a single response. If the response indicates the next page
       * exists, the third parameter is set to be used for the next request object.
       * The fourth parameter keeps the raw response object of an object
       * representing [google.longrunning.ListOperationsResponse]{@link
       * external:"google.longrunning.ListOperationsResponse"}.
       * @return {Promise} - The promise which resolves to an array.
       *   The first element of the array is Array of
       * [google.longrunning.Operation]{@link
       * external:"google.longrunning.Operation"}.
       *
       *   When autoPaginate: false is specified through options, the array has
       * three elements. The first element is Array of
       * [google.longrunning.Operation]{@link
       * external:"google.longrunning.Operation"} in a single response. The second
       * element is the next request object if the response indicates the next page
       * exists, or null. The third element is an object representing
       * [google.longrunning.ListOperationsResponse]{@link
       * external:"google.longrunning.ListOperationsResponse"}.
       *
       *   The promise has a method named "cancel" which cancels the ongoing API
       * call.
       *
       * @example
       *
       * const client = longrunning.operationsClient();
       * const request = {
       *     name: '',
       *     filter: ''
       * };
       * // Iterate over all elements.
       * const [resources] = await client.listOperations(request);
       * for (const resource of resources) {
       *   console.log(resources);
       * }
       *
       * // Or obtain the paged response.
       * const options = {autoPaginate: false};
       * let nextRequest = request;
       * while(nextRequest) {
       *   const response = await client.listOperations(nextRequest, options);
       *   const resources = response[0];
       *   nextRequest = response[1];
       *   const rawResponse = response[2];
       *   for (const resource of resources) {
       *     // doThingsWith(resource);
       *   }
       * };
       */
      listOperations(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        return this.innerApiCalls.listOperations(request, options, callback);
      }
      /**
       * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.
       *
       * This fetches the paged responses for {@link listOperations} continuously
       * and invokes the callback registered for 'data' event for each element in
       * the responses.
       *
       * The returned object has 'end' method when no more elements are required.
       *
       * autoPaginate option will be ignored.
       *
       * @see {@link https://nodejs.org/api/stream.html}
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation collection.
       * @param {string} request.filter - The standard list filter.
       * @param {number=} request.pageSize -
       *   The maximum number of resources contained in the underlying API
       *   response. If page streaming is performed per-resource, this
       *   parameter does not affect the return value. If page streaming is
       *   performed per-page, this determines the maximum number of
       *   resources in a page.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
       *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
       *   details.
       * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:"google.longrunning.Operation"} on 'data' event.
       *
       * @example
       *
       * const client = longrunning.operationsClient();
       * const request = {
       *   name: '',
       *   filter: ''
       * };
       * client.listOperationsStream(request)
       *   .on('data', element => {
       *     // doThingsWith(element)
       *   })
       *   .on('error', err => {
       *     console.error(err);
       *   });
       */
      listOperationsStream(request, options) {
        const callSettings = new gax.CallSettings(options);
        return this.descriptor.listOperations.createStream(this.innerApiCalls.listOperations, request, callSettings);
      }
      /**
       * Equivalent to {@link listOperations}, but returns an iterable object.
       *
       * for-await-of syntax is used with the iterable to recursively get response element on-demand.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation collection.
       * @param {string} request.filter - The standard list filter.
       * @param {number=} request.pageSize -
       *   The maximum number of resources contained in the underlying API
       *   response. If page streaming is performed per-resource, this
       *   parameter does not affect the return value. If page streaming is
       *   performed per-page, this determines the maximum number of
       *   resources in a page.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
       *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
       *   details.
       * @returns {Object}
       *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
       */
      listOperationsAsync(request, options) {
        request = request || {};
        options = options || {};
        const callSettings = new gax.CallSettings(options);
        return this.descriptor.listOperations.asyncIterate(this.innerApiCalls.listOperations, request, callSettings);
      }
      /**
       * Starts asynchronous cancellation on a long-running operation.  The server
       * makes a best effort to cancel the operation, but success is not
       * guaranteed.  If the server doesn't support this method, it returns
       * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
       * {@link Operations.GetOperation} or
       * other methods to check whether the cancellation succeeded or whether the
       * operation completed despite cancellation. On successful cancellation,
       * the operation is not deleted; instead, it becomes an operation with
       * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
       * 1, corresponding to `Code.CANCELLED`.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation resource to be cancelled.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
       * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
       * details.
       * @param {function(?Error)=} callback
       *   The function which will be called with the result of the API call.
       * @return {Promise} - The promise which resolves when API call finishes.
       *   The promise has a method named "cancel" which cancels the ongoing API
       * call.
       *
       * @example
       *
       * const client = longrunning.operationsClient();
       * await client.cancelOperation({name: ''});
       */
      cancelOperation(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        return this.innerApiCalls.cancelOperation(request, options, callback);
      }
      /**
       * Deletes a long-running operation. This method indicates that the client is
       * no longer interested in the operation result. It does not cancel the
       * operation. If the server doesn't support this method, it returns
       * `google.rpc.Code.UNIMPLEMENTED`.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation resource to be deleted.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
       * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
       * details.
       * @param {function(?Error)=} callback
       *   The function which will be called with the result of the API call.
       * @return {Promise} - The promise which resolves when API call finishes.
       *   The promise has a method named "cancel" which cancels the ongoing API
       * call.
       *
       * @example
       *
       * const client = longrunning.operationsClient();
       * await client.deleteOperation({name: ''});
       */
      deleteOperation(request, optionsOrCallback, callback) {
        let options;
        if (optionsOrCallback instanceof Function && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        request = request || {};
        options = options || {};
        return this.innerApiCalls.deleteOperation(request, options, callback);
      }
    };
    exports2.OperationsClient = OperationsClient;
    var OperationsClientBuilder = class {
      /**
       * Builds a new Operations Client
       * @param gaxGrpc {GrpcClient}
       */
      constructor(gaxGrpc, protoJson) {
        if (protoJson && gaxGrpc.httpRules) {
          (0, transcoding_1.overrideHttpRules)(gaxGrpc.httpRules, protoJson);
        }
        const operationsProtos = protoJson !== null && protoJson !== void 0 ? protoJson : gaxGrpc.loadProtoJSON(operationProtoJson);
        this.operationsClient = (opts) => {
          if (gaxGrpc.fallback) {
            opts.fallback = gaxGrpc.fallback;
          }
          return new OperationsClient(gaxGrpc, operationsProtos, opts);
        };
        Object.assign(this.operationsClient, OperationsClient);
      }
    };
    exports2.OperationsClientBuilder = OperationsClientBuilder;
  }
});

// node_modules/google-gax/build/src/index.js
var require_src11 = __commonJS({
  "node_modules/google-gax/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializer = exports2.warn = exports2.ChannelCredentials = exports2.fallback = exports2.protobufMinimal = exports2.protobuf = exports2.version = exports2.createByteLengthFunction = exports2.LocationsClient = exports2.IamClient = exports2.OperationsClient = exports2.LocationProtos = exports2.IamProtos = exports2.operationsProtos = exports2.lro = exports2.routingHeader = exports2.StreamType = exports2.Status = exports2.PathTemplate = exports2.operation = exports2.Operation = exports2.GrpcClient = exports2.GoogleProtoFilesRoot = exports2.ClientStub = exports2.GoogleError = exports2.createMaxRetriesBackoffSettings = exports2.createDefaultBackoffSettings = exports2.createBackoffSettings = exports2.createBundleOptions = exports2.createRetryOptions = exports2.RetryOptions = exports2.constructSettings = exports2.CallSettings = exports2.StreamDescriptor = exports2.PageDescriptor = exports2.LongrunningDescriptor = exports2.BundleDescriptor = exports2.createApiCall = exports2.OngoingCall = exports2.grpc = exports2.GoogleAuth = void 0;
    var grpc = require_src3();
    exports2.grpc = grpc;
    var grpc_1 = require_grpc();
    var IamProtos = require_iam_service();
    exports2.IamProtos = IamProtos;
    var LocationProtos = require_locations();
    exports2.LocationProtos = LocationProtos;
    var operationsProtos = require_operations();
    exports2.operationsProtos = operationsProtos;
    var operationsClient = require_operationsClient();
    var routingHeader = require_routingHeader();
    exports2.routingHeader = routingHeader;
    var google_auth_library_1 = require_src8();
    Object.defineProperty(exports2, "GoogleAuth", { enumerable: true, get: function() {
      return google_auth_library_1.GoogleAuth;
    } });
    var call_1 = require_call2();
    Object.defineProperty(exports2, "OngoingCall", { enumerable: true, get: function() {
      return call_1.OngoingCall;
    } });
    var createApiCall_1 = require_createApiCall();
    Object.defineProperty(exports2, "createApiCall", { enumerable: true, get: function() {
      return createApiCall_1.createApiCall;
    } });
    var descriptor_1 = require_descriptor3();
    Object.defineProperty(exports2, "BundleDescriptor", { enumerable: true, get: function() {
      return descriptor_1.BundleDescriptor;
    } });
    Object.defineProperty(exports2, "LongrunningDescriptor", { enumerable: true, get: function() {
      return descriptor_1.LongrunningDescriptor;
    } });
    Object.defineProperty(exports2, "PageDescriptor", { enumerable: true, get: function() {
      return descriptor_1.PageDescriptor;
    } });
    Object.defineProperty(exports2, "StreamDescriptor", { enumerable: true, get: function() {
      return descriptor_1.StreamDescriptor;
    } });
    var gax_1 = require_gax();
    Object.defineProperty(exports2, "CallSettings", { enumerable: true, get: function() {
      return gax_1.CallSettings;
    } });
    Object.defineProperty(exports2, "constructSettings", { enumerable: true, get: function() {
      return gax_1.constructSettings;
    } });
    Object.defineProperty(exports2, "RetryOptions", { enumerable: true, get: function() {
      return gax_1.RetryOptions;
    } });
    Object.defineProperty(exports2, "createRetryOptions", { enumerable: true, get: function() {
      return gax_1.createRetryOptions;
    } });
    Object.defineProperty(exports2, "createBundleOptions", { enumerable: true, get: function() {
      return gax_1.createBundleOptions;
    } });
    Object.defineProperty(exports2, "createBackoffSettings", { enumerable: true, get: function() {
      return gax_1.createBackoffSettings;
    } });
    Object.defineProperty(exports2, "createDefaultBackoffSettings", { enumerable: true, get: function() {
      return gax_1.createDefaultBackoffSettings;
    } });
    Object.defineProperty(exports2, "createMaxRetriesBackoffSettings", { enumerable: true, get: function() {
      return gax_1.createMaxRetriesBackoffSettings;
    } });
    var googleError_1 = require_googleError();
    Object.defineProperty(exports2, "GoogleError", { enumerable: true, get: function() {
      return googleError_1.GoogleError;
    } });
    var grpc_2 = require_grpc();
    Object.defineProperty(exports2, "ClientStub", { enumerable: true, get: function() {
      return grpc_2.ClientStub;
    } });
    Object.defineProperty(exports2, "GoogleProtoFilesRoot", { enumerable: true, get: function() {
      return grpc_2.GoogleProtoFilesRoot;
    } });
    Object.defineProperty(exports2, "GrpcClient", { enumerable: true, get: function() {
      return grpc_2.GrpcClient;
    } });
    var longrunning_1 = require_longrunning();
    Object.defineProperty(exports2, "Operation", { enumerable: true, get: function() {
      return longrunning_1.Operation;
    } });
    Object.defineProperty(exports2, "operation", { enumerable: true, get: function() {
      return longrunning_1.operation;
    } });
    var pathTemplate_1 = require_pathTemplate();
    Object.defineProperty(exports2, "PathTemplate", { enumerable: true, get: function() {
      return pathTemplate_1.PathTemplate;
    } });
    var status_1 = require_status();
    Object.defineProperty(exports2, "Status", { enumerable: true, get: function() {
      return status_1.Status;
    } });
    var streaming_1 = require_streaming();
    Object.defineProperty(exports2, "StreamType", { enumerable: true, get: function() {
      return streaming_1.StreamType;
    } });
    function lro(options) {
      options = Object.assign({ scopes: lro.ALL_SCOPES }, options);
      const gaxGrpc = new grpc_1.GrpcClient(options);
      return new operationsClient.OperationsClientBuilder(gaxGrpc);
    }
    exports2.lro = lro;
    lro.SERVICE_ADDRESS = operationsClient.SERVICE_ADDRESS;
    lro.ALL_SCOPES = operationsClient.ALL_SCOPES;
    var operationsClient_1 = require_operationsClient();
    Object.defineProperty(exports2, "OperationsClient", { enumerable: true, get: function() {
      return operationsClient_1.OperationsClient;
    } });
    var iamService_1 = require_iamService();
    Object.defineProperty(exports2, "IamClient", { enumerable: true, get: function() {
      return iamService_1.IamClient;
    } });
    var locationService_1 = require_locationService();
    Object.defineProperty(exports2, "LocationsClient", { enumerable: true, get: function() {
      return locationService_1.LocationsClient;
    } });
    exports2.createByteLengthFunction = grpc_1.GrpcClient.createByteLengthFunction;
    exports2.version = require_package4().version;
    var protobuf = require_protobufjs();
    exports2.protobuf = protobuf;
    exports2.protobufMinimal = require_minimal2();
    var fallback = require_fallback();
    exports2.fallback = fallback;
    var grpc_js_1 = require_src3();
    Object.defineProperty(exports2, "ChannelCredentials", { enumerable: true, get: function() {
      return grpc_js_1.ChannelCredentials;
    } });
    var warnings_1 = require_warnings();
    Object.defineProperty(exports2, "warn", { enumerable: true, get: function() {
      return warnings_1.warn;
    } });
    var serializer = require_src9();
    exports2.serializer = serializer;
  }
});

// node_modules/@google-cloud/text-to-speech/build/src/v1/text_to_speech_client.js
var require_text_to_speech_client = __commonJS({
  "node_modules/@google-cloud/text-to-speech/build/src/v1/text_to_speech_client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TextToSpeechClient = void 0;
    var jsonProtos = require_protos();
    var gapicConfig = require_text_to_speech_client_config();
    var version = require_package().version;
    var TextToSpeechClient2 = class {
      /**
       * Construct an instance of TextToSpeechClient.
       *
       * @param {object} [options] - The configuration object.
       * The options accepted by the constructor are described in detail
       * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
       * The common options are:
       * @param {object} [options.credentials] - Credentials object.
       * @param {string} [options.credentials.client_email]
       * @param {string} [options.credentials.private_key]
       * @param {string} [options.email] - Account email address. Required when
       *     using a .pem or .p12 keyFilename.
       * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
       *     .p12 key downloaded from the Google Developers Console. If you provide
       *     a path to a JSON file, the projectId option below is not necessary.
       *     NOTE: .pem and .p12 require you to specify options.email as well.
       * @param {number} [options.port] - The port on which to connect to
       *     the remote host.
       * @param {string} [options.projectId] - The project ID from the Google
       *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
       *     the environment variable GCLOUD_PROJECT for your project ID. If your
       *     app is running in an environment which supports
       *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
       *     your project ID will be detected automatically.
       * @param {string} [options.apiEndpoint] - The domain name of the
       *     API remote host.
       * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
       *     Follows the structure of {@link gapicConfig}.
       * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
       *     For more information, please check the
       *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
       * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
       *     need to avoid loading the default gRPC version and want to use the fallback
       *     HTTP implementation. Load only fallback version and pass it to the constructor:
       *     ```
       *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
       *     const client = new TextToSpeechClient({fallback: true}, gax);
       *     ```
       */
      constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
          page: {},
          stream: {},
          longrunning: {},
          batching: {}
        };
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== "undefined" && typeof (window === null || window === void 0 ? void 0 : window.fetch) === "function";
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        opts.numericEnums = true;
        if (servicePath !== staticMembers.servicePath && !("scopes" in opts)) {
          opts["scopes"] = staticMembers.scopes;
        }
        if (!gaxInstance) {
          gaxInstance = require_src11();
        }
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        this._opts = opts;
        this.auth = this._gaxGrpc.auth;
        this.auth.useJWTAccessWithScope = true;
        this.auth.defaultServicePath = staticMembers.servicePath;
        if (servicePath === staticMembers.servicePath) {
          this.auth.defaultScopes = staticMembers.scopes;
        }
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== "undefined" && "versions" in process) {
          clientHeader.push(`gl-node/${process.versions.node}`);
        } else {
          clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
          clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        } else {
          clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
          clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        this.pathTemplates = {
          modelPathTemplate: new this._gaxModule.PathTemplate("projects/{project}/locations/{location}/models/{model}")
        };
        this._defaults = this._gaxGrpc.constructSettings("google.cloud.texttospeech.v1.TextToSpeech", gapicConfig, opts.clientConfig || {}, { "x-goog-api-client": clientHeader.join(" ") });
        this.innerApiCalls = {};
        this.warn = this._gaxModule.warn;
      }
      /**
       * Initialize the client.
       * Performs asynchronous operations (such as authentication) and prepares the client.
       * This function will be called automatically when any class method is called for the
       * first time, but if you need to initialize it before calling an actual method,
       * feel free to call initialize() directly.
       *
       * You can await on this method if you want to make sure the client is initialized.
       *
       * @returns {Promise} A promise that resolves to an authenticated service stub.
       */
      initialize() {
        if (this.textToSpeechStub) {
          return this.textToSpeechStub;
        }
        this.textToSpeechStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService("google.cloud.texttospeech.v1.TextToSpeech") : (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this._protos.google.cloud.texttospeech.v1.TextToSpeech
        ), this._opts, this._providedCustomServicePath);
        const textToSpeechStubMethods = ["listVoices", "synthesizeSpeech"];
        for (const methodName of textToSpeechStubMethods) {
          const callPromise = this.textToSpeechStub.then((stub) => (...args) => {
            if (this._terminated) {
              return Promise.reject("The client has already been closed.");
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          const descriptor = void 0;
          const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
          this.innerApiCalls[methodName] = apiCall;
        }
        return this.textToSpeechStub;
      }
      /**
       * The DNS address for this API service.
       * @returns {string} The DNS address for this service.
       */
      static get servicePath() {
        return "texttospeech.googleapis.com";
      }
      /**
       * The DNS address for this API service - same as servicePath(),
       * exists for compatibility reasons.
       * @returns {string} The DNS address for this service.
       */
      static get apiEndpoint() {
        return "texttospeech.googleapis.com";
      }
      /**
       * The port for this API service.
       * @returns {number} The default port for this service.
       */
      static get port() {
        return 443;
      }
      /**
       * The scopes needed to make gRPC calls for every method defined
       * in this service.
       * @returns {string[]} List of default scopes.
       */
      static get scopes() {
        return ["https://www.googleapis.com/auth/cloud-platform"];
      }
      /**
       * Return the project ID used by this class.
       * @returns {Promise} A promise that resolves to string containing the project ID.
       */
      getProjectId(callback) {
        if (callback) {
          this.auth.getProjectId(callback);
          return;
        }
        return this.auth.getProjectId();
      }
      listVoices(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.listVoices(request, options, callback);
      }
      synthesizeSpeech(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.synthesizeSpeech(request, options, callback);
      }
      // --------------------
      // -- Path templates --
      // --------------------
      /**
       * Return a fully-qualified model resource name string.
       *
       * @param {string} project
       * @param {string} location
       * @param {string} model
       * @returns {string} Resource name string.
       */
      modelPath(project, location, model) {
        return this.pathTemplates.modelPathTemplate.render({
          project,
          location,
          model
        });
      }
      /**
       * Parse the project from Model resource.
       *
       * @param {string} modelName
       *   A fully-qualified path representing Model resource.
       * @returns {string} A string representing the project.
       */
      matchProjectFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).project;
      }
      /**
       * Parse the location from Model resource.
       *
       * @param {string} modelName
       *   A fully-qualified path representing Model resource.
       * @returns {string} A string representing the location.
       */
      matchLocationFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).location;
      }
      /**
       * Parse the model from Model resource.
       *
       * @param {string} modelName
       *   A fully-qualified path representing Model resource.
       * @returns {string} A string representing the model.
       */
      matchModelFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).model;
      }
      /**
       * Terminate the gRPC channel and close the client.
       *
       * The client will no longer be usable and all future behavior is undefined.
       * @returns {Promise} A promise that resolves when the client is closed.
       */
      close() {
        if (this.textToSpeechStub && !this._terminated) {
          return this.textToSpeechStub.then((stub) => {
            this._terminated = true;
            stub.close();
          });
        }
        return Promise.resolve();
      }
    };
    exports2.TextToSpeechClient = TextToSpeechClient2;
  }
});

// node_modules/@google-cloud/text-to-speech/build/src/v1/text_to_speech_long_audio_synthesize_client_config.json
var require_text_to_speech_long_audio_synthesize_client_config = __commonJS({
  "node_modules/@google-cloud/text-to-speech/build/src/v1/text_to_speech_long_audio_synthesize_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.cloud.texttospeech.v1.TextToSpeechLongAudioSynthesize": {
          retry_codes: {
            non_idempotent: [],
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ]
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 6e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 6e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            SynthesizeLongAudio: {
              timeout_millis: 5e6,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/@google-cloud/text-to-speech/build/src/v1/text_to_speech_long_audio_synthesize_client.js
var require_text_to_speech_long_audio_synthesize_client = __commonJS({
  "node_modules/@google-cloud/text-to-speech/build/src/v1/text_to_speech_long_audio_synthesize_client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TextToSpeechLongAudioSynthesizeClient = void 0;
    var jsonProtos = require_protos();
    var gapicConfig = require_text_to_speech_long_audio_synthesize_client_config();
    var version = require_package().version;
    var TextToSpeechLongAudioSynthesizeClient = class {
      /**
       * Construct an instance of TextToSpeechLongAudioSynthesizeClient.
       *
       * @param {object} [options] - The configuration object.
       * The options accepted by the constructor are described in detail
       * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
       * The common options are:
       * @param {object} [options.credentials] - Credentials object.
       * @param {string} [options.credentials.client_email]
       * @param {string} [options.credentials.private_key]
       * @param {string} [options.email] - Account email address. Required when
       *     using a .pem or .p12 keyFilename.
       * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
       *     .p12 key downloaded from the Google Developers Console. If you provide
       *     a path to a JSON file, the projectId option below is not necessary.
       *     NOTE: .pem and .p12 require you to specify options.email as well.
       * @param {number} [options.port] - The port on which to connect to
       *     the remote host.
       * @param {string} [options.projectId] - The project ID from the Google
       *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
       *     the environment variable GCLOUD_PROJECT for your project ID. If your
       *     app is running in an environment which supports
       *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
       *     your project ID will be detected automatically.
       * @param {string} [options.apiEndpoint] - The domain name of the
       *     API remote host.
       * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
       *     Follows the structure of {@link gapicConfig}.
       * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
       *     For more information, please check the
       *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
       * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
       *     need to avoid loading the default gRPC version and want to use the fallback
       *     HTTP implementation. Load only fallback version and pass it to the constructor:
       *     ```
       *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
       *     const client = new TextToSpeechLongAudioSynthesizeClient({fallback: true}, gax);
       *     ```
       */
      constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
          page: {},
          stream: {},
          longrunning: {},
          batching: {}
        };
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== "undefined" && typeof (window === null || window === void 0 ? void 0 : window.fetch) === "function";
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        opts.numericEnums = true;
        if (servicePath !== staticMembers.servicePath && !("scopes" in opts)) {
          opts["scopes"] = staticMembers.scopes;
        }
        if (!gaxInstance) {
          gaxInstance = require_src11();
        }
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        this._opts = opts;
        this.auth = this._gaxGrpc.auth;
        this.auth.useJWTAccessWithScope = true;
        this.auth.defaultServicePath = staticMembers.servicePath;
        if (servicePath === staticMembers.servicePath) {
          this.auth.defaultScopes = staticMembers.scopes;
        }
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== "undefined" && "versions" in process) {
          clientHeader.push(`gl-node/${process.versions.node}`);
        } else {
          clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
          clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        } else {
          clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
          clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        const lroOptions = {
          auth: this.auth,
          grpc: "grpc" in this._gaxGrpc ? this._gaxGrpc.grpc : void 0
        };
        if (opts.fallback) {
          lroOptions.protoJson = protoFilesRoot;
          lroOptions.httpRules = [];
        }
        this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
        const synthesizeLongAudioResponse = protoFilesRoot.lookup(".google.cloud.texttospeech.v1.SynthesizeLongAudioResponse");
        const synthesizeLongAudioMetadata = protoFilesRoot.lookup(".google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata");
        this.descriptors.longrunning = {
          synthesizeLongAudio: new this._gaxModule.LongrunningDescriptor(this.operationsClient, synthesizeLongAudioResponse.decode.bind(synthesizeLongAudioResponse), synthesizeLongAudioMetadata.decode.bind(synthesizeLongAudioMetadata))
        };
        this._defaults = this._gaxGrpc.constructSettings("google.cloud.texttospeech.v1.TextToSpeechLongAudioSynthesize", gapicConfig, opts.clientConfig || {}, { "x-goog-api-client": clientHeader.join(" ") });
        this.innerApiCalls = {};
        this.warn = this._gaxModule.warn;
      }
      /**
       * Initialize the client.
       * Performs asynchronous operations (such as authentication) and prepares the client.
       * This function will be called automatically when any class method is called for the
       * first time, but if you need to initialize it before calling an actual method,
       * feel free to call initialize() directly.
       *
       * You can await on this method if you want to make sure the client is initialized.
       *
       * @returns {Promise} A promise that resolves to an authenticated service stub.
       */
      initialize() {
        if (this.textToSpeechLongAudioSynthesizeStub) {
          return this.textToSpeechLongAudioSynthesizeStub;
        }
        this.textToSpeechLongAudioSynthesizeStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService("google.cloud.texttospeech.v1.TextToSpeechLongAudioSynthesize") : (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this._protos.google.cloud.texttospeech.v1.TextToSpeechLongAudioSynthesize
        ), this._opts, this._providedCustomServicePath);
        const textToSpeechLongAudioSynthesizeStubMethods = ["synthesizeLongAudio"];
        for (const methodName of textToSpeechLongAudioSynthesizeStubMethods) {
          const callPromise = this.textToSpeechLongAudioSynthesizeStub.then((stub) => (...args) => {
            if (this._terminated) {
              return Promise.reject("The client has already been closed.");
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          const descriptor = this.descriptors.longrunning[methodName] || void 0;
          const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
          this.innerApiCalls[methodName] = apiCall;
        }
        return this.textToSpeechLongAudioSynthesizeStub;
      }
      /**
       * The DNS address for this API service.
       * @returns {string} The DNS address for this service.
       */
      static get servicePath() {
        return "texttospeech.googleapis.com";
      }
      /**
       * The DNS address for this API service - same as servicePath(),
       * exists for compatibility reasons.
       * @returns {string} The DNS address for this service.
       */
      static get apiEndpoint() {
        return "texttospeech.googleapis.com";
      }
      /**
       * The port for this API service.
       * @returns {number} The default port for this service.
       */
      static get port() {
        return 443;
      }
      /**
       * The scopes needed to make gRPC calls for every method defined
       * in this service.
       * @returns {string[]} List of default scopes.
       */
      static get scopes() {
        return ["https://www.googleapis.com/auth/cloud-platform"];
      }
      /**
       * Return the project ID used by this class.
       * @returns {Promise} A promise that resolves to string containing the project ID.
       */
      getProjectId(callback) {
        if (callback) {
          this.auth.getProjectId(callback);
          return;
        }
        return this.auth.getProjectId();
      }
      synthesizeLongAudio(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.synthesizeLongAudio(request, options, callback);
      }
      /**
       * Check the status of the long running operation returned by `synthesizeLongAudio()`.
       * @param {String} name
       *   The operation name that will be passed.
       * @returns {Promise} - The promise which resolves to an object.
       *   The decoded operation object has result and metadata field to get information from.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
       *   for more details and examples.
       * @example <caption>include:samples/generated/v1/text_to_speech_long_audio_synthesize.synthesize_long_audio.js</caption>
       * region_tag:texttospeech_v1_generated_TextToSpeechLongAudioSynthesize_SynthesizeLongAudio_async
       */
      async checkSynthesizeLongAudioProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.synthesizeLongAudio, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
      }
      /**
       * Gets the latest state of a long-running operation.  Clients can use this
       * method to poll the operation result at intervals as recommended by the API
       * service.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation resource.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       *   e.g, timeout, retries, paginations, etc. See {@link
       *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
       *   for the details.
       * @param {function(?Error, ?Object)=} callback
       *   The function which will be called with the result of the API call.
       *
       *   The second parameter to the callback is an object representing
       *   {@link google.longrunning.Operation | google.longrunning.Operation}.
       * @return {Promise} - The promise which resolves to an array.
       *   The first element of the array is an object representing
       * {@link google.longrunning.Operation | google.longrunning.Operation}.
       * The promise has a method named "cancel" which cancels the ongoing API call.
       *
       * @example
       * ```
       * const client = longrunning.operationsClient();
       * const name = '';
       * const [response] = await client.getOperation({name});
       * // doThingsWith(response)
       * ```
       */
      getOperation(request, options, callback) {
        return this.operationsClient.getOperation(request, options, callback);
      }
      /**
       * Lists operations that match the specified filter in the request. If the
       * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
       *
       * For-await-of syntax is used with the iterable to recursively get response element on-demand.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation collection.
       * @param {string} request.filter - The standard list filter.
       * @param {number=} request.pageSize -
       *   The maximum number of resources contained in the underlying API
       *   response. If page streaming is performed per-resource, this
       *   parameter does not affect the return value. If page streaming is
       *   performed per-page, this determines the maximum number of
       *   resources in a page.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       *   e.g, timeout, retries, paginations, etc. See {@link
       *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
       *   details.
       * @returns {Object}
       *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
       *
       * @example
       * ```
       * const client = longrunning.operationsClient();
       * for await (const response of client.listOperationsAsync(request));
       * // doThingsWith(response)
       * ```
       */
      listOperationsAsync(request, options) {
        return this.operationsClient.listOperationsAsync(request, options);
      }
      /**
       * Starts asynchronous cancellation on a long-running operation.  The server
       * makes a best effort to cancel the operation, but success is not
       * guaranteed.  If the server doesn't support this method, it returns
       * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
       * {@link Operations.GetOperation} or
       * other methods to check whether the cancellation succeeded or whether the
       * operation completed despite cancellation. On successful cancellation,
       * the operation is not deleted; instead, it becomes an operation with
       * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
       * 1, corresponding to `Code.CANCELLED`.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation resource to be cancelled.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       * e.g, timeout, retries, paginations, etc. See {@link
       * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
       * details.
       * @param {function(?Error)=} callback
       *   The function which will be called with the result of the API call.
       * @return {Promise} - The promise which resolves when API call finishes.
       *   The promise has a method named "cancel" which cancels the ongoing API
       * call.
       *
       * @example
       * ```
       * const client = longrunning.operationsClient();
       * await client.cancelOperation({name: ''});
       * ```
       */
      cancelOperation(request, options, callback) {
        return this.operationsClient.cancelOperation(request, options, callback);
      }
      /**
       * Deletes a long-running operation. This method indicates that the client is
       * no longer interested in the operation result. It does not cancel the
       * operation. If the server doesn't support this method, it returns
       * `google.rpc.Code.UNIMPLEMENTED`.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation resource to be deleted.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       * e.g, timeout, retries, paginations, etc. See {@link
       * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
       * for the details.
       * @param {function(?Error)=} callback
       *   The function which will be called with the result of the API call.
       * @return {Promise} - The promise which resolves when API call finishes.
       *   The promise has a method named "cancel" which cancels the ongoing API
       * call.
       *
       * @example
       * ```
       * const client = longrunning.operationsClient();
       * await client.deleteOperation({name: ''});
       * ```
       */
      deleteOperation(request, options, callback) {
        return this.operationsClient.deleteOperation(request, options, callback);
      }
      /**
       * Terminate the gRPC channel and close the client.
       *
       * The client will no longer be usable and all future behavior is undefined.
       * @returns {Promise} A promise that resolves when the client is closed.
       */
      close() {
        if (this.textToSpeechLongAudioSynthesizeStub && !this._terminated) {
          return this.textToSpeechLongAudioSynthesizeStub.then((stub) => {
            this._terminated = true;
            stub.close();
            this.operationsClient.close();
          });
        }
        return Promise.resolve();
      }
    };
    exports2.TextToSpeechLongAudioSynthesizeClient = TextToSpeechLongAudioSynthesizeClient;
  }
});

// node_modules/@google-cloud/text-to-speech/build/src/v1/index.js
var require_v1 = __commonJS({
  "node_modules/@google-cloud/text-to-speech/build/src/v1/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TextToSpeechLongAudioSynthesizeClient = exports2.TextToSpeechClient = void 0;
    var text_to_speech_client_1 = require_text_to_speech_client();
    Object.defineProperty(exports2, "TextToSpeechClient", { enumerable: true, get: function() {
      return text_to_speech_client_1.TextToSpeechClient;
    } });
    var text_to_speech_long_audio_synthesize_client_1 = require_text_to_speech_long_audio_synthesize_client();
    Object.defineProperty(exports2, "TextToSpeechLongAudioSynthesizeClient", { enumerable: true, get: function() {
      return text_to_speech_long_audio_synthesize_client_1.TextToSpeechLongAudioSynthesizeClient;
    } });
  }
});

// node_modules/@google-cloud/text-to-speech/build/src/v1beta1/text_to_speech_client_config.json
var require_text_to_speech_client_config2 = __commonJS({
  "node_modules/@google-cloud/text-to-speech/build/src/v1beta1/text_to_speech_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.cloud.texttospeech.v1beta1.TextToSpeech": {
          retry_codes: {
            non_idempotent: [],
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ]
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 6e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 6e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            ListVoices: {
              timeout_millis: 3e5,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            },
            SynthesizeSpeech: {
              timeout_millis: 3e5,
              retry_codes_name: "idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/@google-cloud/text-to-speech/build/src/v1beta1/text_to_speech_client.js
var require_text_to_speech_client2 = __commonJS({
  "node_modules/@google-cloud/text-to-speech/build/src/v1beta1/text_to_speech_client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TextToSpeechClient = void 0;
    var jsonProtos = require_protos();
    var gapicConfig = require_text_to_speech_client_config2();
    var version = require_package().version;
    var TextToSpeechClient2 = class {
      /**
       * Construct an instance of TextToSpeechClient.
       *
       * @param {object} [options] - The configuration object.
       * The options accepted by the constructor are described in detail
       * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
       * The common options are:
       * @param {object} [options.credentials] - Credentials object.
       * @param {string} [options.credentials.client_email]
       * @param {string} [options.credentials.private_key]
       * @param {string} [options.email] - Account email address. Required when
       *     using a .pem or .p12 keyFilename.
       * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
       *     .p12 key downloaded from the Google Developers Console. If you provide
       *     a path to a JSON file, the projectId option below is not necessary.
       *     NOTE: .pem and .p12 require you to specify options.email as well.
       * @param {number} [options.port] - The port on which to connect to
       *     the remote host.
       * @param {string} [options.projectId] - The project ID from the Google
       *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
       *     the environment variable GCLOUD_PROJECT for your project ID. If your
       *     app is running in an environment which supports
       *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
       *     your project ID will be detected automatically.
       * @param {string} [options.apiEndpoint] - The domain name of the
       *     API remote host.
       * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
       *     Follows the structure of {@link gapicConfig}.
       * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
       *     For more information, please check the
       *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
       * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
       *     need to avoid loading the default gRPC version and want to use the fallback
       *     HTTP implementation. Load only fallback version and pass it to the constructor:
       *     ```
       *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
       *     const client = new TextToSpeechClient({fallback: true}, gax);
       *     ```
       */
      constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
          page: {},
          stream: {},
          longrunning: {},
          batching: {}
        };
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== "undefined" && typeof (window === null || window === void 0 ? void 0 : window.fetch) === "function";
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        opts.numericEnums = true;
        if (servicePath !== staticMembers.servicePath && !("scopes" in opts)) {
          opts["scopes"] = staticMembers.scopes;
        }
        if (!gaxInstance) {
          gaxInstance = require_src11();
        }
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        this._opts = opts;
        this.auth = this._gaxGrpc.auth;
        this.auth.useJWTAccessWithScope = true;
        this.auth.defaultServicePath = staticMembers.servicePath;
        if (servicePath === staticMembers.servicePath) {
          this.auth.defaultScopes = staticMembers.scopes;
        }
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== "undefined" && "versions" in process) {
          clientHeader.push(`gl-node/${process.versions.node}`);
        } else {
          clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
          clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        } else {
          clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
          clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        this.pathTemplates = {
          modelPathTemplate: new this._gaxModule.PathTemplate("projects/{project}/locations/{location}/models/{model}")
        };
        this._defaults = this._gaxGrpc.constructSettings("google.cloud.texttospeech.v1beta1.TextToSpeech", gapicConfig, opts.clientConfig || {}, { "x-goog-api-client": clientHeader.join(" ") });
        this.innerApiCalls = {};
        this.warn = this._gaxModule.warn;
      }
      /**
       * Initialize the client.
       * Performs asynchronous operations (such as authentication) and prepares the client.
       * This function will be called automatically when any class method is called for the
       * first time, but if you need to initialize it before calling an actual method,
       * feel free to call initialize() directly.
       *
       * You can await on this method if you want to make sure the client is initialized.
       *
       * @returns {Promise} A promise that resolves to an authenticated service stub.
       */
      initialize() {
        if (this.textToSpeechStub) {
          return this.textToSpeechStub;
        }
        this.textToSpeechStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService("google.cloud.texttospeech.v1beta1.TextToSpeech") : (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this._protos.google.cloud.texttospeech.v1beta1.TextToSpeech
        ), this._opts, this._providedCustomServicePath);
        const textToSpeechStubMethods = ["listVoices", "synthesizeSpeech"];
        for (const methodName of textToSpeechStubMethods) {
          const callPromise = this.textToSpeechStub.then((stub) => (...args) => {
            if (this._terminated) {
              return Promise.reject("The client has already been closed.");
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          const descriptor = void 0;
          const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
          this.innerApiCalls[methodName] = apiCall;
        }
        return this.textToSpeechStub;
      }
      /**
       * The DNS address for this API service.
       * @returns {string} The DNS address for this service.
       */
      static get servicePath() {
        return "texttospeech.googleapis.com";
      }
      /**
       * The DNS address for this API service - same as servicePath(),
       * exists for compatibility reasons.
       * @returns {string} The DNS address for this service.
       */
      static get apiEndpoint() {
        return "texttospeech.googleapis.com";
      }
      /**
       * The port for this API service.
       * @returns {number} The default port for this service.
       */
      static get port() {
        return 443;
      }
      /**
       * The scopes needed to make gRPC calls for every method defined
       * in this service.
       * @returns {string[]} List of default scopes.
       */
      static get scopes() {
        return ["https://www.googleapis.com/auth/cloud-platform"];
      }
      /**
       * Return the project ID used by this class.
       * @returns {Promise} A promise that resolves to string containing the project ID.
       */
      getProjectId(callback) {
        if (callback) {
          this.auth.getProjectId(callback);
          return;
        }
        return this.auth.getProjectId();
      }
      listVoices(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.listVoices(request, options, callback);
      }
      synthesizeSpeech(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        this.initialize();
        return this.innerApiCalls.synthesizeSpeech(request, options, callback);
      }
      // --------------------
      // -- Path templates --
      // --------------------
      /**
       * Return a fully-qualified model resource name string.
       *
       * @param {string} project
       * @param {string} location
       * @param {string} model
       * @returns {string} Resource name string.
       */
      modelPath(project, location, model) {
        return this.pathTemplates.modelPathTemplate.render({
          project,
          location,
          model
        });
      }
      /**
       * Parse the project from Model resource.
       *
       * @param {string} modelName
       *   A fully-qualified path representing Model resource.
       * @returns {string} A string representing the project.
       */
      matchProjectFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).project;
      }
      /**
       * Parse the location from Model resource.
       *
       * @param {string} modelName
       *   A fully-qualified path representing Model resource.
       * @returns {string} A string representing the location.
       */
      matchLocationFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).location;
      }
      /**
       * Parse the model from Model resource.
       *
       * @param {string} modelName
       *   A fully-qualified path representing Model resource.
       * @returns {string} A string representing the model.
       */
      matchModelFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).model;
      }
      /**
       * Terminate the gRPC channel and close the client.
       *
       * The client will no longer be usable and all future behavior is undefined.
       * @returns {Promise} A promise that resolves when the client is closed.
       */
      close() {
        if (this.textToSpeechStub && !this._terminated) {
          return this.textToSpeechStub.then((stub) => {
            this._terminated = true;
            stub.close();
          });
        }
        return Promise.resolve();
      }
    };
    exports2.TextToSpeechClient = TextToSpeechClient2;
  }
});

// node_modules/@google-cloud/text-to-speech/build/src/v1beta1/text_to_speech_long_audio_synthesize_client_config.json
var require_text_to_speech_long_audio_synthesize_client_config2 = __commonJS({
  "node_modules/@google-cloud/text-to-speech/build/src/v1beta1/text_to_speech_long_audio_synthesize_client_config.json"(exports2, module2) {
    module2.exports = {
      interfaces: {
        "google.cloud.texttospeech.v1beta1.TextToSpeechLongAudioSynthesize": {
          retry_codes: {
            non_idempotent: [],
            idempotent: [
              "DEADLINE_EXCEEDED",
              "UNAVAILABLE"
            ]
          },
          retry_params: {
            default: {
              initial_retry_delay_millis: 100,
              retry_delay_multiplier: 1.3,
              max_retry_delay_millis: 6e4,
              initial_rpc_timeout_millis: 6e4,
              rpc_timeout_multiplier: 1,
              max_rpc_timeout_millis: 6e4,
              total_timeout_millis: 6e5
            }
          },
          methods: {
            SynthesizeLongAudio: {
              timeout_millis: 5e6,
              retry_codes_name: "non_idempotent",
              retry_params_name: "default"
            }
          }
        }
      }
    };
  }
});

// node_modules/@google-cloud/text-to-speech/build/src/v1beta1/text_to_speech_long_audio_synthesize_client.js
var require_text_to_speech_long_audio_synthesize_client2 = __commonJS({
  "node_modules/@google-cloud/text-to-speech/build/src/v1beta1/text_to_speech_long_audio_synthesize_client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TextToSpeechLongAudioSynthesizeClient = void 0;
    var jsonProtos = require_protos();
    var gapicConfig = require_text_to_speech_long_audio_synthesize_client_config2();
    var version = require_package().version;
    var TextToSpeechLongAudioSynthesizeClient = class {
      /**
       * Construct an instance of TextToSpeechLongAudioSynthesizeClient.
       *
       * @param {object} [options] - The configuration object.
       * The options accepted by the constructor are described in detail
       * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
       * The common options are:
       * @param {object} [options.credentials] - Credentials object.
       * @param {string} [options.credentials.client_email]
       * @param {string} [options.credentials.private_key]
       * @param {string} [options.email] - Account email address. Required when
       *     using a .pem or .p12 keyFilename.
       * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
       *     .p12 key downloaded from the Google Developers Console. If you provide
       *     a path to a JSON file, the projectId option below is not necessary.
       *     NOTE: .pem and .p12 require you to specify options.email as well.
       * @param {number} [options.port] - The port on which to connect to
       *     the remote host.
       * @param {string} [options.projectId] - The project ID from the Google
       *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
       *     the environment variable GCLOUD_PROJECT for your project ID. If your
       *     app is running in an environment which supports
       *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
       *     your project ID will be detected automatically.
       * @param {string} [options.apiEndpoint] - The domain name of the
       *     API remote host.
       * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
       *     Follows the structure of {@link gapicConfig}.
       * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
       *     For more information, please check the
       *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
       * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
       *     need to avoid loading the default gRPC version and want to use the fallback
       *     HTTP implementation. Load only fallback version and pass it to the constructor:
       *     ```
       *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
       *     const client = new TextToSpeechLongAudioSynthesizeClient({fallback: true}, gax);
       *     ```
       */
      constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
          page: {},
          stream: {},
          longrunning: {},
          batching: {}
        };
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== "undefined" && typeof (window === null || window === void 0 ? void 0 : window.fetch) === "function";
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        opts.numericEnums = true;
        if (servicePath !== staticMembers.servicePath && !("scopes" in opts)) {
          opts["scopes"] = staticMembers.scopes;
        }
        if (!gaxInstance) {
          gaxInstance = require_src11();
        }
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        this._opts = opts;
        this.auth = this._gaxGrpc.auth;
        this.auth.useJWTAccessWithScope = true;
        this.auth.defaultServicePath = staticMembers.servicePath;
        if (servicePath === staticMembers.servicePath) {
          this.auth.defaultScopes = staticMembers.scopes;
        }
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== "undefined" && "versions" in process) {
          clientHeader.push(`gl-node/${process.versions.node}`);
        } else {
          clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
          clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        } else {
          clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
          clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        const lroOptions = {
          auth: this.auth,
          grpc: "grpc" in this._gaxGrpc ? this._gaxGrpc.grpc : void 0
        };
        if (opts.fallback) {
          lroOptions.protoJson = protoFilesRoot;
          lroOptions.httpRules = [];
        }
        this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
        const synthesizeLongAudioResponse = protoFilesRoot.lookup(".google.cloud.texttospeech.v1beta1.SynthesizeLongAudioResponse");
        const synthesizeLongAudioMetadata = protoFilesRoot.lookup(".google.cloud.texttospeech.v1beta1.SynthesizeLongAudioMetadata");
        this.descriptors.longrunning = {
          synthesizeLongAudio: new this._gaxModule.LongrunningDescriptor(this.operationsClient, synthesizeLongAudioResponse.decode.bind(synthesizeLongAudioResponse), synthesizeLongAudioMetadata.decode.bind(synthesizeLongAudioMetadata))
        };
        this._defaults = this._gaxGrpc.constructSettings("google.cloud.texttospeech.v1beta1.TextToSpeechLongAudioSynthesize", gapicConfig, opts.clientConfig || {}, { "x-goog-api-client": clientHeader.join(" ") });
        this.innerApiCalls = {};
        this.warn = this._gaxModule.warn;
      }
      /**
       * Initialize the client.
       * Performs asynchronous operations (such as authentication) and prepares the client.
       * This function will be called automatically when any class method is called for the
       * first time, but if you need to initialize it before calling an actual method,
       * feel free to call initialize() directly.
       *
       * You can await on this method if you want to make sure the client is initialized.
       *
       * @returns {Promise} A promise that resolves to an authenticated service stub.
       */
      initialize() {
        if (this.textToSpeechLongAudioSynthesizeStub) {
          return this.textToSpeechLongAudioSynthesizeStub;
        }
        this.textToSpeechLongAudioSynthesizeStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService("google.cloud.texttospeech.v1beta1.TextToSpeechLongAudioSynthesize") : (
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this._protos.google.cloud.texttospeech.v1beta1.TextToSpeechLongAudioSynthesize
        ), this._opts, this._providedCustomServicePath);
        const textToSpeechLongAudioSynthesizeStubMethods = ["synthesizeLongAudio"];
        for (const methodName of textToSpeechLongAudioSynthesizeStubMethods) {
          const callPromise = this.textToSpeechLongAudioSynthesizeStub.then((stub) => (...args) => {
            if (this._terminated) {
              return Promise.reject("The client has already been closed.");
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          }, (err) => () => {
            throw err;
          });
          const descriptor = this.descriptors.longrunning[methodName] || void 0;
          const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
          this.innerApiCalls[methodName] = apiCall;
        }
        return this.textToSpeechLongAudioSynthesizeStub;
      }
      /**
       * The DNS address for this API service.
       * @returns {string} The DNS address for this service.
       */
      static get servicePath() {
        return "texttospeech.googleapis.com";
      }
      /**
       * The DNS address for this API service - same as servicePath(),
       * exists for compatibility reasons.
       * @returns {string} The DNS address for this service.
       */
      static get apiEndpoint() {
        return "texttospeech.googleapis.com";
      }
      /**
       * The port for this API service.
       * @returns {number} The default port for this service.
       */
      static get port() {
        return 443;
      }
      /**
       * The scopes needed to make gRPC calls for every method defined
       * in this service.
       * @returns {string[]} List of default scopes.
       */
      static get scopes() {
        return ["https://www.googleapis.com/auth/cloud-platform"];
      }
      /**
       * Return the project ID used by this class.
       * @returns {Promise} A promise that resolves to string containing the project ID.
       */
      getProjectId(callback) {
        if (callback) {
          this.auth.getProjectId(callback);
          return;
        }
        return this.auth.getProjectId();
      }
      synthesizeLongAudio(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === "function" && callback === void 0) {
          callback = optionsOrCallback;
          options = {};
        } else {
          options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers["x-goog-request-params"] = this._gaxModule.routingHeader.fromParams({
          parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ""
        });
        this.initialize();
        return this.innerApiCalls.synthesizeLongAudio(request, options, callback);
      }
      /**
       * Check the status of the long running operation returned by `synthesizeLongAudio()`.
       * @param {String} name
       *   The operation name that will be passed.
       * @returns {Promise} - The promise which resolves to an object.
       *   The decoded operation object has result and metadata field to get information from.
       *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
       *   for more details and examples.
       * @example <caption>include:samples/generated/v1beta1/text_to_speech_long_audio_synthesize.synthesize_long_audio.js</caption>
       * region_tag:texttospeech_v1beta1_generated_TextToSpeechLongAudioSynthesize_SynthesizeLongAudio_async
       */
      async checkSynthesizeLongAudioProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.synthesizeLongAudio, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
      }
      /**
       * Gets the latest state of a long-running operation.  Clients can use this
       * method to poll the operation result at intervals as recommended by the API
       * service.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation resource.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       *   e.g, timeout, retries, paginations, etc. See {@link
       *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
       *   for the details.
       * @param {function(?Error, ?Object)=} callback
       *   The function which will be called with the result of the API call.
       *
       *   The second parameter to the callback is an object representing
       *   {@link google.longrunning.Operation | google.longrunning.Operation}.
       * @return {Promise} - The promise which resolves to an array.
       *   The first element of the array is an object representing
       * {@link google.longrunning.Operation | google.longrunning.Operation}.
       * The promise has a method named "cancel" which cancels the ongoing API call.
       *
       * @example
       * ```
       * const client = longrunning.operationsClient();
       * const name = '';
       * const [response] = await client.getOperation({name});
       * // doThingsWith(response)
       * ```
       */
      getOperation(request, options, callback) {
        return this.operationsClient.getOperation(request, options, callback);
      }
      /**
       * Lists operations that match the specified filter in the request. If the
       * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
       *
       * For-await-of syntax is used with the iterable to recursively get response element on-demand.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation collection.
       * @param {string} request.filter - The standard list filter.
       * @param {number=} request.pageSize -
       *   The maximum number of resources contained in the underlying API
       *   response. If page streaming is performed per-resource, this
       *   parameter does not affect the return value. If page streaming is
       *   performed per-page, this determines the maximum number of
       *   resources in a page.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       *   e.g, timeout, retries, paginations, etc. See {@link
       *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
       *   details.
       * @returns {Object}
       *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
       *
       * @example
       * ```
       * const client = longrunning.operationsClient();
       * for await (const response of client.listOperationsAsync(request));
       * // doThingsWith(response)
       * ```
       */
      listOperationsAsync(request, options) {
        return this.operationsClient.listOperationsAsync(request, options);
      }
      /**
       * Starts asynchronous cancellation on a long-running operation.  The server
       * makes a best effort to cancel the operation, but success is not
       * guaranteed.  If the server doesn't support this method, it returns
       * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
       * {@link Operations.GetOperation} or
       * other methods to check whether the cancellation succeeded or whether the
       * operation completed despite cancellation. On successful cancellation,
       * the operation is not deleted; instead, it becomes an operation with
       * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
       * 1, corresponding to `Code.CANCELLED`.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation resource to be cancelled.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       * e.g, timeout, retries, paginations, etc. See {@link
       * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
       * details.
       * @param {function(?Error)=} callback
       *   The function which will be called with the result of the API call.
       * @return {Promise} - The promise which resolves when API call finishes.
       *   The promise has a method named "cancel" which cancels the ongoing API
       * call.
       *
       * @example
       * ```
       * const client = longrunning.operationsClient();
       * await client.cancelOperation({name: ''});
       * ```
       */
      cancelOperation(request, options, callback) {
        return this.operationsClient.cancelOperation(request, options, callback);
      }
      /**
       * Deletes a long-running operation. This method indicates that the client is
       * no longer interested in the operation result. It does not cancel the
       * operation. If the server doesn't support this method, it returns
       * `google.rpc.Code.UNIMPLEMENTED`.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation resource to be deleted.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       * e.g, timeout, retries, paginations, etc. See {@link
       * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
       * for the details.
       * @param {function(?Error)=} callback
       *   The function which will be called with the result of the API call.
       * @return {Promise} - The promise which resolves when API call finishes.
       *   The promise has a method named "cancel" which cancels the ongoing API
       * call.
       *
       * @example
       * ```
       * const client = longrunning.operationsClient();
       * await client.deleteOperation({name: ''});
       * ```
       */
      deleteOperation(request, options, callback) {
        return this.operationsClient.deleteOperation(request, options, callback);
      }
      /**
       * Terminate the gRPC channel and close the client.
       *
       * The client will no longer be usable and all future behavior is undefined.
       * @returns {Promise} A promise that resolves when the client is closed.
       */
      close() {
        if (this.textToSpeechLongAudioSynthesizeStub && !this._terminated) {
          return this.textToSpeechLongAudioSynthesizeStub.then((stub) => {
            this._terminated = true;
            stub.close();
            this.operationsClient.close();
          });
        }
        return Promise.resolve();
      }
    };
    exports2.TextToSpeechLongAudioSynthesizeClient = TextToSpeechLongAudioSynthesizeClient;
  }
});

// node_modules/@google-cloud/text-to-speech/build/src/v1beta1/index.js
var require_v1beta1 = __commonJS({
  "node_modules/@google-cloud/text-to-speech/build/src/v1beta1/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TextToSpeechLongAudioSynthesizeClient = exports2.TextToSpeechClient = void 0;
    var text_to_speech_client_1 = require_text_to_speech_client2();
    Object.defineProperty(exports2, "TextToSpeechClient", { enumerable: true, get: function() {
      return text_to_speech_client_1.TextToSpeechClient;
    } });
    var text_to_speech_long_audio_synthesize_client_1 = require_text_to_speech_long_audio_synthesize_client2();
    Object.defineProperty(exports2, "TextToSpeechLongAudioSynthesizeClient", { enumerable: true, get: function() {
      return text_to_speech_long_audio_synthesize_client_1.TextToSpeechLongAudioSynthesizeClient;
    } });
  }
});

// node_modules/google-gax/build/src/protobuf.js
var require_protobuf = __commonJS({
  "node_modules/google-gax/build/src/protobuf.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.protobufMinimal = void 0;
    exports2.protobufMinimal = require_minimal2();
  }
});

// node_modules/@google-cloud/text-to-speech/build/protos/protos.js
var require_protos2 = __commonJS({
  "node_modules/@google-cloud/text-to-speech/build/protos/protos.js"(exports2, module2) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd)
        define(["protobufjs/minimal"], factory);
      else if (typeof require === "function" && typeof module2 === "object" && module2 && module2.exports)
        module2.exports = factory(require_protobuf().protobufMinimal);
    })(exports2, function($protobuf) {
      "use strict";
      var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
      var $root = $protobuf.roots._google_cloud_text_to_speech_protos || ($protobuf.roots._google_cloud_text_to_speech_protos = {});
      $root.google = function() {
        var google = {};
        google.cloud = function() {
          var cloud = {};
          cloud.texttospeech = function() {
            var texttospeech = {};
            texttospeech.v1 = function() {
              var v1 = {};
              v1.TextToSpeech = function() {
                function TextToSpeech(rpcImpl, requestDelimited, responseDelimited) {
                  $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
                (TextToSpeech.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TextToSpeech;
                TextToSpeech.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                  return new this(rpcImpl, requestDelimited, responseDelimited);
                };
                Object.defineProperty(TextToSpeech.prototype.listVoices = function listVoices(request, callback) {
                  return this.rpcCall(listVoices, $root.google.cloud.texttospeech.v1.ListVoicesRequest, $root.google.cloud.texttospeech.v1.ListVoicesResponse, request, callback);
                }, "name", { value: "ListVoices" });
                Object.defineProperty(TextToSpeech.prototype.synthesizeSpeech = function synthesizeSpeech(request, callback) {
                  return this.rpcCall(synthesizeSpeech, $root.google.cloud.texttospeech.v1.SynthesizeSpeechRequest, $root.google.cloud.texttospeech.v1.SynthesizeSpeechResponse, request, callback);
                }, "name", { value: "SynthesizeSpeech" });
                return TextToSpeech;
              }();
              v1.SsmlVoiceGender = function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "SSML_VOICE_GENDER_UNSPECIFIED"] = 0;
                values[valuesById[1] = "MALE"] = 1;
                values[valuesById[2] = "FEMALE"] = 2;
                values[valuesById[3] = "NEUTRAL"] = 3;
                return values;
              }();
              v1.AudioEncoding = function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "AUDIO_ENCODING_UNSPECIFIED"] = 0;
                values[valuesById[1] = "LINEAR16"] = 1;
                values[valuesById[2] = "MP3"] = 2;
                values[valuesById[3] = "OGG_OPUS"] = 3;
                values[valuesById[5] = "MULAW"] = 5;
                values[valuesById[6] = "ALAW"] = 6;
                return values;
              }();
              v1.ListVoicesRequest = function() {
                function ListVoicesRequest(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                ListVoicesRequest.prototype.languageCode = "";
                ListVoicesRequest.create = function create(properties) {
                  return new ListVoicesRequest(properties);
                };
                ListVoicesRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.languageCode);
                  return writer;
                };
                ListVoicesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                ListVoicesRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1.ListVoicesRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.languageCode = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                ListVoicesRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                ListVoicesRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.languageCode != null && message.hasOwnProperty("languageCode")) {
                    if (!$util.isString(message.languageCode))
                      return "languageCode: string expected";
                  }
                  return null;
                };
                ListVoicesRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1.ListVoicesRequest)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1.ListVoicesRequest();
                  if (object.languageCode != null)
                    message.languageCode = String(object.languageCode);
                  return message;
                };
                ListVoicesRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.languageCode = "";
                  if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                    object.languageCode = message.languageCode;
                  return object;
                };
                ListVoicesRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                ListVoicesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1.ListVoicesRequest";
                };
                return ListVoicesRequest;
              }();
              v1.ListVoicesResponse = function() {
                function ListVoicesResponse(properties) {
                  this.voices = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                ListVoicesResponse.prototype.voices = $util.emptyArray;
                ListVoicesResponse.create = function create(properties) {
                  return new ListVoicesResponse(properties);
                };
                ListVoicesResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.voices != null && message.voices.length)
                    for (var i = 0; i < message.voices.length; ++i)
                      $root.google.cloud.texttospeech.v1.Voice.encode(message.voices[i], writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).fork()).ldelim();
                  return writer;
                };
                ListVoicesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                ListVoicesResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1.ListVoicesResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.voices && message.voices.length))
                          message.voices = [];
                        message.voices.push($root.google.cloud.texttospeech.v1.Voice.decode(reader, reader.uint32()));
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                ListVoicesResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                ListVoicesResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.voices != null && message.hasOwnProperty("voices")) {
                    if (!Array.isArray(message.voices))
                      return "voices: array expected";
                    for (var i = 0; i < message.voices.length; ++i) {
                      var error = $root.google.cloud.texttospeech.v1.Voice.verify(message.voices[i]);
                      if (error)
                        return "voices." + error;
                    }
                  }
                  return null;
                };
                ListVoicesResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1.ListVoicesResponse)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1.ListVoicesResponse();
                  if (object.voices) {
                    if (!Array.isArray(object.voices))
                      throw TypeError(".google.cloud.texttospeech.v1.ListVoicesResponse.voices: array expected");
                    message.voices = [];
                    for (var i = 0; i < object.voices.length; ++i) {
                      if (typeof object.voices[i] !== "object")
                        throw TypeError(".google.cloud.texttospeech.v1.ListVoicesResponse.voices: object expected");
                      message.voices[i] = $root.google.cloud.texttospeech.v1.Voice.fromObject(object.voices[i]);
                    }
                  }
                  return message;
                };
                ListVoicesResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.voices = [];
                  if (message.voices && message.voices.length) {
                    object.voices = [];
                    for (var j = 0; j < message.voices.length; ++j)
                      object.voices[j] = $root.google.cloud.texttospeech.v1.Voice.toObject(message.voices[j], options);
                  }
                  return object;
                };
                ListVoicesResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                ListVoicesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1.ListVoicesResponse";
                };
                return ListVoicesResponse;
              }();
              v1.Voice = function() {
                function Voice(properties) {
                  this.languageCodes = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                Voice.prototype.languageCodes = $util.emptyArray;
                Voice.prototype.name = "";
                Voice.prototype.ssmlGender = 0;
                Voice.prototype.naturalSampleRateHertz = 0;
                Voice.create = function create(properties) {
                  return new Voice(properties);
                };
                Voice.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.languageCodes != null && message.languageCodes.length)
                    for (var i = 0; i < message.languageCodes.length; ++i)
                      writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(message.languageCodes[i]);
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.name);
                  if (message.ssmlGender != null && Object.hasOwnProperty.call(message, "ssmlGender"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).int32(message.ssmlGender);
                  if (message.naturalSampleRateHertz != null && Object.hasOwnProperty.call(message, "naturalSampleRateHertz"))
                    writer.uint32(
                      /* id 4, wireType 0 =*/
                      32
                    ).int32(message.naturalSampleRateHertz);
                  return writer;
                };
                Voice.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                Voice.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1.Voice();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.languageCodes && message.languageCodes.length))
                          message.languageCodes = [];
                        message.languageCodes.push(reader.string());
                        break;
                      }
                      case 2: {
                        message.name = reader.string();
                        break;
                      }
                      case 3: {
                        message.ssmlGender = reader.int32();
                        break;
                      }
                      case 4: {
                        message.naturalSampleRateHertz = reader.int32();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                Voice.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                Voice.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.languageCodes != null && message.hasOwnProperty("languageCodes")) {
                    if (!Array.isArray(message.languageCodes))
                      return "languageCodes: array expected";
                    for (var i = 0; i < message.languageCodes.length; ++i)
                      if (!$util.isString(message.languageCodes[i]))
                        return "languageCodes: string[] expected";
                  }
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  if (message.ssmlGender != null && message.hasOwnProperty("ssmlGender"))
                    switch (message.ssmlGender) {
                      default:
                        return "ssmlGender: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                        break;
                    }
                  if (message.naturalSampleRateHertz != null && message.hasOwnProperty("naturalSampleRateHertz")) {
                    if (!$util.isInteger(message.naturalSampleRateHertz))
                      return "naturalSampleRateHertz: integer expected";
                  }
                  return null;
                };
                Voice.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1.Voice)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1.Voice();
                  if (object.languageCodes) {
                    if (!Array.isArray(object.languageCodes))
                      throw TypeError(".google.cloud.texttospeech.v1.Voice.languageCodes: array expected");
                    message.languageCodes = [];
                    for (var i = 0; i < object.languageCodes.length; ++i)
                      message.languageCodes[i] = String(object.languageCodes[i]);
                  }
                  if (object.name != null)
                    message.name = String(object.name);
                  switch (object.ssmlGender) {
                    default:
                      if (typeof object.ssmlGender === "number") {
                        message.ssmlGender = object.ssmlGender;
                        break;
                      }
                      break;
                    case "SSML_VOICE_GENDER_UNSPECIFIED":
                    case 0:
                      message.ssmlGender = 0;
                      break;
                    case "MALE":
                    case 1:
                      message.ssmlGender = 1;
                      break;
                    case "FEMALE":
                    case 2:
                      message.ssmlGender = 2;
                      break;
                    case "NEUTRAL":
                    case 3:
                      message.ssmlGender = 3;
                      break;
                  }
                  if (object.naturalSampleRateHertz != null)
                    message.naturalSampleRateHertz = object.naturalSampleRateHertz | 0;
                  return message;
                };
                Voice.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.languageCodes = [];
                  if (options.defaults) {
                    object.name = "";
                    object.ssmlGender = options.enums === String ? "SSML_VOICE_GENDER_UNSPECIFIED" : 0;
                    object.naturalSampleRateHertz = 0;
                  }
                  if (message.languageCodes && message.languageCodes.length) {
                    object.languageCodes = [];
                    for (var j = 0; j < message.languageCodes.length; ++j)
                      object.languageCodes[j] = message.languageCodes[j];
                  }
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  if (message.ssmlGender != null && message.hasOwnProperty("ssmlGender"))
                    object.ssmlGender = options.enums === String ? $root.google.cloud.texttospeech.v1.SsmlVoiceGender[message.ssmlGender] === void 0 ? message.ssmlGender : $root.google.cloud.texttospeech.v1.SsmlVoiceGender[message.ssmlGender] : message.ssmlGender;
                  if (message.naturalSampleRateHertz != null && message.hasOwnProperty("naturalSampleRateHertz"))
                    object.naturalSampleRateHertz = message.naturalSampleRateHertz;
                  return object;
                };
                Voice.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                Voice.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1.Voice";
                };
                return Voice;
              }();
              v1.SynthesizeSpeechRequest = function() {
                function SynthesizeSpeechRequest(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SynthesizeSpeechRequest.prototype.input = null;
                SynthesizeSpeechRequest.prototype.voice = null;
                SynthesizeSpeechRequest.prototype.audioConfig = null;
                SynthesizeSpeechRequest.create = function create(properties) {
                  return new SynthesizeSpeechRequest(properties);
                };
                SynthesizeSpeechRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.input != null && Object.hasOwnProperty.call(message, "input"))
                    $root.google.cloud.texttospeech.v1.SynthesisInput.encode(message.input, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  if (message.voice != null && Object.hasOwnProperty.call(message, "voice"))
                    $root.google.cloud.texttospeech.v1.VoiceSelectionParams.encode(message.voice, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  if (message.audioConfig != null && Object.hasOwnProperty.call(message, "audioConfig"))
                    $root.google.cloud.texttospeech.v1.AudioConfig.encode(message.audioConfig, writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).fork()).ldelim();
                  return writer;
                };
                SynthesizeSpeechRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SynthesizeSpeechRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1.SynthesizeSpeechRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.input = $root.google.cloud.texttospeech.v1.SynthesisInput.decode(reader, reader.uint32());
                        break;
                      }
                      case 2: {
                        message.voice = $root.google.cloud.texttospeech.v1.VoiceSelectionParams.decode(reader, reader.uint32());
                        break;
                      }
                      case 3: {
                        message.audioConfig = $root.google.cloud.texttospeech.v1.AudioConfig.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SynthesizeSpeechRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SynthesizeSpeechRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.input != null && message.hasOwnProperty("input")) {
                    var error = $root.google.cloud.texttospeech.v1.SynthesisInput.verify(message.input);
                    if (error)
                      return "input." + error;
                  }
                  if (message.voice != null && message.hasOwnProperty("voice")) {
                    var error = $root.google.cloud.texttospeech.v1.VoiceSelectionParams.verify(message.voice);
                    if (error)
                      return "voice." + error;
                  }
                  if (message.audioConfig != null && message.hasOwnProperty("audioConfig")) {
                    var error = $root.google.cloud.texttospeech.v1.AudioConfig.verify(message.audioConfig);
                    if (error)
                      return "audioConfig." + error;
                  }
                  return null;
                };
                SynthesizeSpeechRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1.SynthesizeSpeechRequest)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1.SynthesizeSpeechRequest();
                  if (object.input != null) {
                    if (typeof object.input !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1.SynthesizeSpeechRequest.input: object expected");
                    message.input = $root.google.cloud.texttospeech.v1.SynthesisInput.fromObject(object.input);
                  }
                  if (object.voice != null) {
                    if (typeof object.voice !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1.SynthesizeSpeechRequest.voice: object expected");
                    message.voice = $root.google.cloud.texttospeech.v1.VoiceSelectionParams.fromObject(object.voice);
                  }
                  if (object.audioConfig != null) {
                    if (typeof object.audioConfig !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1.SynthesizeSpeechRequest.audioConfig: object expected");
                    message.audioConfig = $root.google.cloud.texttospeech.v1.AudioConfig.fromObject(object.audioConfig);
                  }
                  return message;
                };
                SynthesizeSpeechRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.input = null;
                    object.voice = null;
                    object.audioConfig = null;
                  }
                  if (message.input != null && message.hasOwnProperty("input"))
                    object.input = $root.google.cloud.texttospeech.v1.SynthesisInput.toObject(message.input, options);
                  if (message.voice != null && message.hasOwnProperty("voice"))
                    object.voice = $root.google.cloud.texttospeech.v1.VoiceSelectionParams.toObject(message.voice, options);
                  if (message.audioConfig != null && message.hasOwnProperty("audioConfig"))
                    object.audioConfig = $root.google.cloud.texttospeech.v1.AudioConfig.toObject(message.audioConfig, options);
                  return object;
                };
                SynthesizeSpeechRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SynthesizeSpeechRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1.SynthesizeSpeechRequest";
                };
                return SynthesizeSpeechRequest;
              }();
              v1.SynthesisInput = function() {
                function SynthesisInput(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SynthesisInput.prototype.text = null;
                SynthesisInput.prototype.ssml = null;
                var $oneOfFields;
                Object.defineProperty(SynthesisInput.prototype, "inputSource", {
                  get: $util.oneOfGetter($oneOfFields = ["text", "ssml"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                SynthesisInput.create = function create(properties) {
                  return new SynthesisInput(properties);
                };
                SynthesisInput.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.text);
                  if (message.ssml != null && Object.hasOwnProperty.call(message, "ssml"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.ssml);
                  return writer;
                };
                SynthesisInput.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SynthesisInput.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1.SynthesisInput();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.text = reader.string();
                        break;
                      }
                      case 2: {
                        message.ssml = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SynthesisInput.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SynthesisInput.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.text != null && message.hasOwnProperty("text")) {
                    properties.inputSource = 1;
                    if (!$util.isString(message.text))
                      return "text: string expected";
                  }
                  if (message.ssml != null && message.hasOwnProperty("ssml")) {
                    if (properties.inputSource === 1)
                      return "inputSource: multiple values";
                    properties.inputSource = 1;
                    if (!$util.isString(message.ssml))
                      return "ssml: string expected";
                  }
                  return null;
                };
                SynthesisInput.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1.SynthesisInput)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1.SynthesisInput();
                  if (object.text != null)
                    message.text = String(object.text);
                  if (object.ssml != null)
                    message.ssml = String(object.ssml);
                  return message;
                };
                SynthesisInput.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (message.text != null && message.hasOwnProperty("text")) {
                    object.text = message.text;
                    if (options.oneofs)
                      object.inputSource = "text";
                  }
                  if (message.ssml != null && message.hasOwnProperty("ssml")) {
                    object.ssml = message.ssml;
                    if (options.oneofs)
                      object.inputSource = "ssml";
                  }
                  return object;
                };
                SynthesisInput.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SynthesisInput.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1.SynthesisInput";
                };
                return SynthesisInput;
              }();
              v1.VoiceSelectionParams = function() {
                function VoiceSelectionParams(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                VoiceSelectionParams.prototype.languageCode = "";
                VoiceSelectionParams.prototype.name = "";
                VoiceSelectionParams.prototype.ssmlGender = 0;
                VoiceSelectionParams.prototype.customVoice = null;
                VoiceSelectionParams.create = function create(properties) {
                  return new VoiceSelectionParams(properties);
                };
                VoiceSelectionParams.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.languageCode);
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.name);
                  if (message.ssmlGender != null && Object.hasOwnProperty.call(message, "ssmlGender"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).int32(message.ssmlGender);
                  if (message.customVoice != null && Object.hasOwnProperty.call(message, "customVoice"))
                    $root.google.cloud.texttospeech.v1.CustomVoiceParams.encode(message.customVoice, writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).fork()).ldelim();
                  return writer;
                };
                VoiceSelectionParams.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                VoiceSelectionParams.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1.VoiceSelectionParams();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.languageCode = reader.string();
                        break;
                      }
                      case 2: {
                        message.name = reader.string();
                        break;
                      }
                      case 3: {
                        message.ssmlGender = reader.int32();
                        break;
                      }
                      case 4: {
                        message.customVoice = $root.google.cloud.texttospeech.v1.CustomVoiceParams.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                VoiceSelectionParams.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                VoiceSelectionParams.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.languageCode != null && message.hasOwnProperty("languageCode")) {
                    if (!$util.isString(message.languageCode))
                      return "languageCode: string expected";
                  }
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  if (message.ssmlGender != null && message.hasOwnProperty("ssmlGender"))
                    switch (message.ssmlGender) {
                      default:
                        return "ssmlGender: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                        break;
                    }
                  if (message.customVoice != null && message.hasOwnProperty("customVoice")) {
                    var error = $root.google.cloud.texttospeech.v1.CustomVoiceParams.verify(message.customVoice);
                    if (error)
                      return "customVoice." + error;
                  }
                  return null;
                };
                VoiceSelectionParams.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1.VoiceSelectionParams)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1.VoiceSelectionParams();
                  if (object.languageCode != null)
                    message.languageCode = String(object.languageCode);
                  if (object.name != null)
                    message.name = String(object.name);
                  switch (object.ssmlGender) {
                    default:
                      if (typeof object.ssmlGender === "number") {
                        message.ssmlGender = object.ssmlGender;
                        break;
                      }
                      break;
                    case "SSML_VOICE_GENDER_UNSPECIFIED":
                    case 0:
                      message.ssmlGender = 0;
                      break;
                    case "MALE":
                    case 1:
                      message.ssmlGender = 1;
                      break;
                    case "FEMALE":
                    case 2:
                      message.ssmlGender = 2;
                      break;
                    case "NEUTRAL":
                    case 3:
                      message.ssmlGender = 3;
                      break;
                  }
                  if (object.customVoice != null) {
                    if (typeof object.customVoice !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1.VoiceSelectionParams.customVoice: object expected");
                    message.customVoice = $root.google.cloud.texttospeech.v1.CustomVoiceParams.fromObject(object.customVoice);
                  }
                  return message;
                };
                VoiceSelectionParams.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.languageCode = "";
                    object.name = "";
                    object.ssmlGender = options.enums === String ? "SSML_VOICE_GENDER_UNSPECIFIED" : 0;
                    object.customVoice = null;
                  }
                  if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                    object.languageCode = message.languageCode;
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  if (message.ssmlGender != null && message.hasOwnProperty("ssmlGender"))
                    object.ssmlGender = options.enums === String ? $root.google.cloud.texttospeech.v1.SsmlVoiceGender[message.ssmlGender] === void 0 ? message.ssmlGender : $root.google.cloud.texttospeech.v1.SsmlVoiceGender[message.ssmlGender] : message.ssmlGender;
                  if (message.customVoice != null && message.hasOwnProperty("customVoice"))
                    object.customVoice = $root.google.cloud.texttospeech.v1.CustomVoiceParams.toObject(message.customVoice, options);
                  return object;
                };
                VoiceSelectionParams.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                VoiceSelectionParams.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1.VoiceSelectionParams";
                };
                return VoiceSelectionParams;
              }();
              v1.AudioConfig = function() {
                function AudioConfig(properties) {
                  this.effectsProfileId = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                AudioConfig.prototype.audioEncoding = 0;
                AudioConfig.prototype.speakingRate = 0;
                AudioConfig.prototype.pitch = 0;
                AudioConfig.prototype.volumeGainDb = 0;
                AudioConfig.prototype.sampleRateHertz = 0;
                AudioConfig.prototype.effectsProfileId = $util.emptyArray;
                AudioConfig.create = function create(properties) {
                  return new AudioConfig(properties);
                };
                AudioConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.audioEncoding != null && Object.hasOwnProperty.call(message, "audioEncoding"))
                    writer.uint32(
                      /* id 1, wireType 0 =*/
                      8
                    ).int32(message.audioEncoding);
                  if (message.speakingRate != null && Object.hasOwnProperty.call(message, "speakingRate"))
                    writer.uint32(
                      /* id 2, wireType 1 =*/
                      17
                    ).double(message.speakingRate);
                  if (message.pitch != null && Object.hasOwnProperty.call(message, "pitch"))
                    writer.uint32(
                      /* id 3, wireType 1 =*/
                      25
                    ).double(message.pitch);
                  if (message.volumeGainDb != null && Object.hasOwnProperty.call(message, "volumeGainDb"))
                    writer.uint32(
                      /* id 4, wireType 1 =*/
                      33
                    ).double(message.volumeGainDb);
                  if (message.sampleRateHertz != null && Object.hasOwnProperty.call(message, "sampleRateHertz"))
                    writer.uint32(
                      /* id 5, wireType 0 =*/
                      40
                    ).int32(message.sampleRateHertz);
                  if (message.effectsProfileId != null && message.effectsProfileId.length)
                    for (var i = 0; i < message.effectsProfileId.length; ++i)
                      writer.uint32(
                        /* id 6, wireType 2 =*/
                        50
                      ).string(message.effectsProfileId[i]);
                  return writer;
                };
                AudioConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                AudioConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1.AudioConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.audioEncoding = reader.int32();
                        break;
                      }
                      case 2: {
                        message.speakingRate = reader.double();
                        break;
                      }
                      case 3: {
                        message.pitch = reader.double();
                        break;
                      }
                      case 4: {
                        message.volumeGainDb = reader.double();
                        break;
                      }
                      case 5: {
                        message.sampleRateHertz = reader.int32();
                        break;
                      }
                      case 6: {
                        if (!(message.effectsProfileId && message.effectsProfileId.length))
                          message.effectsProfileId = [];
                        message.effectsProfileId.push(reader.string());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                AudioConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                AudioConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.audioEncoding != null && message.hasOwnProperty("audioEncoding"))
                    switch (message.audioEncoding) {
                      default:
                        return "audioEncoding: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                      case 5:
                      case 6:
                        break;
                    }
                  if (message.speakingRate != null && message.hasOwnProperty("speakingRate")) {
                    if (typeof message.speakingRate !== "number")
                      return "speakingRate: number expected";
                  }
                  if (message.pitch != null && message.hasOwnProperty("pitch")) {
                    if (typeof message.pitch !== "number")
                      return "pitch: number expected";
                  }
                  if (message.volumeGainDb != null && message.hasOwnProperty("volumeGainDb")) {
                    if (typeof message.volumeGainDb !== "number")
                      return "volumeGainDb: number expected";
                  }
                  if (message.sampleRateHertz != null && message.hasOwnProperty("sampleRateHertz")) {
                    if (!$util.isInteger(message.sampleRateHertz))
                      return "sampleRateHertz: integer expected";
                  }
                  if (message.effectsProfileId != null && message.hasOwnProperty("effectsProfileId")) {
                    if (!Array.isArray(message.effectsProfileId))
                      return "effectsProfileId: array expected";
                    for (var i = 0; i < message.effectsProfileId.length; ++i)
                      if (!$util.isString(message.effectsProfileId[i]))
                        return "effectsProfileId: string[] expected";
                  }
                  return null;
                };
                AudioConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1.AudioConfig)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1.AudioConfig();
                  switch (object.audioEncoding) {
                    default:
                      if (typeof object.audioEncoding === "number") {
                        message.audioEncoding = object.audioEncoding;
                        break;
                      }
                      break;
                    case "AUDIO_ENCODING_UNSPECIFIED":
                    case 0:
                      message.audioEncoding = 0;
                      break;
                    case "LINEAR16":
                    case 1:
                      message.audioEncoding = 1;
                      break;
                    case "MP3":
                    case 2:
                      message.audioEncoding = 2;
                      break;
                    case "OGG_OPUS":
                    case 3:
                      message.audioEncoding = 3;
                      break;
                    case "MULAW":
                    case 5:
                      message.audioEncoding = 5;
                      break;
                    case "ALAW":
                    case 6:
                      message.audioEncoding = 6;
                      break;
                  }
                  if (object.speakingRate != null)
                    message.speakingRate = Number(object.speakingRate);
                  if (object.pitch != null)
                    message.pitch = Number(object.pitch);
                  if (object.volumeGainDb != null)
                    message.volumeGainDb = Number(object.volumeGainDb);
                  if (object.sampleRateHertz != null)
                    message.sampleRateHertz = object.sampleRateHertz | 0;
                  if (object.effectsProfileId) {
                    if (!Array.isArray(object.effectsProfileId))
                      throw TypeError(".google.cloud.texttospeech.v1.AudioConfig.effectsProfileId: array expected");
                    message.effectsProfileId = [];
                    for (var i = 0; i < object.effectsProfileId.length; ++i)
                      message.effectsProfileId[i] = String(object.effectsProfileId[i]);
                  }
                  return message;
                };
                AudioConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.effectsProfileId = [];
                  if (options.defaults) {
                    object.audioEncoding = options.enums === String ? "AUDIO_ENCODING_UNSPECIFIED" : 0;
                    object.speakingRate = 0;
                    object.pitch = 0;
                    object.volumeGainDb = 0;
                    object.sampleRateHertz = 0;
                  }
                  if (message.audioEncoding != null && message.hasOwnProperty("audioEncoding"))
                    object.audioEncoding = options.enums === String ? $root.google.cloud.texttospeech.v1.AudioEncoding[message.audioEncoding] === void 0 ? message.audioEncoding : $root.google.cloud.texttospeech.v1.AudioEncoding[message.audioEncoding] : message.audioEncoding;
                  if (message.speakingRate != null && message.hasOwnProperty("speakingRate"))
                    object.speakingRate = options.json && !isFinite(message.speakingRate) ? String(message.speakingRate) : message.speakingRate;
                  if (message.pitch != null && message.hasOwnProperty("pitch"))
                    object.pitch = options.json && !isFinite(message.pitch) ? String(message.pitch) : message.pitch;
                  if (message.volumeGainDb != null && message.hasOwnProperty("volumeGainDb"))
                    object.volumeGainDb = options.json && !isFinite(message.volumeGainDb) ? String(message.volumeGainDb) : message.volumeGainDb;
                  if (message.sampleRateHertz != null && message.hasOwnProperty("sampleRateHertz"))
                    object.sampleRateHertz = message.sampleRateHertz;
                  if (message.effectsProfileId && message.effectsProfileId.length) {
                    object.effectsProfileId = [];
                    for (var j = 0; j < message.effectsProfileId.length; ++j)
                      object.effectsProfileId[j] = message.effectsProfileId[j];
                  }
                  return object;
                };
                AudioConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                AudioConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1.AudioConfig";
                };
                return AudioConfig;
              }();
              v1.CustomVoiceParams = function() {
                function CustomVoiceParams(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                CustomVoiceParams.prototype.model = "";
                CustomVoiceParams.prototype.reportedUsage = 0;
                CustomVoiceParams.create = function create(properties) {
                  return new CustomVoiceParams(properties);
                };
                CustomVoiceParams.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.model);
                  if (message.reportedUsage != null && Object.hasOwnProperty.call(message, "reportedUsage"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).int32(message.reportedUsage);
                  return writer;
                };
                CustomVoiceParams.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                CustomVoiceParams.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1.CustomVoiceParams();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.model = reader.string();
                        break;
                      }
                      case 3: {
                        message.reportedUsage = reader.int32();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                CustomVoiceParams.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                CustomVoiceParams.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.model != null && message.hasOwnProperty("model")) {
                    if (!$util.isString(message.model))
                      return "model: string expected";
                  }
                  if (message.reportedUsage != null && message.hasOwnProperty("reportedUsage"))
                    switch (message.reportedUsage) {
                      default:
                        return "reportedUsage: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                        break;
                    }
                  return null;
                };
                CustomVoiceParams.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1.CustomVoiceParams)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1.CustomVoiceParams();
                  if (object.model != null)
                    message.model = String(object.model);
                  switch (object.reportedUsage) {
                    default:
                      if (typeof object.reportedUsage === "number") {
                        message.reportedUsage = object.reportedUsage;
                        break;
                      }
                      break;
                    case "REPORTED_USAGE_UNSPECIFIED":
                    case 0:
                      message.reportedUsage = 0;
                      break;
                    case "REALTIME":
                    case 1:
                      message.reportedUsage = 1;
                      break;
                    case "OFFLINE":
                    case 2:
                      message.reportedUsage = 2;
                      break;
                  }
                  return message;
                };
                CustomVoiceParams.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.model = "";
                    object.reportedUsage = options.enums === String ? "REPORTED_USAGE_UNSPECIFIED" : 0;
                  }
                  if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                  if (message.reportedUsage != null && message.hasOwnProperty("reportedUsage"))
                    object.reportedUsage = options.enums === String ? $root.google.cloud.texttospeech.v1.CustomVoiceParams.ReportedUsage[message.reportedUsage] === void 0 ? message.reportedUsage : $root.google.cloud.texttospeech.v1.CustomVoiceParams.ReportedUsage[message.reportedUsage] : message.reportedUsage;
                  return object;
                };
                CustomVoiceParams.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                CustomVoiceParams.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1.CustomVoiceParams";
                };
                CustomVoiceParams.ReportedUsage = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "REPORTED_USAGE_UNSPECIFIED"] = 0;
                  values[valuesById[1] = "REALTIME"] = 1;
                  values[valuesById[2] = "OFFLINE"] = 2;
                  return values;
                }();
                return CustomVoiceParams;
              }();
              v1.SynthesizeSpeechResponse = function() {
                function SynthesizeSpeechResponse(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SynthesizeSpeechResponse.prototype.audioContent = $util.newBuffer([]);
                SynthesizeSpeechResponse.create = function create(properties) {
                  return new SynthesizeSpeechResponse(properties);
                };
                SynthesizeSpeechResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.audioContent != null && Object.hasOwnProperty.call(message, "audioContent"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).bytes(message.audioContent);
                  return writer;
                };
                SynthesizeSpeechResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SynthesizeSpeechResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1.SynthesizeSpeechResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.audioContent = reader.bytes();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SynthesizeSpeechResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SynthesizeSpeechResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.audioContent != null && message.hasOwnProperty("audioContent")) {
                    if (!(message.audioContent && typeof message.audioContent.length === "number" || $util.isString(message.audioContent)))
                      return "audioContent: buffer expected";
                  }
                  return null;
                };
                SynthesizeSpeechResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1.SynthesizeSpeechResponse)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1.SynthesizeSpeechResponse();
                  if (object.audioContent != null) {
                    if (typeof object.audioContent === "string")
                      $util.base64.decode(object.audioContent, message.audioContent = $util.newBuffer($util.base64.length(object.audioContent)), 0);
                    else if (object.audioContent.length >= 0)
                      message.audioContent = object.audioContent;
                  }
                  return message;
                };
                SynthesizeSpeechResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    if (options.bytes === String)
                      object.audioContent = "";
                    else {
                      object.audioContent = [];
                      if (options.bytes !== Array)
                        object.audioContent = $util.newBuffer(object.audioContent);
                    }
                  if (message.audioContent != null && message.hasOwnProperty("audioContent"))
                    object.audioContent = options.bytes === String ? $util.base64.encode(message.audioContent, 0, message.audioContent.length) : options.bytes === Array ? Array.prototype.slice.call(message.audioContent) : message.audioContent;
                  return object;
                };
                SynthesizeSpeechResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SynthesizeSpeechResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1.SynthesizeSpeechResponse";
                };
                return SynthesizeSpeechResponse;
              }();
              v1.TextToSpeechLongAudioSynthesize = function() {
                function TextToSpeechLongAudioSynthesize(rpcImpl, requestDelimited, responseDelimited) {
                  $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
                (TextToSpeechLongAudioSynthesize.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TextToSpeechLongAudioSynthesize;
                TextToSpeechLongAudioSynthesize.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                  return new this(rpcImpl, requestDelimited, responseDelimited);
                };
                Object.defineProperty(TextToSpeechLongAudioSynthesize.prototype.synthesizeLongAudio = function synthesizeLongAudio(request, callback) {
                  return this.rpcCall(synthesizeLongAudio, $root.google.cloud.texttospeech.v1.SynthesizeLongAudioRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "SynthesizeLongAudio" });
                return TextToSpeechLongAudioSynthesize;
              }();
              v1.SynthesizeLongAudioRequest = function() {
                function SynthesizeLongAudioRequest(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SynthesizeLongAudioRequest.prototype.parent = "";
                SynthesizeLongAudioRequest.prototype.input = null;
                SynthesizeLongAudioRequest.prototype.audioConfig = null;
                SynthesizeLongAudioRequest.prototype.outputGcsUri = "";
                SynthesizeLongAudioRequest.prototype.voice = null;
                SynthesizeLongAudioRequest.create = function create(properties) {
                  return new SynthesizeLongAudioRequest(properties);
                };
                SynthesizeLongAudioRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.parent);
                  if (message.input != null && Object.hasOwnProperty.call(message, "input"))
                    $root.google.cloud.texttospeech.v1.SynthesisInput.encode(message.input, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  if (message.audioConfig != null && Object.hasOwnProperty.call(message, "audioConfig"))
                    $root.google.cloud.texttospeech.v1.AudioConfig.encode(message.audioConfig, writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).fork()).ldelim();
                  if (message.outputGcsUri != null && Object.hasOwnProperty.call(message, "outputGcsUri"))
                    writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).string(message.outputGcsUri);
                  if (message.voice != null && Object.hasOwnProperty.call(message, "voice"))
                    $root.google.cloud.texttospeech.v1.VoiceSelectionParams.encode(message.voice, writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).fork()).ldelim();
                  return writer;
                };
                SynthesizeLongAudioRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SynthesizeLongAudioRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1.SynthesizeLongAudioRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.parent = reader.string();
                        break;
                      }
                      case 2: {
                        message.input = $root.google.cloud.texttospeech.v1.SynthesisInput.decode(reader, reader.uint32());
                        break;
                      }
                      case 3: {
                        message.audioConfig = $root.google.cloud.texttospeech.v1.AudioConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 4: {
                        message.outputGcsUri = reader.string();
                        break;
                      }
                      case 5: {
                        message.voice = $root.google.cloud.texttospeech.v1.VoiceSelectionParams.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SynthesizeLongAudioRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SynthesizeLongAudioRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.input != null && message.hasOwnProperty("input")) {
                    var error = $root.google.cloud.texttospeech.v1.SynthesisInput.verify(message.input);
                    if (error)
                      return "input." + error;
                  }
                  if (message.audioConfig != null && message.hasOwnProperty("audioConfig")) {
                    var error = $root.google.cloud.texttospeech.v1.AudioConfig.verify(message.audioConfig);
                    if (error)
                      return "audioConfig." + error;
                  }
                  if (message.outputGcsUri != null && message.hasOwnProperty("outputGcsUri")) {
                    if (!$util.isString(message.outputGcsUri))
                      return "outputGcsUri: string expected";
                  }
                  if (message.voice != null && message.hasOwnProperty("voice")) {
                    var error = $root.google.cloud.texttospeech.v1.VoiceSelectionParams.verify(message.voice);
                    if (error)
                      return "voice." + error;
                  }
                  return null;
                };
                SynthesizeLongAudioRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1.SynthesizeLongAudioRequest)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1.SynthesizeLongAudioRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.input != null) {
                    if (typeof object.input !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.input: object expected");
                    message.input = $root.google.cloud.texttospeech.v1.SynthesisInput.fromObject(object.input);
                  }
                  if (object.audioConfig != null) {
                    if (typeof object.audioConfig !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.audioConfig: object expected");
                    message.audioConfig = $root.google.cloud.texttospeech.v1.AudioConfig.fromObject(object.audioConfig);
                  }
                  if (object.outputGcsUri != null)
                    message.outputGcsUri = String(object.outputGcsUri);
                  if (object.voice != null) {
                    if (typeof object.voice !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1.SynthesizeLongAudioRequest.voice: object expected");
                    message.voice = $root.google.cloud.texttospeech.v1.VoiceSelectionParams.fromObject(object.voice);
                  }
                  return message;
                };
                SynthesizeLongAudioRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.parent = "";
                    object.input = null;
                    object.audioConfig = null;
                    object.outputGcsUri = "";
                    object.voice = null;
                  }
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  if (message.input != null && message.hasOwnProperty("input"))
                    object.input = $root.google.cloud.texttospeech.v1.SynthesisInput.toObject(message.input, options);
                  if (message.audioConfig != null && message.hasOwnProperty("audioConfig"))
                    object.audioConfig = $root.google.cloud.texttospeech.v1.AudioConfig.toObject(message.audioConfig, options);
                  if (message.outputGcsUri != null && message.hasOwnProperty("outputGcsUri"))
                    object.outputGcsUri = message.outputGcsUri;
                  if (message.voice != null && message.hasOwnProperty("voice"))
                    object.voice = $root.google.cloud.texttospeech.v1.VoiceSelectionParams.toObject(message.voice, options);
                  return object;
                };
                SynthesizeLongAudioRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SynthesizeLongAudioRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1.SynthesizeLongAudioRequest";
                };
                return SynthesizeLongAudioRequest;
              }();
              v1.SynthesizeLongAudioResponse = function() {
                function SynthesizeLongAudioResponse(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SynthesizeLongAudioResponse.create = function create(properties) {
                  return new SynthesizeLongAudioResponse(properties);
                };
                SynthesizeLongAudioResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  return writer;
                };
                SynthesizeLongAudioResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SynthesizeLongAudioResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1.SynthesizeLongAudioResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SynthesizeLongAudioResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SynthesizeLongAudioResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  return null;
                };
                SynthesizeLongAudioResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1.SynthesizeLongAudioResponse)
                    return object;
                  return new $root.google.cloud.texttospeech.v1.SynthesizeLongAudioResponse();
                };
                SynthesizeLongAudioResponse.toObject = function toObject() {
                  return {};
                };
                SynthesizeLongAudioResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SynthesizeLongAudioResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1.SynthesizeLongAudioResponse";
                };
                return SynthesizeLongAudioResponse;
              }();
              v1.SynthesizeLongAudioMetadata = function() {
                function SynthesizeLongAudioMetadata(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SynthesizeLongAudioMetadata.prototype.startTime = null;
                SynthesizeLongAudioMetadata.prototype.lastUpdateTime = null;
                SynthesizeLongAudioMetadata.prototype.progressPercentage = 0;
                SynthesizeLongAudioMetadata.create = function create(properties) {
                  return new SynthesizeLongAudioMetadata(properties);
                };
                SynthesizeLongAudioMetadata.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                    $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  if (message.lastUpdateTime != null && Object.hasOwnProperty.call(message, "lastUpdateTime"))
                    $root.google.protobuf.Timestamp.encode(message.lastUpdateTime, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  if (message.progressPercentage != null && Object.hasOwnProperty.call(message, "progressPercentage"))
                    writer.uint32(
                      /* id 3, wireType 1 =*/
                      25
                    ).double(message.progressPercentage);
                  return writer;
                };
                SynthesizeLongAudioMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SynthesizeLongAudioMetadata.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      case 2: {
                        message.lastUpdateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      case 3: {
                        message.progressPercentage = reader.double();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SynthesizeLongAudioMetadata.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SynthesizeLongAudioMetadata.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.startTime != null && message.hasOwnProperty("startTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                    if (error)
                      return "startTime." + error;
                  }
                  if (message.lastUpdateTime != null && message.hasOwnProperty("lastUpdateTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.lastUpdateTime);
                    if (error)
                      return "lastUpdateTime." + error;
                  }
                  if (message.progressPercentage != null && message.hasOwnProperty("progressPercentage")) {
                    if (typeof message.progressPercentage !== "number")
                      return "progressPercentage: number expected";
                  }
                  return null;
                };
                SynthesizeLongAudioMetadata.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata();
                  if (object.startTime != null) {
                    if (typeof object.startTime !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata.startTime: object expected");
                    message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                  }
                  if (object.lastUpdateTime != null) {
                    if (typeof object.lastUpdateTime !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata.lastUpdateTime: object expected");
                    message.lastUpdateTime = $root.google.protobuf.Timestamp.fromObject(object.lastUpdateTime);
                  }
                  if (object.progressPercentage != null)
                    message.progressPercentage = Number(object.progressPercentage);
                  return message;
                };
                SynthesizeLongAudioMetadata.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.startTime = null;
                    object.lastUpdateTime = null;
                    object.progressPercentage = 0;
                  }
                  if (message.startTime != null && message.hasOwnProperty("startTime"))
                    object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                  if (message.lastUpdateTime != null && message.hasOwnProperty("lastUpdateTime"))
                    object.lastUpdateTime = $root.google.protobuf.Timestamp.toObject(message.lastUpdateTime, options);
                  if (message.progressPercentage != null && message.hasOwnProperty("progressPercentage"))
                    object.progressPercentage = options.json && !isFinite(message.progressPercentage) ? String(message.progressPercentage) : message.progressPercentage;
                  return object;
                };
                SynthesizeLongAudioMetadata.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SynthesizeLongAudioMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1.SynthesizeLongAudioMetadata";
                };
                return SynthesizeLongAudioMetadata;
              }();
              return v1;
            }();
            texttospeech.v1beta1 = function() {
              var v1beta1 = {};
              v1beta1.TextToSpeech = function() {
                function TextToSpeech(rpcImpl, requestDelimited, responseDelimited) {
                  $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
                (TextToSpeech.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TextToSpeech;
                TextToSpeech.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                  return new this(rpcImpl, requestDelimited, responseDelimited);
                };
                Object.defineProperty(TextToSpeech.prototype.listVoices = function listVoices(request, callback) {
                  return this.rpcCall(listVoices, $root.google.cloud.texttospeech.v1beta1.ListVoicesRequest, $root.google.cloud.texttospeech.v1beta1.ListVoicesResponse, request, callback);
                }, "name", { value: "ListVoices" });
                Object.defineProperty(TextToSpeech.prototype.synthesizeSpeech = function synthesizeSpeech(request, callback) {
                  return this.rpcCall(synthesizeSpeech, $root.google.cloud.texttospeech.v1beta1.SynthesizeSpeechRequest, $root.google.cloud.texttospeech.v1beta1.SynthesizeSpeechResponse, request, callback);
                }, "name", { value: "SynthesizeSpeech" });
                return TextToSpeech;
              }();
              v1beta1.SsmlVoiceGender = function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "SSML_VOICE_GENDER_UNSPECIFIED"] = 0;
                values[valuesById[1] = "MALE"] = 1;
                values[valuesById[2] = "FEMALE"] = 2;
                values[valuesById[3] = "NEUTRAL"] = 3;
                return values;
              }();
              v1beta1.AudioEncoding = function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "AUDIO_ENCODING_UNSPECIFIED"] = 0;
                values[valuesById[1] = "LINEAR16"] = 1;
                values[valuesById[2] = "MP3"] = 2;
                values[valuesById[4] = "MP3_64_KBPS"] = 4;
                values[valuesById[3] = "OGG_OPUS"] = 3;
                values[valuesById[5] = "MULAW"] = 5;
                values[valuesById[6] = "ALAW"] = 6;
                return values;
              }();
              v1beta1.ListVoicesRequest = function() {
                function ListVoicesRequest(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                ListVoicesRequest.prototype.languageCode = "";
                ListVoicesRequest.create = function create(properties) {
                  return new ListVoicesRequest(properties);
                };
                ListVoicesRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.languageCode);
                  return writer;
                };
                ListVoicesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                ListVoicesRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1beta1.ListVoicesRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.languageCode = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                ListVoicesRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                ListVoicesRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.languageCode != null && message.hasOwnProperty("languageCode")) {
                    if (!$util.isString(message.languageCode))
                      return "languageCode: string expected";
                  }
                  return null;
                };
                ListVoicesRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1beta1.ListVoicesRequest)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1beta1.ListVoicesRequest();
                  if (object.languageCode != null)
                    message.languageCode = String(object.languageCode);
                  return message;
                };
                ListVoicesRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults)
                    object.languageCode = "";
                  if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                    object.languageCode = message.languageCode;
                  return object;
                };
                ListVoicesRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                ListVoicesRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1beta1.ListVoicesRequest";
                };
                return ListVoicesRequest;
              }();
              v1beta1.ListVoicesResponse = function() {
                function ListVoicesResponse(properties) {
                  this.voices = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                ListVoicesResponse.prototype.voices = $util.emptyArray;
                ListVoicesResponse.create = function create(properties) {
                  return new ListVoicesResponse(properties);
                };
                ListVoicesResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.voices != null && message.voices.length)
                    for (var i = 0; i < message.voices.length; ++i)
                      $root.google.cloud.texttospeech.v1beta1.Voice.encode(message.voices[i], writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).fork()).ldelim();
                  return writer;
                };
                ListVoicesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                ListVoicesResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1beta1.ListVoicesResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.voices && message.voices.length))
                          message.voices = [];
                        message.voices.push($root.google.cloud.texttospeech.v1beta1.Voice.decode(reader, reader.uint32()));
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                ListVoicesResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                ListVoicesResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.voices != null && message.hasOwnProperty("voices")) {
                    if (!Array.isArray(message.voices))
                      return "voices: array expected";
                    for (var i = 0; i < message.voices.length; ++i) {
                      var error = $root.google.cloud.texttospeech.v1beta1.Voice.verify(message.voices[i]);
                      if (error)
                        return "voices." + error;
                    }
                  }
                  return null;
                };
                ListVoicesResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1beta1.ListVoicesResponse)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1beta1.ListVoicesResponse();
                  if (object.voices) {
                    if (!Array.isArray(object.voices))
                      throw TypeError(".google.cloud.texttospeech.v1beta1.ListVoicesResponse.voices: array expected");
                    message.voices = [];
                    for (var i = 0; i < object.voices.length; ++i) {
                      if (typeof object.voices[i] !== "object")
                        throw TypeError(".google.cloud.texttospeech.v1beta1.ListVoicesResponse.voices: object expected");
                      message.voices[i] = $root.google.cloud.texttospeech.v1beta1.Voice.fromObject(object.voices[i]);
                    }
                  }
                  return message;
                };
                ListVoicesResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.voices = [];
                  if (message.voices && message.voices.length) {
                    object.voices = [];
                    for (var j = 0; j < message.voices.length; ++j)
                      object.voices[j] = $root.google.cloud.texttospeech.v1beta1.Voice.toObject(message.voices[j], options);
                  }
                  return object;
                };
                ListVoicesResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                ListVoicesResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1beta1.ListVoicesResponse";
                };
                return ListVoicesResponse;
              }();
              v1beta1.Voice = function() {
                function Voice(properties) {
                  this.languageCodes = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                Voice.prototype.languageCodes = $util.emptyArray;
                Voice.prototype.name = "";
                Voice.prototype.ssmlGender = 0;
                Voice.prototype.naturalSampleRateHertz = 0;
                Voice.create = function create(properties) {
                  return new Voice(properties);
                };
                Voice.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.languageCodes != null && message.languageCodes.length)
                    for (var i = 0; i < message.languageCodes.length; ++i)
                      writer.uint32(
                        /* id 1, wireType 2 =*/
                        10
                      ).string(message.languageCodes[i]);
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.name);
                  if (message.ssmlGender != null && Object.hasOwnProperty.call(message, "ssmlGender"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).int32(message.ssmlGender);
                  if (message.naturalSampleRateHertz != null && Object.hasOwnProperty.call(message, "naturalSampleRateHertz"))
                    writer.uint32(
                      /* id 4, wireType 0 =*/
                      32
                    ).int32(message.naturalSampleRateHertz);
                  return writer;
                };
                Voice.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                Voice.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1beta1.Voice();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        if (!(message.languageCodes && message.languageCodes.length))
                          message.languageCodes = [];
                        message.languageCodes.push(reader.string());
                        break;
                      }
                      case 2: {
                        message.name = reader.string();
                        break;
                      }
                      case 3: {
                        message.ssmlGender = reader.int32();
                        break;
                      }
                      case 4: {
                        message.naturalSampleRateHertz = reader.int32();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                Voice.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                Voice.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.languageCodes != null && message.hasOwnProperty("languageCodes")) {
                    if (!Array.isArray(message.languageCodes))
                      return "languageCodes: array expected";
                    for (var i = 0; i < message.languageCodes.length; ++i)
                      if (!$util.isString(message.languageCodes[i]))
                        return "languageCodes: string[] expected";
                  }
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  if (message.ssmlGender != null && message.hasOwnProperty("ssmlGender"))
                    switch (message.ssmlGender) {
                      default:
                        return "ssmlGender: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                        break;
                    }
                  if (message.naturalSampleRateHertz != null && message.hasOwnProperty("naturalSampleRateHertz")) {
                    if (!$util.isInteger(message.naturalSampleRateHertz))
                      return "naturalSampleRateHertz: integer expected";
                  }
                  return null;
                };
                Voice.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1beta1.Voice)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1beta1.Voice();
                  if (object.languageCodes) {
                    if (!Array.isArray(object.languageCodes))
                      throw TypeError(".google.cloud.texttospeech.v1beta1.Voice.languageCodes: array expected");
                    message.languageCodes = [];
                    for (var i = 0; i < object.languageCodes.length; ++i)
                      message.languageCodes[i] = String(object.languageCodes[i]);
                  }
                  if (object.name != null)
                    message.name = String(object.name);
                  switch (object.ssmlGender) {
                    default:
                      if (typeof object.ssmlGender === "number") {
                        message.ssmlGender = object.ssmlGender;
                        break;
                      }
                      break;
                    case "SSML_VOICE_GENDER_UNSPECIFIED":
                    case 0:
                      message.ssmlGender = 0;
                      break;
                    case "MALE":
                    case 1:
                      message.ssmlGender = 1;
                      break;
                    case "FEMALE":
                    case 2:
                      message.ssmlGender = 2;
                      break;
                    case "NEUTRAL":
                    case 3:
                      message.ssmlGender = 3;
                      break;
                  }
                  if (object.naturalSampleRateHertz != null)
                    message.naturalSampleRateHertz = object.naturalSampleRateHertz | 0;
                  return message;
                };
                Voice.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.languageCodes = [];
                  if (options.defaults) {
                    object.name = "";
                    object.ssmlGender = options.enums === String ? "SSML_VOICE_GENDER_UNSPECIFIED" : 0;
                    object.naturalSampleRateHertz = 0;
                  }
                  if (message.languageCodes && message.languageCodes.length) {
                    object.languageCodes = [];
                    for (var j = 0; j < message.languageCodes.length; ++j)
                      object.languageCodes[j] = message.languageCodes[j];
                  }
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  if (message.ssmlGender != null && message.hasOwnProperty("ssmlGender"))
                    object.ssmlGender = options.enums === String ? $root.google.cloud.texttospeech.v1beta1.SsmlVoiceGender[message.ssmlGender] === void 0 ? message.ssmlGender : $root.google.cloud.texttospeech.v1beta1.SsmlVoiceGender[message.ssmlGender] : message.ssmlGender;
                  if (message.naturalSampleRateHertz != null && message.hasOwnProperty("naturalSampleRateHertz"))
                    object.naturalSampleRateHertz = message.naturalSampleRateHertz;
                  return object;
                };
                Voice.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                Voice.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1beta1.Voice";
                };
                return Voice;
              }();
              v1beta1.SynthesizeSpeechRequest = function() {
                function SynthesizeSpeechRequest(properties) {
                  this.enableTimePointing = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SynthesizeSpeechRequest.prototype.input = null;
                SynthesizeSpeechRequest.prototype.voice = null;
                SynthesizeSpeechRequest.prototype.audioConfig = null;
                SynthesizeSpeechRequest.prototype.enableTimePointing = $util.emptyArray;
                SynthesizeSpeechRequest.create = function create(properties) {
                  return new SynthesizeSpeechRequest(properties);
                };
                SynthesizeSpeechRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.input != null && Object.hasOwnProperty.call(message, "input"))
                    $root.google.cloud.texttospeech.v1beta1.SynthesisInput.encode(message.input, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  if (message.voice != null && Object.hasOwnProperty.call(message, "voice"))
                    $root.google.cloud.texttospeech.v1beta1.VoiceSelectionParams.encode(message.voice, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  if (message.audioConfig != null && Object.hasOwnProperty.call(message, "audioConfig"))
                    $root.google.cloud.texttospeech.v1beta1.AudioConfig.encode(message.audioConfig, writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).fork()).ldelim();
                  if (message.enableTimePointing != null && message.enableTimePointing.length) {
                    writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).fork();
                    for (var i = 0; i < message.enableTimePointing.length; ++i)
                      writer.int32(message.enableTimePointing[i]);
                    writer.ldelim();
                  }
                  return writer;
                };
                SynthesizeSpeechRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SynthesizeSpeechRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1beta1.SynthesizeSpeechRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.input = $root.google.cloud.texttospeech.v1beta1.SynthesisInput.decode(reader, reader.uint32());
                        break;
                      }
                      case 2: {
                        message.voice = $root.google.cloud.texttospeech.v1beta1.VoiceSelectionParams.decode(reader, reader.uint32());
                        break;
                      }
                      case 3: {
                        message.audioConfig = $root.google.cloud.texttospeech.v1beta1.AudioConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 4: {
                        if (!(message.enableTimePointing && message.enableTimePointing.length))
                          message.enableTimePointing = [];
                        if ((tag & 7) === 2) {
                          var end2 = reader.uint32() + reader.pos;
                          while (reader.pos < end2)
                            message.enableTimePointing.push(reader.int32());
                        } else
                          message.enableTimePointing.push(reader.int32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SynthesizeSpeechRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SynthesizeSpeechRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.input != null && message.hasOwnProperty("input")) {
                    var error = $root.google.cloud.texttospeech.v1beta1.SynthesisInput.verify(message.input);
                    if (error)
                      return "input." + error;
                  }
                  if (message.voice != null && message.hasOwnProperty("voice")) {
                    var error = $root.google.cloud.texttospeech.v1beta1.VoiceSelectionParams.verify(message.voice);
                    if (error)
                      return "voice." + error;
                  }
                  if (message.audioConfig != null && message.hasOwnProperty("audioConfig")) {
                    var error = $root.google.cloud.texttospeech.v1beta1.AudioConfig.verify(message.audioConfig);
                    if (error)
                      return "audioConfig." + error;
                  }
                  if (message.enableTimePointing != null && message.hasOwnProperty("enableTimePointing")) {
                    if (!Array.isArray(message.enableTimePointing))
                      return "enableTimePointing: array expected";
                    for (var i = 0; i < message.enableTimePointing.length; ++i)
                      switch (message.enableTimePointing[i]) {
                        default:
                          return "enableTimePointing: enum value[] expected";
                        case 0:
                        case 1:
                          break;
                      }
                  }
                  return null;
                };
                SynthesizeSpeechRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1beta1.SynthesizeSpeechRequest)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1beta1.SynthesizeSpeechRequest();
                  if (object.input != null) {
                    if (typeof object.input !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1beta1.SynthesizeSpeechRequest.input: object expected");
                    message.input = $root.google.cloud.texttospeech.v1beta1.SynthesisInput.fromObject(object.input);
                  }
                  if (object.voice != null) {
                    if (typeof object.voice !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1beta1.SynthesizeSpeechRequest.voice: object expected");
                    message.voice = $root.google.cloud.texttospeech.v1beta1.VoiceSelectionParams.fromObject(object.voice);
                  }
                  if (object.audioConfig != null) {
                    if (typeof object.audioConfig !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1beta1.SynthesizeSpeechRequest.audioConfig: object expected");
                    message.audioConfig = $root.google.cloud.texttospeech.v1beta1.AudioConfig.fromObject(object.audioConfig);
                  }
                  if (object.enableTimePointing) {
                    if (!Array.isArray(object.enableTimePointing))
                      throw TypeError(".google.cloud.texttospeech.v1beta1.SynthesizeSpeechRequest.enableTimePointing: array expected");
                    message.enableTimePointing = [];
                    for (var i = 0; i < object.enableTimePointing.length; ++i)
                      switch (object.enableTimePointing[i]) {
                        default:
                          if (typeof object.enableTimePointing[i] === "number") {
                            message.enableTimePointing[i] = object.enableTimePointing[i];
                            break;
                          }
                        case "TIMEPOINT_TYPE_UNSPECIFIED":
                        case 0:
                          message.enableTimePointing[i] = 0;
                          break;
                        case "SSML_MARK":
                        case 1:
                          message.enableTimePointing[i] = 1;
                          break;
                      }
                  }
                  return message;
                };
                SynthesizeSpeechRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.enableTimePointing = [];
                  if (options.defaults) {
                    object.input = null;
                    object.voice = null;
                    object.audioConfig = null;
                  }
                  if (message.input != null && message.hasOwnProperty("input"))
                    object.input = $root.google.cloud.texttospeech.v1beta1.SynthesisInput.toObject(message.input, options);
                  if (message.voice != null && message.hasOwnProperty("voice"))
                    object.voice = $root.google.cloud.texttospeech.v1beta1.VoiceSelectionParams.toObject(message.voice, options);
                  if (message.audioConfig != null && message.hasOwnProperty("audioConfig"))
                    object.audioConfig = $root.google.cloud.texttospeech.v1beta1.AudioConfig.toObject(message.audioConfig, options);
                  if (message.enableTimePointing && message.enableTimePointing.length) {
                    object.enableTimePointing = [];
                    for (var j = 0; j < message.enableTimePointing.length; ++j)
                      object.enableTimePointing[j] = options.enums === String ? $root.google.cloud.texttospeech.v1beta1.SynthesizeSpeechRequest.TimepointType[message.enableTimePointing[j]] === void 0 ? message.enableTimePointing[j] : $root.google.cloud.texttospeech.v1beta1.SynthesizeSpeechRequest.TimepointType[message.enableTimePointing[j]] : message.enableTimePointing[j];
                  }
                  return object;
                };
                SynthesizeSpeechRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SynthesizeSpeechRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1beta1.SynthesizeSpeechRequest";
                };
                SynthesizeSpeechRequest.TimepointType = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "TIMEPOINT_TYPE_UNSPECIFIED"] = 0;
                  values[valuesById[1] = "SSML_MARK"] = 1;
                  return values;
                }();
                return SynthesizeSpeechRequest;
              }();
              v1beta1.SynthesisInput = function() {
                function SynthesisInput(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SynthesisInput.prototype.text = null;
                SynthesisInput.prototype.ssml = null;
                var $oneOfFields;
                Object.defineProperty(SynthesisInput.prototype, "inputSource", {
                  get: $util.oneOfGetter($oneOfFields = ["text", "ssml"]),
                  set: $util.oneOfSetter($oneOfFields)
                });
                SynthesisInput.create = function create(properties) {
                  return new SynthesisInput(properties);
                };
                SynthesisInput.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.text);
                  if (message.ssml != null && Object.hasOwnProperty.call(message, "ssml"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.ssml);
                  return writer;
                };
                SynthesisInput.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SynthesisInput.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1beta1.SynthesisInput();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.text = reader.string();
                        break;
                      }
                      case 2: {
                        message.ssml = reader.string();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SynthesisInput.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SynthesisInput.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  var properties = {};
                  if (message.text != null && message.hasOwnProperty("text")) {
                    properties.inputSource = 1;
                    if (!$util.isString(message.text))
                      return "text: string expected";
                  }
                  if (message.ssml != null && message.hasOwnProperty("ssml")) {
                    if (properties.inputSource === 1)
                      return "inputSource: multiple values";
                    properties.inputSource = 1;
                    if (!$util.isString(message.ssml))
                      return "ssml: string expected";
                  }
                  return null;
                };
                SynthesisInput.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1beta1.SynthesisInput)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1beta1.SynthesisInput();
                  if (object.text != null)
                    message.text = String(object.text);
                  if (object.ssml != null)
                    message.ssml = String(object.ssml);
                  return message;
                };
                SynthesisInput.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (message.text != null && message.hasOwnProperty("text")) {
                    object.text = message.text;
                    if (options.oneofs)
                      object.inputSource = "text";
                  }
                  if (message.ssml != null && message.hasOwnProperty("ssml")) {
                    object.ssml = message.ssml;
                    if (options.oneofs)
                      object.inputSource = "ssml";
                  }
                  return object;
                };
                SynthesisInput.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SynthesisInput.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1beta1.SynthesisInput";
                };
                return SynthesisInput;
              }();
              v1beta1.VoiceSelectionParams = function() {
                function VoiceSelectionParams(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                VoiceSelectionParams.prototype.languageCode = "";
                VoiceSelectionParams.prototype.name = "";
                VoiceSelectionParams.prototype.ssmlGender = 0;
                VoiceSelectionParams.prototype.customVoice = null;
                VoiceSelectionParams.create = function create(properties) {
                  return new VoiceSelectionParams(properties);
                };
                VoiceSelectionParams.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.languageCode != null && Object.hasOwnProperty.call(message, "languageCode"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.languageCode);
                  if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).string(message.name);
                  if (message.ssmlGender != null && Object.hasOwnProperty.call(message, "ssmlGender"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).int32(message.ssmlGender);
                  if (message.customVoice != null && Object.hasOwnProperty.call(message, "customVoice"))
                    $root.google.cloud.texttospeech.v1beta1.CustomVoiceParams.encode(message.customVoice, writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).fork()).ldelim();
                  return writer;
                };
                VoiceSelectionParams.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                VoiceSelectionParams.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1beta1.VoiceSelectionParams();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.languageCode = reader.string();
                        break;
                      }
                      case 2: {
                        message.name = reader.string();
                        break;
                      }
                      case 3: {
                        message.ssmlGender = reader.int32();
                        break;
                      }
                      case 4: {
                        message.customVoice = $root.google.cloud.texttospeech.v1beta1.CustomVoiceParams.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                VoiceSelectionParams.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                VoiceSelectionParams.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.languageCode != null && message.hasOwnProperty("languageCode")) {
                    if (!$util.isString(message.languageCode))
                      return "languageCode: string expected";
                  }
                  if (message.name != null && message.hasOwnProperty("name")) {
                    if (!$util.isString(message.name))
                      return "name: string expected";
                  }
                  if (message.ssmlGender != null && message.hasOwnProperty("ssmlGender"))
                    switch (message.ssmlGender) {
                      default:
                        return "ssmlGender: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                      case 3:
                        break;
                    }
                  if (message.customVoice != null && message.hasOwnProperty("customVoice")) {
                    var error = $root.google.cloud.texttospeech.v1beta1.CustomVoiceParams.verify(message.customVoice);
                    if (error)
                      return "customVoice." + error;
                  }
                  return null;
                };
                VoiceSelectionParams.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1beta1.VoiceSelectionParams)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1beta1.VoiceSelectionParams();
                  if (object.languageCode != null)
                    message.languageCode = String(object.languageCode);
                  if (object.name != null)
                    message.name = String(object.name);
                  switch (object.ssmlGender) {
                    default:
                      if (typeof object.ssmlGender === "number") {
                        message.ssmlGender = object.ssmlGender;
                        break;
                      }
                      break;
                    case "SSML_VOICE_GENDER_UNSPECIFIED":
                    case 0:
                      message.ssmlGender = 0;
                      break;
                    case "MALE":
                    case 1:
                      message.ssmlGender = 1;
                      break;
                    case "FEMALE":
                    case 2:
                      message.ssmlGender = 2;
                      break;
                    case "NEUTRAL":
                    case 3:
                      message.ssmlGender = 3;
                      break;
                  }
                  if (object.customVoice != null) {
                    if (typeof object.customVoice !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1beta1.VoiceSelectionParams.customVoice: object expected");
                    message.customVoice = $root.google.cloud.texttospeech.v1beta1.CustomVoiceParams.fromObject(object.customVoice);
                  }
                  return message;
                };
                VoiceSelectionParams.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.languageCode = "";
                    object.name = "";
                    object.ssmlGender = options.enums === String ? "SSML_VOICE_GENDER_UNSPECIFIED" : 0;
                    object.customVoice = null;
                  }
                  if (message.languageCode != null && message.hasOwnProperty("languageCode"))
                    object.languageCode = message.languageCode;
                  if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                  if (message.ssmlGender != null && message.hasOwnProperty("ssmlGender"))
                    object.ssmlGender = options.enums === String ? $root.google.cloud.texttospeech.v1beta1.SsmlVoiceGender[message.ssmlGender] === void 0 ? message.ssmlGender : $root.google.cloud.texttospeech.v1beta1.SsmlVoiceGender[message.ssmlGender] : message.ssmlGender;
                  if (message.customVoice != null && message.hasOwnProperty("customVoice"))
                    object.customVoice = $root.google.cloud.texttospeech.v1beta1.CustomVoiceParams.toObject(message.customVoice, options);
                  return object;
                };
                VoiceSelectionParams.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                VoiceSelectionParams.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1beta1.VoiceSelectionParams";
                };
                return VoiceSelectionParams;
              }();
              v1beta1.AudioConfig = function() {
                function AudioConfig(properties) {
                  this.effectsProfileId = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                AudioConfig.prototype.audioEncoding = 0;
                AudioConfig.prototype.speakingRate = 0;
                AudioConfig.prototype.pitch = 0;
                AudioConfig.prototype.volumeGainDb = 0;
                AudioConfig.prototype.sampleRateHertz = 0;
                AudioConfig.prototype.effectsProfileId = $util.emptyArray;
                AudioConfig.create = function create(properties) {
                  return new AudioConfig(properties);
                };
                AudioConfig.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.audioEncoding != null && Object.hasOwnProperty.call(message, "audioEncoding"))
                    writer.uint32(
                      /* id 1, wireType 0 =*/
                      8
                    ).int32(message.audioEncoding);
                  if (message.speakingRate != null && Object.hasOwnProperty.call(message, "speakingRate"))
                    writer.uint32(
                      /* id 2, wireType 1 =*/
                      17
                    ).double(message.speakingRate);
                  if (message.pitch != null && Object.hasOwnProperty.call(message, "pitch"))
                    writer.uint32(
                      /* id 3, wireType 1 =*/
                      25
                    ).double(message.pitch);
                  if (message.volumeGainDb != null && Object.hasOwnProperty.call(message, "volumeGainDb"))
                    writer.uint32(
                      /* id 4, wireType 1 =*/
                      33
                    ).double(message.volumeGainDb);
                  if (message.sampleRateHertz != null && Object.hasOwnProperty.call(message, "sampleRateHertz"))
                    writer.uint32(
                      /* id 5, wireType 0 =*/
                      40
                    ).int32(message.sampleRateHertz);
                  if (message.effectsProfileId != null && message.effectsProfileId.length)
                    for (var i = 0; i < message.effectsProfileId.length; ++i)
                      writer.uint32(
                        /* id 6, wireType 2 =*/
                        50
                      ).string(message.effectsProfileId[i]);
                  return writer;
                };
                AudioConfig.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                AudioConfig.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1beta1.AudioConfig();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.audioEncoding = reader.int32();
                        break;
                      }
                      case 2: {
                        message.speakingRate = reader.double();
                        break;
                      }
                      case 3: {
                        message.pitch = reader.double();
                        break;
                      }
                      case 4: {
                        message.volumeGainDb = reader.double();
                        break;
                      }
                      case 5: {
                        message.sampleRateHertz = reader.int32();
                        break;
                      }
                      case 6: {
                        if (!(message.effectsProfileId && message.effectsProfileId.length))
                          message.effectsProfileId = [];
                        message.effectsProfileId.push(reader.string());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                AudioConfig.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                AudioConfig.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.audioEncoding != null && message.hasOwnProperty("audioEncoding"))
                    switch (message.audioEncoding) {
                      default:
                        return "audioEncoding: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                      case 4:
                      case 3:
                      case 5:
                      case 6:
                        break;
                    }
                  if (message.speakingRate != null && message.hasOwnProperty("speakingRate")) {
                    if (typeof message.speakingRate !== "number")
                      return "speakingRate: number expected";
                  }
                  if (message.pitch != null && message.hasOwnProperty("pitch")) {
                    if (typeof message.pitch !== "number")
                      return "pitch: number expected";
                  }
                  if (message.volumeGainDb != null && message.hasOwnProperty("volumeGainDb")) {
                    if (typeof message.volumeGainDb !== "number")
                      return "volumeGainDb: number expected";
                  }
                  if (message.sampleRateHertz != null && message.hasOwnProperty("sampleRateHertz")) {
                    if (!$util.isInteger(message.sampleRateHertz))
                      return "sampleRateHertz: integer expected";
                  }
                  if (message.effectsProfileId != null && message.hasOwnProperty("effectsProfileId")) {
                    if (!Array.isArray(message.effectsProfileId))
                      return "effectsProfileId: array expected";
                    for (var i = 0; i < message.effectsProfileId.length; ++i)
                      if (!$util.isString(message.effectsProfileId[i]))
                        return "effectsProfileId: string[] expected";
                  }
                  return null;
                };
                AudioConfig.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1beta1.AudioConfig)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1beta1.AudioConfig();
                  switch (object.audioEncoding) {
                    default:
                      if (typeof object.audioEncoding === "number") {
                        message.audioEncoding = object.audioEncoding;
                        break;
                      }
                      break;
                    case "AUDIO_ENCODING_UNSPECIFIED":
                    case 0:
                      message.audioEncoding = 0;
                      break;
                    case "LINEAR16":
                    case 1:
                      message.audioEncoding = 1;
                      break;
                    case "MP3":
                    case 2:
                      message.audioEncoding = 2;
                      break;
                    case "MP3_64_KBPS":
                    case 4:
                      message.audioEncoding = 4;
                      break;
                    case "OGG_OPUS":
                    case 3:
                      message.audioEncoding = 3;
                      break;
                    case "MULAW":
                    case 5:
                      message.audioEncoding = 5;
                      break;
                    case "ALAW":
                    case 6:
                      message.audioEncoding = 6;
                      break;
                  }
                  if (object.speakingRate != null)
                    message.speakingRate = Number(object.speakingRate);
                  if (object.pitch != null)
                    message.pitch = Number(object.pitch);
                  if (object.volumeGainDb != null)
                    message.volumeGainDb = Number(object.volumeGainDb);
                  if (object.sampleRateHertz != null)
                    message.sampleRateHertz = object.sampleRateHertz | 0;
                  if (object.effectsProfileId) {
                    if (!Array.isArray(object.effectsProfileId))
                      throw TypeError(".google.cloud.texttospeech.v1beta1.AudioConfig.effectsProfileId: array expected");
                    message.effectsProfileId = [];
                    for (var i = 0; i < object.effectsProfileId.length; ++i)
                      message.effectsProfileId[i] = String(object.effectsProfileId[i]);
                  }
                  return message;
                };
                AudioConfig.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.effectsProfileId = [];
                  if (options.defaults) {
                    object.audioEncoding = options.enums === String ? "AUDIO_ENCODING_UNSPECIFIED" : 0;
                    object.speakingRate = 0;
                    object.pitch = 0;
                    object.volumeGainDb = 0;
                    object.sampleRateHertz = 0;
                  }
                  if (message.audioEncoding != null && message.hasOwnProperty("audioEncoding"))
                    object.audioEncoding = options.enums === String ? $root.google.cloud.texttospeech.v1beta1.AudioEncoding[message.audioEncoding] === void 0 ? message.audioEncoding : $root.google.cloud.texttospeech.v1beta1.AudioEncoding[message.audioEncoding] : message.audioEncoding;
                  if (message.speakingRate != null && message.hasOwnProperty("speakingRate"))
                    object.speakingRate = options.json && !isFinite(message.speakingRate) ? String(message.speakingRate) : message.speakingRate;
                  if (message.pitch != null && message.hasOwnProperty("pitch"))
                    object.pitch = options.json && !isFinite(message.pitch) ? String(message.pitch) : message.pitch;
                  if (message.volumeGainDb != null && message.hasOwnProperty("volumeGainDb"))
                    object.volumeGainDb = options.json && !isFinite(message.volumeGainDb) ? String(message.volumeGainDb) : message.volumeGainDb;
                  if (message.sampleRateHertz != null && message.hasOwnProperty("sampleRateHertz"))
                    object.sampleRateHertz = message.sampleRateHertz;
                  if (message.effectsProfileId && message.effectsProfileId.length) {
                    object.effectsProfileId = [];
                    for (var j = 0; j < message.effectsProfileId.length; ++j)
                      object.effectsProfileId[j] = message.effectsProfileId[j];
                  }
                  return object;
                };
                AudioConfig.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                AudioConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1beta1.AudioConfig";
                };
                return AudioConfig;
              }();
              v1beta1.CustomVoiceParams = function() {
                function CustomVoiceParams(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                CustomVoiceParams.prototype.model = "";
                CustomVoiceParams.prototype.reportedUsage = 0;
                CustomVoiceParams.create = function create(properties) {
                  return new CustomVoiceParams(properties);
                };
                CustomVoiceParams.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.model != null && Object.hasOwnProperty.call(message, "model"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.model);
                  if (message.reportedUsage != null && Object.hasOwnProperty.call(message, "reportedUsage"))
                    writer.uint32(
                      /* id 3, wireType 0 =*/
                      24
                    ).int32(message.reportedUsage);
                  return writer;
                };
                CustomVoiceParams.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                CustomVoiceParams.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1beta1.CustomVoiceParams();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.model = reader.string();
                        break;
                      }
                      case 3: {
                        message.reportedUsage = reader.int32();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                CustomVoiceParams.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                CustomVoiceParams.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.model != null && message.hasOwnProperty("model")) {
                    if (!$util.isString(message.model))
                      return "model: string expected";
                  }
                  if (message.reportedUsage != null && message.hasOwnProperty("reportedUsage"))
                    switch (message.reportedUsage) {
                      default:
                        return "reportedUsage: enum value expected";
                      case 0:
                      case 1:
                      case 2:
                        break;
                    }
                  return null;
                };
                CustomVoiceParams.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1beta1.CustomVoiceParams)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1beta1.CustomVoiceParams();
                  if (object.model != null)
                    message.model = String(object.model);
                  switch (object.reportedUsage) {
                    default:
                      if (typeof object.reportedUsage === "number") {
                        message.reportedUsage = object.reportedUsage;
                        break;
                      }
                      break;
                    case "REPORTED_USAGE_UNSPECIFIED":
                    case 0:
                      message.reportedUsage = 0;
                      break;
                    case "REALTIME":
                    case 1:
                      message.reportedUsage = 1;
                      break;
                    case "OFFLINE":
                    case 2:
                      message.reportedUsage = 2;
                      break;
                  }
                  return message;
                };
                CustomVoiceParams.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.model = "";
                    object.reportedUsage = options.enums === String ? "REPORTED_USAGE_UNSPECIFIED" : 0;
                  }
                  if (message.model != null && message.hasOwnProperty("model"))
                    object.model = message.model;
                  if (message.reportedUsage != null && message.hasOwnProperty("reportedUsage"))
                    object.reportedUsage = options.enums === String ? $root.google.cloud.texttospeech.v1beta1.CustomVoiceParams.ReportedUsage[message.reportedUsage] === void 0 ? message.reportedUsage : $root.google.cloud.texttospeech.v1beta1.CustomVoiceParams.ReportedUsage[message.reportedUsage] : message.reportedUsage;
                  return object;
                };
                CustomVoiceParams.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                CustomVoiceParams.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1beta1.CustomVoiceParams";
                };
                CustomVoiceParams.ReportedUsage = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "REPORTED_USAGE_UNSPECIFIED"] = 0;
                  values[valuesById[1] = "REALTIME"] = 1;
                  values[valuesById[2] = "OFFLINE"] = 2;
                  return values;
                }();
                return CustomVoiceParams;
              }();
              v1beta1.SynthesizeSpeechResponse = function() {
                function SynthesizeSpeechResponse(properties) {
                  this.timepoints = [];
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SynthesizeSpeechResponse.prototype.audioContent = $util.newBuffer([]);
                SynthesizeSpeechResponse.prototype.timepoints = $util.emptyArray;
                SynthesizeSpeechResponse.prototype.audioConfig = null;
                SynthesizeSpeechResponse.create = function create(properties) {
                  return new SynthesizeSpeechResponse(properties);
                };
                SynthesizeSpeechResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.audioContent != null && Object.hasOwnProperty.call(message, "audioContent"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).bytes(message.audioContent);
                  if (message.timepoints != null && message.timepoints.length)
                    for (var i = 0; i < message.timepoints.length; ++i)
                      $root.google.cloud.texttospeech.v1beta1.Timepoint.encode(message.timepoints[i], writer.uint32(
                        /* id 2, wireType 2 =*/
                        18
                      ).fork()).ldelim();
                  if (message.audioConfig != null && Object.hasOwnProperty.call(message, "audioConfig"))
                    $root.google.cloud.texttospeech.v1beta1.AudioConfig.encode(message.audioConfig, writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).fork()).ldelim();
                  return writer;
                };
                SynthesizeSpeechResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SynthesizeSpeechResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1beta1.SynthesizeSpeechResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.audioContent = reader.bytes();
                        break;
                      }
                      case 2: {
                        if (!(message.timepoints && message.timepoints.length))
                          message.timepoints = [];
                        message.timepoints.push($root.google.cloud.texttospeech.v1beta1.Timepoint.decode(reader, reader.uint32()));
                        break;
                      }
                      case 4: {
                        message.audioConfig = $root.google.cloud.texttospeech.v1beta1.AudioConfig.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SynthesizeSpeechResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SynthesizeSpeechResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.audioContent != null && message.hasOwnProperty("audioContent")) {
                    if (!(message.audioContent && typeof message.audioContent.length === "number" || $util.isString(message.audioContent)))
                      return "audioContent: buffer expected";
                  }
                  if (message.timepoints != null && message.hasOwnProperty("timepoints")) {
                    if (!Array.isArray(message.timepoints))
                      return "timepoints: array expected";
                    for (var i = 0; i < message.timepoints.length; ++i) {
                      var error = $root.google.cloud.texttospeech.v1beta1.Timepoint.verify(message.timepoints[i]);
                      if (error)
                        return "timepoints." + error;
                    }
                  }
                  if (message.audioConfig != null && message.hasOwnProperty("audioConfig")) {
                    var error = $root.google.cloud.texttospeech.v1beta1.AudioConfig.verify(message.audioConfig);
                    if (error)
                      return "audioConfig." + error;
                  }
                  return null;
                };
                SynthesizeSpeechResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1beta1.SynthesizeSpeechResponse)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1beta1.SynthesizeSpeechResponse();
                  if (object.audioContent != null) {
                    if (typeof object.audioContent === "string")
                      $util.base64.decode(object.audioContent, message.audioContent = $util.newBuffer($util.base64.length(object.audioContent)), 0);
                    else if (object.audioContent.length >= 0)
                      message.audioContent = object.audioContent;
                  }
                  if (object.timepoints) {
                    if (!Array.isArray(object.timepoints))
                      throw TypeError(".google.cloud.texttospeech.v1beta1.SynthesizeSpeechResponse.timepoints: array expected");
                    message.timepoints = [];
                    for (var i = 0; i < object.timepoints.length; ++i) {
                      if (typeof object.timepoints[i] !== "object")
                        throw TypeError(".google.cloud.texttospeech.v1beta1.SynthesizeSpeechResponse.timepoints: object expected");
                      message.timepoints[i] = $root.google.cloud.texttospeech.v1beta1.Timepoint.fromObject(object.timepoints[i]);
                    }
                  }
                  if (object.audioConfig != null) {
                    if (typeof object.audioConfig !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1beta1.SynthesizeSpeechResponse.audioConfig: object expected");
                    message.audioConfig = $root.google.cloud.texttospeech.v1beta1.AudioConfig.fromObject(object.audioConfig);
                  }
                  return message;
                };
                SynthesizeSpeechResponse.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.arrays || options.defaults)
                    object.timepoints = [];
                  if (options.defaults) {
                    if (options.bytes === String)
                      object.audioContent = "";
                    else {
                      object.audioContent = [];
                      if (options.bytes !== Array)
                        object.audioContent = $util.newBuffer(object.audioContent);
                    }
                    object.audioConfig = null;
                  }
                  if (message.audioContent != null && message.hasOwnProperty("audioContent"))
                    object.audioContent = options.bytes === String ? $util.base64.encode(message.audioContent, 0, message.audioContent.length) : options.bytes === Array ? Array.prototype.slice.call(message.audioContent) : message.audioContent;
                  if (message.timepoints && message.timepoints.length) {
                    object.timepoints = [];
                    for (var j = 0; j < message.timepoints.length; ++j)
                      object.timepoints[j] = $root.google.cloud.texttospeech.v1beta1.Timepoint.toObject(message.timepoints[j], options);
                  }
                  if (message.audioConfig != null && message.hasOwnProperty("audioConfig"))
                    object.audioConfig = $root.google.cloud.texttospeech.v1beta1.AudioConfig.toObject(message.audioConfig, options);
                  return object;
                };
                SynthesizeSpeechResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SynthesizeSpeechResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1beta1.SynthesizeSpeechResponse";
                };
                return SynthesizeSpeechResponse;
              }();
              v1beta1.Timepoint = function() {
                function Timepoint(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                Timepoint.prototype.markName = "";
                Timepoint.prototype.timeSeconds = 0;
                Timepoint.create = function create(properties) {
                  return new Timepoint(properties);
                };
                Timepoint.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.timeSeconds != null && Object.hasOwnProperty.call(message, "timeSeconds"))
                    writer.uint32(
                      /* id 3, wireType 1 =*/
                      25
                    ).double(message.timeSeconds);
                  if (message.markName != null && Object.hasOwnProperty.call(message, "markName"))
                    writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).string(message.markName);
                  return writer;
                };
                Timepoint.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                Timepoint.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1beta1.Timepoint();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 4: {
                        message.markName = reader.string();
                        break;
                      }
                      case 3: {
                        message.timeSeconds = reader.double();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                Timepoint.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                Timepoint.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.markName != null && message.hasOwnProperty("markName")) {
                    if (!$util.isString(message.markName))
                      return "markName: string expected";
                  }
                  if (message.timeSeconds != null && message.hasOwnProperty("timeSeconds")) {
                    if (typeof message.timeSeconds !== "number")
                      return "timeSeconds: number expected";
                  }
                  return null;
                };
                Timepoint.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1beta1.Timepoint)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1beta1.Timepoint();
                  if (object.markName != null)
                    message.markName = String(object.markName);
                  if (object.timeSeconds != null)
                    message.timeSeconds = Number(object.timeSeconds);
                  return message;
                };
                Timepoint.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.timeSeconds = 0;
                    object.markName = "";
                  }
                  if (message.timeSeconds != null && message.hasOwnProperty("timeSeconds"))
                    object.timeSeconds = options.json && !isFinite(message.timeSeconds) ? String(message.timeSeconds) : message.timeSeconds;
                  if (message.markName != null && message.hasOwnProperty("markName"))
                    object.markName = message.markName;
                  return object;
                };
                Timepoint.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                Timepoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1beta1.Timepoint";
                };
                return Timepoint;
              }();
              v1beta1.TextToSpeechLongAudioSynthesize = function() {
                function TextToSpeechLongAudioSynthesize(rpcImpl, requestDelimited, responseDelimited) {
                  $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
                (TextToSpeechLongAudioSynthesize.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TextToSpeechLongAudioSynthesize;
                TextToSpeechLongAudioSynthesize.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                  return new this(rpcImpl, requestDelimited, responseDelimited);
                };
                Object.defineProperty(TextToSpeechLongAudioSynthesize.prototype.synthesizeLongAudio = function synthesizeLongAudio(request, callback) {
                  return this.rpcCall(synthesizeLongAudio, $root.google.cloud.texttospeech.v1beta1.SynthesizeLongAudioRequest, $root.google.longrunning.Operation, request, callback);
                }, "name", { value: "SynthesizeLongAudio" });
                return TextToSpeechLongAudioSynthesize;
              }();
              v1beta1.SynthesizeLongAudioRequest = function() {
                function SynthesizeLongAudioRequest(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SynthesizeLongAudioRequest.prototype.parent = "";
                SynthesizeLongAudioRequest.prototype.input = null;
                SynthesizeLongAudioRequest.prototype.audioConfig = null;
                SynthesizeLongAudioRequest.prototype.outputGcsUri = "";
                SynthesizeLongAudioRequest.prototype.voice = null;
                SynthesizeLongAudioRequest.create = function create(properties) {
                  return new SynthesizeLongAudioRequest(properties);
                };
                SynthesizeLongAudioRequest.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.parent != null && Object.hasOwnProperty.call(message, "parent"))
                    writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).string(message.parent);
                  if (message.input != null && Object.hasOwnProperty.call(message, "input"))
                    $root.google.cloud.texttospeech.v1beta1.SynthesisInput.encode(message.input, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  if (message.audioConfig != null && Object.hasOwnProperty.call(message, "audioConfig"))
                    $root.google.cloud.texttospeech.v1beta1.AudioConfig.encode(message.audioConfig, writer.uint32(
                      /* id 3, wireType 2 =*/
                      26
                    ).fork()).ldelim();
                  if (message.outputGcsUri != null && Object.hasOwnProperty.call(message, "outputGcsUri"))
                    writer.uint32(
                      /* id 4, wireType 2 =*/
                      34
                    ).string(message.outputGcsUri);
                  if (message.voice != null && Object.hasOwnProperty.call(message, "voice"))
                    $root.google.cloud.texttospeech.v1beta1.VoiceSelectionParams.encode(message.voice, writer.uint32(
                      /* id 5, wireType 2 =*/
                      42
                    ).fork()).ldelim();
                  return writer;
                };
                SynthesizeLongAudioRequest.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SynthesizeLongAudioRequest.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1beta1.SynthesizeLongAudioRequest();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.parent = reader.string();
                        break;
                      }
                      case 2: {
                        message.input = $root.google.cloud.texttospeech.v1beta1.SynthesisInput.decode(reader, reader.uint32());
                        break;
                      }
                      case 3: {
                        message.audioConfig = $root.google.cloud.texttospeech.v1beta1.AudioConfig.decode(reader, reader.uint32());
                        break;
                      }
                      case 4: {
                        message.outputGcsUri = reader.string();
                        break;
                      }
                      case 5: {
                        message.voice = $root.google.cloud.texttospeech.v1beta1.VoiceSelectionParams.decode(reader, reader.uint32());
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SynthesizeLongAudioRequest.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SynthesizeLongAudioRequest.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.parent != null && message.hasOwnProperty("parent")) {
                    if (!$util.isString(message.parent))
                      return "parent: string expected";
                  }
                  if (message.input != null && message.hasOwnProperty("input")) {
                    var error = $root.google.cloud.texttospeech.v1beta1.SynthesisInput.verify(message.input);
                    if (error)
                      return "input." + error;
                  }
                  if (message.audioConfig != null && message.hasOwnProperty("audioConfig")) {
                    var error = $root.google.cloud.texttospeech.v1beta1.AudioConfig.verify(message.audioConfig);
                    if (error)
                      return "audioConfig." + error;
                  }
                  if (message.outputGcsUri != null && message.hasOwnProperty("outputGcsUri")) {
                    if (!$util.isString(message.outputGcsUri))
                      return "outputGcsUri: string expected";
                  }
                  if (message.voice != null && message.hasOwnProperty("voice")) {
                    var error = $root.google.cloud.texttospeech.v1beta1.VoiceSelectionParams.verify(message.voice);
                    if (error)
                      return "voice." + error;
                  }
                  return null;
                };
                SynthesizeLongAudioRequest.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1beta1.SynthesizeLongAudioRequest)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1beta1.SynthesizeLongAudioRequest();
                  if (object.parent != null)
                    message.parent = String(object.parent);
                  if (object.input != null) {
                    if (typeof object.input !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1beta1.SynthesizeLongAudioRequest.input: object expected");
                    message.input = $root.google.cloud.texttospeech.v1beta1.SynthesisInput.fromObject(object.input);
                  }
                  if (object.audioConfig != null) {
                    if (typeof object.audioConfig !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1beta1.SynthesizeLongAudioRequest.audioConfig: object expected");
                    message.audioConfig = $root.google.cloud.texttospeech.v1beta1.AudioConfig.fromObject(object.audioConfig);
                  }
                  if (object.outputGcsUri != null)
                    message.outputGcsUri = String(object.outputGcsUri);
                  if (object.voice != null) {
                    if (typeof object.voice !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1beta1.SynthesizeLongAudioRequest.voice: object expected");
                    message.voice = $root.google.cloud.texttospeech.v1beta1.VoiceSelectionParams.fromObject(object.voice);
                  }
                  return message;
                };
                SynthesizeLongAudioRequest.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.parent = "";
                    object.input = null;
                    object.audioConfig = null;
                    object.outputGcsUri = "";
                    object.voice = null;
                  }
                  if (message.parent != null && message.hasOwnProperty("parent"))
                    object.parent = message.parent;
                  if (message.input != null && message.hasOwnProperty("input"))
                    object.input = $root.google.cloud.texttospeech.v1beta1.SynthesisInput.toObject(message.input, options);
                  if (message.audioConfig != null && message.hasOwnProperty("audioConfig"))
                    object.audioConfig = $root.google.cloud.texttospeech.v1beta1.AudioConfig.toObject(message.audioConfig, options);
                  if (message.outputGcsUri != null && message.hasOwnProperty("outputGcsUri"))
                    object.outputGcsUri = message.outputGcsUri;
                  if (message.voice != null && message.hasOwnProperty("voice"))
                    object.voice = $root.google.cloud.texttospeech.v1beta1.VoiceSelectionParams.toObject(message.voice, options);
                  return object;
                };
                SynthesizeLongAudioRequest.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SynthesizeLongAudioRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1beta1.SynthesizeLongAudioRequest";
                };
                return SynthesizeLongAudioRequest;
              }();
              v1beta1.SynthesizeLongAudioResponse = function() {
                function SynthesizeLongAudioResponse(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SynthesizeLongAudioResponse.create = function create(properties) {
                  return new SynthesizeLongAudioResponse(properties);
                };
                SynthesizeLongAudioResponse.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  return writer;
                };
                SynthesizeLongAudioResponse.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SynthesizeLongAudioResponse.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1beta1.SynthesizeLongAudioResponse();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SynthesizeLongAudioResponse.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SynthesizeLongAudioResponse.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  return null;
                };
                SynthesizeLongAudioResponse.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1beta1.SynthesizeLongAudioResponse)
                    return object;
                  return new $root.google.cloud.texttospeech.v1beta1.SynthesizeLongAudioResponse();
                };
                SynthesizeLongAudioResponse.toObject = function toObject() {
                  return {};
                };
                SynthesizeLongAudioResponse.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SynthesizeLongAudioResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1beta1.SynthesizeLongAudioResponse";
                };
                return SynthesizeLongAudioResponse;
              }();
              v1beta1.SynthesizeLongAudioMetadata = function() {
                function SynthesizeLongAudioMetadata(properties) {
                  if (properties) {
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                      if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
                  }
                }
                SynthesizeLongAudioMetadata.prototype.startTime = null;
                SynthesizeLongAudioMetadata.prototype.lastUpdateTime = null;
                SynthesizeLongAudioMetadata.prototype.progressPercentage = 0;
                SynthesizeLongAudioMetadata.create = function create(properties) {
                  return new SynthesizeLongAudioMetadata(properties);
                };
                SynthesizeLongAudioMetadata.encode = function encode(message, writer) {
                  if (!writer)
                    writer = $Writer.create();
                  if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                    $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(
                      /* id 1, wireType 2 =*/
                      10
                    ).fork()).ldelim();
                  if (message.lastUpdateTime != null && Object.hasOwnProperty.call(message, "lastUpdateTime"))
                    $root.google.protobuf.Timestamp.encode(message.lastUpdateTime, writer.uint32(
                      /* id 2, wireType 2 =*/
                      18
                    ).fork()).ldelim();
                  if (message.progressPercentage != null && Object.hasOwnProperty.call(message, "progressPercentage"))
                    writer.uint32(
                      /* id 3, wireType 1 =*/
                      25
                    ).double(message.progressPercentage);
                  return writer;
                };
                SynthesizeLongAudioMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                  return this.encode(message, writer).ldelim();
                };
                SynthesizeLongAudioMetadata.decode = function decode(reader, length) {
                  if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                  var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.cloud.texttospeech.v1beta1.SynthesizeLongAudioMetadata();
                  while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                      case 1: {
                        message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      case 2: {
                        message.lastUpdateTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                        break;
                      }
                      case 3: {
                        message.progressPercentage = reader.double();
                        break;
                      }
                      default:
                        reader.skipType(tag & 7);
                        break;
                    }
                  }
                  return message;
                };
                SynthesizeLongAudioMetadata.decodeDelimited = function decodeDelimited(reader) {
                  if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                  return this.decode(reader, reader.uint32());
                };
                SynthesizeLongAudioMetadata.verify = function verify(message) {
                  if (typeof message !== "object" || message === null)
                    return "object expected";
                  if (message.startTime != null && message.hasOwnProperty("startTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.startTime);
                    if (error)
                      return "startTime." + error;
                  }
                  if (message.lastUpdateTime != null && message.hasOwnProperty("lastUpdateTime")) {
                    var error = $root.google.protobuf.Timestamp.verify(message.lastUpdateTime);
                    if (error)
                      return "lastUpdateTime." + error;
                  }
                  if (message.progressPercentage != null && message.hasOwnProperty("progressPercentage")) {
                    if (typeof message.progressPercentage !== "number")
                      return "progressPercentage: number expected";
                  }
                  return null;
                };
                SynthesizeLongAudioMetadata.fromObject = function fromObject(object) {
                  if (object instanceof $root.google.cloud.texttospeech.v1beta1.SynthesizeLongAudioMetadata)
                    return object;
                  var message = new $root.google.cloud.texttospeech.v1beta1.SynthesizeLongAudioMetadata();
                  if (object.startTime != null) {
                    if (typeof object.startTime !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1beta1.SynthesizeLongAudioMetadata.startTime: object expected");
                    message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);
                  }
                  if (object.lastUpdateTime != null) {
                    if (typeof object.lastUpdateTime !== "object")
                      throw TypeError(".google.cloud.texttospeech.v1beta1.SynthesizeLongAudioMetadata.lastUpdateTime: object expected");
                    message.lastUpdateTime = $root.google.protobuf.Timestamp.fromObject(object.lastUpdateTime);
                  }
                  if (object.progressPercentage != null)
                    message.progressPercentage = Number(object.progressPercentage);
                  return message;
                };
                SynthesizeLongAudioMetadata.toObject = function toObject(message, options) {
                  if (!options)
                    options = {};
                  var object = {};
                  if (options.defaults) {
                    object.startTime = null;
                    object.lastUpdateTime = null;
                    object.progressPercentage = 0;
                  }
                  if (message.startTime != null && message.hasOwnProperty("startTime"))
                    object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);
                  if (message.lastUpdateTime != null && message.hasOwnProperty("lastUpdateTime"))
                    object.lastUpdateTime = $root.google.protobuf.Timestamp.toObject(message.lastUpdateTime, options);
                  if (message.progressPercentage != null && message.hasOwnProperty("progressPercentage"))
                    object.progressPercentage = options.json && !isFinite(message.progressPercentage) ? String(message.progressPercentage) : message.progressPercentage;
                  return object;
                };
                SynthesizeLongAudioMetadata.prototype.toJSON = function toJSON() {
                  return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
                SynthesizeLongAudioMetadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                  if (typeUrlPrefix === void 0) {
                    typeUrlPrefix = "type.googleapis.com";
                  }
                  return typeUrlPrefix + "/google.cloud.texttospeech.v1beta1.SynthesizeLongAudioMetadata";
                };
                return SynthesizeLongAudioMetadata;
              }();
              return v1beta1;
            }();
            return texttospeech;
          }();
          return cloud;
        }();
        google.api = function() {
          var api = {};
          api.Http = function() {
            function Http(properties) {
              this.rules = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Http.prototype.rules = $util.emptyArray;
            Http.prototype.fullyDecodeReservedExpansion = false;
            Http.create = function create(properties) {
              return new Http(properties);
            };
            Http.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.rules != null && message.rules.length)
                for (var i = 0; i < message.rules.length; ++i)
                  $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork()).ldelim();
              if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).bool(message.fullyDecodeReservedExpansion);
              return writer;
            };
            Http.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Http.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.Http();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    if (!(message.rules && message.rules.length))
                      message.rules = [];
                    message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                    break;
                  }
                  case 2: {
                    message.fullyDecodeReservedExpansion = reader.bool();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Http.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Http.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.rules != null && message.hasOwnProperty("rules")) {
                if (!Array.isArray(message.rules))
                  return "rules: array expected";
                for (var i = 0; i < message.rules.length; ++i) {
                  var error = $root.google.api.HttpRule.verify(message.rules[i]);
                  if (error)
                    return "rules." + error;
                }
              }
              if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion")) {
                if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                  return "fullyDecodeReservedExpansion: boolean expected";
              }
              return null;
            };
            Http.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.Http)
                return object;
              var message = new $root.google.api.Http();
              if (object.rules) {
                if (!Array.isArray(object.rules))
                  throw TypeError(".google.api.Http.rules: array expected");
                message.rules = [];
                for (var i = 0; i < object.rules.length; ++i) {
                  if (typeof object.rules[i] !== "object")
                    throw TypeError(".google.api.Http.rules: object expected");
                  message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                }
              }
              if (object.fullyDecodeReservedExpansion != null)
                message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
              return message;
            };
            Http.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.rules = [];
              if (options.defaults)
                object.fullyDecodeReservedExpansion = false;
              if (message.rules && message.rules.length) {
                object.rules = [];
                for (var j = 0; j < message.rules.length; ++j)
                  object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
              }
              if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
              return object;
            };
            Http.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Http.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.Http";
            };
            return Http;
          }();
          api.HttpRule = function() {
            function HttpRule(properties) {
              this.additionalBindings = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            HttpRule.prototype.selector = "";
            HttpRule.prototype.get = null;
            HttpRule.prototype.put = null;
            HttpRule.prototype.post = null;
            HttpRule.prototype["delete"] = null;
            HttpRule.prototype.patch = null;
            HttpRule.prototype.custom = null;
            HttpRule.prototype.body = "";
            HttpRule.prototype.responseBody = "";
            HttpRule.prototype.additionalBindings = $util.emptyArray;
            var $oneOfFields;
            Object.defineProperty(HttpRule.prototype, "pattern", {
              get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
              set: $util.oneOfSetter($oneOfFields)
            });
            HttpRule.create = function create(properties) {
              return new HttpRule(properties);
            };
            HttpRule.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.selector);
              if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.get);
              if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).string(message.put);
              if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                writer.uint32(
                  /* id 4, wireType 2 =*/
                  34
                ).string(message.post);
              if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                writer.uint32(
                  /* id 5, wireType 2 =*/
                  42
                ).string(message["delete"]);
              if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                writer.uint32(
                  /* id 6, wireType 2 =*/
                  50
                ).string(message.patch);
              if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                writer.uint32(
                  /* id 7, wireType 2 =*/
                  58
                ).string(message.body);
              if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(
                  /* id 8, wireType 2 =*/
                  66
                ).fork()).ldelim();
              if (message.additionalBindings != null && message.additionalBindings.length)
                for (var i = 0; i < message.additionalBindings.length; ++i)
                  $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(
                    /* id 11, wireType 2 =*/
                    90
                  ).fork()).ldelim();
              if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                writer.uint32(
                  /* id 12, wireType 2 =*/
                  98
                ).string(message.responseBody);
              return writer;
            };
            HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            HttpRule.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.selector = reader.string();
                    break;
                  }
                  case 2: {
                    message.get = reader.string();
                    break;
                  }
                  case 3: {
                    message.put = reader.string();
                    break;
                  }
                  case 4: {
                    message.post = reader.string();
                    break;
                  }
                  case 5: {
                    message["delete"] = reader.string();
                    break;
                  }
                  case 6: {
                    message.patch = reader.string();
                    break;
                  }
                  case 8: {
                    message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                    break;
                  }
                  case 7: {
                    message.body = reader.string();
                    break;
                  }
                  case 12: {
                    message.responseBody = reader.string();
                    break;
                  }
                  case 11: {
                    if (!(message.additionalBindings && message.additionalBindings.length))
                      message.additionalBindings = [];
                    message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            HttpRule.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            HttpRule.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              var properties = {};
              if (message.selector != null && message.hasOwnProperty("selector")) {
                if (!$util.isString(message.selector))
                  return "selector: string expected";
              }
              if (message.get != null && message.hasOwnProperty("get")) {
                properties.pattern = 1;
                if (!$util.isString(message.get))
                  return "get: string expected";
              }
              if (message.put != null && message.hasOwnProperty("put")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message.put))
                  return "put: string expected";
              }
              if (message.post != null && message.hasOwnProperty("post")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message.post))
                  return "post: string expected";
              }
              if (message["delete"] != null && message.hasOwnProperty("delete")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message["delete"]))
                  return "delete: string expected";
              }
              if (message.patch != null && message.hasOwnProperty("patch")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                if (!$util.isString(message.patch))
                  return "patch: string expected";
              }
              if (message.custom != null && message.hasOwnProperty("custom")) {
                if (properties.pattern === 1)
                  return "pattern: multiple values";
                properties.pattern = 1;
                {
                  var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                  if (error)
                    return "custom." + error;
                }
              }
              if (message.body != null && message.hasOwnProperty("body")) {
                if (!$util.isString(message.body))
                  return "body: string expected";
              }
              if (message.responseBody != null && message.hasOwnProperty("responseBody")) {
                if (!$util.isString(message.responseBody))
                  return "responseBody: string expected";
              }
              if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                if (!Array.isArray(message.additionalBindings))
                  return "additionalBindings: array expected";
                for (var i = 0; i < message.additionalBindings.length; ++i) {
                  var error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                  if (error)
                    return "additionalBindings." + error;
                }
              }
              return null;
            };
            HttpRule.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.HttpRule)
                return object;
              var message = new $root.google.api.HttpRule();
              if (object.selector != null)
                message.selector = String(object.selector);
              if (object.get != null)
                message.get = String(object.get);
              if (object.put != null)
                message.put = String(object.put);
              if (object.post != null)
                message.post = String(object.post);
              if (object["delete"] != null)
                message["delete"] = String(object["delete"]);
              if (object.patch != null)
                message.patch = String(object.patch);
              if (object.custom != null) {
                if (typeof object.custom !== "object")
                  throw TypeError(".google.api.HttpRule.custom: object expected");
                message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
              }
              if (object.body != null)
                message.body = String(object.body);
              if (object.responseBody != null)
                message.responseBody = String(object.responseBody);
              if (object.additionalBindings) {
                if (!Array.isArray(object.additionalBindings))
                  throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                message.additionalBindings = [];
                for (var i = 0; i < object.additionalBindings.length; ++i) {
                  if (typeof object.additionalBindings[i] !== "object")
                    throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                  message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                }
              }
              return message;
            };
            HttpRule.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.additionalBindings = [];
              if (options.defaults) {
                object.selector = "";
                object.body = "";
                object.responseBody = "";
              }
              if (message.selector != null && message.hasOwnProperty("selector"))
                object.selector = message.selector;
              if (message.get != null && message.hasOwnProperty("get")) {
                object.get = message.get;
                if (options.oneofs)
                  object.pattern = "get";
              }
              if (message.put != null && message.hasOwnProperty("put")) {
                object.put = message.put;
                if (options.oneofs)
                  object.pattern = "put";
              }
              if (message.post != null && message.hasOwnProperty("post")) {
                object.post = message.post;
                if (options.oneofs)
                  object.pattern = "post";
              }
              if (message["delete"] != null && message.hasOwnProperty("delete")) {
                object["delete"] = message["delete"];
                if (options.oneofs)
                  object.pattern = "delete";
              }
              if (message.patch != null && message.hasOwnProperty("patch")) {
                object.patch = message.patch;
                if (options.oneofs)
                  object.pattern = "patch";
              }
              if (message.body != null && message.hasOwnProperty("body"))
                object.body = message.body;
              if (message.custom != null && message.hasOwnProperty("custom")) {
                object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                if (options.oneofs)
                  object.pattern = "custom";
              }
              if (message.additionalBindings && message.additionalBindings.length) {
                object.additionalBindings = [];
                for (var j = 0; j < message.additionalBindings.length; ++j)
                  object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
              }
              if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                object.responseBody = message.responseBody;
              return object;
            };
            HttpRule.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            HttpRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.HttpRule";
            };
            return HttpRule;
          }();
          api.CustomHttpPattern = function() {
            function CustomHttpPattern(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            CustomHttpPattern.prototype.kind = "";
            CustomHttpPattern.prototype.path = "";
            CustomHttpPattern.create = function create(properties) {
              return new CustomHttpPattern(properties);
            };
            CustomHttpPattern.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.kind);
              if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.path);
              return writer;
            };
            CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            CustomHttpPattern.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.kind = reader.string();
                    break;
                  }
                  case 2: {
                    message.path = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            CustomHttpPattern.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.kind != null && message.hasOwnProperty("kind")) {
                if (!$util.isString(message.kind))
                  return "kind: string expected";
              }
              if (message.path != null && message.hasOwnProperty("path")) {
                if (!$util.isString(message.path))
                  return "path: string expected";
              }
              return null;
            };
            CustomHttpPattern.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.CustomHttpPattern)
                return object;
              var message = new $root.google.api.CustomHttpPattern();
              if (object.kind != null)
                message.kind = String(object.kind);
              if (object.path != null)
                message.path = String(object.path);
              return message;
            };
            CustomHttpPattern.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.kind = "";
                object.path = "";
              }
              if (message.kind != null && message.hasOwnProperty("kind"))
                object.kind = message.kind;
              if (message.path != null && message.hasOwnProperty("path"))
                object.path = message.path;
              return object;
            };
            CustomHttpPattern.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            CustomHttpPattern.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.CustomHttpPattern";
            };
            return CustomHttpPattern;
          }();
          api.CommonLanguageSettings = function() {
            function CommonLanguageSettings(properties) {
              this.destinations = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            CommonLanguageSettings.prototype.referenceDocsUri = "";
            CommonLanguageSettings.prototype.destinations = $util.emptyArray;
            CommonLanguageSettings.create = function create(properties) {
              return new CommonLanguageSettings(properties);
            };
            CommonLanguageSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.referenceDocsUri != null && Object.hasOwnProperty.call(message, "referenceDocsUri"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.referenceDocsUri);
              if (message.destinations != null && message.destinations.length) {
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).fork();
                for (var i = 0; i < message.destinations.length; ++i)
                  writer.int32(message.destinations[i]);
                writer.ldelim();
              }
              return writer;
            };
            CommonLanguageSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            CommonLanguageSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.CommonLanguageSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.referenceDocsUri = reader.string();
                    break;
                  }
                  case 2: {
                    if (!(message.destinations && message.destinations.length))
                      message.destinations = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message.destinations.push(reader.int32());
                    } else
                      message.destinations.push(reader.int32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            CommonLanguageSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            CommonLanguageSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri")) {
                if (!$util.isString(message.referenceDocsUri))
                  return "referenceDocsUri: string expected";
              }
              if (message.destinations != null && message.hasOwnProperty("destinations")) {
                if (!Array.isArray(message.destinations))
                  return "destinations: array expected";
                for (var i = 0; i < message.destinations.length; ++i)
                  switch (message.destinations[i]) {
                    default:
                      return "destinations: enum value[] expected";
                    case 0:
                    case 10:
                    case 20:
                      break;
                  }
              }
              return null;
            };
            CommonLanguageSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.CommonLanguageSettings)
                return object;
              var message = new $root.google.api.CommonLanguageSettings();
              if (object.referenceDocsUri != null)
                message.referenceDocsUri = String(object.referenceDocsUri);
              if (object.destinations) {
                if (!Array.isArray(object.destinations))
                  throw TypeError(".google.api.CommonLanguageSettings.destinations: array expected");
                message.destinations = [];
                for (var i = 0; i < object.destinations.length; ++i)
                  switch (object.destinations[i]) {
                    default:
                      if (typeof object.destinations[i] === "number") {
                        message.destinations[i] = object.destinations[i];
                        break;
                      }
                    case "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED":
                    case 0:
                      message.destinations[i] = 0;
                      break;
                    case "GITHUB":
                    case 10:
                      message.destinations[i] = 10;
                      break;
                    case "PACKAGE_MANAGER":
                    case 20:
                      message.destinations[i] = 20;
                      break;
                  }
              }
              return message;
            };
            CommonLanguageSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.destinations = [];
              if (options.defaults)
                object.referenceDocsUri = "";
              if (message.referenceDocsUri != null && message.hasOwnProperty("referenceDocsUri"))
                object.referenceDocsUri = message.referenceDocsUri;
              if (message.destinations && message.destinations.length) {
                object.destinations = [];
                for (var j = 0; j < message.destinations.length; ++j)
                  object.destinations[j] = options.enums === String ? $root.google.api.ClientLibraryDestination[message.destinations[j]] === void 0 ? message.destinations[j] : $root.google.api.ClientLibraryDestination[message.destinations[j]] : message.destinations[j];
              }
              return object;
            };
            CommonLanguageSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            CommonLanguageSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.CommonLanguageSettings";
            };
            return CommonLanguageSettings;
          }();
          api.ClientLibrarySettings = function() {
            function ClientLibrarySettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ClientLibrarySettings.prototype.version = "";
            ClientLibrarySettings.prototype.launchStage = 0;
            ClientLibrarySettings.prototype.restNumericEnums = false;
            ClientLibrarySettings.prototype.javaSettings = null;
            ClientLibrarySettings.prototype.cppSettings = null;
            ClientLibrarySettings.prototype.phpSettings = null;
            ClientLibrarySettings.prototype.pythonSettings = null;
            ClientLibrarySettings.prototype.nodeSettings = null;
            ClientLibrarySettings.prototype.dotnetSettings = null;
            ClientLibrarySettings.prototype.rubySettings = null;
            ClientLibrarySettings.prototype.goSettings = null;
            ClientLibrarySettings.create = function create(properties) {
              return new ClientLibrarySettings(properties);
            };
            ClientLibrarySettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.version);
              if (message.launchStage != null && Object.hasOwnProperty.call(message, "launchStage"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).int32(message.launchStage);
              if (message.restNumericEnums != null && Object.hasOwnProperty.call(message, "restNumericEnums"))
                writer.uint32(
                  /* id 3, wireType 0 =*/
                  24
                ).bool(message.restNumericEnums);
              if (message.javaSettings != null && Object.hasOwnProperty.call(message, "javaSettings"))
                $root.google.api.JavaSettings.encode(message.javaSettings, writer.uint32(
                  /* id 21, wireType 2 =*/
                  170
                ).fork()).ldelim();
              if (message.cppSettings != null && Object.hasOwnProperty.call(message, "cppSettings"))
                $root.google.api.CppSettings.encode(message.cppSettings, writer.uint32(
                  /* id 22, wireType 2 =*/
                  178
                ).fork()).ldelim();
              if (message.phpSettings != null && Object.hasOwnProperty.call(message, "phpSettings"))
                $root.google.api.PhpSettings.encode(message.phpSettings, writer.uint32(
                  /* id 23, wireType 2 =*/
                  186
                ).fork()).ldelim();
              if (message.pythonSettings != null && Object.hasOwnProperty.call(message, "pythonSettings"))
                $root.google.api.PythonSettings.encode(message.pythonSettings, writer.uint32(
                  /* id 24, wireType 2 =*/
                  194
                ).fork()).ldelim();
              if (message.nodeSettings != null && Object.hasOwnProperty.call(message, "nodeSettings"))
                $root.google.api.NodeSettings.encode(message.nodeSettings, writer.uint32(
                  /* id 25, wireType 2 =*/
                  202
                ).fork()).ldelim();
              if (message.dotnetSettings != null && Object.hasOwnProperty.call(message, "dotnetSettings"))
                $root.google.api.DotnetSettings.encode(message.dotnetSettings, writer.uint32(
                  /* id 26, wireType 2 =*/
                  210
                ).fork()).ldelim();
              if (message.rubySettings != null && Object.hasOwnProperty.call(message, "rubySettings"))
                $root.google.api.RubySettings.encode(message.rubySettings, writer.uint32(
                  /* id 27, wireType 2 =*/
                  218
                ).fork()).ldelim();
              if (message.goSettings != null && Object.hasOwnProperty.call(message, "goSettings"))
                $root.google.api.GoSettings.encode(message.goSettings, writer.uint32(
                  /* id 28, wireType 2 =*/
                  226
                ).fork()).ldelim();
              return writer;
            };
            ClientLibrarySettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ClientLibrarySettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.ClientLibrarySettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.version = reader.string();
                    break;
                  }
                  case 2: {
                    message.launchStage = reader.int32();
                    break;
                  }
                  case 3: {
                    message.restNumericEnums = reader.bool();
                    break;
                  }
                  case 21: {
                    message.javaSettings = $root.google.api.JavaSettings.decode(reader, reader.uint32());
                    break;
                  }
                  case 22: {
                    message.cppSettings = $root.google.api.CppSettings.decode(reader, reader.uint32());
                    break;
                  }
                  case 23: {
                    message.phpSettings = $root.google.api.PhpSettings.decode(reader, reader.uint32());
                    break;
                  }
                  case 24: {
                    message.pythonSettings = $root.google.api.PythonSettings.decode(reader, reader.uint32());
                    break;
                  }
                  case 25: {
                    message.nodeSettings = $root.google.api.NodeSettings.decode(reader, reader.uint32());
                    break;
                  }
                  case 26: {
                    message.dotnetSettings = $root.google.api.DotnetSettings.decode(reader, reader.uint32());
                    break;
                  }
                  case 27: {
                    message.rubySettings = $root.google.api.RubySettings.decode(reader, reader.uint32());
                    break;
                  }
                  case 28: {
                    message.goSettings = $root.google.api.GoSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ClientLibrarySettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ClientLibrarySettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.version != null && message.hasOwnProperty("version")) {
                if (!$util.isString(message.version))
                  return "version: string expected";
              }
              if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                switch (message.launchStage) {
                  default:
                    return "launchStage: enum value expected";
                  case 0:
                  case 6:
                  case 7:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                    break;
                }
              if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums")) {
                if (typeof message.restNumericEnums !== "boolean")
                  return "restNumericEnums: boolean expected";
              }
              if (message.javaSettings != null && message.hasOwnProperty("javaSettings")) {
                var error = $root.google.api.JavaSettings.verify(message.javaSettings);
                if (error)
                  return "javaSettings." + error;
              }
              if (message.cppSettings != null && message.hasOwnProperty("cppSettings")) {
                var error = $root.google.api.CppSettings.verify(message.cppSettings);
                if (error)
                  return "cppSettings." + error;
              }
              if (message.phpSettings != null && message.hasOwnProperty("phpSettings")) {
                var error = $root.google.api.PhpSettings.verify(message.phpSettings);
                if (error)
                  return "phpSettings." + error;
              }
              if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings")) {
                var error = $root.google.api.PythonSettings.verify(message.pythonSettings);
                if (error)
                  return "pythonSettings." + error;
              }
              if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings")) {
                var error = $root.google.api.NodeSettings.verify(message.nodeSettings);
                if (error)
                  return "nodeSettings." + error;
              }
              if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings")) {
                var error = $root.google.api.DotnetSettings.verify(message.dotnetSettings);
                if (error)
                  return "dotnetSettings." + error;
              }
              if (message.rubySettings != null && message.hasOwnProperty("rubySettings")) {
                var error = $root.google.api.RubySettings.verify(message.rubySettings);
                if (error)
                  return "rubySettings." + error;
              }
              if (message.goSettings != null && message.hasOwnProperty("goSettings")) {
                var error = $root.google.api.GoSettings.verify(message.goSettings);
                if (error)
                  return "goSettings." + error;
              }
              return null;
            };
            ClientLibrarySettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.ClientLibrarySettings)
                return object;
              var message = new $root.google.api.ClientLibrarySettings();
              if (object.version != null)
                message.version = String(object.version);
              switch (object.launchStage) {
                default:
                  if (typeof object.launchStage === "number") {
                    message.launchStage = object.launchStage;
                    break;
                  }
                  break;
                case "LAUNCH_STAGE_UNSPECIFIED":
                case 0:
                  message.launchStage = 0;
                  break;
                case "UNIMPLEMENTED":
                case 6:
                  message.launchStage = 6;
                  break;
                case "PRELAUNCH":
                case 7:
                  message.launchStage = 7;
                  break;
                case "EARLY_ACCESS":
                case 1:
                  message.launchStage = 1;
                  break;
                case "ALPHA":
                case 2:
                  message.launchStage = 2;
                  break;
                case "BETA":
                case 3:
                  message.launchStage = 3;
                  break;
                case "GA":
                case 4:
                  message.launchStage = 4;
                  break;
                case "DEPRECATED":
                case 5:
                  message.launchStage = 5;
                  break;
              }
              if (object.restNumericEnums != null)
                message.restNumericEnums = Boolean(object.restNumericEnums);
              if (object.javaSettings != null) {
                if (typeof object.javaSettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.javaSettings: object expected");
                message.javaSettings = $root.google.api.JavaSettings.fromObject(object.javaSettings);
              }
              if (object.cppSettings != null) {
                if (typeof object.cppSettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.cppSettings: object expected");
                message.cppSettings = $root.google.api.CppSettings.fromObject(object.cppSettings);
              }
              if (object.phpSettings != null) {
                if (typeof object.phpSettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.phpSettings: object expected");
                message.phpSettings = $root.google.api.PhpSettings.fromObject(object.phpSettings);
              }
              if (object.pythonSettings != null) {
                if (typeof object.pythonSettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.pythonSettings: object expected");
                message.pythonSettings = $root.google.api.PythonSettings.fromObject(object.pythonSettings);
              }
              if (object.nodeSettings != null) {
                if (typeof object.nodeSettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.nodeSettings: object expected");
                message.nodeSettings = $root.google.api.NodeSettings.fromObject(object.nodeSettings);
              }
              if (object.dotnetSettings != null) {
                if (typeof object.dotnetSettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.dotnetSettings: object expected");
                message.dotnetSettings = $root.google.api.DotnetSettings.fromObject(object.dotnetSettings);
              }
              if (object.rubySettings != null) {
                if (typeof object.rubySettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.rubySettings: object expected");
                message.rubySettings = $root.google.api.RubySettings.fromObject(object.rubySettings);
              }
              if (object.goSettings != null) {
                if (typeof object.goSettings !== "object")
                  throw TypeError(".google.api.ClientLibrarySettings.goSettings: object expected");
                message.goSettings = $root.google.api.GoSettings.fromObject(object.goSettings);
              }
              return message;
            };
            ClientLibrarySettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.version = "";
                object.launchStage = options.enums === String ? "LAUNCH_STAGE_UNSPECIFIED" : 0;
                object.restNumericEnums = false;
                object.javaSettings = null;
                object.cppSettings = null;
                object.phpSettings = null;
                object.pythonSettings = null;
                object.nodeSettings = null;
                object.dotnetSettings = null;
                object.rubySettings = null;
                object.goSettings = null;
              }
              if (message.version != null && message.hasOwnProperty("version"))
                object.version = message.version;
              if (message.launchStage != null && message.hasOwnProperty("launchStage"))
                object.launchStage = options.enums === String ? $root.google.api.LaunchStage[message.launchStage] === void 0 ? message.launchStage : $root.google.api.LaunchStage[message.launchStage] : message.launchStage;
              if (message.restNumericEnums != null && message.hasOwnProperty("restNumericEnums"))
                object.restNumericEnums = message.restNumericEnums;
              if (message.javaSettings != null && message.hasOwnProperty("javaSettings"))
                object.javaSettings = $root.google.api.JavaSettings.toObject(message.javaSettings, options);
              if (message.cppSettings != null && message.hasOwnProperty("cppSettings"))
                object.cppSettings = $root.google.api.CppSettings.toObject(message.cppSettings, options);
              if (message.phpSettings != null && message.hasOwnProperty("phpSettings"))
                object.phpSettings = $root.google.api.PhpSettings.toObject(message.phpSettings, options);
              if (message.pythonSettings != null && message.hasOwnProperty("pythonSettings"))
                object.pythonSettings = $root.google.api.PythonSettings.toObject(message.pythonSettings, options);
              if (message.nodeSettings != null && message.hasOwnProperty("nodeSettings"))
                object.nodeSettings = $root.google.api.NodeSettings.toObject(message.nodeSettings, options);
              if (message.dotnetSettings != null && message.hasOwnProperty("dotnetSettings"))
                object.dotnetSettings = $root.google.api.DotnetSettings.toObject(message.dotnetSettings, options);
              if (message.rubySettings != null && message.hasOwnProperty("rubySettings"))
                object.rubySettings = $root.google.api.RubySettings.toObject(message.rubySettings, options);
              if (message.goSettings != null && message.hasOwnProperty("goSettings"))
                object.goSettings = $root.google.api.GoSettings.toObject(message.goSettings, options);
              return object;
            };
            ClientLibrarySettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ClientLibrarySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.ClientLibrarySettings";
            };
            return ClientLibrarySettings;
          }();
          api.Publishing = function() {
            function Publishing(properties) {
              this.methodSettings = [];
              this.codeownerGithubTeams = [];
              this.librarySettings = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Publishing.prototype.methodSettings = $util.emptyArray;
            Publishing.prototype.newIssueUri = "";
            Publishing.prototype.documentationUri = "";
            Publishing.prototype.apiShortName = "";
            Publishing.prototype.githubLabel = "";
            Publishing.prototype.codeownerGithubTeams = $util.emptyArray;
            Publishing.prototype.docTagPrefix = "";
            Publishing.prototype.organization = 0;
            Publishing.prototype.librarySettings = $util.emptyArray;
            Publishing.create = function create(properties) {
              return new Publishing(properties);
            };
            Publishing.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.methodSettings != null && message.methodSettings.length)
                for (var i = 0; i < message.methodSettings.length; ++i)
                  $root.google.api.MethodSettings.encode(message.methodSettings[i], writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).fork()).ldelim();
              if (message.newIssueUri != null && Object.hasOwnProperty.call(message, "newIssueUri"))
                writer.uint32(
                  /* id 101, wireType 2 =*/
                  810
                ).string(message.newIssueUri);
              if (message.documentationUri != null && Object.hasOwnProperty.call(message, "documentationUri"))
                writer.uint32(
                  /* id 102, wireType 2 =*/
                  818
                ).string(message.documentationUri);
              if (message.apiShortName != null && Object.hasOwnProperty.call(message, "apiShortName"))
                writer.uint32(
                  /* id 103, wireType 2 =*/
                  826
                ).string(message.apiShortName);
              if (message.githubLabel != null && Object.hasOwnProperty.call(message, "githubLabel"))
                writer.uint32(
                  /* id 104, wireType 2 =*/
                  834
                ).string(message.githubLabel);
              if (message.codeownerGithubTeams != null && message.codeownerGithubTeams.length)
                for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                  writer.uint32(
                    /* id 105, wireType 2 =*/
                    842
                  ).string(message.codeownerGithubTeams[i]);
              if (message.docTagPrefix != null && Object.hasOwnProperty.call(message, "docTagPrefix"))
                writer.uint32(
                  /* id 106, wireType 2 =*/
                  850
                ).string(message.docTagPrefix);
              if (message.organization != null && Object.hasOwnProperty.call(message, "organization"))
                writer.uint32(
                  /* id 107, wireType 0 =*/
                  856
                ).int32(message.organization);
              if (message.librarySettings != null && message.librarySettings.length)
                for (var i = 0; i < message.librarySettings.length; ++i)
                  $root.google.api.ClientLibrarySettings.encode(message.librarySettings[i], writer.uint32(
                    /* id 109, wireType 2 =*/
                    874
                  ).fork()).ldelim();
              return writer;
            };
            Publishing.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Publishing.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.Publishing();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 2: {
                    if (!(message.methodSettings && message.methodSettings.length))
                      message.methodSettings = [];
                    message.methodSettings.push($root.google.api.MethodSettings.decode(reader, reader.uint32()));
                    break;
                  }
                  case 101: {
                    message.newIssueUri = reader.string();
                    break;
                  }
                  case 102: {
                    message.documentationUri = reader.string();
                    break;
                  }
                  case 103: {
                    message.apiShortName = reader.string();
                    break;
                  }
                  case 104: {
                    message.githubLabel = reader.string();
                    break;
                  }
                  case 105: {
                    if (!(message.codeownerGithubTeams && message.codeownerGithubTeams.length))
                      message.codeownerGithubTeams = [];
                    message.codeownerGithubTeams.push(reader.string());
                    break;
                  }
                  case 106: {
                    message.docTagPrefix = reader.string();
                    break;
                  }
                  case 107: {
                    message.organization = reader.int32();
                    break;
                  }
                  case 109: {
                    if (!(message.librarySettings && message.librarySettings.length))
                      message.librarySettings = [];
                    message.librarySettings.push($root.google.api.ClientLibrarySettings.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Publishing.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Publishing.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.methodSettings != null && message.hasOwnProperty("methodSettings")) {
                if (!Array.isArray(message.methodSettings))
                  return "methodSettings: array expected";
                for (var i = 0; i < message.methodSettings.length; ++i) {
                  var error = $root.google.api.MethodSettings.verify(message.methodSettings[i]);
                  if (error)
                    return "methodSettings." + error;
                }
              }
              if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri")) {
                if (!$util.isString(message.newIssueUri))
                  return "newIssueUri: string expected";
              }
              if (message.documentationUri != null && message.hasOwnProperty("documentationUri")) {
                if (!$util.isString(message.documentationUri))
                  return "documentationUri: string expected";
              }
              if (message.apiShortName != null && message.hasOwnProperty("apiShortName")) {
                if (!$util.isString(message.apiShortName))
                  return "apiShortName: string expected";
              }
              if (message.githubLabel != null && message.hasOwnProperty("githubLabel")) {
                if (!$util.isString(message.githubLabel))
                  return "githubLabel: string expected";
              }
              if (message.codeownerGithubTeams != null && message.hasOwnProperty("codeownerGithubTeams")) {
                if (!Array.isArray(message.codeownerGithubTeams))
                  return "codeownerGithubTeams: array expected";
                for (var i = 0; i < message.codeownerGithubTeams.length; ++i)
                  if (!$util.isString(message.codeownerGithubTeams[i]))
                    return "codeownerGithubTeams: string[] expected";
              }
              if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix")) {
                if (!$util.isString(message.docTagPrefix))
                  return "docTagPrefix: string expected";
              }
              if (message.organization != null && message.hasOwnProperty("organization"))
                switch (message.organization) {
                  default:
                    return "organization: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                    break;
                }
              if (message.librarySettings != null && message.hasOwnProperty("librarySettings")) {
                if (!Array.isArray(message.librarySettings))
                  return "librarySettings: array expected";
                for (var i = 0; i < message.librarySettings.length; ++i) {
                  var error = $root.google.api.ClientLibrarySettings.verify(message.librarySettings[i]);
                  if (error)
                    return "librarySettings." + error;
                }
              }
              return null;
            };
            Publishing.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.Publishing)
                return object;
              var message = new $root.google.api.Publishing();
              if (object.methodSettings) {
                if (!Array.isArray(object.methodSettings))
                  throw TypeError(".google.api.Publishing.methodSettings: array expected");
                message.methodSettings = [];
                for (var i = 0; i < object.methodSettings.length; ++i) {
                  if (typeof object.methodSettings[i] !== "object")
                    throw TypeError(".google.api.Publishing.methodSettings: object expected");
                  message.methodSettings[i] = $root.google.api.MethodSettings.fromObject(object.methodSettings[i]);
                }
              }
              if (object.newIssueUri != null)
                message.newIssueUri = String(object.newIssueUri);
              if (object.documentationUri != null)
                message.documentationUri = String(object.documentationUri);
              if (object.apiShortName != null)
                message.apiShortName = String(object.apiShortName);
              if (object.githubLabel != null)
                message.githubLabel = String(object.githubLabel);
              if (object.codeownerGithubTeams) {
                if (!Array.isArray(object.codeownerGithubTeams))
                  throw TypeError(".google.api.Publishing.codeownerGithubTeams: array expected");
                message.codeownerGithubTeams = [];
                for (var i = 0; i < object.codeownerGithubTeams.length; ++i)
                  message.codeownerGithubTeams[i] = String(object.codeownerGithubTeams[i]);
              }
              if (object.docTagPrefix != null)
                message.docTagPrefix = String(object.docTagPrefix);
              switch (object.organization) {
                default:
                  if (typeof object.organization === "number") {
                    message.organization = object.organization;
                    break;
                  }
                  break;
                case "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED":
                case 0:
                  message.organization = 0;
                  break;
                case "CLOUD":
                case 1:
                  message.organization = 1;
                  break;
                case "ADS":
                case 2:
                  message.organization = 2;
                  break;
                case "PHOTOS":
                case 3:
                  message.organization = 3;
                  break;
                case "STREET_VIEW":
                case 4:
                  message.organization = 4;
                  break;
              }
              if (object.librarySettings) {
                if (!Array.isArray(object.librarySettings))
                  throw TypeError(".google.api.Publishing.librarySettings: array expected");
                message.librarySettings = [];
                for (var i = 0; i < object.librarySettings.length; ++i) {
                  if (typeof object.librarySettings[i] !== "object")
                    throw TypeError(".google.api.Publishing.librarySettings: object expected");
                  message.librarySettings[i] = $root.google.api.ClientLibrarySettings.fromObject(object.librarySettings[i]);
                }
              }
              return message;
            };
            Publishing.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.methodSettings = [];
                object.codeownerGithubTeams = [];
                object.librarySettings = [];
              }
              if (options.defaults) {
                object.newIssueUri = "";
                object.documentationUri = "";
                object.apiShortName = "";
                object.githubLabel = "";
                object.docTagPrefix = "";
                object.organization = options.enums === String ? "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED" : 0;
              }
              if (message.methodSettings && message.methodSettings.length) {
                object.methodSettings = [];
                for (var j = 0; j < message.methodSettings.length; ++j)
                  object.methodSettings[j] = $root.google.api.MethodSettings.toObject(message.methodSettings[j], options);
              }
              if (message.newIssueUri != null && message.hasOwnProperty("newIssueUri"))
                object.newIssueUri = message.newIssueUri;
              if (message.documentationUri != null && message.hasOwnProperty("documentationUri"))
                object.documentationUri = message.documentationUri;
              if (message.apiShortName != null && message.hasOwnProperty("apiShortName"))
                object.apiShortName = message.apiShortName;
              if (message.githubLabel != null && message.hasOwnProperty("githubLabel"))
                object.githubLabel = message.githubLabel;
              if (message.codeownerGithubTeams && message.codeownerGithubTeams.length) {
                object.codeownerGithubTeams = [];
                for (var j = 0; j < message.codeownerGithubTeams.length; ++j)
                  object.codeownerGithubTeams[j] = message.codeownerGithubTeams[j];
              }
              if (message.docTagPrefix != null && message.hasOwnProperty("docTagPrefix"))
                object.docTagPrefix = message.docTagPrefix;
              if (message.organization != null && message.hasOwnProperty("organization"))
                object.organization = options.enums === String ? $root.google.api.ClientLibraryOrganization[message.organization] === void 0 ? message.organization : $root.google.api.ClientLibraryOrganization[message.organization] : message.organization;
              if (message.librarySettings && message.librarySettings.length) {
                object.librarySettings = [];
                for (var j = 0; j < message.librarySettings.length; ++j)
                  object.librarySettings[j] = $root.google.api.ClientLibrarySettings.toObject(message.librarySettings[j], options);
              }
              return object;
            };
            Publishing.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Publishing.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.Publishing";
            };
            return Publishing;
          }();
          api.JavaSettings = function() {
            function JavaSettings(properties) {
              this.serviceClassNames = {};
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            JavaSettings.prototype.libraryPackage = "";
            JavaSettings.prototype.serviceClassNames = $util.emptyObject;
            JavaSettings.prototype.common = null;
            JavaSettings.create = function create(properties) {
              return new JavaSettings(properties);
            };
            JavaSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.libraryPackage != null && Object.hasOwnProperty.call(message, "libraryPackage"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.libraryPackage);
              if (message.serviceClassNames != null && Object.hasOwnProperty.call(message, "serviceClassNames"))
                for (var keys = Object.keys(message.serviceClassNames), i = 0; i < keys.length; ++i)
                  writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).fork().uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).string(keys[i]).uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).string(message.serviceClassNames[keys[i]]).ldelim();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).fork()).ldelim();
              return writer;
            };
            JavaSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            JavaSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.JavaSettings(), key, value;
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.libraryPackage = reader.string();
                    break;
                  }
                  case 2: {
                    if (message.serviceClassNames === $util.emptyObject)
                      message.serviceClassNames = {};
                    var end2 = reader.uint32() + reader.pos;
                    key = "";
                    value = "";
                    while (reader.pos < end2) {
                      var tag2 = reader.uint32();
                      switch (tag2 >>> 3) {
                        case 1:
                          key = reader.string();
                          break;
                        case 2:
                          value = reader.string();
                          break;
                        default:
                          reader.skipType(tag2 & 7);
                          break;
                      }
                    }
                    message.serviceClassNames[key] = value;
                    break;
                  }
                  case 3: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            JavaSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            JavaSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage")) {
                if (!$util.isString(message.libraryPackage))
                  return "libraryPackage: string expected";
              }
              if (message.serviceClassNames != null && message.hasOwnProperty("serviceClassNames")) {
                if (!$util.isObject(message.serviceClassNames))
                  return "serviceClassNames: object expected";
                var key = Object.keys(message.serviceClassNames);
                for (var i = 0; i < key.length; ++i)
                  if (!$util.isString(message.serviceClassNames[key[i]]))
                    return "serviceClassNames: string{k:string} expected";
              }
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            JavaSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.JavaSettings)
                return object;
              var message = new $root.google.api.JavaSettings();
              if (object.libraryPackage != null)
                message.libraryPackage = String(object.libraryPackage);
              if (object.serviceClassNames) {
                if (typeof object.serviceClassNames !== "object")
                  throw TypeError(".google.api.JavaSettings.serviceClassNames: object expected");
                message.serviceClassNames = {};
                for (var keys = Object.keys(object.serviceClassNames), i = 0; i < keys.length; ++i)
                  message.serviceClassNames[keys[i]] = String(object.serviceClassNames[keys[i]]);
              }
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.JavaSettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            JavaSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.objects || options.defaults)
                object.serviceClassNames = {};
              if (options.defaults) {
                object.libraryPackage = "";
                object.common = null;
              }
              if (message.libraryPackage != null && message.hasOwnProperty("libraryPackage"))
                object.libraryPackage = message.libraryPackage;
              var keys2;
              if (message.serviceClassNames && (keys2 = Object.keys(message.serviceClassNames)).length) {
                object.serviceClassNames = {};
                for (var j = 0; j < keys2.length; ++j)
                  object.serviceClassNames[keys2[j]] = message.serviceClassNames[keys2[j]];
              }
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            JavaSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            JavaSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.JavaSettings";
            };
            return JavaSettings;
          }();
          api.CppSettings = function() {
            function CppSettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            CppSettings.prototype.common = null;
            CppSettings.create = function create(properties) {
              return new CppSettings(properties);
            };
            CppSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
              return writer;
            };
            CppSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            CppSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.CppSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            CppSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            CppSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            CppSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.CppSettings)
                return object;
              var message = new $root.google.api.CppSettings();
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.CppSettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            CppSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.common = null;
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            CppSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            CppSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.CppSettings";
            };
            return CppSettings;
          }();
          api.PhpSettings = function() {
            function PhpSettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            PhpSettings.prototype.common = null;
            PhpSettings.create = function create(properties) {
              return new PhpSettings(properties);
            };
            PhpSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
              return writer;
            };
            PhpSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            PhpSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.PhpSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            PhpSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            PhpSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            PhpSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.PhpSettings)
                return object;
              var message = new $root.google.api.PhpSettings();
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.PhpSettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            PhpSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.common = null;
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            PhpSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            PhpSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.PhpSettings";
            };
            return PhpSettings;
          }();
          api.PythonSettings = function() {
            function PythonSettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            PythonSettings.prototype.common = null;
            PythonSettings.create = function create(properties) {
              return new PythonSettings(properties);
            };
            PythonSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
              return writer;
            };
            PythonSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            PythonSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.PythonSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            PythonSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            PythonSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            PythonSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.PythonSettings)
                return object;
              var message = new $root.google.api.PythonSettings();
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.PythonSettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            PythonSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.common = null;
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            PythonSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            PythonSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.PythonSettings";
            };
            return PythonSettings;
          }();
          api.NodeSettings = function() {
            function NodeSettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            NodeSettings.prototype.common = null;
            NodeSettings.create = function create(properties) {
              return new NodeSettings(properties);
            };
            NodeSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
              return writer;
            };
            NodeSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            NodeSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.NodeSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            NodeSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            NodeSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            NodeSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.NodeSettings)
                return object;
              var message = new $root.google.api.NodeSettings();
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.NodeSettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            NodeSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.common = null;
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            NodeSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            NodeSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.NodeSettings";
            };
            return NodeSettings;
          }();
          api.DotnetSettings = function() {
            function DotnetSettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            DotnetSettings.prototype.common = null;
            DotnetSettings.create = function create(properties) {
              return new DotnetSettings(properties);
            };
            DotnetSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
              return writer;
            };
            DotnetSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            DotnetSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.DotnetSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            DotnetSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            DotnetSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            DotnetSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.DotnetSettings)
                return object;
              var message = new $root.google.api.DotnetSettings();
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.DotnetSettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            DotnetSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.common = null;
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            DotnetSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            DotnetSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.DotnetSettings";
            };
            return DotnetSettings;
          }();
          api.RubySettings = function() {
            function RubySettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            RubySettings.prototype.common = null;
            RubySettings.create = function create(properties) {
              return new RubySettings(properties);
            };
            RubySettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
              return writer;
            };
            RubySettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            RubySettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.RubySettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            RubySettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            RubySettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            RubySettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.RubySettings)
                return object;
              var message = new $root.google.api.RubySettings();
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.RubySettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            RubySettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.common = null;
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            RubySettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            RubySettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.RubySettings";
            };
            return RubySettings;
          }();
          api.GoSettings = function() {
            function GoSettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            GoSettings.prototype.common = null;
            GoSettings.create = function create(properties) {
              return new GoSettings(properties);
            };
            GoSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.common != null && Object.hasOwnProperty.call(message, "common"))
                $root.google.api.CommonLanguageSettings.encode(message.common, writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).fork()).ldelim();
              return writer;
            };
            GoSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            GoSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.GoSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.common = $root.google.api.CommonLanguageSettings.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            GoSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            GoSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.common != null && message.hasOwnProperty("common")) {
                var error = $root.google.api.CommonLanguageSettings.verify(message.common);
                if (error)
                  return "common." + error;
              }
              return null;
            };
            GoSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.GoSettings)
                return object;
              var message = new $root.google.api.GoSettings();
              if (object.common != null) {
                if (typeof object.common !== "object")
                  throw TypeError(".google.api.GoSettings.common: object expected");
                message.common = $root.google.api.CommonLanguageSettings.fromObject(object.common);
              }
              return message;
            };
            GoSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.common = null;
              if (message.common != null && message.hasOwnProperty("common"))
                object.common = $root.google.api.CommonLanguageSettings.toObject(message.common, options);
              return object;
            };
            GoSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            GoSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.GoSettings";
            };
            return GoSettings;
          }();
          api.MethodSettings = function() {
            function MethodSettings(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MethodSettings.prototype.selector = "";
            MethodSettings.prototype.longRunning = null;
            MethodSettings.create = function create(properties) {
              return new MethodSettings(properties);
            };
            MethodSettings.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.selector);
              if (message.longRunning != null && Object.hasOwnProperty.call(message, "longRunning"))
                $root.google.api.MethodSettings.LongRunning.encode(message.longRunning, writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).fork()).ldelim();
              return writer;
            };
            MethodSettings.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MethodSettings.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.selector = reader.string();
                    break;
                  }
                  case 2: {
                    message.longRunning = $root.google.api.MethodSettings.LongRunning.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MethodSettings.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MethodSettings.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.selector != null && message.hasOwnProperty("selector")) {
                if (!$util.isString(message.selector))
                  return "selector: string expected";
              }
              if (message.longRunning != null && message.hasOwnProperty("longRunning")) {
                var error = $root.google.api.MethodSettings.LongRunning.verify(message.longRunning);
                if (error)
                  return "longRunning." + error;
              }
              return null;
            };
            MethodSettings.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.MethodSettings)
                return object;
              var message = new $root.google.api.MethodSettings();
              if (object.selector != null)
                message.selector = String(object.selector);
              if (object.longRunning != null) {
                if (typeof object.longRunning !== "object")
                  throw TypeError(".google.api.MethodSettings.longRunning: object expected");
                message.longRunning = $root.google.api.MethodSettings.LongRunning.fromObject(object.longRunning);
              }
              return message;
            };
            MethodSettings.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.selector = "";
                object.longRunning = null;
              }
              if (message.selector != null && message.hasOwnProperty("selector"))
                object.selector = message.selector;
              if (message.longRunning != null && message.hasOwnProperty("longRunning"))
                object.longRunning = $root.google.api.MethodSettings.LongRunning.toObject(message.longRunning, options);
              return object;
            };
            MethodSettings.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            MethodSettings.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.MethodSettings";
            };
            MethodSettings.LongRunning = function() {
              function LongRunning(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              LongRunning.prototype.initialPollDelay = null;
              LongRunning.prototype.pollDelayMultiplier = 0;
              LongRunning.prototype.maxPollDelay = null;
              LongRunning.prototype.totalPollTimeout = null;
              LongRunning.create = function create(properties) {
                return new LongRunning(properties);
              };
              LongRunning.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.initialPollDelay != null && Object.hasOwnProperty.call(message, "initialPollDelay"))
                  $root.google.protobuf.Duration.encode(message.initialPollDelay, writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork()).ldelim();
                if (message.pollDelayMultiplier != null && Object.hasOwnProperty.call(message, "pollDelayMultiplier"))
                  writer.uint32(
                    /* id 2, wireType 5 =*/
                    21
                  ).float(message.pollDelayMultiplier);
                if (message.maxPollDelay != null && Object.hasOwnProperty.call(message, "maxPollDelay"))
                  $root.google.protobuf.Duration.encode(message.maxPollDelay, writer.uint32(
                    /* id 3, wireType 2 =*/
                    26
                  ).fork()).ldelim();
                if (message.totalPollTimeout != null && Object.hasOwnProperty.call(message, "totalPollTimeout"))
                  $root.google.protobuf.Duration.encode(message.totalPollTimeout, writer.uint32(
                    /* id 4, wireType 2 =*/
                    34
                  ).fork()).ldelim();
                return writer;
              };
              LongRunning.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              LongRunning.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.MethodSettings.LongRunning();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1: {
                      message.initialPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                      break;
                    }
                    case 2: {
                      message.pollDelayMultiplier = reader.float();
                      break;
                    }
                    case 3: {
                      message.maxPollDelay = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                      break;
                    }
                    case 4: {
                      message.totalPollTimeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                      break;
                    }
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              LongRunning.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              LongRunning.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay")) {
                  var error = $root.google.protobuf.Duration.verify(message.initialPollDelay);
                  if (error)
                    return "initialPollDelay." + error;
                }
                if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier")) {
                  if (typeof message.pollDelayMultiplier !== "number")
                    return "pollDelayMultiplier: number expected";
                }
                if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay")) {
                  var error = $root.google.protobuf.Duration.verify(message.maxPollDelay);
                  if (error)
                    return "maxPollDelay." + error;
                }
                if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout")) {
                  var error = $root.google.protobuf.Duration.verify(message.totalPollTimeout);
                  if (error)
                    return "totalPollTimeout." + error;
                }
                return null;
              };
              LongRunning.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.MethodSettings.LongRunning)
                  return object;
                var message = new $root.google.api.MethodSettings.LongRunning();
                if (object.initialPollDelay != null) {
                  if (typeof object.initialPollDelay !== "object")
                    throw TypeError(".google.api.MethodSettings.LongRunning.initialPollDelay: object expected");
                  message.initialPollDelay = $root.google.protobuf.Duration.fromObject(object.initialPollDelay);
                }
                if (object.pollDelayMultiplier != null)
                  message.pollDelayMultiplier = Number(object.pollDelayMultiplier);
                if (object.maxPollDelay != null) {
                  if (typeof object.maxPollDelay !== "object")
                    throw TypeError(".google.api.MethodSettings.LongRunning.maxPollDelay: object expected");
                  message.maxPollDelay = $root.google.protobuf.Duration.fromObject(object.maxPollDelay);
                }
                if (object.totalPollTimeout != null) {
                  if (typeof object.totalPollTimeout !== "object")
                    throw TypeError(".google.api.MethodSettings.LongRunning.totalPollTimeout: object expected");
                  message.totalPollTimeout = $root.google.protobuf.Duration.fromObject(object.totalPollTimeout);
                }
                return message;
              };
              LongRunning.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.initialPollDelay = null;
                  object.pollDelayMultiplier = 0;
                  object.maxPollDelay = null;
                  object.totalPollTimeout = null;
                }
                if (message.initialPollDelay != null && message.hasOwnProperty("initialPollDelay"))
                  object.initialPollDelay = $root.google.protobuf.Duration.toObject(message.initialPollDelay, options);
                if (message.pollDelayMultiplier != null && message.hasOwnProperty("pollDelayMultiplier"))
                  object.pollDelayMultiplier = options.json && !isFinite(message.pollDelayMultiplier) ? String(message.pollDelayMultiplier) : message.pollDelayMultiplier;
                if (message.maxPollDelay != null && message.hasOwnProperty("maxPollDelay"))
                  object.maxPollDelay = $root.google.protobuf.Duration.toObject(message.maxPollDelay, options);
                if (message.totalPollTimeout != null && message.hasOwnProperty("totalPollTimeout"))
                  object.totalPollTimeout = $root.google.protobuf.Duration.toObject(message.totalPollTimeout, options);
                return object;
              };
              LongRunning.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              LongRunning.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.api.MethodSettings.LongRunning";
              };
              return LongRunning;
            }();
            return MethodSettings;
          }();
          api.ClientLibraryOrganization = function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED"] = 0;
            values[valuesById[1] = "CLOUD"] = 1;
            values[valuesById[2] = "ADS"] = 2;
            values[valuesById[3] = "PHOTOS"] = 3;
            values[valuesById[4] = "STREET_VIEW"] = 4;
            return values;
          }();
          api.ClientLibraryDestination = function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "CLIENT_LIBRARY_DESTINATION_UNSPECIFIED"] = 0;
            values[valuesById[10] = "GITHUB"] = 10;
            values[valuesById[20] = "PACKAGE_MANAGER"] = 20;
            return values;
          }();
          api.LaunchStage = function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "LAUNCH_STAGE_UNSPECIFIED"] = 0;
            values[valuesById[6] = "UNIMPLEMENTED"] = 6;
            values[valuesById[7] = "PRELAUNCH"] = 7;
            values[valuesById[1] = "EARLY_ACCESS"] = 1;
            values[valuesById[2] = "ALPHA"] = 2;
            values[valuesById[3] = "BETA"] = 3;
            values[valuesById[4] = "GA"] = 4;
            values[valuesById[5] = "DEPRECATED"] = 5;
            return values;
          }();
          api.FieldBehavior = function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "FIELD_BEHAVIOR_UNSPECIFIED"] = 0;
            values[valuesById[1] = "OPTIONAL"] = 1;
            values[valuesById[2] = "REQUIRED"] = 2;
            values[valuesById[3] = "OUTPUT_ONLY"] = 3;
            values[valuesById[4] = "INPUT_ONLY"] = 4;
            values[valuesById[5] = "IMMUTABLE"] = 5;
            values[valuesById[6] = "UNORDERED_LIST"] = 6;
            values[valuesById[7] = "NON_EMPTY_DEFAULT"] = 7;
            return values;
          }();
          api.ResourceDescriptor = function() {
            function ResourceDescriptor(properties) {
              this.pattern = [];
              this.style = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ResourceDescriptor.prototype.type = "";
            ResourceDescriptor.prototype.pattern = $util.emptyArray;
            ResourceDescriptor.prototype.nameField = "";
            ResourceDescriptor.prototype.history = 0;
            ResourceDescriptor.prototype.plural = "";
            ResourceDescriptor.prototype.singular = "";
            ResourceDescriptor.prototype.style = $util.emptyArray;
            ResourceDescriptor.create = function create(properties) {
              return new ResourceDescriptor(properties);
            };
            ResourceDescriptor.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.type);
              if (message.pattern != null && message.pattern.length)
                for (var i = 0; i < message.pattern.length; ++i)
                  writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).string(message.pattern[i]);
              if (message.nameField != null && Object.hasOwnProperty.call(message, "nameField"))
                writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).string(message.nameField);
              if (message.history != null && Object.hasOwnProperty.call(message, "history"))
                writer.uint32(
                  /* id 4, wireType 0 =*/
                  32
                ).int32(message.history);
              if (message.plural != null && Object.hasOwnProperty.call(message, "plural"))
                writer.uint32(
                  /* id 5, wireType 2 =*/
                  42
                ).string(message.plural);
              if (message.singular != null && Object.hasOwnProperty.call(message, "singular"))
                writer.uint32(
                  /* id 6, wireType 2 =*/
                  50
                ).string(message.singular);
              if (message.style != null && message.style.length) {
                writer.uint32(
                  /* id 10, wireType 2 =*/
                  82
                ).fork();
                for (var i = 0; i < message.style.length; ++i)
                  writer.int32(message.style[i]);
                writer.ldelim();
              }
              return writer;
            };
            ResourceDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ResourceDescriptor.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.ResourceDescriptor();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.type = reader.string();
                    break;
                  }
                  case 2: {
                    if (!(message.pattern && message.pattern.length))
                      message.pattern = [];
                    message.pattern.push(reader.string());
                    break;
                  }
                  case 3: {
                    message.nameField = reader.string();
                    break;
                  }
                  case 4: {
                    message.history = reader.int32();
                    break;
                  }
                  case 5: {
                    message.plural = reader.string();
                    break;
                  }
                  case 6: {
                    message.singular = reader.string();
                    break;
                  }
                  case 10: {
                    if (!(message.style && message.style.length))
                      message.style = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message.style.push(reader.int32());
                    } else
                      message.style.push(reader.int32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ResourceDescriptor.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ResourceDescriptor.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.type != null && message.hasOwnProperty("type")) {
                if (!$util.isString(message.type))
                  return "type: string expected";
              }
              if (message.pattern != null && message.hasOwnProperty("pattern")) {
                if (!Array.isArray(message.pattern))
                  return "pattern: array expected";
                for (var i = 0; i < message.pattern.length; ++i)
                  if (!$util.isString(message.pattern[i]))
                    return "pattern: string[] expected";
              }
              if (message.nameField != null && message.hasOwnProperty("nameField")) {
                if (!$util.isString(message.nameField))
                  return "nameField: string expected";
              }
              if (message.history != null && message.hasOwnProperty("history"))
                switch (message.history) {
                  default:
                    return "history: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.plural != null && message.hasOwnProperty("plural")) {
                if (!$util.isString(message.plural))
                  return "plural: string expected";
              }
              if (message.singular != null && message.hasOwnProperty("singular")) {
                if (!$util.isString(message.singular))
                  return "singular: string expected";
              }
              if (message.style != null && message.hasOwnProperty("style")) {
                if (!Array.isArray(message.style))
                  return "style: array expected";
                for (var i = 0; i < message.style.length; ++i)
                  switch (message.style[i]) {
                    default:
                      return "style: enum value[] expected";
                    case 0:
                    case 1:
                      break;
                  }
              }
              return null;
            };
            ResourceDescriptor.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.ResourceDescriptor)
                return object;
              var message = new $root.google.api.ResourceDescriptor();
              if (object.type != null)
                message.type = String(object.type);
              if (object.pattern) {
                if (!Array.isArray(object.pattern))
                  throw TypeError(".google.api.ResourceDescriptor.pattern: array expected");
                message.pattern = [];
                for (var i = 0; i < object.pattern.length; ++i)
                  message.pattern[i] = String(object.pattern[i]);
              }
              if (object.nameField != null)
                message.nameField = String(object.nameField);
              switch (object.history) {
                default:
                  if (typeof object.history === "number") {
                    message.history = object.history;
                    break;
                  }
                  break;
                case "HISTORY_UNSPECIFIED":
                case 0:
                  message.history = 0;
                  break;
                case "ORIGINALLY_SINGLE_PATTERN":
                case 1:
                  message.history = 1;
                  break;
                case "FUTURE_MULTI_PATTERN":
                case 2:
                  message.history = 2;
                  break;
              }
              if (object.plural != null)
                message.plural = String(object.plural);
              if (object.singular != null)
                message.singular = String(object.singular);
              if (object.style) {
                if (!Array.isArray(object.style))
                  throw TypeError(".google.api.ResourceDescriptor.style: array expected");
                message.style = [];
                for (var i = 0; i < object.style.length; ++i)
                  switch (object.style[i]) {
                    default:
                      if (typeof object.style[i] === "number") {
                        message.style[i] = object.style[i];
                        break;
                      }
                    case "STYLE_UNSPECIFIED":
                    case 0:
                      message.style[i] = 0;
                      break;
                    case "DECLARATIVE_FRIENDLY":
                    case 1:
                      message.style[i] = 1;
                      break;
                  }
              }
              return message;
            };
            ResourceDescriptor.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.pattern = [];
                object.style = [];
              }
              if (options.defaults) {
                object.type = "";
                object.nameField = "";
                object.history = options.enums === String ? "HISTORY_UNSPECIFIED" : 0;
                object.plural = "";
                object.singular = "";
              }
              if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
              if (message.pattern && message.pattern.length) {
                object.pattern = [];
                for (var j = 0; j < message.pattern.length; ++j)
                  object.pattern[j] = message.pattern[j];
              }
              if (message.nameField != null && message.hasOwnProperty("nameField"))
                object.nameField = message.nameField;
              if (message.history != null && message.hasOwnProperty("history"))
                object.history = options.enums === String ? $root.google.api.ResourceDescriptor.History[message.history] === void 0 ? message.history : $root.google.api.ResourceDescriptor.History[message.history] : message.history;
              if (message.plural != null && message.hasOwnProperty("plural"))
                object.plural = message.plural;
              if (message.singular != null && message.hasOwnProperty("singular"))
                object.singular = message.singular;
              if (message.style && message.style.length) {
                object.style = [];
                for (var j = 0; j < message.style.length; ++j)
                  object.style[j] = options.enums === String ? $root.google.api.ResourceDescriptor.Style[message.style[j]] === void 0 ? message.style[j] : $root.google.api.ResourceDescriptor.Style[message.style[j]] : message.style[j];
              }
              return object;
            };
            ResourceDescriptor.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ResourceDescriptor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.ResourceDescriptor";
            };
            ResourceDescriptor.History = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "HISTORY_UNSPECIFIED"] = 0;
              values[valuesById[1] = "ORIGINALLY_SINGLE_PATTERN"] = 1;
              values[valuesById[2] = "FUTURE_MULTI_PATTERN"] = 2;
              return values;
            }();
            ResourceDescriptor.Style = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "STYLE_UNSPECIFIED"] = 0;
              values[valuesById[1] = "DECLARATIVE_FRIENDLY"] = 1;
              return values;
            }();
            return ResourceDescriptor;
          }();
          api.ResourceReference = function() {
            function ResourceReference(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ResourceReference.prototype.type = "";
            ResourceReference.prototype.childType = "";
            ResourceReference.create = function create(properties) {
              return new ResourceReference(properties);
            };
            ResourceReference.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.type);
              if (message.childType != null && Object.hasOwnProperty.call(message, "childType"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.childType);
              return writer;
            };
            ResourceReference.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ResourceReference.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.api.ResourceReference();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.type = reader.string();
                    break;
                  }
                  case 2: {
                    message.childType = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ResourceReference.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ResourceReference.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.type != null && message.hasOwnProperty("type")) {
                if (!$util.isString(message.type))
                  return "type: string expected";
              }
              if (message.childType != null && message.hasOwnProperty("childType")) {
                if (!$util.isString(message.childType))
                  return "childType: string expected";
              }
              return null;
            };
            ResourceReference.fromObject = function fromObject(object) {
              if (object instanceof $root.google.api.ResourceReference)
                return object;
              var message = new $root.google.api.ResourceReference();
              if (object.type != null)
                message.type = String(object.type);
              if (object.childType != null)
                message.childType = String(object.childType);
              return message;
            };
            ResourceReference.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.type = "";
                object.childType = "";
              }
              if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
              if (message.childType != null && message.hasOwnProperty("childType"))
                object.childType = message.childType;
              return object;
            };
            ResourceReference.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ResourceReference.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.api.ResourceReference";
            };
            return ResourceReference;
          }();
          return api;
        }();
        google.protobuf = function() {
          var protobuf = {};
          protobuf.FileDescriptorSet = function() {
            function FileDescriptorSet(properties) {
              this.file = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileDescriptorSet.prototype.file = $util.emptyArray;
            FileDescriptorSet.create = function create(properties) {
              return new FileDescriptorSet(properties);
            };
            FileDescriptorSet.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.file != null && message.file.length)
                for (var i = 0; i < message.file.length; ++i)
                  $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork()).ldelim();
              return writer;
            };
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FileDescriptorSet.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    if (!(message.file && message.file.length))
                      message.file = [];
                    message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FileDescriptorSet.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.file != null && message.hasOwnProperty("file")) {
                if (!Array.isArray(message.file))
                  return "file: array expected";
                for (var i = 0; i < message.file.length; ++i) {
                  var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                  if (error)
                    return "file." + error;
                }
              }
              return null;
            };
            FileDescriptorSet.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileDescriptorSet)
                return object;
              var message = new $root.google.protobuf.FileDescriptorSet();
              if (object.file) {
                if (!Array.isArray(object.file))
                  throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                message.file = [];
                for (var i = 0; i < object.file.length; ++i) {
                  if (typeof object.file[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                  message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                }
              }
              return message;
            };
            FileDescriptorSet.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.file = [];
              if (message.file && message.file.length) {
                object.file = [];
                for (var j = 0; j < message.file.length; ++j)
                  object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
              }
              return object;
            };
            FileDescriptorSet.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FileDescriptorSet";
            };
            return FileDescriptorSet;
          }();
          protobuf.FileDescriptorProto = function() {
            function FileDescriptorProto(properties) {
              this.dependency = [];
              this.publicDependency = [];
              this.weakDependency = [];
              this.messageType = [];
              this.enumType = [];
              this.service = [];
              this.extension = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileDescriptorProto.prototype.name = "";
            FileDescriptorProto.prototype["package"] = "";
            FileDescriptorProto.prototype.dependency = $util.emptyArray;
            FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
            FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
            FileDescriptorProto.prototype.messageType = $util.emptyArray;
            FileDescriptorProto.prototype.enumType = $util.emptyArray;
            FileDescriptorProto.prototype.service = $util.emptyArray;
            FileDescriptorProto.prototype.extension = $util.emptyArray;
            FileDescriptorProto.prototype.options = null;
            FileDescriptorProto.prototype.sourceCodeInfo = null;
            FileDescriptorProto.prototype.syntax = "";
            FileDescriptorProto.prototype.edition = "";
            FileDescriptorProto.create = function create(properties) {
              return new FileDescriptorProto(properties);
            };
            FileDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message["package"]);
              if (message.dependency != null && message.dependency.length)
                for (var i = 0; i < message.dependency.length; ++i)
                  writer.uint32(
                    /* id 3, wireType 2 =*/
                    26
                  ).string(message.dependency[i]);
              if (message.messageType != null && message.messageType.length)
                for (var i = 0; i < message.messageType.length; ++i)
                  $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(
                    /* id 4, wireType 2 =*/
                    34
                  ).fork()).ldelim();
              if (message.enumType != null && message.enumType.length)
                for (var i = 0; i < message.enumType.length; ++i)
                  $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(
                    /* id 5, wireType 2 =*/
                    42
                  ).fork()).ldelim();
              if (message.service != null && message.service.length)
                for (var i = 0; i < message.service.length; ++i)
                  $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(
                    /* id 6, wireType 2 =*/
                    50
                  ).fork()).ldelim();
              if (message.extension != null && message.extension.length)
                for (var i = 0; i < message.extension.length; ++i)
                  $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(
                    /* id 7, wireType 2 =*/
                    58
                  ).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(
                  /* id 8, wireType 2 =*/
                  66
                ).fork()).ldelim();
              if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(
                  /* id 9, wireType 2 =*/
                  74
                ).fork()).ldelim();
              if (message.publicDependency != null && message.publicDependency.length)
                for (var i = 0; i < message.publicDependency.length; ++i)
                  writer.uint32(
                    /* id 10, wireType 0 =*/
                    80
                  ).int32(message.publicDependency[i]);
              if (message.weakDependency != null && message.weakDependency.length)
                for (var i = 0; i < message.weakDependency.length; ++i)
                  writer.uint32(
                    /* id 11, wireType 0 =*/
                    88
                  ).int32(message.weakDependency[i]);
              if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                writer.uint32(
                  /* id 12, wireType 2 =*/
                  98
                ).string(message.syntax);
              if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                writer.uint32(
                  /* id 13, wireType 2 =*/
                  106
                ).string(message.edition);
              return writer;
            };
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FileDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    message["package"] = reader.string();
                    break;
                  }
                  case 3: {
                    if (!(message.dependency && message.dependency.length))
                      message.dependency = [];
                    message.dependency.push(reader.string());
                    break;
                  }
                  case 10: {
                    if (!(message.publicDependency && message.publicDependency.length))
                      message.publicDependency = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message.publicDependency.push(reader.int32());
                    } else
                      message.publicDependency.push(reader.int32());
                    break;
                  }
                  case 11: {
                    if (!(message.weakDependency && message.weakDependency.length))
                      message.weakDependency = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message.weakDependency.push(reader.int32());
                    } else
                      message.weakDependency.push(reader.int32());
                    break;
                  }
                  case 4: {
                    if (!(message.messageType && message.messageType.length))
                      message.messageType = [];
                    message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 5: {
                    if (!(message.enumType && message.enumType.length))
                      message.enumType = [];
                    message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 6: {
                    if (!(message.service && message.service.length))
                      message.service = [];
                    message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 7: {
                    if (!(message.extension && message.extension.length))
                      message.extension = [];
                    message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 8: {
                    message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                    break;
                  }
                  case 9: {
                    message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                    break;
                  }
                  case 12: {
                    message.syntax = reader.string();
                    break;
                  }
                  case 13: {
                    message.edition = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FileDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message["package"] != null && message.hasOwnProperty("package")) {
                if (!$util.isString(message["package"]))
                  return "package: string expected";
              }
              if (message.dependency != null && message.hasOwnProperty("dependency")) {
                if (!Array.isArray(message.dependency))
                  return "dependency: array expected";
                for (var i = 0; i < message.dependency.length; ++i)
                  if (!$util.isString(message.dependency[i]))
                    return "dependency: string[] expected";
              }
              if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                if (!Array.isArray(message.publicDependency))
                  return "publicDependency: array expected";
                for (var i = 0; i < message.publicDependency.length; ++i)
                  if (!$util.isInteger(message.publicDependency[i]))
                    return "publicDependency: integer[] expected";
              }
              if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                if (!Array.isArray(message.weakDependency))
                  return "weakDependency: array expected";
                for (var i = 0; i < message.weakDependency.length; ++i)
                  if (!$util.isInteger(message.weakDependency[i]))
                    return "weakDependency: integer[] expected";
              }
              if (message.messageType != null && message.hasOwnProperty("messageType")) {
                if (!Array.isArray(message.messageType))
                  return "messageType: array expected";
                for (var i = 0; i < message.messageType.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                  if (error)
                    return "messageType." + error;
                }
              }
              if (message.enumType != null && message.hasOwnProperty("enumType")) {
                if (!Array.isArray(message.enumType))
                  return "enumType: array expected";
                for (var i = 0; i < message.enumType.length; ++i) {
                  var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                  if (error)
                    return "enumType." + error;
                }
              }
              if (message.service != null && message.hasOwnProperty("service")) {
                if (!Array.isArray(message.service))
                  return "service: array expected";
                for (var i = 0; i < message.service.length; ++i) {
                  var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                  if (error)
                    return "service." + error;
                }
              }
              if (message.extension != null && message.hasOwnProperty("extension")) {
                if (!Array.isArray(message.extension))
                  return "extension: array expected";
                for (var i = 0; i < message.extension.length; ++i) {
                  var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                  if (error)
                    return "extension." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.FileOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                if (error)
                  return "sourceCodeInfo." + error;
              }
              if (message.syntax != null && message.hasOwnProperty("syntax")) {
                if (!$util.isString(message.syntax))
                  return "syntax: string expected";
              }
              if (message.edition != null && message.hasOwnProperty("edition")) {
                if (!$util.isString(message.edition))
                  return "edition: string expected";
              }
              return null;
            };
            FileDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileDescriptorProto)
                return object;
              var message = new $root.google.protobuf.FileDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object["package"] != null)
                message["package"] = String(object["package"]);
              if (object.dependency) {
                if (!Array.isArray(object.dependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                message.dependency = [];
                for (var i = 0; i < object.dependency.length; ++i)
                  message.dependency[i] = String(object.dependency[i]);
              }
              if (object.publicDependency) {
                if (!Array.isArray(object.publicDependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                message.publicDependency = [];
                for (var i = 0; i < object.publicDependency.length; ++i)
                  message.publicDependency[i] = object.publicDependency[i] | 0;
              }
              if (object.weakDependency) {
                if (!Array.isArray(object.weakDependency))
                  throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                message.weakDependency = [];
                for (var i = 0; i < object.weakDependency.length; ++i)
                  message.weakDependency[i] = object.weakDependency[i] | 0;
              }
              if (object.messageType) {
                if (!Array.isArray(object.messageType))
                  throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                message.messageType = [];
                for (var i = 0; i < object.messageType.length; ++i) {
                  if (typeof object.messageType[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                  message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                }
              }
              if (object.enumType) {
                if (!Array.isArray(object.enumType))
                  throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                message.enumType = [];
                for (var i = 0; i < object.enumType.length; ++i) {
                  if (typeof object.enumType[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                  message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                }
              }
              if (object.service) {
                if (!Array.isArray(object.service))
                  throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                message.service = [];
                for (var i = 0; i < object.service.length; ++i) {
                  if (typeof object.service[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                  message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                }
              }
              if (object.extension) {
                if (!Array.isArray(object.extension))
                  throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                message.extension = [];
                for (var i = 0; i < object.extension.length; ++i) {
                  if (typeof object.extension[i] !== "object")
                    throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                  message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
              }
              if (object.sourceCodeInfo != null) {
                if (typeof object.sourceCodeInfo !== "object")
                  throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
              }
              if (object.syntax != null)
                message.syntax = String(object.syntax);
              if (object.edition != null)
                message.edition = String(object.edition);
              return message;
            };
            FileDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.dependency = [];
                object.messageType = [];
                object.enumType = [];
                object.service = [];
                object.extension = [];
                object.publicDependency = [];
                object.weakDependency = [];
              }
              if (options.defaults) {
                object.name = "";
                object["package"] = "";
                object.options = null;
                object.sourceCodeInfo = null;
                object.syntax = "";
                object.edition = "";
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message["package"] != null && message.hasOwnProperty("package"))
                object["package"] = message["package"];
              if (message.dependency && message.dependency.length) {
                object.dependency = [];
                for (var j = 0; j < message.dependency.length; ++j)
                  object.dependency[j] = message.dependency[j];
              }
              if (message.messageType && message.messageType.length) {
                object.messageType = [];
                for (var j = 0; j < message.messageType.length; ++j)
                  object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
              }
              if (message.enumType && message.enumType.length) {
                object.enumType = [];
                for (var j = 0; j < message.enumType.length; ++j)
                  object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
              }
              if (message.service && message.service.length) {
                object.service = [];
                for (var j = 0; j < message.service.length; ++j)
                  object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
              }
              if (message.extension && message.extension.length) {
                object.extension = [];
                for (var j = 0; j < message.extension.length; ++j)
                  object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
              if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
              if (message.publicDependency && message.publicDependency.length) {
                object.publicDependency = [];
                for (var j = 0; j < message.publicDependency.length; ++j)
                  object.publicDependency[j] = message.publicDependency[j];
              }
              if (message.weakDependency && message.weakDependency.length) {
                object.weakDependency = [];
                for (var j = 0; j < message.weakDependency.length; ++j)
                  object.weakDependency[j] = message.weakDependency[j];
              }
              if (message.syntax != null && message.hasOwnProperty("syntax"))
                object.syntax = message.syntax;
              if (message.edition != null && message.hasOwnProperty("edition"))
                object.edition = message.edition;
              return object;
            };
            FileDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FileDescriptorProto";
            };
            return FileDescriptorProto;
          }();
          protobuf.DescriptorProto = function() {
            function DescriptorProto(properties) {
              this.field = [];
              this.extension = [];
              this.nestedType = [];
              this.enumType = [];
              this.extensionRange = [];
              this.oneofDecl = [];
              this.reservedRange = [];
              this.reservedName = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            DescriptorProto.prototype.name = "";
            DescriptorProto.prototype.field = $util.emptyArray;
            DescriptorProto.prototype.extension = $util.emptyArray;
            DescriptorProto.prototype.nestedType = $util.emptyArray;
            DescriptorProto.prototype.enumType = $util.emptyArray;
            DescriptorProto.prototype.extensionRange = $util.emptyArray;
            DescriptorProto.prototype.oneofDecl = $util.emptyArray;
            DescriptorProto.prototype.options = null;
            DescriptorProto.prototype.reservedRange = $util.emptyArray;
            DescriptorProto.prototype.reservedName = $util.emptyArray;
            DescriptorProto.create = function create(properties) {
              return new DescriptorProto(properties);
            };
            DescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.field != null && message.field.length)
                for (var i = 0; i < message.field.length; ++i)
                  $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).fork()).ldelim();
              if (message.nestedType != null && message.nestedType.length)
                for (var i = 0; i < message.nestedType.length; ++i)
                  $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(
                    /* id 3, wireType 2 =*/
                    26
                  ).fork()).ldelim();
              if (message.enumType != null && message.enumType.length)
                for (var i = 0; i < message.enumType.length; ++i)
                  $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(
                    /* id 4, wireType 2 =*/
                    34
                  ).fork()).ldelim();
              if (message.extensionRange != null && message.extensionRange.length)
                for (var i = 0; i < message.extensionRange.length; ++i)
                  $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(
                    /* id 5, wireType 2 =*/
                    42
                  ).fork()).ldelim();
              if (message.extension != null && message.extension.length)
                for (var i = 0; i < message.extension.length; ++i)
                  $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(
                    /* id 6, wireType 2 =*/
                    50
                  ).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(
                  /* id 7, wireType 2 =*/
                  58
                ).fork()).ldelim();
              if (message.oneofDecl != null && message.oneofDecl.length)
                for (var i = 0; i < message.oneofDecl.length; ++i)
                  $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(
                    /* id 8, wireType 2 =*/
                    66
                  ).fork()).ldelim();
              if (message.reservedRange != null && message.reservedRange.length)
                for (var i = 0; i < message.reservedRange.length; ++i)
                  $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(
                    /* id 9, wireType 2 =*/
                    74
                  ).fork()).ldelim();
              if (message.reservedName != null && message.reservedName.length)
                for (var i = 0; i < message.reservedName.length; ++i)
                  writer.uint32(
                    /* id 10, wireType 2 =*/
                    82
                  ).string(message.reservedName[i]);
              return writer;
            };
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            DescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    if (!(message.field && message.field.length))
                      message.field = [];
                    message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 6: {
                    if (!(message.extension && message.extension.length))
                      message.extension = [];
                    message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 3: {
                    if (!(message.nestedType && message.nestedType.length))
                      message.nestedType = [];
                    message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 4: {
                    if (!(message.enumType && message.enumType.length))
                      message.enumType = [];
                    message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 5: {
                    if (!(message.extensionRange && message.extensionRange.length))
                      message.extensionRange = [];
                    message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                    break;
                  }
                  case 8: {
                    if (!(message.oneofDecl && message.oneofDecl.length))
                      message.oneofDecl = [];
                    message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 7: {
                    message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                    break;
                  }
                  case 9: {
                    if (!(message.reservedRange && message.reservedRange.length))
                      message.reservedRange = [];
                    message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                    break;
                  }
                  case 10: {
                    if (!(message.reservedName && message.reservedName.length))
                      message.reservedName = [];
                    message.reservedName.push(reader.string());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            DescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.field != null && message.hasOwnProperty("field")) {
                if (!Array.isArray(message.field))
                  return "field: array expected";
                for (var i = 0; i < message.field.length; ++i) {
                  var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                  if (error)
                    return "field." + error;
                }
              }
              if (message.extension != null && message.hasOwnProperty("extension")) {
                if (!Array.isArray(message.extension))
                  return "extension: array expected";
                for (var i = 0; i < message.extension.length; ++i) {
                  var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                  if (error)
                    return "extension." + error;
                }
              }
              if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                if (!Array.isArray(message.nestedType))
                  return "nestedType: array expected";
                for (var i = 0; i < message.nestedType.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                  if (error)
                    return "nestedType." + error;
                }
              }
              if (message.enumType != null && message.hasOwnProperty("enumType")) {
                if (!Array.isArray(message.enumType))
                  return "enumType: array expected";
                for (var i = 0; i < message.enumType.length; ++i) {
                  var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                  if (error)
                    return "enumType." + error;
                }
              }
              if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                if (!Array.isArray(message.extensionRange))
                  return "extensionRange: array expected";
                for (var i = 0; i < message.extensionRange.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                  if (error)
                    return "extensionRange." + error;
                }
              }
              if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                if (!Array.isArray(message.oneofDecl))
                  return "oneofDecl: array expected";
                for (var i = 0; i < message.oneofDecl.length; ++i) {
                  var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                  if (error)
                    return "oneofDecl." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.MessageOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                if (!Array.isArray(message.reservedRange))
                  return "reservedRange: array expected";
                for (var i = 0; i < message.reservedRange.length; ++i) {
                  var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                  if (error)
                    return "reservedRange." + error;
                }
              }
              if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                if (!Array.isArray(message.reservedName))
                  return "reservedName: array expected";
                for (var i = 0; i < message.reservedName.length; ++i)
                  if (!$util.isString(message.reservedName[i]))
                    return "reservedName: string[] expected";
              }
              return null;
            };
            DescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.DescriptorProto)
                return object;
              var message = new $root.google.protobuf.DescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.field) {
                if (!Array.isArray(object.field))
                  throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                message.field = [];
                for (var i = 0; i < object.field.length; ++i) {
                  if (typeof object.field[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                  message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                }
              }
              if (object.extension) {
                if (!Array.isArray(object.extension))
                  throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                message.extension = [];
                for (var i = 0; i < object.extension.length; ++i) {
                  if (typeof object.extension[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                  message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                }
              }
              if (object.nestedType) {
                if (!Array.isArray(object.nestedType))
                  throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                message.nestedType = [];
                for (var i = 0; i < object.nestedType.length; ++i) {
                  if (typeof object.nestedType[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                  message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                }
              }
              if (object.enumType) {
                if (!Array.isArray(object.enumType))
                  throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                message.enumType = [];
                for (var i = 0; i < object.enumType.length; ++i) {
                  if (typeof object.enumType[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                  message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                }
              }
              if (object.extensionRange) {
                if (!Array.isArray(object.extensionRange))
                  throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                message.extensionRange = [];
                for (var i = 0; i < object.extensionRange.length; ++i) {
                  if (typeof object.extensionRange[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                  message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                }
              }
              if (object.oneofDecl) {
                if (!Array.isArray(object.oneofDecl))
                  throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                message.oneofDecl = [];
                for (var i = 0; i < object.oneofDecl.length; ++i) {
                  if (typeof object.oneofDecl[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                  message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
              }
              if (object.reservedRange) {
                if (!Array.isArray(object.reservedRange))
                  throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                message.reservedRange = [];
                for (var i = 0; i < object.reservedRange.length; ++i) {
                  if (typeof object.reservedRange[i] !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                  message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                }
              }
              if (object.reservedName) {
                if (!Array.isArray(object.reservedName))
                  throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                message.reservedName = [];
                for (var i = 0; i < object.reservedName.length; ++i)
                  message.reservedName[i] = String(object.reservedName[i]);
              }
              return message;
            };
            DescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.field = [];
                object.nestedType = [];
                object.enumType = [];
                object.extensionRange = [];
                object.extension = [];
                object.oneofDecl = [];
                object.reservedRange = [];
                object.reservedName = [];
              }
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.field && message.field.length) {
                object.field = [];
                for (var j = 0; j < message.field.length; ++j)
                  object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
              }
              if (message.nestedType && message.nestedType.length) {
                object.nestedType = [];
                for (var j = 0; j < message.nestedType.length; ++j)
                  object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
              }
              if (message.enumType && message.enumType.length) {
                object.enumType = [];
                for (var j = 0; j < message.enumType.length; ++j)
                  object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
              }
              if (message.extensionRange && message.extensionRange.length) {
                object.extensionRange = [];
                for (var j = 0; j < message.extensionRange.length; ++j)
                  object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
              }
              if (message.extension && message.extension.length) {
                object.extension = [];
                for (var j = 0; j < message.extension.length; ++j)
                  object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
              if (message.oneofDecl && message.oneofDecl.length) {
                object.oneofDecl = [];
                for (var j = 0; j < message.oneofDecl.length; ++j)
                  object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
              }
              if (message.reservedRange && message.reservedRange.length) {
                object.reservedRange = [];
                for (var j = 0; j < message.reservedRange.length; ++j)
                  object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
              }
              if (message.reservedName && message.reservedName.length) {
                object.reservedName = [];
                for (var j = 0; j < message.reservedName.length; ++j)
                  object.reservedName[j] = message.reservedName[j];
              }
              return object;
            };
            DescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.DescriptorProto";
            };
            DescriptorProto.ExtensionRange = function() {
              function ExtensionRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ExtensionRange.prototype.start = 0;
              ExtensionRange.prototype.end = 0;
              ExtensionRange.prototype.options = null;
              ExtensionRange.create = function create(properties) {
                return new ExtensionRange(properties);
              };
              ExtensionRange.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                  writer.uint32(
                    /* id 1, wireType 0 =*/
                    8
                  ).int32(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(
                    /* id 2, wireType 0 =*/
                    16
                  ).int32(message.end);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                  $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(
                    /* id 3, wireType 2 =*/
                    26
                  ).fork()).ldelim();
                return writer;
              };
              ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              ExtensionRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1: {
                      message.start = reader.int32();
                      break;
                    }
                    case 2: {
                      message.end = reader.int32();
                      break;
                    }
                    case 3: {
                      message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                      break;
                    }
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              ExtensionRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.start != null && message.hasOwnProperty("start")) {
                  if (!$util.isInteger(message.start))
                    return "start: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                  var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                  if (error)
                    return "options." + error;
                }
                return null;
              };
              ExtensionRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                  return object;
                var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                if (object.options != null) {
                  if (typeof object.options !== "object")
                    throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                  message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                }
                return message;
              };
              ExtensionRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                  object.options = null;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                if (message.options != null && message.hasOwnProperty("options"))
                  object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                return object;
              };
              ExtensionRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              ExtensionRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.DescriptorProto.ExtensionRange";
              };
              return ExtensionRange;
            }();
            DescriptorProto.ReservedRange = function() {
              function ReservedRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              ReservedRange.prototype.start = 0;
              ReservedRange.prototype.end = 0;
              ReservedRange.create = function create(properties) {
                return new ReservedRange(properties);
              };
              ReservedRange.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                  writer.uint32(
                    /* id 1, wireType 0 =*/
                    8
                  ).int32(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(
                    /* id 2, wireType 0 =*/
                    16
                  ).int32(message.end);
                return writer;
              };
              ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              ReservedRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1: {
                      message.start = reader.int32();
                      break;
                    }
                    case 2: {
                      message.end = reader.int32();
                      break;
                    }
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              ReservedRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.start != null && message.hasOwnProperty("start")) {
                  if (!$util.isInteger(message.start))
                    return "start: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                return null;
              };
              ReservedRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                  return object;
                var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                return message;
              };
              ReservedRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                return object;
              };
              ReservedRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.DescriptorProto.ReservedRange";
              };
              return ReservedRange;
            }();
            return DescriptorProto;
          }();
          protobuf.ExtensionRangeOptions = function() {
            function ExtensionRangeOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
            ExtensionRangeOptions.create = function create(properties) {
              return new ExtensionRangeOptions(properties);
            };
            ExtensionRangeOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              return writer;
            };
            ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ExtensionRangeOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ExtensionRangeOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            ExtensionRangeOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                return object;
              var message = new $root.google.protobuf.ExtensionRangeOptions();
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            ExtensionRangeOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            ExtensionRangeOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ExtensionRangeOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions";
            };
            return ExtensionRangeOptions;
          }();
          protobuf.FieldDescriptorProto = function() {
            function FieldDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FieldDescriptorProto.prototype.name = "";
            FieldDescriptorProto.prototype.number = 0;
            FieldDescriptorProto.prototype.label = 1;
            FieldDescriptorProto.prototype.type = 1;
            FieldDescriptorProto.prototype.typeName = "";
            FieldDescriptorProto.prototype.extendee = "";
            FieldDescriptorProto.prototype.defaultValue = "";
            FieldDescriptorProto.prototype.oneofIndex = 0;
            FieldDescriptorProto.prototype.jsonName = "";
            FieldDescriptorProto.prototype.options = null;
            FieldDescriptorProto.prototype.proto3Optional = false;
            FieldDescriptorProto.create = function create(properties) {
              return new FieldDescriptorProto(properties);
            };
            FieldDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.extendee);
              if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                writer.uint32(
                  /* id 3, wireType 0 =*/
                  24
                ).int32(message.number);
              if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                writer.uint32(
                  /* id 4, wireType 0 =*/
                  32
                ).int32(message.label);
              if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                writer.uint32(
                  /* id 5, wireType 0 =*/
                  40
                ).int32(message.type);
              if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                writer.uint32(
                  /* id 6, wireType 2 =*/
                  50
                ).string(message.typeName);
              if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                writer.uint32(
                  /* id 7, wireType 2 =*/
                  58
                ).string(message.defaultValue);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(
                  /* id 8, wireType 2 =*/
                  66
                ).fork()).ldelim();
              if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                writer.uint32(
                  /* id 9, wireType 0 =*/
                  72
                ).int32(message.oneofIndex);
              if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                writer.uint32(
                  /* id 10, wireType 2 =*/
                  82
                ).string(message.jsonName);
              if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                writer.uint32(
                  /* id 17, wireType 0 =*/
                  136
                ).bool(message.proto3Optional);
              return writer;
            };
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FieldDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 3: {
                    message.number = reader.int32();
                    break;
                  }
                  case 4: {
                    message.label = reader.int32();
                    break;
                  }
                  case 5: {
                    message.type = reader.int32();
                    break;
                  }
                  case 6: {
                    message.typeName = reader.string();
                    break;
                  }
                  case 2: {
                    message.extendee = reader.string();
                    break;
                  }
                  case 7: {
                    message.defaultValue = reader.string();
                    break;
                  }
                  case 9: {
                    message.oneofIndex = reader.int32();
                    break;
                  }
                  case 10: {
                    message.jsonName = reader.string();
                    break;
                  }
                  case 8: {
                    message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                    break;
                  }
                  case 17: {
                    message.proto3Optional = reader.bool();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FieldDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.number != null && message.hasOwnProperty("number")) {
                if (!$util.isInteger(message.number))
                  return "number: integer expected";
              }
              if (message.label != null && message.hasOwnProperty("label"))
                switch (message.label) {
                  default:
                    return "label: enum value expected";
                  case 1:
                  case 2:
                  case 3:
                    break;
                }
              if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                  default:
                    return "type: enum value expected";
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 13:
                  case 14:
                  case 15:
                  case 16:
                  case 17:
                  case 18:
                    break;
                }
              if (message.typeName != null && message.hasOwnProperty("typeName")) {
                if (!$util.isString(message.typeName))
                  return "typeName: string expected";
              }
              if (message.extendee != null && message.hasOwnProperty("extendee")) {
                if (!$util.isString(message.extendee))
                  return "extendee: string expected";
              }
              if (message.defaultValue != null && message.hasOwnProperty("defaultValue")) {
                if (!$util.isString(message.defaultValue))
                  return "defaultValue: string expected";
              }
              if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex")) {
                if (!$util.isInteger(message.oneofIndex))
                  return "oneofIndex: integer expected";
              }
              if (message.jsonName != null && message.hasOwnProperty("jsonName")) {
                if (!$util.isString(message.jsonName))
                  return "jsonName: string expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.FieldOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional")) {
                if (typeof message.proto3Optional !== "boolean")
                  return "proto3Optional: boolean expected";
              }
              return null;
            };
            FieldDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                return object;
              var message = new $root.google.protobuf.FieldDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.number != null)
                message.number = object.number | 0;
              switch (object.label) {
                default:
                  if (typeof object.label === "number") {
                    message.label = object.label;
                    break;
                  }
                  break;
                case "LABEL_OPTIONAL":
                case 1:
                  message.label = 1;
                  break;
                case "LABEL_REQUIRED":
                case 2:
                  message.label = 2;
                  break;
                case "LABEL_REPEATED":
                case 3:
                  message.label = 3;
                  break;
              }
              switch (object.type) {
                default:
                  if (typeof object.type === "number") {
                    message.type = object.type;
                    break;
                  }
                  break;
                case "TYPE_DOUBLE":
                case 1:
                  message.type = 1;
                  break;
                case "TYPE_FLOAT":
                case 2:
                  message.type = 2;
                  break;
                case "TYPE_INT64":
                case 3:
                  message.type = 3;
                  break;
                case "TYPE_UINT64":
                case 4:
                  message.type = 4;
                  break;
                case "TYPE_INT32":
                case 5:
                  message.type = 5;
                  break;
                case "TYPE_FIXED64":
                case 6:
                  message.type = 6;
                  break;
                case "TYPE_FIXED32":
                case 7:
                  message.type = 7;
                  break;
                case "TYPE_BOOL":
                case 8:
                  message.type = 8;
                  break;
                case "TYPE_STRING":
                case 9:
                  message.type = 9;
                  break;
                case "TYPE_GROUP":
                case 10:
                  message.type = 10;
                  break;
                case "TYPE_MESSAGE":
                case 11:
                  message.type = 11;
                  break;
                case "TYPE_BYTES":
                case 12:
                  message.type = 12;
                  break;
                case "TYPE_UINT32":
                case 13:
                  message.type = 13;
                  break;
                case "TYPE_ENUM":
                case 14:
                  message.type = 14;
                  break;
                case "TYPE_SFIXED32":
                case 15:
                  message.type = 15;
                  break;
                case "TYPE_SFIXED64":
                case 16:
                  message.type = 16;
                  break;
                case "TYPE_SINT32":
                case 17:
                  message.type = 17;
                  break;
                case "TYPE_SINT64":
                case 18:
                  message.type = 18;
                  break;
              }
              if (object.typeName != null)
                message.typeName = String(object.typeName);
              if (object.extendee != null)
                message.extendee = String(object.extendee);
              if (object.defaultValue != null)
                message.defaultValue = String(object.defaultValue);
              if (object.oneofIndex != null)
                message.oneofIndex = object.oneofIndex | 0;
              if (object.jsonName != null)
                message.jsonName = String(object.jsonName);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
              }
              if (object.proto3Optional != null)
                message.proto3Optional = Boolean(object.proto3Optional);
              return message;
            };
            FieldDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.extendee = "";
                object.number = 0;
                object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                object.typeName = "";
                object.defaultValue = "";
                object.options = null;
                object.oneofIndex = 0;
                object.jsonName = "";
                object.proto3Optional = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.extendee != null && message.hasOwnProperty("extendee"))
                object.extendee = message.extendee;
              if (message.number != null && message.hasOwnProperty("number"))
                object.number = message.number;
              if (message.label != null && message.hasOwnProperty("label"))
                object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] === void 0 ? message.label : $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
              if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] === void 0 ? message.type : $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
              if (message.typeName != null && message.hasOwnProperty("typeName"))
                object.typeName = message.typeName;
              if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                object.defaultValue = message.defaultValue;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
              if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                object.oneofIndex = message.oneofIndex;
              if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                object.jsonName = message.jsonName;
              if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                object.proto3Optional = message.proto3Optional;
              return object;
            };
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FieldDescriptorProto";
            };
            FieldDescriptorProto.Type = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "TYPE_DOUBLE"] = 1;
              values[valuesById[2] = "TYPE_FLOAT"] = 2;
              values[valuesById[3] = "TYPE_INT64"] = 3;
              values[valuesById[4] = "TYPE_UINT64"] = 4;
              values[valuesById[5] = "TYPE_INT32"] = 5;
              values[valuesById[6] = "TYPE_FIXED64"] = 6;
              values[valuesById[7] = "TYPE_FIXED32"] = 7;
              values[valuesById[8] = "TYPE_BOOL"] = 8;
              values[valuesById[9] = "TYPE_STRING"] = 9;
              values[valuesById[10] = "TYPE_GROUP"] = 10;
              values[valuesById[11] = "TYPE_MESSAGE"] = 11;
              values[valuesById[12] = "TYPE_BYTES"] = 12;
              values[valuesById[13] = "TYPE_UINT32"] = 13;
              values[valuesById[14] = "TYPE_ENUM"] = 14;
              values[valuesById[15] = "TYPE_SFIXED32"] = 15;
              values[valuesById[16] = "TYPE_SFIXED64"] = 16;
              values[valuesById[17] = "TYPE_SINT32"] = 17;
              values[valuesById[18] = "TYPE_SINT64"] = 18;
              return values;
            }();
            FieldDescriptorProto.Label = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
              values[valuesById[2] = "LABEL_REQUIRED"] = 2;
              values[valuesById[3] = "LABEL_REPEATED"] = 3;
              return values;
            }();
            return FieldDescriptorProto;
          }();
          protobuf.OneofDescriptorProto = function() {
            function OneofDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OneofDescriptorProto.prototype.name = "";
            OneofDescriptorProto.prototype.options = null;
            OneofDescriptorProto.create = function create(properties) {
              return new OneofDescriptorProto(properties);
            };
            OneofDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).fork()).ldelim();
              return writer;
            };
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            OneofDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            OneofDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.OneofOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              return null;
            };
            OneofDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                return object;
              var message = new $root.google.protobuf.OneofDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
              }
              return message;
            };
            OneofDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
              return object;
            };
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.OneofDescriptorProto";
            };
            return OneofDescriptorProto;
          }();
          protobuf.EnumDescriptorProto = function() {
            function EnumDescriptorProto(properties) {
              this.value = [];
              this.reservedRange = [];
              this.reservedName = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumDescriptorProto.prototype.name = "";
            EnumDescriptorProto.prototype.value = $util.emptyArray;
            EnumDescriptorProto.prototype.options = null;
            EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
            EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
            EnumDescriptorProto.create = function create(properties) {
              return new EnumDescriptorProto(properties);
            };
            EnumDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.value != null && message.value.length)
                for (var i = 0; i < message.value.length; ++i)
                  $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).fork()).ldelim();
              if (message.reservedRange != null && message.reservedRange.length)
                for (var i = 0; i < message.reservedRange.length; ++i)
                  $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(
                    /* id 4, wireType 2 =*/
                    34
                  ).fork()).ldelim();
              if (message.reservedName != null && message.reservedName.length)
                for (var i = 0; i < message.reservedName.length; ++i)
                  writer.uint32(
                    /* id 5, wireType 2 =*/
                    42
                  ).string(message.reservedName[i]);
              return writer;
            };
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    if (!(message.value && message.value.length))
                      message.value = [];
                    message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 3: {
                    message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                    break;
                  }
                  case 4: {
                    if (!(message.reservedRange && message.reservedRange.length))
                      message.reservedRange = [];
                    message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                    break;
                  }
                  case 5: {
                    if (!(message.reservedName && message.reservedName.length))
                      message.reservedName = [];
                    message.reservedName.push(reader.string());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.value != null && message.hasOwnProperty("value")) {
                if (!Array.isArray(message.value))
                  return "value: array expected";
                for (var i = 0; i < message.value.length; ++i) {
                  var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                  if (error)
                    return "value." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.EnumOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                if (!Array.isArray(message.reservedRange))
                  return "reservedRange: array expected";
                for (var i = 0; i < message.reservedRange.length; ++i) {
                  var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                  if (error)
                    return "reservedRange." + error;
                }
              }
              if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                if (!Array.isArray(message.reservedName))
                  return "reservedName: array expected";
                for (var i = 0; i < message.reservedName.length; ++i)
                  if (!$util.isString(message.reservedName[i]))
                    return "reservedName: string[] expected";
              }
              return null;
            };
            EnumDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                return object;
              var message = new $root.google.protobuf.EnumDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.value) {
                if (!Array.isArray(object.value))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                message.value = [];
                for (var i = 0; i < object.value.length; ++i) {
                  if (typeof object.value[i] !== "object")
                    throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                  message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
              }
              if (object.reservedRange) {
                if (!Array.isArray(object.reservedRange))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                message.reservedRange = [];
                for (var i = 0; i < object.reservedRange.length; ++i) {
                  if (typeof object.reservedRange[i] !== "object")
                    throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                  message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                }
              }
              if (object.reservedName) {
                if (!Array.isArray(object.reservedName))
                  throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                message.reservedName = [];
                for (var i = 0; i < object.reservedName.length; ++i)
                  message.reservedName[i] = String(object.reservedName[i]);
              }
              return message;
            };
            EnumDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.value = [];
                object.reservedRange = [];
                object.reservedName = [];
              }
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.value && message.value.length) {
                object.value = [];
                for (var j = 0; j < message.value.length; ++j)
                  object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
              if (message.reservedRange && message.reservedRange.length) {
                object.reservedRange = [];
                for (var j = 0; j < message.reservedRange.length; ++j)
                  object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
              }
              if (message.reservedName && message.reservedName.length) {
                object.reservedName = [];
                for (var j = 0; j < message.reservedName.length; ++j)
                  object.reservedName[j] = message.reservedName[j];
              }
              return object;
            };
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto";
            };
            EnumDescriptorProto.EnumReservedRange = function() {
              function EnumReservedRange(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              EnumReservedRange.prototype.start = 0;
              EnumReservedRange.prototype.end = 0;
              EnumReservedRange.create = function create(properties) {
                return new EnumReservedRange(properties);
              };
              EnumReservedRange.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                  writer.uint32(
                    /* id 1, wireType 0 =*/
                    8
                  ).int32(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(
                    /* id 2, wireType 0 =*/
                    16
                  ).int32(message.end);
                return writer;
              };
              EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              EnumReservedRange.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1: {
                      message.start = reader.int32();
                      break;
                    }
                    case 2: {
                      message.end = reader.int32();
                      break;
                    }
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              EnumReservedRange.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.start != null && message.hasOwnProperty("start")) {
                  if (!$util.isInteger(message.start))
                    return "start: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                return null;
              };
              EnumReservedRange.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                  return object;
                var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                if (object.start != null)
                  message.start = object.start | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                return message;
              };
              EnumReservedRange.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.start = 0;
                  object.end = 0;
                }
                if (message.start != null && message.hasOwnProperty("start"))
                  object.start = message.start;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                return object;
              };
              EnumReservedRange.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              EnumReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto.EnumReservedRange";
              };
              return EnumReservedRange;
            }();
            return EnumDescriptorProto;
          }();
          protobuf.EnumValueDescriptorProto = function() {
            function EnumValueDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumValueDescriptorProto.prototype.name = "";
            EnumValueDescriptorProto.prototype.number = 0;
            EnumValueDescriptorProto.prototype.options = null;
            EnumValueDescriptorProto.create = function create(properties) {
              return new EnumValueDescriptorProto(properties);
            };
            EnumValueDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).int32(message.number);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).fork()).ldelim();
              return writer;
            };
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumValueDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    message.number = reader.int32();
                    break;
                  }
                  case 3: {
                    message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumValueDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.number != null && message.hasOwnProperty("number")) {
                if (!$util.isInteger(message.number))
                  return "number: integer expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              return null;
            };
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                return object;
              var message = new $root.google.protobuf.EnumValueDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.number != null)
                message.number = object.number | 0;
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
              }
              return message;
            };
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.number = 0;
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.number != null && message.hasOwnProperty("number"))
                object.number = message.number;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
              return object;
            };
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.EnumValueDescriptorProto";
            };
            return EnumValueDescriptorProto;
          }();
          protobuf.ServiceDescriptorProto = function() {
            function ServiceDescriptorProto(properties) {
              this.method = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ServiceDescriptorProto.prototype.name = "";
            ServiceDescriptorProto.prototype.method = $util.emptyArray;
            ServiceDescriptorProto.prototype.options = null;
            ServiceDescriptorProto.create = function create(properties) {
              return new ServiceDescriptorProto(properties);
            };
            ServiceDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.method != null && message.method.length)
                for (var i = 0; i < message.method.length; ++i)
                  $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).fork()).ldelim();
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).fork()).ldelim();
              return writer;
            };
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ServiceDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    if (!(message.method && message.method.length))
                      message.method = [];
                    message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                    break;
                  }
                  case 3: {
                    message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ServiceDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.method != null && message.hasOwnProperty("method")) {
                if (!Array.isArray(message.method))
                  return "method: array expected";
                for (var i = 0; i < message.method.length; ++i) {
                  var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                  if (error)
                    return "method." + error;
                }
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              return null;
            };
            ServiceDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                return object;
              var message = new $root.google.protobuf.ServiceDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.method) {
                if (!Array.isArray(object.method))
                  throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                message.method = [];
                for (var i = 0; i < object.method.length; ++i) {
                  if (typeof object.method[i] !== "object")
                    throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                  message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                }
              }
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
              }
              return message;
            };
            ServiceDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.method = [];
              if (options.defaults) {
                object.name = "";
                object.options = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.method && message.method.length) {
                object.method = [];
                for (var j = 0; j < message.method.length; ++j)
                  object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
              }
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
              return object;
            };
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ServiceDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.ServiceDescriptorProto";
            };
            return ServiceDescriptorProto;
          }();
          protobuf.MethodDescriptorProto = function() {
            function MethodDescriptorProto(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MethodDescriptorProto.prototype.name = "";
            MethodDescriptorProto.prototype.inputType = "";
            MethodDescriptorProto.prototype.outputType = "";
            MethodDescriptorProto.prototype.options = null;
            MethodDescriptorProto.prototype.clientStreaming = false;
            MethodDescriptorProto.prototype.serverStreaming = false;
            MethodDescriptorProto.create = function create(properties) {
              return new MethodDescriptorProto(properties);
            };
            MethodDescriptorProto.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.inputType);
              if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).string(message.outputType);
              if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(
                  /* id 4, wireType 2 =*/
                  34
                ).fork()).ldelim();
              if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                writer.uint32(
                  /* id 5, wireType 0 =*/
                  40
                ).bool(message.clientStreaming);
              if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                writer.uint32(
                  /* id 6, wireType 0 =*/
                  48
                ).bool(message.serverStreaming);
              return writer;
            };
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MethodDescriptorProto.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    message.inputType = reader.string();
                    break;
                  }
                  case 3: {
                    message.outputType = reader.string();
                    break;
                  }
                  case 4: {
                    message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                    break;
                  }
                  case 5: {
                    message.clientStreaming = reader.bool();
                    break;
                  }
                  case 6: {
                    message.serverStreaming = reader.bool();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MethodDescriptorProto.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.inputType != null && message.hasOwnProperty("inputType")) {
                if (!$util.isString(message.inputType))
                  return "inputType: string expected";
              }
              if (message.outputType != null && message.hasOwnProperty("outputType")) {
                if (!$util.isString(message.outputType))
                  return "outputType: string expected";
              }
              if (message.options != null && message.hasOwnProperty("options")) {
                var error = $root.google.protobuf.MethodOptions.verify(message.options);
                if (error)
                  return "options." + error;
              }
              if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming")) {
                if (typeof message.clientStreaming !== "boolean")
                  return "clientStreaming: boolean expected";
              }
              if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming")) {
                if (typeof message.serverStreaming !== "boolean")
                  return "serverStreaming: boolean expected";
              }
              return null;
            };
            MethodDescriptorProto.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                return object;
              var message = new $root.google.protobuf.MethodDescriptorProto();
              if (object.name != null)
                message.name = String(object.name);
              if (object.inputType != null)
                message.inputType = String(object.inputType);
              if (object.outputType != null)
                message.outputType = String(object.outputType);
              if (object.options != null) {
                if (typeof object.options !== "object")
                  throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
              }
              if (object.clientStreaming != null)
                message.clientStreaming = Boolean(object.clientStreaming);
              if (object.serverStreaming != null)
                message.serverStreaming = Boolean(object.serverStreaming);
              return message;
            };
            MethodDescriptorProto.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.inputType = "";
                object.outputType = "";
                object.options = null;
                object.clientStreaming = false;
                object.serverStreaming = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.inputType != null && message.hasOwnProperty("inputType"))
                object.inputType = message.inputType;
              if (message.outputType != null && message.hasOwnProperty("outputType"))
                object.outputType = message.outputType;
              if (message.options != null && message.hasOwnProperty("options"))
                object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
              if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                object.clientStreaming = message.clientStreaming;
              if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                object.serverStreaming = message.serverStreaming;
              return object;
            };
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            MethodDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.MethodDescriptorProto";
            };
            return MethodDescriptorProto;
          }();
          protobuf.FileOptions = function() {
            function FileOptions(properties) {
              this.uninterpretedOption = [];
              this[".google.api.resourceDefinition"] = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FileOptions.prototype.javaPackage = "";
            FileOptions.prototype.javaOuterClassname = "";
            FileOptions.prototype.javaMultipleFiles = false;
            FileOptions.prototype.javaGenerateEqualsAndHash = false;
            FileOptions.prototype.javaStringCheckUtf8 = false;
            FileOptions.prototype.optimizeFor = 1;
            FileOptions.prototype.goPackage = "";
            FileOptions.prototype.ccGenericServices = false;
            FileOptions.prototype.javaGenericServices = false;
            FileOptions.prototype.pyGenericServices = false;
            FileOptions.prototype.phpGenericServices = false;
            FileOptions.prototype.deprecated = false;
            FileOptions.prototype.ccEnableArenas = true;
            FileOptions.prototype.objcClassPrefix = "";
            FileOptions.prototype.csharpNamespace = "";
            FileOptions.prototype.swiftPrefix = "";
            FileOptions.prototype.phpClassPrefix = "";
            FileOptions.prototype.phpNamespace = "";
            FileOptions.prototype.phpMetadataNamespace = "";
            FileOptions.prototype.rubyPackage = "";
            FileOptions.prototype.uninterpretedOption = $util.emptyArray;
            FileOptions.prototype[".google.api.resourceDefinition"] = $util.emptyArray;
            FileOptions.create = function create(properties) {
              return new FileOptions(properties);
            };
            FileOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.javaPackage);
              if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                writer.uint32(
                  /* id 8, wireType 2 =*/
                  66
                ).string(message.javaOuterClassname);
              if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                writer.uint32(
                  /* id 9, wireType 0 =*/
                  72
                ).int32(message.optimizeFor);
              if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                writer.uint32(
                  /* id 10, wireType 0 =*/
                  80
                ).bool(message.javaMultipleFiles);
              if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                writer.uint32(
                  /* id 11, wireType 2 =*/
                  90
                ).string(message.goPackage);
              if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                writer.uint32(
                  /* id 16, wireType 0 =*/
                  128
                ).bool(message.ccGenericServices);
              if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                writer.uint32(
                  /* id 17, wireType 0 =*/
                  136
                ).bool(message.javaGenericServices);
              if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                writer.uint32(
                  /* id 18, wireType 0 =*/
                  144
                ).bool(message.pyGenericServices);
              if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                writer.uint32(
                  /* id 20, wireType 0 =*/
                  160
                ).bool(message.javaGenerateEqualsAndHash);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(
                  /* id 23, wireType 0 =*/
                  184
                ).bool(message.deprecated);
              if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                writer.uint32(
                  /* id 27, wireType 0 =*/
                  216
                ).bool(message.javaStringCheckUtf8);
              if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                writer.uint32(
                  /* id 31, wireType 0 =*/
                  248
                ).bool(message.ccEnableArenas);
              if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                writer.uint32(
                  /* id 36, wireType 2 =*/
                  290
                ).string(message.objcClassPrefix);
              if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                writer.uint32(
                  /* id 37, wireType 2 =*/
                  298
                ).string(message.csharpNamespace);
              if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                writer.uint32(
                  /* id 39, wireType 2 =*/
                  314
                ).string(message.swiftPrefix);
              if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                writer.uint32(
                  /* id 40, wireType 2 =*/
                  322
                ).string(message.phpClassPrefix);
              if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                writer.uint32(
                  /* id 41, wireType 2 =*/
                  330
                ).string(message.phpNamespace);
              if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                writer.uint32(
                  /* id 42, wireType 0 =*/
                  336
                ).bool(message.phpGenericServices);
              if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                writer.uint32(
                  /* id 44, wireType 2 =*/
                  354
                ).string(message.phpMetadataNamespace);
              if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                writer.uint32(
                  /* id 45, wireType 2 =*/
                  362
                ).string(message.rubyPackage);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              if (message[".google.api.resourceDefinition"] != null && message[".google.api.resourceDefinition"].length)
                for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i)
                  $root.google.api.ResourceDescriptor.encode(message[".google.api.resourceDefinition"][i], writer.uint32(
                    /* id 1053, wireType 2 =*/
                    8426
                  ).fork()).ldelim();
              return writer;
            };
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FileOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.javaPackage = reader.string();
                    break;
                  }
                  case 8: {
                    message.javaOuterClassname = reader.string();
                    break;
                  }
                  case 10: {
                    message.javaMultipleFiles = reader.bool();
                    break;
                  }
                  case 20: {
                    message.javaGenerateEqualsAndHash = reader.bool();
                    break;
                  }
                  case 27: {
                    message.javaStringCheckUtf8 = reader.bool();
                    break;
                  }
                  case 9: {
                    message.optimizeFor = reader.int32();
                    break;
                  }
                  case 11: {
                    message.goPackage = reader.string();
                    break;
                  }
                  case 16: {
                    message.ccGenericServices = reader.bool();
                    break;
                  }
                  case 17: {
                    message.javaGenericServices = reader.bool();
                    break;
                  }
                  case 18: {
                    message.pyGenericServices = reader.bool();
                    break;
                  }
                  case 42: {
                    message.phpGenericServices = reader.bool();
                    break;
                  }
                  case 23: {
                    message.deprecated = reader.bool();
                    break;
                  }
                  case 31: {
                    message.ccEnableArenas = reader.bool();
                    break;
                  }
                  case 36: {
                    message.objcClassPrefix = reader.string();
                    break;
                  }
                  case 37: {
                    message.csharpNamespace = reader.string();
                    break;
                  }
                  case 39: {
                    message.swiftPrefix = reader.string();
                    break;
                  }
                  case 40: {
                    message.phpClassPrefix = reader.string();
                    break;
                  }
                  case 41: {
                    message.phpNamespace = reader.string();
                    break;
                  }
                  case 44: {
                    message.phpMetadataNamespace = reader.string();
                    break;
                  }
                  case 45: {
                    message.rubyPackage = reader.string();
                    break;
                  }
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  case 1053: {
                    if (!(message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length))
                      message[".google.api.resourceDefinition"] = [];
                    message[".google.api.resourceDefinition"].push($root.google.api.ResourceDescriptor.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FileOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.javaPackage != null && message.hasOwnProperty("javaPackage")) {
                if (!$util.isString(message.javaPackage))
                  return "javaPackage: string expected";
              }
              if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname")) {
                if (!$util.isString(message.javaOuterClassname))
                  return "javaOuterClassname: string expected";
              }
              if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles")) {
                if (typeof message.javaMultipleFiles !== "boolean")
                  return "javaMultipleFiles: boolean expected";
              }
              if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash")) {
                if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                  return "javaGenerateEqualsAndHash: boolean expected";
              }
              if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8")) {
                if (typeof message.javaStringCheckUtf8 !== "boolean")
                  return "javaStringCheckUtf8: boolean expected";
              }
              if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                switch (message.optimizeFor) {
                  default:
                    return "optimizeFor: enum value expected";
                  case 1:
                  case 2:
                  case 3:
                    break;
                }
              if (message.goPackage != null && message.hasOwnProperty("goPackage")) {
                if (!$util.isString(message.goPackage))
                  return "goPackage: string expected";
              }
              if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices")) {
                if (typeof message.ccGenericServices !== "boolean")
                  return "ccGenericServices: boolean expected";
              }
              if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices")) {
                if (typeof message.javaGenericServices !== "boolean")
                  return "javaGenericServices: boolean expected";
              }
              if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices")) {
                if (typeof message.pyGenericServices !== "boolean")
                  return "pyGenericServices: boolean expected";
              }
              if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices")) {
                if (typeof message.phpGenericServices !== "boolean")
                  return "phpGenericServices: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas")) {
                if (typeof message.ccEnableArenas !== "boolean")
                  return "ccEnableArenas: boolean expected";
              }
              if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix")) {
                if (!$util.isString(message.objcClassPrefix))
                  return "objcClassPrefix: string expected";
              }
              if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace")) {
                if (!$util.isString(message.csharpNamespace))
                  return "csharpNamespace: string expected";
              }
              if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix")) {
                if (!$util.isString(message.swiftPrefix))
                  return "swiftPrefix: string expected";
              }
              if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix")) {
                if (!$util.isString(message.phpClassPrefix))
                  return "phpClassPrefix: string expected";
              }
              if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace")) {
                if (!$util.isString(message.phpNamespace))
                  return "phpNamespace: string expected";
              }
              if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace")) {
                if (!$util.isString(message.phpMetadataNamespace))
                  return "phpMetadataNamespace: string expected";
              }
              if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage")) {
                if (!$util.isString(message.rubyPackage))
                  return "rubyPackage: string expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.resourceDefinition"] != null && message.hasOwnProperty(".google.api.resourceDefinition")) {
                if (!Array.isArray(message[".google.api.resourceDefinition"]))
                  return ".google.api.resourceDefinition: array expected";
                for (var i = 0; i < message[".google.api.resourceDefinition"].length; ++i) {
                  var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resourceDefinition"][i]);
                  if (error)
                    return ".google.api.resourceDefinition." + error;
                }
              }
              return null;
            };
            FileOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FileOptions)
                return object;
              var message = new $root.google.protobuf.FileOptions();
              if (object.javaPackage != null)
                message.javaPackage = String(object.javaPackage);
              if (object.javaOuterClassname != null)
                message.javaOuterClassname = String(object.javaOuterClassname);
              if (object.javaMultipleFiles != null)
                message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
              if (object.javaGenerateEqualsAndHash != null)
                message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
              if (object.javaStringCheckUtf8 != null)
                message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
              switch (object.optimizeFor) {
                default:
                  if (typeof object.optimizeFor === "number") {
                    message.optimizeFor = object.optimizeFor;
                    break;
                  }
                  break;
                case "SPEED":
                case 1:
                  message.optimizeFor = 1;
                  break;
                case "CODE_SIZE":
                case 2:
                  message.optimizeFor = 2;
                  break;
                case "LITE_RUNTIME":
                case 3:
                  message.optimizeFor = 3;
                  break;
              }
              if (object.goPackage != null)
                message.goPackage = String(object.goPackage);
              if (object.ccGenericServices != null)
                message.ccGenericServices = Boolean(object.ccGenericServices);
              if (object.javaGenericServices != null)
                message.javaGenericServices = Boolean(object.javaGenericServices);
              if (object.pyGenericServices != null)
                message.pyGenericServices = Boolean(object.pyGenericServices);
              if (object.phpGenericServices != null)
                message.phpGenericServices = Boolean(object.phpGenericServices);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.ccEnableArenas != null)
                message.ccEnableArenas = Boolean(object.ccEnableArenas);
              if (object.objcClassPrefix != null)
                message.objcClassPrefix = String(object.objcClassPrefix);
              if (object.csharpNamespace != null)
                message.csharpNamespace = String(object.csharpNamespace);
              if (object.swiftPrefix != null)
                message.swiftPrefix = String(object.swiftPrefix);
              if (object.phpClassPrefix != null)
                message.phpClassPrefix = String(object.phpClassPrefix);
              if (object.phpNamespace != null)
                message.phpNamespace = String(object.phpNamespace);
              if (object.phpMetadataNamespace != null)
                message.phpMetadataNamespace = String(object.phpMetadataNamespace);
              if (object.rubyPackage != null)
                message.rubyPackage = String(object.rubyPackage);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.resourceDefinition"]) {
                if (!Array.isArray(object[".google.api.resourceDefinition"]))
                  throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: array expected");
                message[".google.api.resourceDefinition"] = [];
                for (var i = 0; i < object[".google.api.resourceDefinition"].length; ++i) {
                  if (typeof object[".google.api.resourceDefinition"][i] !== "object")
                    throw TypeError(".google.protobuf.FileOptions..google.api.resourceDefinition: object expected");
                  message[".google.api.resourceDefinition"][i] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resourceDefinition"][i]);
                }
              }
              return message;
            };
            FileOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.uninterpretedOption = [];
                object[".google.api.resourceDefinition"] = [];
              }
              if (options.defaults) {
                object.javaPackage = "";
                object.javaOuterClassname = "";
                object.optimizeFor = options.enums === String ? "SPEED" : 1;
                object.javaMultipleFiles = false;
                object.goPackage = "";
                object.ccGenericServices = false;
                object.javaGenericServices = false;
                object.pyGenericServices = false;
                object.javaGenerateEqualsAndHash = false;
                object.deprecated = false;
                object.javaStringCheckUtf8 = false;
                object.ccEnableArenas = true;
                object.objcClassPrefix = "";
                object.csharpNamespace = "";
                object.swiftPrefix = "";
                object.phpClassPrefix = "";
                object.phpNamespace = "";
                object.phpGenericServices = false;
                object.phpMetadataNamespace = "";
                object.rubyPackage = "";
              }
              if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                object.javaPackage = message.javaPackage;
              if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                object.javaOuterClassname = message.javaOuterClassname;
              if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] === void 0 ? message.optimizeFor : $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
              if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                object.javaMultipleFiles = message.javaMultipleFiles;
              if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                object.goPackage = message.goPackage;
              if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                object.ccGenericServices = message.ccGenericServices;
              if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                object.javaGenericServices = message.javaGenericServices;
              if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                object.pyGenericServices = message.pyGenericServices;
              if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
              if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                object.ccEnableArenas = message.ccEnableArenas;
              if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                object.objcClassPrefix = message.objcClassPrefix;
              if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                object.csharpNamespace = message.csharpNamespace;
              if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                object.swiftPrefix = message.swiftPrefix;
              if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                object.phpClassPrefix = message.phpClassPrefix;
              if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                object.phpNamespace = message.phpNamespace;
              if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                object.phpGenericServices = message.phpGenericServices;
              if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                object.phpMetadataNamespace = message.phpMetadataNamespace;
              if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                object.rubyPackage = message.rubyPackage;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.resourceDefinition"] && message[".google.api.resourceDefinition"].length) {
                object[".google.api.resourceDefinition"] = [];
                for (var j = 0; j < message[".google.api.resourceDefinition"].length; ++j)
                  object[".google.api.resourceDefinition"][j] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resourceDefinition"][j], options);
              }
              return object;
            };
            FileOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FileOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FileOptions";
            };
            FileOptions.OptimizeMode = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[1] = "SPEED"] = 1;
              values[valuesById[2] = "CODE_SIZE"] = 2;
              values[valuesById[3] = "LITE_RUNTIME"] = 3;
              return values;
            }();
            return FileOptions;
          }();
          protobuf.MessageOptions = function() {
            function MessageOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MessageOptions.prototype.messageSetWireFormat = false;
            MessageOptions.prototype.noStandardDescriptorAccessor = false;
            MessageOptions.prototype.deprecated = false;
            MessageOptions.prototype.mapEntry = false;
            MessageOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
            MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
            MessageOptions.prototype[".google.api.resource"] = null;
            MessageOptions.create = function create(properties) {
              return new MessageOptions(properties);
            };
            MessageOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                writer.uint32(
                  /* id 1, wireType 0 =*/
                  8
                ).bool(message.messageSetWireFormat);
              if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).bool(message.noStandardDescriptorAccessor);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(
                  /* id 3, wireType 0 =*/
                  24
                ).bool(message.deprecated);
              if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                writer.uint32(
                  /* id 7, wireType 0 =*/
                  56
                ).bool(message.mapEntry);
              if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                writer.uint32(
                  /* id 11, wireType 0 =*/
                  88
                ).bool(message.deprecatedLegacyJsonFieldConflicts);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              if (message[".google.api.resource"] != null && Object.hasOwnProperty.call(message, ".google.api.resource"))
                $root.google.api.ResourceDescriptor.encode(message[".google.api.resource"], writer.uint32(
                  /* id 1053, wireType 2 =*/
                  8426
                ).fork()).ldelim();
              return writer;
            };
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MessageOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.messageSetWireFormat = reader.bool();
                    break;
                  }
                  case 2: {
                    message.noStandardDescriptorAccessor = reader.bool();
                    break;
                  }
                  case 3: {
                    message.deprecated = reader.bool();
                    break;
                  }
                  case 7: {
                    message.mapEntry = reader.bool();
                    break;
                  }
                  case 11: {
                    message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                    break;
                  }
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  case 1053: {
                    message[".google.api.resource"] = $root.google.api.ResourceDescriptor.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MessageOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat")) {
                if (typeof message.messageSetWireFormat !== "boolean")
                  return "messageSetWireFormat: boolean expected";
              }
              if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor")) {
                if (typeof message.noStandardDescriptorAccessor !== "boolean")
                  return "noStandardDescriptorAccessor: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.mapEntry != null && message.hasOwnProperty("mapEntry")) {
                if (typeof message.mapEntry !== "boolean")
                  return "mapEntry: boolean expected";
              }
              if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts")) {
                if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                  return "deprecatedLegacyJsonFieldConflicts: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource")) {
                var error = $root.google.api.ResourceDescriptor.verify(message[".google.api.resource"]);
                if (error)
                  return ".google.api.resource." + error;
              }
              return null;
            };
            MessageOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MessageOptions)
                return object;
              var message = new $root.google.protobuf.MessageOptions();
              if (object.messageSetWireFormat != null)
                message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
              if (object.noStandardDescriptorAccessor != null)
                message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.mapEntry != null)
                message.mapEntry = Boolean(object.mapEntry);
              if (object.deprecatedLegacyJsonFieldConflicts != null)
                message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.resource"] != null) {
                if (typeof object[".google.api.resource"] !== "object")
                  throw TypeError(".google.protobuf.MessageOptions..google.api.resource: object expected");
                message[".google.api.resource"] = $root.google.api.ResourceDescriptor.fromObject(object[".google.api.resource"]);
              }
              return message;
            };
            MessageOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.messageSetWireFormat = false;
                object.noStandardDescriptorAccessor = false;
                object.deprecated = false;
                object.mapEntry = false;
                object.deprecatedLegacyJsonFieldConflicts = false;
                object[".google.api.resource"] = null;
              }
              if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                object.messageSetWireFormat = message.messageSetWireFormat;
              if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                object.mapEntry = message.mapEntry;
              if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.resource"] != null && message.hasOwnProperty(".google.api.resource"))
                object[".google.api.resource"] = $root.google.api.ResourceDescriptor.toObject(message[".google.api.resource"], options);
              return object;
            };
            MessageOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            MessageOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.MessageOptions";
            };
            return MessageOptions;
          }();
          protobuf.FieldOptions = function() {
            function FieldOptions(properties) {
              this.uninterpretedOption = [];
              this[".google.api.fieldBehavior"] = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            FieldOptions.prototype.ctype = 0;
            FieldOptions.prototype.packed = false;
            FieldOptions.prototype.jstype = 0;
            FieldOptions.prototype.lazy = false;
            FieldOptions.prototype.unverifiedLazy = false;
            FieldOptions.prototype.deprecated = false;
            FieldOptions.prototype.weak = false;
            FieldOptions.prototype.debugRedact = false;
            FieldOptions.prototype.retention = 0;
            FieldOptions.prototype.target = 0;
            FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
            FieldOptions.prototype[".google.api.fieldBehavior"] = $util.emptyArray;
            FieldOptions.prototype[".google.api.resourceReference"] = null;
            FieldOptions.create = function create(properties) {
              return new FieldOptions(properties);
            };
            FieldOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                writer.uint32(
                  /* id 1, wireType 0 =*/
                  8
                ).int32(message.ctype);
              if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).bool(message.packed);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(
                  /* id 3, wireType 0 =*/
                  24
                ).bool(message.deprecated);
              if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                writer.uint32(
                  /* id 5, wireType 0 =*/
                  40
                ).bool(message.lazy);
              if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                writer.uint32(
                  /* id 6, wireType 0 =*/
                  48
                ).int32(message.jstype);
              if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                writer.uint32(
                  /* id 10, wireType 0 =*/
                  80
                ).bool(message.weak);
              if (message.unverifiedLazy != null && Object.hasOwnProperty.call(message, "unverifiedLazy"))
                writer.uint32(
                  /* id 15, wireType 0 =*/
                  120
                ).bool(message.unverifiedLazy);
              if (message.debugRedact != null && Object.hasOwnProperty.call(message, "debugRedact"))
                writer.uint32(
                  /* id 16, wireType 0 =*/
                  128
                ).bool(message.debugRedact);
              if (message.retention != null && Object.hasOwnProperty.call(message, "retention"))
                writer.uint32(
                  /* id 17, wireType 0 =*/
                  136
                ).int32(message.retention);
              if (message.target != null && Object.hasOwnProperty.call(message, "target"))
                writer.uint32(
                  /* id 18, wireType 0 =*/
                  144
                ).int32(message.target);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              if (message[".google.api.fieldBehavior"] != null && message[".google.api.fieldBehavior"].length) {
                writer.uint32(
                  /* id 1052, wireType 2 =*/
                  8418
                ).fork();
                for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                  writer.int32(message[".google.api.fieldBehavior"][i]);
                writer.ldelim();
              }
              if (message[".google.api.resourceReference"] != null && Object.hasOwnProperty.call(message, ".google.api.resourceReference"))
                $root.google.api.ResourceReference.encode(message[".google.api.resourceReference"], writer.uint32(
                  /* id 1055, wireType 2 =*/
                  8442
                ).fork()).ldelim();
              return writer;
            };
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            FieldOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.ctype = reader.int32();
                    break;
                  }
                  case 2: {
                    message.packed = reader.bool();
                    break;
                  }
                  case 6: {
                    message.jstype = reader.int32();
                    break;
                  }
                  case 5: {
                    message.lazy = reader.bool();
                    break;
                  }
                  case 15: {
                    message.unverifiedLazy = reader.bool();
                    break;
                  }
                  case 3: {
                    message.deprecated = reader.bool();
                    break;
                  }
                  case 10: {
                    message.weak = reader.bool();
                    break;
                  }
                  case 16: {
                    message.debugRedact = reader.bool();
                    break;
                  }
                  case 17: {
                    message.retention = reader.int32();
                    break;
                  }
                  case 18: {
                    message.target = reader.int32();
                    break;
                  }
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  case 1052: {
                    if (!(message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length))
                      message[".google.api.fieldBehavior"] = [];
                    if ((tag & 7) === 2) {
                      var end2 = reader.uint32() + reader.pos;
                      while (reader.pos < end2)
                        message[".google.api.fieldBehavior"].push(reader.int32());
                    } else
                      message[".google.api.fieldBehavior"].push(reader.int32());
                    break;
                  }
                  case 1055: {
                    message[".google.api.resourceReference"] = $root.google.api.ResourceReference.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            FieldOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.ctype != null && message.hasOwnProperty("ctype"))
                switch (message.ctype) {
                  default:
                    return "ctype: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.packed != null && message.hasOwnProperty("packed")) {
                if (typeof message.packed !== "boolean")
                  return "packed: boolean expected";
              }
              if (message.jstype != null && message.hasOwnProperty("jstype"))
                switch (message.jstype) {
                  default:
                    return "jstype: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.lazy != null && message.hasOwnProperty("lazy")) {
                if (typeof message.lazy !== "boolean")
                  return "lazy: boolean expected";
              }
              if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy")) {
                if (typeof message.unverifiedLazy !== "boolean")
                  return "unverifiedLazy: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.weak != null && message.hasOwnProperty("weak")) {
                if (typeof message.weak !== "boolean")
                  return "weak: boolean expected";
              }
              if (message.debugRedact != null && message.hasOwnProperty("debugRedact")) {
                if (typeof message.debugRedact !== "boolean")
                  return "debugRedact: boolean expected";
              }
              if (message.retention != null && message.hasOwnProperty("retention"))
                switch (message.retention) {
                  default:
                    return "retention: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.target != null && message.hasOwnProperty("target"))
                switch (message.target) {
                  default:
                    return "target: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                    break;
                }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.fieldBehavior"] != null && message.hasOwnProperty(".google.api.fieldBehavior")) {
                if (!Array.isArray(message[".google.api.fieldBehavior"]))
                  return ".google.api.fieldBehavior: array expected";
                for (var i = 0; i < message[".google.api.fieldBehavior"].length; ++i)
                  switch (message[".google.api.fieldBehavior"][i]) {
                    default:
                      return ".google.api.fieldBehavior: enum value[] expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                      break;
                  }
              }
              if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference")) {
                var error = $root.google.api.ResourceReference.verify(message[".google.api.resourceReference"]);
                if (error)
                  return ".google.api.resourceReference." + error;
              }
              return null;
            };
            FieldOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.FieldOptions)
                return object;
              var message = new $root.google.protobuf.FieldOptions();
              switch (object.ctype) {
                default:
                  if (typeof object.ctype === "number") {
                    message.ctype = object.ctype;
                    break;
                  }
                  break;
                case "STRING":
                case 0:
                  message.ctype = 0;
                  break;
                case "CORD":
                case 1:
                  message.ctype = 1;
                  break;
                case "STRING_PIECE":
                case 2:
                  message.ctype = 2;
                  break;
              }
              if (object.packed != null)
                message.packed = Boolean(object.packed);
              switch (object.jstype) {
                default:
                  if (typeof object.jstype === "number") {
                    message.jstype = object.jstype;
                    break;
                  }
                  break;
                case "JS_NORMAL":
                case 0:
                  message.jstype = 0;
                  break;
                case "JS_STRING":
                case 1:
                  message.jstype = 1;
                  break;
                case "JS_NUMBER":
                case 2:
                  message.jstype = 2;
                  break;
              }
              if (object.lazy != null)
                message.lazy = Boolean(object.lazy);
              if (object.unverifiedLazy != null)
                message.unverifiedLazy = Boolean(object.unverifiedLazy);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.weak != null)
                message.weak = Boolean(object.weak);
              if (object.debugRedact != null)
                message.debugRedact = Boolean(object.debugRedact);
              switch (object.retention) {
                default:
                  if (typeof object.retention === "number") {
                    message.retention = object.retention;
                    break;
                  }
                  break;
                case "RETENTION_UNKNOWN":
                case 0:
                  message.retention = 0;
                  break;
                case "RETENTION_RUNTIME":
                case 1:
                  message.retention = 1;
                  break;
                case "RETENTION_SOURCE":
                case 2:
                  message.retention = 2;
                  break;
              }
              switch (object.target) {
                default:
                  if (typeof object.target === "number") {
                    message.target = object.target;
                    break;
                  }
                  break;
                case "TARGET_TYPE_UNKNOWN":
                case 0:
                  message.target = 0;
                  break;
                case "TARGET_TYPE_FILE":
                case 1:
                  message.target = 1;
                  break;
                case "TARGET_TYPE_EXTENSION_RANGE":
                case 2:
                  message.target = 2;
                  break;
                case "TARGET_TYPE_MESSAGE":
                case 3:
                  message.target = 3;
                  break;
                case "TARGET_TYPE_FIELD":
                case 4:
                  message.target = 4;
                  break;
                case "TARGET_TYPE_ONEOF":
                case 5:
                  message.target = 5;
                  break;
                case "TARGET_TYPE_ENUM":
                case 6:
                  message.target = 6;
                  break;
                case "TARGET_TYPE_ENUM_ENTRY":
                case 7:
                  message.target = 7;
                  break;
                case "TARGET_TYPE_SERVICE":
                case 8:
                  message.target = 8;
                  break;
                case "TARGET_TYPE_METHOD":
                case 9:
                  message.target = 9;
                  break;
              }
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.fieldBehavior"]) {
                if (!Array.isArray(object[".google.api.fieldBehavior"]))
                  throw TypeError(".google.protobuf.FieldOptions..google.api.fieldBehavior: array expected");
                message[".google.api.fieldBehavior"] = [];
                for (var i = 0; i < object[".google.api.fieldBehavior"].length; ++i)
                  switch (object[".google.api.fieldBehavior"][i]) {
                    default:
                      if (typeof object[".google.api.fieldBehavior"][i] === "number") {
                        message[".google.api.fieldBehavior"][i] = object[".google.api.fieldBehavior"][i];
                        break;
                      }
                    case "FIELD_BEHAVIOR_UNSPECIFIED":
                    case 0:
                      message[".google.api.fieldBehavior"][i] = 0;
                      break;
                    case "OPTIONAL":
                    case 1:
                      message[".google.api.fieldBehavior"][i] = 1;
                      break;
                    case "REQUIRED":
                    case 2:
                      message[".google.api.fieldBehavior"][i] = 2;
                      break;
                    case "OUTPUT_ONLY":
                    case 3:
                      message[".google.api.fieldBehavior"][i] = 3;
                      break;
                    case "INPUT_ONLY":
                    case 4:
                      message[".google.api.fieldBehavior"][i] = 4;
                      break;
                    case "IMMUTABLE":
                    case 5:
                      message[".google.api.fieldBehavior"][i] = 5;
                      break;
                    case "UNORDERED_LIST":
                    case 6:
                      message[".google.api.fieldBehavior"][i] = 6;
                      break;
                    case "NON_EMPTY_DEFAULT":
                    case 7:
                      message[".google.api.fieldBehavior"][i] = 7;
                      break;
                  }
              }
              if (object[".google.api.resourceReference"] != null) {
                if (typeof object[".google.api.resourceReference"] !== "object")
                  throw TypeError(".google.protobuf.FieldOptions..google.api.resourceReference: object expected");
                message[".google.api.resourceReference"] = $root.google.api.ResourceReference.fromObject(object[".google.api.resourceReference"]);
              }
              return message;
            };
            FieldOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.uninterpretedOption = [];
                object[".google.api.fieldBehavior"] = [];
              }
              if (options.defaults) {
                object.ctype = options.enums === String ? "STRING" : 0;
                object.packed = false;
                object.deprecated = false;
                object.lazy = false;
                object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                object.weak = false;
                object.unverifiedLazy = false;
                object.debugRedact = false;
                object.retention = options.enums === String ? "RETENTION_UNKNOWN" : 0;
                object.target = options.enums === String ? "TARGET_TYPE_UNKNOWN" : 0;
                object[".google.api.resourceReference"] = null;
              }
              if (message.ctype != null && message.hasOwnProperty("ctype"))
                object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] === void 0 ? message.ctype : $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
              if (message.packed != null && message.hasOwnProperty("packed"))
                object.packed = message.packed;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.lazy != null && message.hasOwnProperty("lazy"))
                object.lazy = message.lazy;
              if (message.jstype != null && message.hasOwnProperty("jstype"))
                object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] === void 0 ? message.jstype : $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
              if (message.weak != null && message.hasOwnProperty("weak"))
                object.weak = message.weak;
              if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                object.unverifiedLazy = message.unverifiedLazy;
              if (message.debugRedact != null && message.hasOwnProperty("debugRedact"))
                object.debugRedact = message.debugRedact;
              if (message.retention != null && message.hasOwnProperty("retention"))
                object.retention = options.enums === String ? $root.google.protobuf.FieldOptions.OptionRetention[message.retention] === void 0 ? message.retention : $root.google.protobuf.FieldOptions.OptionRetention[message.retention] : message.retention;
              if (message.target != null && message.hasOwnProperty("target"))
                object.target = options.enums === String ? $root.google.protobuf.FieldOptions.OptionTargetType[message.target] === void 0 ? message.target : $root.google.protobuf.FieldOptions.OptionTargetType[message.target] : message.target;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.fieldBehavior"] && message[".google.api.fieldBehavior"].length) {
                object[".google.api.fieldBehavior"] = [];
                for (var j = 0; j < message[".google.api.fieldBehavior"].length; ++j)
                  object[".google.api.fieldBehavior"][j] = options.enums === String ? $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] === void 0 ? message[".google.api.fieldBehavior"][j] : $root.google.api.FieldBehavior[message[".google.api.fieldBehavior"][j]] : message[".google.api.fieldBehavior"][j];
              }
              if (message[".google.api.resourceReference"] != null && message.hasOwnProperty(".google.api.resourceReference"))
                object[".google.api.resourceReference"] = $root.google.api.ResourceReference.toObject(message[".google.api.resourceReference"], options);
              return object;
            };
            FieldOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.FieldOptions";
            };
            FieldOptions.CType = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "STRING"] = 0;
              values[valuesById[1] = "CORD"] = 1;
              values[valuesById[2] = "STRING_PIECE"] = 2;
              return values;
            }();
            FieldOptions.JSType = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "JS_NORMAL"] = 0;
              values[valuesById[1] = "JS_STRING"] = 1;
              values[valuesById[2] = "JS_NUMBER"] = 2;
              return values;
            }();
            FieldOptions.OptionRetention = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "RETENTION_UNKNOWN"] = 0;
              values[valuesById[1] = "RETENTION_RUNTIME"] = 1;
              values[valuesById[2] = "RETENTION_SOURCE"] = 2;
              return values;
            }();
            FieldOptions.OptionTargetType = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "TARGET_TYPE_UNKNOWN"] = 0;
              values[valuesById[1] = "TARGET_TYPE_FILE"] = 1;
              values[valuesById[2] = "TARGET_TYPE_EXTENSION_RANGE"] = 2;
              values[valuesById[3] = "TARGET_TYPE_MESSAGE"] = 3;
              values[valuesById[4] = "TARGET_TYPE_FIELD"] = 4;
              values[valuesById[5] = "TARGET_TYPE_ONEOF"] = 5;
              values[valuesById[6] = "TARGET_TYPE_ENUM"] = 6;
              values[valuesById[7] = "TARGET_TYPE_ENUM_ENTRY"] = 7;
              values[valuesById[8] = "TARGET_TYPE_SERVICE"] = 8;
              values[valuesById[9] = "TARGET_TYPE_METHOD"] = 9;
              return values;
            }();
            return FieldOptions;
          }();
          protobuf.OneofOptions = function() {
            function OneofOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
            OneofOptions.create = function create(properties) {
              return new OneofOptions(properties);
            };
            OneofOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              return writer;
            };
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            OneofOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            OneofOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            OneofOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.OneofOptions)
                return object;
              var message = new $root.google.protobuf.OneofOptions();
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            OneofOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            OneofOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.OneofOptions";
            };
            return OneofOptions;
          }();
          protobuf.EnumOptions = function() {
            function EnumOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumOptions.prototype.allowAlias = false;
            EnumOptions.prototype.deprecated = false;
            EnumOptions.prototype.deprecatedLegacyJsonFieldConflicts = false;
            EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
            EnumOptions.create = function create(properties) {
              return new EnumOptions(properties);
            };
            EnumOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).bool(message.allowAlias);
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(
                  /* id 3, wireType 0 =*/
                  24
                ).bool(message.deprecated);
              if (message.deprecatedLegacyJsonFieldConflicts != null && Object.hasOwnProperty.call(message, "deprecatedLegacyJsonFieldConflicts"))
                writer.uint32(
                  /* id 6, wireType 0 =*/
                  48
                ).bool(message.deprecatedLegacyJsonFieldConflicts);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              return writer;
            };
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 2: {
                    message.allowAlias = reader.bool();
                    break;
                  }
                  case 3: {
                    message.deprecated = reader.bool();
                    break;
                  }
                  case 6: {
                    message.deprecatedLegacyJsonFieldConflicts = reader.bool();
                    break;
                  }
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.allowAlias != null && message.hasOwnProperty("allowAlias")) {
                if (typeof message.allowAlias !== "boolean")
                  return "allowAlias: boolean expected";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts")) {
                if (typeof message.deprecatedLegacyJsonFieldConflicts !== "boolean")
                  return "deprecatedLegacyJsonFieldConflicts: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            EnumOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumOptions)
                return object;
              var message = new $root.google.protobuf.EnumOptions();
              if (object.allowAlias != null)
                message.allowAlias = Boolean(object.allowAlias);
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.deprecatedLegacyJsonFieldConflicts != null)
                message.deprecatedLegacyJsonFieldConflicts = Boolean(object.deprecatedLegacyJsonFieldConflicts);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            EnumOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.allowAlias = false;
                object.deprecated = false;
                object.deprecatedLegacyJsonFieldConflicts = false;
              }
              if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                object.allowAlias = message.allowAlias;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.deprecatedLegacyJsonFieldConflicts != null && message.hasOwnProperty("deprecatedLegacyJsonFieldConflicts"))
                object.deprecatedLegacyJsonFieldConflicts = message.deprecatedLegacyJsonFieldConflicts;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            EnumOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            EnumOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.EnumOptions";
            };
            return EnumOptions;
          }();
          protobuf.EnumValueOptions = function() {
            function EnumValueOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            EnumValueOptions.prototype.deprecated = false;
            EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
            EnumValueOptions.create = function create(properties) {
              return new EnumValueOptions(properties);
            };
            EnumValueOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(
                  /* id 1, wireType 0 =*/
                  8
                ).bool(message.deprecated);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              return writer;
            };
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            EnumValueOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.deprecated = reader.bool();
                    break;
                  }
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            EnumValueOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              return null;
            };
            EnumValueOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.EnumValueOptions)
                return object;
              var message = new $root.google.protobuf.EnumValueOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              return message;
            };
            EnumValueOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults)
                object.deprecated = false;
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              return object;
            };
            EnumValueOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            EnumValueOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.EnumValueOptions";
            };
            return EnumValueOptions;
          }();
          protobuf.ServiceOptions = function() {
            function ServiceOptions(properties) {
              this.uninterpretedOption = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ServiceOptions.prototype.deprecated = false;
            ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
            ServiceOptions.prototype[".google.api.defaultHost"] = "";
            ServiceOptions.prototype[".google.api.oauthScopes"] = "";
            ServiceOptions.create = function create(properties) {
              return new ServiceOptions(properties);
            };
            ServiceOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(
                  /* id 33, wireType 0 =*/
                  264
                ).bool(message.deprecated);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              if (message[".google.api.defaultHost"] != null && Object.hasOwnProperty.call(message, ".google.api.defaultHost"))
                writer.uint32(
                  /* id 1049, wireType 2 =*/
                  8394
                ).string(message[".google.api.defaultHost"]);
              if (message[".google.api.oauthScopes"] != null && Object.hasOwnProperty.call(message, ".google.api.oauthScopes"))
                writer.uint32(
                  /* id 1050, wireType 2 =*/
                  8402
                ).string(message[".google.api.oauthScopes"]);
              return writer;
            };
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ServiceOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 33: {
                    message.deprecated = reader.bool();
                    break;
                  }
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  case 1049: {
                    message[".google.api.defaultHost"] = reader.string();
                    break;
                  }
                  case 1050: {
                    message[".google.api.oauthScopes"] = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ServiceOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost")) {
                if (!$util.isString(message[".google.api.defaultHost"]))
                  return ".google.api.defaultHost: string expected";
              }
              if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes")) {
                if (!$util.isString(message[".google.api.oauthScopes"]))
                  return ".google.api.oauthScopes: string expected";
              }
              return null;
            };
            ServiceOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.ServiceOptions)
                return object;
              var message = new $root.google.protobuf.ServiceOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.defaultHost"] != null)
                message[".google.api.defaultHost"] = String(object[".google.api.defaultHost"]);
              if (object[".google.api.oauthScopes"] != null)
                message[".google.api.oauthScopes"] = String(object[".google.api.oauthScopes"]);
              return message;
            };
            ServiceOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.uninterpretedOption = [];
              if (options.defaults) {
                object.deprecated = false;
                object[".google.api.defaultHost"] = "";
                object[".google.api.oauthScopes"] = "";
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.api.defaultHost"] != null && message.hasOwnProperty(".google.api.defaultHost"))
                object[".google.api.defaultHost"] = message[".google.api.defaultHost"];
              if (message[".google.api.oauthScopes"] != null && message.hasOwnProperty(".google.api.oauthScopes"))
                object[".google.api.oauthScopes"] = message[".google.api.oauthScopes"];
              return object;
            };
            ServiceOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ServiceOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.ServiceOptions";
            };
            return ServiceOptions;
          }();
          protobuf.MethodOptions = function() {
            function MethodOptions(properties) {
              this.uninterpretedOption = [];
              this[".google.api.methodSignature"] = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            MethodOptions.prototype.deprecated = false;
            MethodOptions.prototype.idempotencyLevel = 0;
            MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
            MethodOptions.prototype[".google.api.http"] = null;
            MethodOptions.prototype[".google.api.methodSignature"] = $util.emptyArray;
            MethodOptions.prototype[".google.longrunning.operationInfo"] = null;
            MethodOptions.create = function create(properties) {
              return new MethodOptions(properties);
            };
            MethodOptions.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                writer.uint32(
                  /* id 33, wireType 0 =*/
                  264
                ).bool(message.deprecated);
              if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                writer.uint32(
                  /* id 34, wireType 0 =*/
                  272
                ).int32(message.idempotencyLevel);
              if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                for (var i = 0; i < message.uninterpretedOption.length; ++i)
                  $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(
                    /* id 999, wireType 2 =*/
                    7994
                  ).fork()).ldelim();
              if (message[".google.longrunning.operationInfo"] != null && Object.hasOwnProperty.call(message, ".google.longrunning.operationInfo"))
                $root.google.longrunning.OperationInfo.encode(message[".google.longrunning.operationInfo"], writer.uint32(
                  /* id 1049, wireType 2 =*/
                  8394
                ).fork()).ldelim();
              if (message[".google.api.methodSignature"] != null && message[".google.api.methodSignature"].length)
                for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                  writer.uint32(
                    /* id 1051, wireType 2 =*/
                    8410
                  ).string(message[".google.api.methodSignature"][i]);
              if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(
                  /* id 72295728, wireType 2 =*/
                  578365826
                ).fork()).ldelim();
              return writer;
            };
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            MethodOptions.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 33: {
                    message.deprecated = reader.bool();
                    break;
                  }
                  case 34: {
                    message.idempotencyLevel = reader.int32();
                    break;
                  }
                  case 999: {
                    if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                      message.uninterpretedOption = [];
                    message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                    break;
                  }
                  case 72295728: {
                    message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                    break;
                  }
                  case 1051: {
                    if (!(message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length))
                      message[".google.api.methodSignature"] = [];
                    message[".google.api.methodSignature"].push(reader.string());
                    break;
                  }
                  case 1049: {
                    message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            MethodOptions.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.deprecated != null && message.hasOwnProperty("deprecated")) {
                if (typeof message.deprecated !== "boolean")
                  return "deprecated: boolean expected";
              }
              if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                switch (message.idempotencyLevel) {
                  default:
                    return "idempotencyLevel: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                    break;
                }
              if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                if (!Array.isArray(message.uninterpretedOption))
                  return "uninterpretedOption: array expected";
                for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                  if (error)
                    return "uninterpretedOption." + error;
                }
              }
              if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                if (error)
                  return ".google.api.http." + error;
              }
              if (message[".google.api.methodSignature"] != null && message.hasOwnProperty(".google.api.methodSignature")) {
                if (!Array.isArray(message[".google.api.methodSignature"]))
                  return ".google.api.methodSignature: array expected";
                for (var i = 0; i < message[".google.api.methodSignature"].length; ++i)
                  if (!$util.isString(message[".google.api.methodSignature"][i]))
                    return ".google.api.methodSignature: string[] expected";
              }
              if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo")) {
                var error = $root.google.longrunning.OperationInfo.verify(message[".google.longrunning.operationInfo"]);
                if (error)
                  return ".google.longrunning.operationInfo." + error;
              }
              return null;
            };
            MethodOptions.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.MethodOptions)
                return object;
              var message = new $root.google.protobuf.MethodOptions();
              if (object.deprecated != null)
                message.deprecated = Boolean(object.deprecated);
              switch (object.idempotencyLevel) {
                default:
                  if (typeof object.idempotencyLevel === "number") {
                    message.idempotencyLevel = object.idempotencyLevel;
                    break;
                  }
                  break;
                case "IDEMPOTENCY_UNKNOWN":
                case 0:
                  message.idempotencyLevel = 0;
                  break;
                case "NO_SIDE_EFFECTS":
                case 1:
                  message.idempotencyLevel = 1;
                  break;
                case "IDEMPOTENT":
                case 2:
                  message.idempotencyLevel = 2;
                  break;
              }
              if (object.uninterpretedOption) {
                if (!Array.isArray(object.uninterpretedOption))
                  throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                message.uninterpretedOption = [];
                for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                  if (typeof object.uninterpretedOption[i] !== "object")
                    throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                  message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                }
              }
              if (object[".google.api.http"] != null) {
                if (typeof object[".google.api.http"] !== "object")
                  throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
              }
              if (object[".google.api.methodSignature"]) {
                if (!Array.isArray(object[".google.api.methodSignature"]))
                  throw TypeError(".google.protobuf.MethodOptions..google.api.methodSignature: array expected");
                message[".google.api.methodSignature"] = [];
                for (var i = 0; i < object[".google.api.methodSignature"].length; ++i)
                  message[".google.api.methodSignature"][i] = String(object[".google.api.methodSignature"][i]);
              }
              if (object[".google.longrunning.operationInfo"] != null) {
                if (typeof object[".google.longrunning.operationInfo"] !== "object")
                  throw TypeError(".google.protobuf.MethodOptions..google.longrunning.operationInfo: object expected");
                message[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.fromObject(object[".google.longrunning.operationInfo"]);
              }
              return message;
            };
            MethodOptions.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults) {
                object.uninterpretedOption = [];
                object[".google.api.methodSignature"] = [];
              }
              if (options.defaults) {
                object.deprecated = false;
                object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                object[".google.longrunning.operationInfo"] = null;
                object[".google.api.http"] = null;
              }
              if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                object.deprecated = message.deprecated;
              if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] === void 0 ? message.idempotencyLevel : $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
              if (message.uninterpretedOption && message.uninterpretedOption.length) {
                object.uninterpretedOption = [];
                for (var j = 0; j < message.uninterpretedOption.length; ++j)
                  object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
              }
              if (message[".google.longrunning.operationInfo"] != null && message.hasOwnProperty(".google.longrunning.operationInfo"))
                object[".google.longrunning.operationInfo"] = $root.google.longrunning.OperationInfo.toObject(message[".google.longrunning.operationInfo"], options);
              if (message[".google.api.methodSignature"] && message[".google.api.methodSignature"].length) {
                object[".google.api.methodSignature"] = [];
                for (var j = 0; j < message[".google.api.methodSignature"].length; ++j)
                  object[".google.api.methodSignature"][j] = message[".google.api.methodSignature"][j];
              }
              if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
              return object;
            };
            MethodOptions.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            MethodOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.MethodOptions";
            };
            MethodOptions.IdempotencyLevel = function() {
              var valuesById = {}, values = Object.create(valuesById);
              values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
              values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
              values[valuesById[2] = "IDEMPOTENT"] = 2;
              return values;
            }();
            return MethodOptions;
          }();
          protobuf.UninterpretedOption = function() {
            function UninterpretedOption(properties) {
              this.name = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            UninterpretedOption.prototype.name = $util.emptyArray;
            UninterpretedOption.prototype.identifierValue = "";
            UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;
            UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            UninterpretedOption.prototype.doubleValue = 0;
            UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
            UninterpretedOption.prototype.aggregateValue = "";
            UninterpretedOption.create = function create(properties) {
              return new UninterpretedOption(properties);
            };
            UninterpretedOption.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && message.name.length)
                for (var i = 0; i < message.name.length; ++i)
                  $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).fork()).ldelim();
              if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).string(message.identifierValue);
              if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                writer.uint32(
                  /* id 4, wireType 0 =*/
                  32
                ).uint64(message.positiveIntValue);
              if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                writer.uint32(
                  /* id 5, wireType 0 =*/
                  40
                ).int64(message.negativeIntValue);
              if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                writer.uint32(
                  /* id 6, wireType 1 =*/
                  49
                ).double(message.doubleValue);
              if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                writer.uint32(
                  /* id 7, wireType 2 =*/
                  58
                ).bytes(message.stringValue);
              if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                writer.uint32(
                  /* id 8, wireType 2 =*/
                  66
                ).string(message.aggregateValue);
              return writer;
            };
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            UninterpretedOption.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 2: {
                    if (!(message.name && message.name.length))
                      message.name = [];
                    message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                    break;
                  }
                  case 3: {
                    message.identifierValue = reader.string();
                    break;
                  }
                  case 4: {
                    message.positiveIntValue = reader.uint64();
                    break;
                  }
                  case 5: {
                    message.negativeIntValue = reader.int64();
                    break;
                  }
                  case 6: {
                    message.doubleValue = reader.double();
                    break;
                  }
                  case 7: {
                    message.stringValue = reader.bytes();
                    break;
                  }
                  case 8: {
                    message.aggregateValue = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            UninterpretedOption.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!Array.isArray(message.name))
                  return "name: array expected";
                for (var i = 0; i < message.name.length; ++i) {
                  var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                  if (error)
                    return "name." + error;
                }
              }
              if (message.identifierValue != null && message.hasOwnProperty("identifierValue")) {
                if (!$util.isString(message.identifierValue))
                  return "identifierValue: string expected";
              }
              if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue")) {
                if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                  return "positiveIntValue: integer|Long expected";
              }
              if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue")) {
                if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                  return "negativeIntValue: integer|Long expected";
              }
              if (message.doubleValue != null && message.hasOwnProperty("doubleValue")) {
                if (typeof message.doubleValue !== "number")
                  return "doubleValue: number expected";
              }
              if (message.stringValue != null && message.hasOwnProperty("stringValue")) {
                if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                  return "stringValue: buffer expected";
              }
              if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue")) {
                if (!$util.isString(message.aggregateValue))
                  return "aggregateValue: string expected";
              }
              return null;
            };
            UninterpretedOption.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.UninterpretedOption)
                return object;
              var message = new $root.google.protobuf.UninterpretedOption();
              if (object.name) {
                if (!Array.isArray(object.name))
                  throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                message.name = [];
                for (var i = 0; i < object.name.length; ++i) {
                  if (typeof object.name[i] !== "object")
                    throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                  message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                }
              }
              if (object.identifierValue != null)
                message.identifierValue = String(object.identifierValue);
              if (object.positiveIntValue != null) {
                if ($util.Long)
                  (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                else if (typeof object.positiveIntValue === "string")
                  message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                else if (typeof object.positiveIntValue === "number")
                  message.positiveIntValue = object.positiveIntValue;
                else if (typeof object.positiveIntValue === "object")
                  message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
              }
              if (object.negativeIntValue != null) {
                if ($util.Long)
                  (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                else if (typeof object.negativeIntValue === "string")
                  message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                else if (typeof object.negativeIntValue === "number")
                  message.negativeIntValue = object.negativeIntValue;
                else if (typeof object.negativeIntValue === "object")
                  message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
              }
              if (object.doubleValue != null)
                message.doubleValue = Number(object.doubleValue);
              if (object.stringValue != null) {
                if (typeof object.stringValue === "string")
                  $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                else if (object.stringValue.length >= 0)
                  message.stringValue = object.stringValue;
              }
              if (object.aggregateValue != null)
                message.aggregateValue = String(object.aggregateValue);
              return message;
            };
            UninterpretedOption.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.name = [];
              if (options.defaults) {
                object.identifierValue = "";
                if ($util.Long) {
                  var long = new $util.Long(0, 0, true);
                  object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.positiveIntValue = options.longs === String ? "0" : 0;
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.negativeIntValue = options.longs === String ? "0" : 0;
                object.doubleValue = 0;
                if (options.bytes === String)
                  object.stringValue = "";
                else {
                  object.stringValue = [];
                  if (options.bytes !== Array)
                    object.stringValue = $util.newBuffer(object.stringValue);
                }
                object.aggregateValue = "";
              }
              if (message.name && message.name.length) {
                object.name = [];
                for (var j = 0; j < message.name.length; ++j)
                  object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
              }
              if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                object.identifierValue = message.identifierValue;
              if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                if (typeof message.positiveIntValue === "number")
                  object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                else
                  object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
              if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                if (typeof message.negativeIntValue === "number")
                  object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                else
                  object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
              if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
              if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
              if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                object.aggregateValue = message.aggregateValue;
              return object;
            };
            UninterpretedOption.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.UninterpretedOption";
            };
            UninterpretedOption.NamePart = function() {
              function NamePart(properties) {
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              NamePart.prototype.namePart = "";
              NamePart.prototype.isExtension = false;
              NamePart.create = function create(properties) {
                return new NamePart(properties);
              };
              NamePart.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.namePart);
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).bool(message.isExtension);
                return writer;
              };
              NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              NamePart.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1: {
                      message.namePart = reader.string();
                      break;
                    }
                    case 2: {
                      message.isExtension = reader.bool();
                      break;
                    }
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                if (!message.hasOwnProperty("namePart"))
                  throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                if (!message.hasOwnProperty("isExtension"))
                  throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                return message;
              };
              NamePart.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              NamePart.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (!$util.isString(message.namePart))
                  return "namePart: string expected";
                if (typeof message.isExtension !== "boolean")
                  return "isExtension: boolean expected";
                return null;
              };
              NamePart.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                  return object;
                var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                if (object.namePart != null)
                  message.namePart = String(object.namePart);
                if (object.isExtension != null)
                  message.isExtension = Boolean(object.isExtension);
                return message;
              };
              NamePart.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.defaults) {
                  object.namePart = "";
                  object.isExtension = false;
                }
                if (message.namePart != null && message.hasOwnProperty("namePart"))
                  object.namePart = message.namePart;
                if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                  object.isExtension = message.isExtension;
                return object;
              };
              NamePart.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.UninterpretedOption.NamePart";
              };
              return NamePart;
            }();
            return UninterpretedOption;
          }();
          protobuf.SourceCodeInfo = function() {
            function SourceCodeInfo(properties) {
              this.location = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            SourceCodeInfo.prototype.location = $util.emptyArray;
            SourceCodeInfo.create = function create(properties) {
              return new SourceCodeInfo(properties);
            };
            SourceCodeInfo.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.location != null && message.location.length)
                for (var i = 0; i < message.location.length; ++i)
                  $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork()).ldelim();
              return writer;
            };
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            SourceCodeInfo.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    if (!(message.location && message.location.length))
                      message.location = [];
                    message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            SourceCodeInfo.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.location != null && message.hasOwnProperty("location")) {
                if (!Array.isArray(message.location))
                  return "location: array expected";
                for (var i = 0; i < message.location.length; ++i) {
                  var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                  if (error)
                    return "location." + error;
                }
              }
              return null;
            };
            SourceCodeInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.SourceCodeInfo)
                return object;
              var message = new $root.google.protobuf.SourceCodeInfo();
              if (object.location) {
                if (!Array.isArray(object.location))
                  throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                message.location = [];
                for (var i = 0; i < object.location.length; ++i) {
                  if (typeof object.location[i] !== "object")
                    throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                  message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                }
              }
              return message;
            };
            SourceCodeInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.location = [];
              if (message.location && message.location.length) {
                object.location = [];
                for (var j = 0; j < message.location.length; ++j)
                  object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
              }
              return object;
            };
            SourceCodeInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            SourceCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.SourceCodeInfo";
            };
            SourceCodeInfo.Location = function() {
              function Location(properties) {
                this.path = [];
                this.span = [];
                this.leadingDetachedComments = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Location.prototype.path = $util.emptyArray;
              Location.prototype.span = $util.emptyArray;
              Location.prototype.leadingComments = "";
              Location.prototype.trailingComments = "";
              Location.prototype.leadingDetachedComments = $util.emptyArray;
              Location.create = function create(properties) {
                return new Location(properties);
              };
              Location.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.path != null && message.path.length) {
                  writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork();
                  for (var i = 0; i < message.path.length; ++i)
                    writer.int32(message.path[i]);
                  writer.ldelim();
                }
                if (message.span != null && message.span.length) {
                  writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).fork();
                  for (var i = 0; i < message.span.length; ++i)
                    writer.int32(message.span[i]);
                  writer.ldelim();
                }
                if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                  writer.uint32(
                    /* id 3, wireType 2 =*/
                    26
                  ).string(message.leadingComments);
                if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                  writer.uint32(
                    /* id 4, wireType 2 =*/
                    34
                  ).string(message.trailingComments);
                if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                  for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                    writer.uint32(
                      /* id 6, wireType 2 =*/
                      50
                    ).string(message.leadingDetachedComments[i]);
                return writer;
              };
              Location.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              Location.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1: {
                      if (!(message.path && message.path.length))
                        message.path = [];
                      if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                          message.path.push(reader.int32());
                      } else
                        message.path.push(reader.int32());
                      break;
                    }
                    case 2: {
                      if (!(message.span && message.span.length))
                        message.span = [];
                      if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                          message.span.push(reader.int32());
                      } else
                        message.span.push(reader.int32());
                      break;
                    }
                    case 3: {
                      message.leadingComments = reader.string();
                      break;
                    }
                    case 4: {
                      message.trailingComments = reader.string();
                      break;
                    }
                    case 6: {
                      if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                        message.leadingDetachedComments = [];
                      message.leadingDetachedComments.push(reader.string());
                      break;
                    }
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              Location.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              Location.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.path != null && message.hasOwnProperty("path")) {
                  if (!Array.isArray(message.path))
                    return "path: array expected";
                  for (var i = 0; i < message.path.length; ++i)
                    if (!$util.isInteger(message.path[i]))
                      return "path: integer[] expected";
                }
                if (message.span != null && message.hasOwnProperty("span")) {
                  if (!Array.isArray(message.span))
                    return "span: array expected";
                  for (var i = 0; i < message.span.length; ++i)
                    if (!$util.isInteger(message.span[i]))
                      return "span: integer[] expected";
                }
                if (message.leadingComments != null && message.hasOwnProperty("leadingComments")) {
                  if (!$util.isString(message.leadingComments))
                    return "leadingComments: string expected";
                }
                if (message.trailingComments != null && message.hasOwnProperty("trailingComments")) {
                  if (!$util.isString(message.trailingComments))
                    return "trailingComments: string expected";
                }
                if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                  if (!Array.isArray(message.leadingDetachedComments))
                    return "leadingDetachedComments: array expected";
                  for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                    if (!$util.isString(message.leadingDetachedComments[i]))
                      return "leadingDetachedComments: string[] expected";
                }
                return null;
              };
              Location.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                  return object;
                var message = new $root.google.protobuf.SourceCodeInfo.Location();
                if (object.path) {
                  if (!Array.isArray(object.path))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                  message.path = [];
                  for (var i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] | 0;
                }
                if (object.span) {
                  if (!Array.isArray(object.span))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                  message.span = [];
                  for (var i = 0; i < object.span.length; ++i)
                    message.span[i] = object.span[i] | 0;
                }
                if (object.leadingComments != null)
                  message.leadingComments = String(object.leadingComments);
                if (object.trailingComments != null)
                  message.trailingComments = String(object.trailingComments);
                if (object.leadingDetachedComments) {
                  if (!Array.isArray(object.leadingDetachedComments))
                    throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                  message.leadingDetachedComments = [];
                  for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                    message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                }
                return message;
              };
              Location.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                  object.path = [];
                  object.span = [];
                  object.leadingDetachedComments = [];
                }
                if (options.defaults) {
                  object.leadingComments = "";
                  object.trailingComments = "";
                }
                if (message.path && message.path.length) {
                  object.path = [];
                  for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
                }
                if (message.span && message.span.length) {
                  object.span = [];
                  for (var j = 0; j < message.span.length; ++j)
                    object.span[j] = message.span[j];
                }
                if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                  object.leadingComments = message.leadingComments;
                if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                  object.trailingComments = message.trailingComments;
                if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                  object.leadingDetachedComments = [];
                  for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                    object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                }
                return object;
              };
              Location.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.SourceCodeInfo.Location";
              };
              return Location;
            }();
            return SourceCodeInfo;
          }();
          protobuf.GeneratedCodeInfo = function() {
            function GeneratedCodeInfo(properties) {
              this.annotation = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
            GeneratedCodeInfo.create = function create(properties) {
              return new GeneratedCodeInfo(properties);
            };
            GeneratedCodeInfo.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.annotation != null && message.annotation.length)
                for (var i = 0; i < message.annotation.length; ++i)
                  $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork()).ldelim();
              return writer;
            };
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            GeneratedCodeInfo.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    if (!(message.annotation && message.annotation.length))
                      message.annotation = [];
                    message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            GeneratedCodeInfo.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.annotation != null && message.hasOwnProperty("annotation")) {
                if (!Array.isArray(message.annotation))
                  return "annotation: array expected";
                for (var i = 0; i < message.annotation.length; ++i) {
                  var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                  if (error)
                    return "annotation." + error;
                }
              }
              return null;
            };
            GeneratedCodeInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                return object;
              var message = new $root.google.protobuf.GeneratedCodeInfo();
              if (object.annotation) {
                if (!Array.isArray(object.annotation))
                  throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                message.annotation = [];
                for (var i = 0; i < object.annotation.length; ++i) {
                  if (typeof object.annotation[i] !== "object")
                    throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                  message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                }
              }
              return message;
            };
            GeneratedCodeInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.annotation = [];
              if (message.annotation && message.annotation.length) {
                object.annotation = [];
                for (var j = 0; j < message.annotation.length; ++j)
                  object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
              }
              return object;
            };
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            GeneratedCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo";
            };
            GeneratedCodeInfo.Annotation = function() {
              function Annotation(properties) {
                this.path = [];
                if (properties) {
                  for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                      this[keys[i]] = properties[keys[i]];
                }
              }
              Annotation.prototype.path = $util.emptyArray;
              Annotation.prototype.sourceFile = "";
              Annotation.prototype.begin = 0;
              Annotation.prototype.end = 0;
              Annotation.prototype.semantic = 0;
              Annotation.create = function create(properties) {
                return new Annotation(properties);
              };
              Annotation.encode = function encode(message, writer) {
                if (!writer)
                  writer = $Writer.create();
                if (message.path != null && message.path.length) {
                  writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork();
                  for (var i = 0; i < message.path.length; ++i)
                    writer.int32(message.path[i]);
                  writer.ldelim();
                }
                if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                  writer.uint32(
                    /* id 2, wireType 2 =*/
                    18
                  ).string(message.sourceFile);
                if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                  writer.uint32(
                    /* id 3, wireType 0 =*/
                    24
                  ).int32(message.begin);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                  writer.uint32(
                    /* id 4, wireType 0 =*/
                    32
                  ).int32(message.end);
                if (message.semantic != null && Object.hasOwnProperty.call(message, "semantic"))
                  writer.uint32(
                    /* id 5, wireType 0 =*/
                    40
                  ).int32(message.semantic);
                return writer;
              };
              Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
              };
              Annotation.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                  reader = $Reader.create(reader);
                var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                while (reader.pos < end) {
                  var tag = reader.uint32();
                  switch (tag >>> 3) {
                    case 1: {
                      if (!(message.path && message.path.length))
                        message.path = [];
                      if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                          message.path.push(reader.int32());
                      } else
                        message.path.push(reader.int32());
                      break;
                    }
                    case 2: {
                      message.sourceFile = reader.string();
                      break;
                    }
                    case 3: {
                      message.begin = reader.int32();
                      break;
                    }
                    case 4: {
                      message.end = reader.int32();
                      break;
                    }
                    case 5: {
                      message.semantic = reader.int32();
                      break;
                    }
                    default:
                      reader.skipType(tag & 7);
                      break;
                  }
                }
                return message;
              };
              Annotation.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                  reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
              };
              Annotation.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                  return "object expected";
                if (message.path != null && message.hasOwnProperty("path")) {
                  if (!Array.isArray(message.path))
                    return "path: array expected";
                  for (var i = 0; i < message.path.length; ++i)
                    if (!$util.isInteger(message.path[i]))
                      return "path: integer[] expected";
                }
                if (message.sourceFile != null && message.hasOwnProperty("sourceFile")) {
                  if (!$util.isString(message.sourceFile))
                    return "sourceFile: string expected";
                }
                if (message.begin != null && message.hasOwnProperty("begin")) {
                  if (!$util.isInteger(message.begin))
                    return "begin: integer expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                  if (!$util.isInteger(message.end))
                    return "end: integer expected";
                }
                if (message.semantic != null && message.hasOwnProperty("semantic"))
                  switch (message.semantic) {
                    default:
                      return "semantic: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                      break;
                  }
                return null;
              };
              Annotation.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                  return object;
                var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                if (object.path) {
                  if (!Array.isArray(object.path))
                    throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                  message.path = [];
                  for (var i = 0; i < object.path.length; ++i)
                    message.path[i] = object.path[i] | 0;
                }
                if (object.sourceFile != null)
                  message.sourceFile = String(object.sourceFile);
                if (object.begin != null)
                  message.begin = object.begin | 0;
                if (object.end != null)
                  message.end = object.end | 0;
                switch (object.semantic) {
                  default:
                    if (typeof object.semantic === "number") {
                      message.semantic = object.semantic;
                      break;
                    }
                    break;
                  case "NONE":
                  case 0:
                    message.semantic = 0;
                    break;
                  case "SET":
                  case 1:
                    message.semantic = 1;
                    break;
                  case "ALIAS":
                  case 2:
                    message.semantic = 2;
                    break;
                }
                return message;
              };
              Annotation.toObject = function toObject(message, options) {
                if (!options)
                  options = {};
                var object = {};
                if (options.arrays || options.defaults)
                  object.path = [];
                if (options.defaults) {
                  object.sourceFile = "";
                  object.begin = 0;
                  object.end = 0;
                  object.semantic = options.enums === String ? "NONE" : 0;
                }
                if (message.path && message.path.length) {
                  object.path = [];
                  for (var j = 0; j < message.path.length; ++j)
                    object.path[j] = message.path[j];
                }
                if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                  object.sourceFile = message.sourceFile;
                if (message.begin != null && message.hasOwnProperty("begin"))
                  object.begin = message.begin;
                if (message.end != null && message.hasOwnProperty("end"))
                  object.end = message.end;
                if (message.semantic != null && message.hasOwnProperty("semantic"))
                  object.semantic = options.enums === String ? $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] === void 0 ? message.semantic : $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] : message.semantic;
                return object;
              };
              Annotation.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
              };
              Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === void 0) {
                  typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo.Annotation";
              };
              Annotation.Semantic = function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NONE"] = 0;
                values[valuesById[1] = "SET"] = 1;
                values[valuesById[2] = "ALIAS"] = 2;
                return values;
              }();
              return Annotation;
            }();
            return GeneratedCodeInfo;
          }();
          protobuf.Duration = function() {
            function Duration(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            Duration.prototype.nanos = 0;
            Duration.create = function create(properties) {
              return new Duration(properties);
            };
            Duration.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                writer.uint32(
                  /* id 1, wireType 0 =*/
                  8
                ).int64(message.seconds);
              if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).int32(message.nanos);
              return writer;
            };
            Duration.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Duration.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.seconds = reader.int64();
                    break;
                  }
                  case 2: {
                    message.nanos = reader.int32();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Duration.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Duration.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.seconds != null && message.hasOwnProperty("seconds")) {
                if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                  return "seconds: integer|Long expected";
              }
              if (message.nanos != null && message.hasOwnProperty("nanos")) {
                if (!$util.isInteger(message.nanos))
                  return "nanos: integer expected";
              }
              return null;
            };
            Duration.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Duration)
                return object;
              var message = new $root.google.protobuf.Duration();
              if (object.seconds != null) {
                if ($util.Long)
                  (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                else if (typeof object.seconds === "string")
                  message.seconds = parseInt(object.seconds, 10);
                else if (typeof object.seconds === "number")
                  message.seconds = object.seconds;
                else if (typeof object.seconds === "object")
                  message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
              }
              if (object.nanos != null)
                message.nanos = object.nanos | 0;
              return message;
            };
            Duration.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.seconds = options.longs === String ? "0" : 0;
                object.nanos = 0;
              }
              if (message.seconds != null && message.hasOwnProperty("seconds"))
                if (typeof message.seconds === "number")
                  object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                else
                  object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
              if (message.nanos != null && message.hasOwnProperty("nanos"))
                object.nanos = message.nanos;
              return object;
            };
            Duration.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Duration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Duration";
            };
            return Duration;
          }();
          protobuf.Any = function() {
            function Any(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Any.prototype.type_url = "";
            Any.prototype.value = $util.newBuffer([]);
            Any.create = function create(properties) {
              return new Any(properties);
            };
            Any.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.type_url);
              if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).bytes(message.value);
              return writer;
            };
            Any.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Any.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.type_url = reader.string();
                    break;
                  }
                  case 2: {
                    message.value = reader.bytes();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Any.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Any.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.type_url != null && message.hasOwnProperty("type_url")) {
                if (!$util.isString(message.type_url))
                  return "type_url: string expected";
              }
              if (message.value != null && message.hasOwnProperty("value")) {
                if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                  return "value: buffer expected";
              }
              return null;
            };
            Any.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Any)
                return object;
              var message = new $root.google.protobuf.Any();
              if (object.type_url != null)
                message.type_url = String(object.type_url);
              if (object.value != null) {
                if (typeof object.value === "string")
                  $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                else if (object.value.length >= 0)
                  message.value = object.value;
              }
              return message;
            };
            Any.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.type_url = "";
                if (options.bytes === String)
                  object.value = "";
                else {
                  object.value = [];
                  if (options.bytes !== Array)
                    object.value = $util.newBuffer(object.value);
                }
              }
              if (message.type_url != null && message.hasOwnProperty("type_url"))
                object.type_url = message.type_url;
              if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
              return object;
            };
            Any.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Any.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Any";
            };
            return Any;
          }();
          protobuf.Empty = function() {
            function Empty(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Empty.create = function create(properties) {
              return new Empty(properties);
            };
            Empty.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              return writer;
            };
            Empty.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Empty.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Empty.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Empty.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              return null;
            };
            Empty.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Empty)
                return object;
              return new $root.google.protobuf.Empty();
            };
            Empty.toObject = function toObject() {
              return {};
            };
            Empty.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Empty.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Empty";
            };
            return Empty;
          }();
          protobuf.Timestamp = function() {
            function Timestamp(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
            Timestamp.prototype.nanos = 0;
            Timestamp.create = function create(properties) {
              return new Timestamp(properties);
            };
            Timestamp.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                writer.uint32(
                  /* id 1, wireType 0 =*/
                  8
                ).int64(message.seconds);
              if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).int32(message.nanos);
              return writer;
            };
            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Timestamp.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.seconds = reader.int64();
                    break;
                  }
                  case 2: {
                    message.nanos = reader.int32();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Timestamp.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Timestamp.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.seconds != null && message.hasOwnProperty("seconds")) {
                if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                  return "seconds: integer|Long expected";
              }
              if (message.nanos != null && message.hasOwnProperty("nanos")) {
                if (!$util.isInteger(message.nanos))
                  return "nanos: integer expected";
              }
              return null;
            };
            Timestamp.fromObject = function fromObject(object) {
              if (object instanceof $root.google.protobuf.Timestamp)
                return object;
              var message = new $root.google.protobuf.Timestamp();
              if (object.seconds != null) {
                if ($util.Long)
                  (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                else if (typeof object.seconds === "string")
                  message.seconds = parseInt(object.seconds, 10);
                else if (typeof object.seconds === "number")
                  message.seconds = object.seconds;
                else if (typeof object.seconds === "object")
                  message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
              }
              if (object.nanos != null)
                message.nanos = object.nanos | 0;
              return message;
            };
            Timestamp.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                if ($util.Long) {
                  var long = new $util.Long(0, 0, false);
                  object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                  object.seconds = options.longs === String ? "0" : 0;
                object.nanos = 0;
              }
              if (message.seconds != null && message.hasOwnProperty("seconds"))
                if (typeof message.seconds === "number")
                  object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                else
                  object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
              if (message.nanos != null && message.hasOwnProperty("nanos"))
                object.nanos = message.nanos;
              return object;
            };
            Timestamp.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Timestamp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.protobuf.Timestamp";
            };
            return Timestamp;
          }();
          return protobuf;
        }();
        google.longrunning = function() {
          var longrunning = {};
          longrunning.Operations = function() {
            function Operations(rpcImpl, requestDelimited, responseDelimited) {
              $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }
            (Operations.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Operations;
            Operations.create = function create(rpcImpl, requestDelimited, responseDelimited) {
              return new this(rpcImpl, requestDelimited, responseDelimited);
            };
            Object.defineProperty(Operations.prototype.listOperations = function listOperations(request, callback) {
              return this.rpcCall(listOperations, $root.google.longrunning.ListOperationsRequest, $root.google.longrunning.ListOperationsResponse, request, callback);
            }, "name", { value: "ListOperations" });
            Object.defineProperty(Operations.prototype.getOperation = function getOperation(request, callback) {
              return this.rpcCall(getOperation, $root.google.longrunning.GetOperationRequest, $root.google.longrunning.Operation, request, callback);
            }, "name", { value: "GetOperation" });
            Object.defineProperty(Operations.prototype.deleteOperation = function deleteOperation(request, callback) {
              return this.rpcCall(deleteOperation, $root.google.longrunning.DeleteOperationRequest, $root.google.protobuf.Empty, request, callback);
            }, "name", { value: "DeleteOperation" });
            Object.defineProperty(Operations.prototype.cancelOperation = function cancelOperation(request, callback) {
              return this.rpcCall(cancelOperation, $root.google.longrunning.CancelOperationRequest, $root.google.protobuf.Empty, request, callback);
            }, "name", { value: "CancelOperation" });
            Object.defineProperty(Operations.prototype.waitOperation = function waitOperation(request, callback) {
              return this.rpcCall(waitOperation, $root.google.longrunning.WaitOperationRequest, $root.google.longrunning.Operation, request, callback);
            }, "name", { value: "WaitOperation" });
            return Operations;
          }();
          longrunning.Operation = function() {
            function Operation(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Operation.prototype.name = "";
            Operation.prototype.metadata = null;
            Operation.prototype.done = false;
            Operation.prototype.error = null;
            Operation.prototype.response = null;
            var $oneOfFields;
            Object.defineProperty(Operation.prototype, "result", {
              get: $util.oneOfGetter($oneOfFields = ["error", "response"]),
              set: $util.oneOfSetter($oneOfFields)
            });
            Operation.create = function create(properties) {
              return new Operation(properties);
            };
            Operation.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                $root.google.protobuf.Any.encode(message.metadata, writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).fork()).ldelim();
              if (message.done != null && Object.hasOwnProperty.call(message, "done"))
                writer.uint32(
                  /* id 3, wireType 0 =*/
                  24
                ).bool(message.done);
              if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                $root.google.rpc.Status.encode(message.error, writer.uint32(
                  /* id 4, wireType 2 =*/
                  34
                ).fork()).ldelim();
              if (message.response != null && Object.hasOwnProperty.call(message, "response"))
                $root.google.protobuf.Any.encode(message.response, writer.uint32(
                  /* id 5, wireType 2 =*/
                  42
                ).fork()).ldelim();
              return writer;
            };
            Operation.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Operation.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.Operation();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    message.metadata = $root.google.protobuf.Any.decode(reader, reader.uint32());
                    break;
                  }
                  case 3: {
                    message.done = reader.bool();
                    break;
                  }
                  case 4: {
                    message.error = $root.google.rpc.Status.decode(reader, reader.uint32());
                    break;
                  }
                  case 5: {
                    message.response = $root.google.protobuf.Any.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Operation.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Operation.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              var properties = {};
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.metadata != null && message.hasOwnProperty("metadata")) {
                var error = $root.google.protobuf.Any.verify(message.metadata);
                if (error)
                  return "metadata." + error;
              }
              if (message.done != null && message.hasOwnProperty("done")) {
                if (typeof message.done !== "boolean")
                  return "done: boolean expected";
              }
              if (message.error != null && message.hasOwnProperty("error")) {
                properties.result = 1;
                {
                  var error = $root.google.rpc.Status.verify(message.error);
                  if (error)
                    return "error." + error;
                }
              }
              if (message.response != null && message.hasOwnProperty("response")) {
                if (properties.result === 1)
                  return "result: multiple values";
                properties.result = 1;
                {
                  var error = $root.google.protobuf.Any.verify(message.response);
                  if (error)
                    return "response." + error;
                }
              }
              return null;
            };
            Operation.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.Operation)
                return object;
              var message = new $root.google.longrunning.Operation();
              if (object.name != null)
                message.name = String(object.name);
              if (object.metadata != null) {
                if (typeof object.metadata !== "object")
                  throw TypeError(".google.longrunning.Operation.metadata: object expected");
                message.metadata = $root.google.protobuf.Any.fromObject(object.metadata);
              }
              if (object.done != null)
                message.done = Boolean(object.done);
              if (object.error != null) {
                if (typeof object.error !== "object")
                  throw TypeError(".google.longrunning.Operation.error: object expected");
                message.error = $root.google.rpc.Status.fromObject(object.error);
              }
              if (object.response != null) {
                if (typeof object.response !== "object")
                  throw TypeError(".google.longrunning.Operation.response: object expected");
                message.response = $root.google.protobuf.Any.fromObject(object.response);
              }
              return message;
            };
            Operation.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.metadata = null;
                object.done = false;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.metadata != null && message.hasOwnProperty("metadata"))
                object.metadata = $root.google.protobuf.Any.toObject(message.metadata, options);
              if (message.done != null && message.hasOwnProperty("done"))
                object.done = message.done;
              if (message.error != null && message.hasOwnProperty("error")) {
                object.error = $root.google.rpc.Status.toObject(message.error, options);
                if (options.oneofs)
                  object.result = "error";
              }
              if (message.response != null && message.hasOwnProperty("response")) {
                object.response = $root.google.protobuf.Any.toObject(message.response, options);
                if (options.oneofs)
                  object.result = "response";
              }
              return object;
            };
            Operation.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Operation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.Operation";
            };
            return Operation;
          }();
          longrunning.GetOperationRequest = function() {
            function GetOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            GetOperationRequest.prototype.name = "";
            GetOperationRequest.create = function create(properties) {
              return new GetOperationRequest(properties);
            };
            GetOperationRequest.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              return writer;
            };
            GetOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            GetOperationRequest.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.GetOperationRequest();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            GetOperationRequest.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            GetOperationRequest.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              return null;
            };
            GetOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.GetOperationRequest)
                return object;
              var message = new $root.google.longrunning.GetOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              return message;
            };
            GetOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.name = "";
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            GetOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            GetOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.GetOperationRequest";
            };
            return GetOperationRequest;
          }();
          longrunning.ListOperationsRequest = function() {
            function ListOperationsRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ListOperationsRequest.prototype.name = "";
            ListOperationsRequest.prototype.filter = "";
            ListOperationsRequest.prototype.pageSize = 0;
            ListOperationsRequest.prototype.pageToken = "";
            ListOperationsRequest.create = function create(properties) {
              return new ListOperationsRequest(properties);
            };
            ListOperationsRequest.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.filter != null && Object.hasOwnProperty.call(message, "filter"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.filter);
              if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                writer.uint32(
                  /* id 2, wireType 0 =*/
                  16
                ).int32(message.pageSize);
              if (message.pageToken != null && Object.hasOwnProperty.call(message, "pageToken"))
                writer.uint32(
                  /* id 3, wireType 2 =*/
                  26
                ).string(message.pageToken);
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 4, wireType 2 =*/
                  34
                ).string(message.name);
              return writer;
            };
            ListOperationsRequest.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ListOperationsRequest.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsRequest();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 4: {
                    message.name = reader.string();
                    break;
                  }
                  case 1: {
                    message.filter = reader.string();
                    break;
                  }
                  case 2: {
                    message.pageSize = reader.int32();
                    break;
                  }
                  case 3: {
                    message.pageToken = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ListOperationsRequest.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ListOperationsRequest.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.filter != null && message.hasOwnProperty("filter")) {
                if (!$util.isString(message.filter))
                  return "filter: string expected";
              }
              if (message.pageSize != null && message.hasOwnProperty("pageSize")) {
                if (!$util.isInteger(message.pageSize))
                  return "pageSize: integer expected";
              }
              if (message.pageToken != null && message.hasOwnProperty("pageToken")) {
                if (!$util.isString(message.pageToken))
                  return "pageToken: string expected";
              }
              return null;
            };
            ListOperationsRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.ListOperationsRequest)
                return object;
              var message = new $root.google.longrunning.ListOperationsRequest();
              if (object.name != null)
                message.name = String(object.name);
              if (object.filter != null)
                message.filter = String(object.filter);
              if (object.pageSize != null)
                message.pageSize = object.pageSize | 0;
              if (object.pageToken != null)
                message.pageToken = String(object.pageToken);
              return message;
            };
            ListOperationsRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.filter = "";
                object.pageSize = 0;
                object.pageToken = "";
                object.name = "";
              }
              if (message.filter != null && message.hasOwnProperty("filter"))
                object.filter = message.filter;
              if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                object.pageSize = message.pageSize;
              if (message.pageToken != null && message.hasOwnProperty("pageToken"))
                object.pageToken = message.pageToken;
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            ListOperationsRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ListOperationsRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.ListOperationsRequest";
            };
            return ListOperationsRequest;
          }();
          longrunning.ListOperationsResponse = function() {
            function ListOperationsResponse(properties) {
              this.operations = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            ListOperationsResponse.prototype.operations = $util.emptyArray;
            ListOperationsResponse.prototype.nextPageToken = "";
            ListOperationsResponse.create = function create(properties) {
              return new ListOperationsResponse(properties);
            };
            ListOperationsResponse.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.operations != null && message.operations.length)
                for (var i = 0; i < message.operations.length; ++i)
                  $root.google.longrunning.Operation.encode(message.operations[i], writer.uint32(
                    /* id 1, wireType 2 =*/
                    10
                  ).fork()).ldelim();
              if (message.nextPageToken != null && Object.hasOwnProperty.call(message, "nextPageToken"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.nextPageToken);
              return writer;
            };
            ListOperationsResponse.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            ListOperationsResponse.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.ListOperationsResponse();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    if (!(message.operations && message.operations.length))
                      message.operations = [];
                    message.operations.push($root.google.longrunning.Operation.decode(reader, reader.uint32()));
                    break;
                  }
                  case 2: {
                    message.nextPageToken = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            ListOperationsResponse.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            ListOperationsResponse.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.operations != null && message.hasOwnProperty("operations")) {
                if (!Array.isArray(message.operations))
                  return "operations: array expected";
                for (var i = 0; i < message.operations.length; ++i) {
                  var error = $root.google.longrunning.Operation.verify(message.operations[i]);
                  if (error)
                    return "operations." + error;
                }
              }
              if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken")) {
                if (!$util.isString(message.nextPageToken))
                  return "nextPageToken: string expected";
              }
              return null;
            };
            ListOperationsResponse.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.ListOperationsResponse)
                return object;
              var message = new $root.google.longrunning.ListOperationsResponse();
              if (object.operations) {
                if (!Array.isArray(object.operations))
                  throw TypeError(".google.longrunning.ListOperationsResponse.operations: array expected");
                message.operations = [];
                for (var i = 0; i < object.operations.length; ++i) {
                  if (typeof object.operations[i] !== "object")
                    throw TypeError(".google.longrunning.ListOperationsResponse.operations: object expected");
                  message.operations[i] = $root.google.longrunning.Operation.fromObject(object.operations[i]);
                }
              }
              if (object.nextPageToken != null)
                message.nextPageToken = String(object.nextPageToken);
              return message;
            };
            ListOperationsResponse.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.operations = [];
              if (options.defaults)
                object.nextPageToken = "";
              if (message.operations && message.operations.length) {
                object.operations = [];
                for (var j = 0; j < message.operations.length; ++j)
                  object.operations[j] = $root.google.longrunning.Operation.toObject(message.operations[j], options);
              }
              if (message.nextPageToken != null && message.hasOwnProperty("nextPageToken"))
                object.nextPageToken = message.nextPageToken;
              return object;
            };
            ListOperationsResponse.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            ListOperationsResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.ListOperationsResponse";
            };
            return ListOperationsResponse;
          }();
          longrunning.CancelOperationRequest = function() {
            function CancelOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            CancelOperationRequest.prototype.name = "";
            CancelOperationRequest.create = function create(properties) {
              return new CancelOperationRequest(properties);
            };
            CancelOperationRequest.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              return writer;
            };
            CancelOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            CancelOperationRequest.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.CancelOperationRequest();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            CancelOperationRequest.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            CancelOperationRequest.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              return null;
            };
            CancelOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.CancelOperationRequest)
                return object;
              var message = new $root.google.longrunning.CancelOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              return message;
            };
            CancelOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.name = "";
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            CancelOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            CancelOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.CancelOperationRequest";
            };
            return CancelOperationRequest;
          }();
          longrunning.DeleteOperationRequest = function() {
            function DeleteOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            DeleteOperationRequest.prototype.name = "";
            DeleteOperationRequest.create = function create(properties) {
              return new DeleteOperationRequest(properties);
            };
            DeleteOperationRequest.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              return writer;
            };
            DeleteOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            DeleteOperationRequest.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.DeleteOperationRequest();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            DeleteOperationRequest.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            DeleteOperationRequest.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              return null;
            };
            DeleteOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.DeleteOperationRequest)
                return object;
              var message = new $root.google.longrunning.DeleteOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              return message;
            };
            DeleteOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults)
                object.name = "";
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              return object;
            };
            DeleteOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            DeleteOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.DeleteOperationRequest";
            };
            return DeleteOperationRequest;
          }();
          longrunning.WaitOperationRequest = function() {
            function WaitOperationRequest(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            WaitOperationRequest.prototype.name = "";
            WaitOperationRequest.prototype.timeout = null;
            WaitOperationRequest.create = function create(properties) {
              return new WaitOperationRequest(properties);
            };
            WaitOperationRequest.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.name);
              if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                $root.google.protobuf.Duration.encode(message.timeout, writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).fork()).ldelim();
              return writer;
            };
            WaitOperationRequest.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            WaitOperationRequest.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.WaitOperationRequest();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.name = reader.string();
                    break;
                  }
                  case 2: {
                    message.timeout = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            WaitOperationRequest.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            WaitOperationRequest.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.name != null && message.hasOwnProperty("name")) {
                if (!$util.isString(message.name))
                  return "name: string expected";
              }
              if (message.timeout != null && message.hasOwnProperty("timeout")) {
                var error = $root.google.protobuf.Duration.verify(message.timeout);
                if (error)
                  return "timeout." + error;
              }
              return null;
            };
            WaitOperationRequest.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.WaitOperationRequest)
                return object;
              var message = new $root.google.longrunning.WaitOperationRequest();
              if (object.name != null)
                message.name = String(object.name);
              if (object.timeout != null) {
                if (typeof object.timeout !== "object")
                  throw TypeError(".google.longrunning.WaitOperationRequest.timeout: object expected");
                message.timeout = $root.google.protobuf.Duration.fromObject(object.timeout);
              }
              return message;
            };
            WaitOperationRequest.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.name = "";
                object.timeout = null;
              }
              if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
              if (message.timeout != null && message.hasOwnProperty("timeout"))
                object.timeout = $root.google.protobuf.Duration.toObject(message.timeout, options);
              return object;
            };
            WaitOperationRequest.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            WaitOperationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.WaitOperationRequest";
            };
            return WaitOperationRequest;
          }();
          longrunning.OperationInfo = function() {
            function OperationInfo(properties) {
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            OperationInfo.prototype.responseType = "";
            OperationInfo.prototype.metadataType = "";
            OperationInfo.create = function create(properties) {
              return new OperationInfo(properties);
            };
            OperationInfo.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.responseType != null && Object.hasOwnProperty.call(message, "responseType"))
                writer.uint32(
                  /* id 1, wireType 2 =*/
                  10
                ).string(message.responseType);
              if (message.metadataType != null && Object.hasOwnProperty.call(message, "metadataType"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.metadataType);
              return writer;
            };
            OperationInfo.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            OperationInfo.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.longrunning.OperationInfo();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.responseType = reader.string();
                    break;
                  }
                  case 2: {
                    message.metadataType = reader.string();
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            OperationInfo.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            OperationInfo.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.responseType != null && message.hasOwnProperty("responseType")) {
                if (!$util.isString(message.responseType))
                  return "responseType: string expected";
              }
              if (message.metadataType != null && message.hasOwnProperty("metadataType")) {
                if (!$util.isString(message.metadataType))
                  return "metadataType: string expected";
              }
              return null;
            };
            OperationInfo.fromObject = function fromObject(object) {
              if (object instanceof $root.google.longrunning.OperationInfo)
                return object;
              var message = new $root.google.longrunning.OperationInfo();
              if (object.responseType != null)
                message.responseType = String(object.responseType);
              if (object.metadataType != null)
                message.metadataType = String(object.metadataType);
              return message;
            };
            OperationInfo.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.defaults) {
                object.responseType = "";
                object.metadataType = "";
              }
              if (message.responseType != null && message.hasOwnProperty("responseType"))
                object.responseType = message.responseType;
              if (message.metadataType != null && message.hasOwnProperty("metadataType"))
                object.metadataType = message.metadataType;
              return object;
            };
            OperationInfo.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            OperationInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.longrunning.OperationInfo";
            };
            return OperationInfo;
          }();
          return longrunning;
        }();
        google.rpc = function() {
          var rpc = {};
          rpc.Status = function() {
            function Status(properties) {
              this.details = [];
              if (properties) {
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                  if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
              }
            }
            Status.prototype.code = 0;
            Status.prototype.message = "";
            Status.prototype.details = $util.emptyArray;
            Status.create = function create(properties) {
              return new Status(properties);
            };
            Status.encode = function encode(message, writer) {
              if (!writer)
                writer = $Writer.create();
              if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                writer.uint32(
                  /* id 1, wireType 0 =*/
                  8
                ).int32(message.code);
              if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                writer.uint32(
                  /* id 2, wireType 2 =*/
                  18
                ).string(message.message);
              if (message.details != null && message.details.length)
                for (var i = 0; i < message.details.length; ++i)
                  $root.google.protobuf.Any.encode(message.details[i], writer.uint32(
                    /* id 3, wireType 2 =*/
                    26
                  ).fork()).ldelim();
              return writer;
            };
            Status.encodeDelimited = function encodeDelimited(message, writer) {
              return this.encode(message, writer).ldelim();
            };
            Status.decode = function decode(reader, length) {
              if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
              var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.google.rpc.Status();
              while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                  case 1: {
                    message.code = reader.int32();
                    break;
                  }
                  case 2: {
                    message.message = reader.string();
                    break;
                  }
                  case 3: {
                    if (!(message.details && message.details.length))
                      message.details = [];
                    message.details.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                    break;
                  }
                  default:
                    reader.skipType(tag & 7);
                    break;
                }
              }
              return message;
            };
            Status.decodeDelimited = function decodeDelimited(reader) {
              if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
              return this.decode(reader, reader.uint32());
            };
            Status.verify = function verify(message) {
              if (typeof message !== "object" || message === null)
                return "object expected";
              if (message.code != null && message.hasOwnProperty("code")) {
                if (!$util.isInteger(message.code))
                  return "code: integer expected";
              }
              if (message.message != null && message.hasOwnProperty("message")) {
                if (!$util.isString(message.message))
                  return "message: string expected";
              }
              if (message.details != null && message.hasOwnProperty("details")) {
                if (!Array.isArray(message.details))
                  return "details: array expected";
                for (var i = 0; i < message.details.length; ++i) {
                  var error = $root.google.protobuf.Any.verify(message.details[i]);
                  if (error)
                    return "details." + error;
                }
              }
              return null;
            };
            Status.fromObject = function fromObject(object) {
              if (object instanceof $root.google.rpc.Status)
                return object;
              var message = new $root.google.rpc.Status();
              if (object.code != null)
                message.code = object.code | 0;
              if (object.message != null)
                message.message = String(object.message);
              if (object.details) {
                if (!Array.isArray(object.details))
                  throw TypeError(".google.rpc.Status.details: array expected");
                message.details = [];
                for (var i = 0; i < object.details.length; ++i) {
                  if (typeof object.details[i] !== "object")
                    throw TypeError(".google.rpc.Status.details: object expected");
                  message.details[i] = $root.google.protobuf.Any.fromObject(object.details[i]);
                }
              }
              return message;
            };
            Status.toObject = function toObject(message, options) {
              if (!options)
                options = {};
              var object = {};
              if (options.arrays || options.defaults)
                object.details = [];
              if (options.defaults) {
                object.code = 0;
                object.message = "";
              }
              if (message.code != null && message.hasOwnProperty("code"))
                object.code = message.code;
              if (message.message != null && message.hasOwnProperty("message"))
                object.message = message.message;
              if (message.details && message.details.length) {
                object.details = [];
                for (var j = 0; j < message.details.length; ++j)
                  object.details[j] = $root.google.protobuf.Any.toObject(message.details[j], options);
              }
              return object;
            };
            Status.prototype.toJSON = function toJSON() {
              return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
            Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
              if (typeUrlPrefix === void 0) {
                typeUrlPrefix = "type.googleapis.com";
              }
              return typeUrlPrefix + "/google.rpc.Status";
            };
            return Status;
          }();
          return rpc;
        }();
        return google;
      }();
      return $root;
    });
  }
});

// node_modules/@google-cloud/text-to-speech/build/src/index.js
var require_src12 = __commonJS({
  "node_modules/@google-cloud/text-to-speech/build/src/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.protos = exports2.TextToSpeechLongAudioSynthesizeClient = exports2.TextToSpeechClient = exports2.v1beta1 = exports2.v1 = void 0;
    var v1 = require_v1();
    exports2.v1 = v1;
    var v1beta1 = require_v1beta1();
    exports2.v1beta1 = v1beta1;
    var TextToSpeechClient2 = v1.TextToSpeechClient;
    exports2.TextToSpeechClient = TextToSpeechClient2;
    var TextToSpeechLongAudioSynthesizeClient = v1.TextToSpeechLongAudioSynthesizeClient;
    exports2.TextToSpeechLongAudioSynthesizeClient = TextToSpeechLongAudioSynthesizeClient;
    exports2.default = {
      v1,
      v1beta1,
      TextToSpeechClient: TextToSpeechClient2,
      TextToSpeechLongAudioSynthesizeClient
    };
    var protos = require_protos2();
    exports2.protos = protos;
  }
});

// functions/textToSpeech.js
var textToSpeech_exports = {};
__export(textToSpeech_exports, {
  convertTextToSpeech: () => convertTextToSpeech
});
module.exports = __toCommonJS(textToSpeech_exports);
var import_text_to_speech = __toESM(require_src12(), 1);
var client = new import_text_to_speech.TextToSpeechClient();
async function convertTextToSpeech(inputText) {
  const request = {
    input: { text: inputText },
    voice: { languageCode: "es-US", name: "es-US-Neural2-A", ssmlGender: "FEMALE" },
    audioConfig: { audioEncoding: "MP3" }
  };
  const [response] = await client.synthesizeSpeech(request);
  const audioContentBase64 = response.audioContent.toString("base64");
  const audioElement = `<audio id="audioHTMLtag" style="width: 0;" controls><source src="data:audio/mpeg;base64,${audioContentBase64}" type="audio/mpeg"></audio>`;
  return audioElement;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  convertTextToSpeech
});
/*! Bundled license information:

@grpc/proto-loader/build/src/util.js:
  (**
   * @license
   * Copyright 2018 gRPC authors.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   *)

long/umd/index.js:
  (**
   * @license
   * Copyright 2009 The Closure Library Authors
   * Copyright 2020 Daniel Wirtz / The long.js Authors.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * SPDX-License-Identifier: Apache-2.0
   *)

@grpc/proto-loader/build/src/index.js:
  (**
   * @license
   * Copyright 2018 gRPC authors.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/
//# sourceMappingURL=textToSpeech.js.map
